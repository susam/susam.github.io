<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="../feed.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
<title>Susam's Programming Pages</title>
<link>https://susam.net/tag/programming.html</link>
<atom:link rel="self" type="application/rss+xml" href="https://susam.net/tag/programming.xml"/>
<description>Feed for Susam's Programming Pages</description>

<item>
<title>QuickQWERTY 1.2.0</title>
<link>https://susam.net/code/news/quickqwerty/1.2.0.html</link>
<guid isPermaLink="false">qqotz</guid>
<pubDate>Sun, 05 Oct 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  QuickQWERTY 1.2.0 is now available.  QuickQWERTY is a web-based
  touch typing tutor for QWERTY keyboards that runs directly in the
  web browser.
</p>
<p>
  This release brings small improvements to make the typing tutor
  smoother and the lessons more accurate.  When you return to the
  application, it no longer needlessly redirects you back to Unit 1.1
  if that was the last lesson you practised.
</p>
<p>
  Several lessons have received minor corrections.  Units 7.2 and 7.3
  no longer include the word "tyre", avoiding a preference for either
  British or American spelling.  Units 9.2 and 9.3 now spell
  "orwellian" correctly.  A factual error in Unit 17.4 has been fixed
  too.  It previously said "89 is one more than 99", which now
  correctly reads "89 is one more than 88".
</p>
<p>
  Finally, switching between the 5-6 and 6-7 split layouts is now more
  reliable.  In the previous release, pressing <kbd>Esc</kbd> to
  cancel the confirmation dialogue still caused the switch to go
  through.  Now pressing <kbd>Esc</kbd> properly cancels the switch as
  expected.
</p>
<p>
  To try out the new release of QuickQWERTY, go to
  <a href="../../../quickqwerty.html">quickqwerty.html</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/quickqwerty/1.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a>
</p>
]]>
</description>
</item>
<item>
<title>QuickQWERTY 1.1.0</title>
<link>https://susam.net/code/news/quickqwerty/1.1.0.html</link>
<guid isPermaLink="false">qqooz</guid>
<pubDate>Sun, 28 Sep 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  There has been a new release of QuickQWERTY after over 10 years!
  QuickQWERTY is a web-based touch typing tutor for QWERTY keyboards
  that runs directly in the web browser.  You can try it out
  here: <a href="../../../quickqwerty.html">quickqwerty.html</a>.
</p>
<p>
  The new release, version 1.1.0 of QuickQWERTY, introduces a new
  input command named <code>reset</code>, which is a synoymn for the
  existing commands <code>restart</code> and <code>rst</code> used to
  restart the current lesson.  Another input command
  named <code>test</code> runs an internal suite of tests to validate
  that no lesson involves keys that have not been introduced in the
  current or prior lessons.  Further, in this release, the application
  has been fully rewritten as a single standalone HTML file with no
  external dependencies and the source code has been greatly
  simplified.
</p>
<p>
  There are a number of other changes too.  Words per minute (WPM)
  calculation has been refined so the first character, which starts
  the timer, is not counted.  The guides have been enhanced.  Keys to
  be pressed are now highlighted more clearly and reminders to return
  fingers to their home positions have been added to each guide.  The
  confirmation dialogue for switching between 6-7 split and 5-6 split
  styles now uses the HTML <code>&lt;dialog&gt;</code> element,
  replacing the dated <code>window.confirm()</code> prompt.  In
  addition, when the application is opened without a fragment
  identifier in the URL, the most recently practised lesson loads
  automatically.
</p>
<p>
  The user interface has been simplified.  The previous and next links
  (<code>&laquo;</code> and <code>&raquo;</code>) for navigating
  lessons have been removed, as they added little value and made the
  layout of the various user interface components more complex.  The
  "Next lesson" advice link remains for moving to the next lesson when
  the current one is completed successfully.  Tooltips showing
  additional typing metrics have also been removed due to limited
  usefulness.
</p>
<p>
  The lessons have been updated to remove spellings specific to
  American English.  Care has been taken to use only words that are
  spelled the same in American and British English with one exception.
  The word "tyre", in its British English spelling, was mistakenly
  left in the lesson.  That will be fixed in the next release.
</p>
<p>
  Finally, QuickQWERTY's license has changed from the BSD-2-Clause
  licence to the MIT licence.  The source code is available at
  <a href="https://github.com/susam/quickqwerty">github.com/susam/quickqwerty</a>.
  To run this release and learn touch typing on a QWERTY keyboard, go
  to <a href="../../../quickqwerty.html">quickqwerty.html</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/quickqwerty/1.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a>
</p>
]]>
</description>
</item>
<item>
<title>My Lobsters Interview</title>
<link>https://susam.net/my-lobsters-interview.html</link>
<guid isPermaLink="false">lbstr</guid>
<pubDate>Fri, 12 Sep 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I recently had an engaging conversation with Alex
  (<a href="https://lobste.rs/~veqq">@veqq</a>) from the
  <a href="https://lobste.rs/">Lobsters</a> community about computing,
  mathematics and a range of related topics.  Our conversation was
  later published on the community website as
  <a href="https://lobste.rs/s/kltoas">Lobsters Interview with
  Susam</a>.
</p>
<p>
  I should mention the sections presented in that post are not in the
  same order in which we originally discussed them.  The sections were
  edited and rearranged by Alex to improve the flow and avoid
  repetition of similar topics too close to each other.
</p>
<p>
  This page preserves a copy of our discussion as edited by Alex, so I
  can keep an archived version on my website.  In my copy, I have
  added a table of contents to make it easier to navigate to specific
  sections.  The interview itself follows the table of contents.  I
  hope you enjoy reading it.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ol>
  <li><a href="#lisp-and-other-things">Lisp and Other Things</a></li>
  <li><a href="#lisp-emacs-and-mathematics">Lisp, Emacs and Mathematics</a></li>
  <li><a href="#interests-and-exploration">Interests and Exploration</a></li>
  <li><a href="#computing-for-fun">Computing for Fun</a></li>
  <li><a href="#computing-activities">Computing Activities</a></li>
  <li><a href="#programming-vs-domains">Programming vs Domains</a></li>
  <li><a href="#old-functionality-and-new-problems">Old Functionality and New Problems</a></li>
  <li><a href="#designing-for-composability">Designing for Composability</a></li>
  <li><a href="#small-vs-large-functions">Small vs Large Functions</a></li>
  <li><a href="#domains-and-projects">Domains and Projects</a></li>
  <li><a href="#double-spacing-and-touch-typing">Double Spacing and Touch Typing</a></li>
  <li><a href="#approach-to-learning">Approach to Learning</a></li>
  <li><a href="#managing-time-and-distractions">Managing Time and Distractions</a></li>
  <li><a href="#blogging">Blogging</a></li>
  <li><a href="#forums">Forums</a></li>
  <li><a href="#mathb-moderation-problems">MathB Moderation Problems</a></li>
  <li><a href="#favourite-mathematics-textbooks">Favourite Mathematics Textbooks</a></li>
  <li><a href="#mathematics-and-computing">Mathematics and Computing</a></li>
</ol>
<h2 id="conversation">Our Conversation<a href="#conversation"></a></h2>
<!-- Lisp and other things -->
<p class="question" id="lisp-and-other-things">
  Hi <a href="https://lobste.rs/~susam">@susam</a>, I primarily know
  you as a Lisper, what other things do you use?
</p>
<p>
  Yes, I use Lisp extensively for my personal projects and much of
  what I do in my leisure is built on it.  I ran
  a <a href="https://github.com/susam/mathb">mathematics pastebin</a>
  for close to thirteen years.  It was quite popular on some IRC
  channels.  The pastebin was written in Common Lisp.
  My <a href="https://susam.net/">personal website</a> and blog are
  generated using a tiny static site generator written in Common Lisp.
  Over the years I have built several other personal tools in it as
  well.
</p>
<p>
  I am an active Emacs Lisp programmer too.  Many of my software tools
  are in fact Emacs Lisp functions that I invoke with convenient key
  sequences.  They help me automate repetitive tasks as well as
  improve my text editing and task management experience.
</p>
<p>
  I use plenty of other tools as well.  In my early adulthood, I spent
  many years working with C, C++, Java and PHP.  My
  <a href="https://issues.apache.org/jira/browse/NUTCH-559">first
  substantial open source contribution</a> was to the Apache Nutch
  project which was in Java and one of my early original open source
  projects was <a href="https://github.com/susam/uncap">Uncap</a>, a C
  program to remap keys on Windows.
</p>
<p>
  These days I use a lot of Python, along with some Go and Rust, but
  Lisp remains important to my personal work.  I also enjoy writing
  small standalone tools directly in HTML and JavaScript, often with
  all the code in a single file in a readable, unminified form.
</p>
<!-- Lisp, Emacs and mathematics -->
<p class="question" id="lisp-emacs-and-mathematics">
  How did you first discover computing, then end up with Lisp, Emacs
  and mathematics?
</p>
<p>
  I got introduced to computers through the Logo programming language
  as a kid.  Using simple arithmetic, geometry, logic and code to
  manipulate a two-dimensional world had a lasting effect on me.
</p>
<p>
  I still vividly remember how I ended up with Lisp.  It was at an
  airport during a long layover in 2007.  I wanted to use the time to
  learn something, so I booted my laptop
  running <a href="https://www.debian.org/">Debian</a> GNU/Linux 4.0
  (Etch) and then started
  <a href="https://www.gnu.org/software/clisp/">GNU CLISP</a> 2.41.
  In those days, Wi-Fi in airports was uncommon.  Smartphones and
  mobile data were also uncommon.  So it was fortunate that I had
  CLISP already installed on my system and my laptop was ready for
  learning Common Lisp.  I had it installed because I had wanted to
  learn Common Lisp for some time.  I was especially attracted by its
  simplicity, by the fact that the entire language can be built up
  from a very small set of special forms.  I
  use <a href="https://www.sbcl.org/">SBCL</a> these days, by the way.
</p>
<p>
  I discovered Emacs through Common Lisp.  Several sources recommended
  using the <a href="https://slime.common-lisp.dev/">Superior Lisp
  Interaction Mode for Emacs (SLIME)</a> for Common Lisp programming,
  so that's where I began.  For many years I continued to use Vim as
  my primary editor, while relying on Emacs and SLIME for Lisp
  development.  Over time, as I learnt more about Emacs itself, I grew
  fond of Emacs Lisp and eventually made Emacs my primary editor and
  computing environment.
</p>
<p>
  I have loved mathematics since my childhood days.  What has always
  fascinated me is how we can prove deep and complex facts using first
  principles and clear logical steps.  That feeling of certainty and
  rigour is unlike anything else.
</p>
<p>
  Over the years, my love for the subject has been rekindled many
  times.  As a specific example, let me share how I got into number
  theory.  One day I decided to learn the RSA cryptosystem.  As I was
  working through the
  <a href="https://people.csail.mit.edu/rivest/Rsapaper.pdf">RSA
  paper</a>, I stumbled upon the Euler totient function
  \( \varphi(n) \) which gives the number of positive integers not
  exceeding n that are relatively prime to n.  The paper first states
  that

  \[
    \varphi(p) = p - 1
  \]

  for prime numbers \( p.  \)  That was obvious since \( p \) has no
  factors other than \( 1 \) and itself, so every integer from \( 1 \)
  up to \( p - 1 \) must be relatively prime to it.  But then it
  presents

  \[
    \varphi(pq) = \varphi(p) \cdot \varphi(q) = (p - 1)(q - 1)
  \]

  for primes \( p \) and \( q.  \)  That was not immediately obvious to
  me back then.  After a few minutes of thinking, I managed to prove
  it from scratch.  By the inclusion-exclusion principle, we count how
  many integers from \( 1 \) up to \( pq \) are not divisible by
  \(p \) or \( q.  \)  There are \( pq \) integers in total.  Among
  them, there are \( q \) integers divisible by \( p \) and \( p \)
  integers divisible by \( q.  \)  So we need to subtract \( p + q \)
  from \(pq.  \)  But since one integer (\( pq \) itself) is counted in
  both groups, we add \( 1 \) back.  Therefore

  \[
    \varphi(pq) = pq - (p + q) + 1 = (p - 1)(q - 1).
  \]

  Next I could also obtain the general formula for \( \varphi(n) \)
  for an arbitrary positive integer \( n \) using the same idea.
  There are several other proofs too, but that is how I derived the
  general formula for \( \varphi(n) \) when I first encountered it.
  And just like that, I had begun to learn number theory!
</p>
<!-- Computing for fun -->
<p class="question" id="computing-for-fun">
  You've said you prefer computing for fun.  What is fun to you?  Do
  you have an idea of what makes something fun or not?
</p>
<p>
  For me, fun in computing began when I first learnt IBM/LCSI PC Logo
  when I was nine years old.  I had very limited access to computers
  back then, perhaps only about two hours per <em>month</em> in the
  computer laboratory at my primary school.  Most of my Logo
  programming happened with pen and paper at home.  I would "test" my
  programs by tracing the results on graph paper.  Eventually I would
  get about thirty minutes of actual computer time in the lab to run
  them for real.
</p>
<p>
  So back then, most of my computing happened without an actual
  computer.  But even with that limited access to computers, a whole
  new world opened up for me: one that showed me the joy of computing
  and more importantly, the joy of sharing my little programs with my
  friends and teachers.  One particular Logo program I still remember
  very well drew a house with animated dashed lines, where the dashes
  moved around the outline of the house.  Everyone around me loved it,
  copied it and tweaked it to change the colours, alter the details
  and add their own little touches.
</p>
<p>
  For me, fun in computing comes from such exploration and sharing.  I
  enjoy asking "what happens if" and then seeing where it leads me.
  My Emacs package
  <a href="https://elpa.nongnu.org/nongnu/devil.html">devil-mode</a>
  comes from such exploration.  It came from asking, "What happens if
  we avoid using the <kbd>ctrl</kbd> and <kbd>meta</kbd> modifier keys
  and use <kbd>,</kbd> (the comma key) or another suitable key as a
  leader key instead?  And can we still have a non-modal editing
  experience?"
</p>
<p>
  Sometimes computing for fun may mean crafting a minimal esoteric
  drawing language, making a small game or building a tool that solves
  an interesting problem elegantly.  It is a bonus if the exploration
  results in something working well enough that I can share with
  others on the World Wide Web and others find it fun too.
</p>
<!-- Pursuits -->
<p class="question" id="interests-and-exploration">
  How do you choose what to investigate?  Which most interest you,
  with what commonalities?
</p>
<p>
  For me, it has always been one exploration leading to another.
</p>
<p>
  For example, I originally built
  <a href="https://github.com/susam/mathb">MathB</a> for my friends
  and myself who were going through a phase in our lives when we used
  to challenge each other with mathematical puzzles.  This tool became
  a nice way to share solutions with each other.  Its use spread from
  my friends to their friends and colleagues, then to schools and
  universities and eventually to IRC channels.
</p>
<p>
  Similarly, I built <a href="https://github.com/susam/texme">TeXMe</a>
  when I was learning neural networks and taking a lot of notes on the
  subject.  I was not ready to share the notes online, but I did want
  to share them with my friends and colleagues who were also learning
  the same topic.  Normally I would write my notes in LaTeX, compile
  them to PDF and share the PDF, but in this case, I wondered, what if
  I took some of the code from MathB and created a tool that would let
  me write plain Markdown
  (<a href="https://github.github.com/gfm/">GFM</a>) + LaTeX
  (<a href="https://www.mathjax.org/">MathJax</a>) in
  a <code>.html</code> file and have the tool render the file as soon
  as it was opened in a web browser?  That resulted in TeXMe, which
  has surprisingly become one of my most popular projects, receiving
  millions of hits in some months according to the CDN statistics.
</p>
<p>
  Another example is <a href="https://susam.github.io/muboard/">Muboard</a>,
  which is a bit like an interactive mathematics chalkboard.  I built
  this when I was hosting an
  <a href="journey-to-prime-number-theorem.html">analytic number
  theory book club</a> and I needed a way to type LaTeX snippets live
  on screen and see them immediately rendered.  That made me wonder:
  what if I took TeXMe, made it interactive and gave it a chalkboard
  look-and-feel?  That led to Muboard.
</p>
<p>
  So we can see that sharing mathematical notes and snippets has been
  a recurring theme in several of my projects.  But that is only a
  small fraction of my interests.  I have a wide variety of interests
  in computing.  I also engage in random explorations, like writing
  IRC clients
  (<a href="https://github.com/susam/nimb">NIMB</a>,
  <a href="https://github.com/susam/tzero">Tzero</a>),
  ray tracing
  (<a href="https://github.com/susam/pov25">POV-Ray</a>,
  <a href="https://github.com/spxy/java-ray-tracing">Java ray tracer</a>),
  writing Emacs guides
  (<a href="https://github.com/susam/emacs4cl">Emacs4CL</a>,
  <a href="https://github.com/susam/emfy">Emfy</a>),
  developing small single-file HTML games
  (<a href="invaders.html">Andromeda Invaders</a>,
  <a href="myrgb.html">Guess My RGB</a>),
  purely recreational programming
  (<a href="fxyt.html">FXYT</a>,
  <a href="https://github.com/susam/may4">may4.fs</a>,
  <a href="self-printing-machine-code.html">self-printing machine code</a>,
  <a href="primegrid.html">prime number grid explorer</a>)
  and so on.  The list goes on.  When it comes to hobby computing, I
  don't think I can pick just one domain and say it interests me the
  most.  I have a lot of interests.
</p>
<!-- What is computing?  -->
<p class="question" id="computing-activities">
  What is computing, to you?
</p>
<p>
  Computing, to me, covers a wide range of activities: programming a
  computer, using a computer, understanding how it works, even
  building one.  For example, I once built a tiny 16-bit CPU along
  with a small main memory that could hold only eight 16-bit
  instructions, using VHDL and a Xilinx CPLD kit.  The design was
  based on the Mano CPU introduced in the book <em>Computer System
  Architecture</em> (3rd ed.) by M. Morris Mano.  It was incredibly
  fun to enter instructions into the main memory, one at a time, by
  pushing DIP switches up and down and then watch the CPU I had built
  execute an entire program.  For someone like me, who usually works
  with software at higher levels of abstraction, that was a thrilling
  experience!
</p>
<p>
  Beyond such experiments, computing also includes more practical and
  concrete activities, such as installing and using my favourite Linux
  distribution (Debian), writing software tools in languages like
  Common Lisp, Emacs Lisp, Python and the shell command language or
  customising my Emacs environment to automate repetitive tasks.
</p>
<p>
  To me, computing also includes the abstract stuff like spending time
  with abstract algebra and number theory and getting a deeper
  understanding of the results pertaining to groups, rings and fields,
  as well as numerous number-theoretic results.  Browsing the
  <a href="https://oeis.org/">On-Line Encyclopedia of Integer
  Sequences</a> (OEIS), writing small programs to explore interesting
  sequences or just thinking about them is computing too.  I think
  many of the interesting results in computer science have deep
  mathematical foundations.  I believe much of computer science is
  really discrete mathematics in action.
</p>
<p>
  And if we dive all the way down from the CPU to the level of
  transistors, we encounter continuous mathematics as well, with
  non-linear voltage-current relationships and analogue behaviour that
  make digital computing possible.  It is fascinating how, as a
  relatively new species on this planet, we have managed to take sand
  and find a way to use continuous voltages and currents in electronic
  circuits built with silicon and convert them into the discrete
  operations of digital logic.  We have machines that can simulate
  themselves!
</p>
<p>
  To me, all of this is fun.  To study and learn about these things,
  to think about them, to understand them better and to accomplish
  useful or amusing results with this knowledge is all part of the
  fun.
</p>
<!-- Programming vs domains -->
<p class="question" id="programming-vs-domains">
  How do you view programming vs. domains?
</p>
<p>
  I focus more on the domain than the tool.  Most of the time it is a
  problem that catches my attention and then I explore it to
  understand the domain and arrive at a solution.  The problem itself
  usually points me to one of the tools I already know.
</p>
<p>
  For example, if it is about working with text files, I might write
  an Emacs Lisp function.  If it involves checking large sets of
  numbers rapidly for patterns, I might choose C++ or Rust.  But if I
  want to share interactive visualisations of those patterns with
  others, I might rewrite the solution in HTML and JavaScript,
  possibly with the use of the Canvas API, so that I can share the
  work as a self-contained file that others can execute easily within
  their web browsers.  When I do that, I prefer to keep the HTML neat
  and readable, rather than bundled or minified, so that people who
  like to 'View Source' can copy, edit and customise the code
  themselves to immediately see their changes take effect.
</p>
<p>
  Let me share a specific example.  While working on a web-based game, I first
  used <code>CanvasRenderingContext2D</code>'s <code>fillText()</code>
  to display text on the game canvas.  However, dissatisfied with the
  text rendering quality, I began looking for IBM PC OEM fonts and
  similar retro fonts online.  After downloading a few font packs, I
  wrote a little Python script to convert them to bitmaps (arrays of
  integers) and then used the bitmaps to draw text on the canvas using
  JavaScript, one cell at a time, to get pixel-perfect results!  These
  tiny Python and JavaScript tools were good enough that I felt
  comfortable sharing them together as a tiny toolkit called
  <a href="https://susam.github.io/pcface/src/demo.html">PCFace</a>.
  This toolkit offers JavaScript bitmap arrays and tiny JavaScript
  rendering functions, so that someone else who wants to display text
  on their game canvas using PC fonts and nothing but plain HTML and
  JavaScript can do so without having to solve the problem from
  scratch!
</p>
<!-- Applicability of old functionality for new problems -->
<p class="question" id="old-functionality-and-new-problems">
  Has the rate of your making new Emacs functions has diminished over
  time (as if everything's covered) or do the widening domains lead to
  more?  I'm curious how applicable old functionality is for new
  problems and how that impacts the APIs!
</p>
<p>
  My rate of making new Emacs functions has definitely decreased.
  There are two reasons.  One is that over the years my computing
  environment has converged into a comfortable, stable setup I am very
  happy with.  The other is that at this stage of life I simply cannot
  afford the time to endlessly tinker with Emacs as I did in my
  younger days.
</p>
<p>
  More generally, when it comes to APIs, I find that well-designed
  functionality tends to remain useful even when new problems appear.
  In Emacs, for example, many of my older functions continue to serve
  me well because they were written in a composable way.  New problems
  can often be solved with small wrappers or combinations of existing
  functions.  I think APIs that consist of functions that are simple,
  orthogonal and flexible age well.  If each function in an API does
  one thing and does it well (the Unix philosophy), it will have
  long-lasting utility.
</p>
<p>
  Of course, new domains and problems do require new functions and
  extensions to an API, but I think it is very important to not give
  in to the temptation of enhancing the existing functions by making
  them more complicated with optional parameters, keyword arguments,
  nested branches and so on.  Personally, I have found that it is much
  better to implement new functions that are small, orthogonal and
  flexible, each doing one thing and doing it well.
</p>
<p class="question" id="designing-for-composability">
  What design methods or tips do you have, to increase composability?
</p>
<p>
  For me, good design starts with good vocabulary.  Clear vocabulary
  makes abstract notions concrete and gives collaborators a shared
  language to work with.  For example, while working on a network
  events database many years ago, we collected data minute by minute
  from network devices.  We decided to call each minute of data from a
  single device a "nugget".  So if we had 15 minutes of data from 10
  devices, that meant 150 nuggets.
</p>
<p>
  Why "nugget"?  Because it was shorter and more convenient than
  repeatedly saying "a minute of data from one device".  Why not
  something less fancy like "chunk"?  Because we reserved "chunk" for
  subdivisions within a nugget.  Perhaps there were better choices,
  but "nugget" was the term we settled on and it quickly became shared
  terminology between the collaborators.  Good terminology naturally
  carries over into code.  With this vocabulary in place, function
  names like <code>collect_nugget()</code>,
  <code>open_nugget()</code>, <code>parse_chunk()</code>,
  <code>index_chunk()</code>, <code>skip_chunk()</code>,
  etc. immediately become meaningful to everyone involved.
</p>
<p>
  Thinking about the vocabulary also ensures that we are thinking
  about the data, concepts and notions we are working with in a
  deliberate manner and that kind of thinking also helps when we
  design the architecture of software.
</p>
<p>
  Too often I see collaborators on software projects jump straight
  into writing functions that take some input and produce some desired
  effect, with variable names and function names decided on the fly.
  To me, this feels backwards.  I prefer the opposite approach.
  Define the terms first and let the code follow from them.
</p>
<p>
  I also prefer developing software in a layered manner, where complex
  functionality is built from simpler, well-named building blocks.  It
  is especially important to avoid <em>layer violations</em>, where
  one complex function invokes another complex function.  That creates
  tight coupling between two complex functions.  If one function
  changes in the future, we have to reason carefully about how it
  affects the other.  Since both are already complex, the cognitive
  burden is high.  A better approach, I think, is to identify the
  common functionality they share and factor that out into smaller,
  simpler functions.
</p>
<p>
  To summarise, I like to develop software with a clear vocabulary,
  consistent use of that vocabulary, a layered design where complex
  functions are built from simpler ones and by avoiding layer
  violations.  I am sure none of this is new to the Lobsters
  community.  Some of these ideas also occur
  in <a href="https://en.wikipedia.org/wiki/Domain-driven_design">domain-driven
  design</a> (DDD).  DDD defines the term <em>ubiquitous language</em>
  to mean, "A language structured around the domain model and used by
  all team members within a bounded context to connect all the
  activities of the team with the software."  If I could call this
  approach of software development something, I would simply call it
  "vocabulary-driven development" (VDD), though of course DDD is the
  more comprehensive concept.
</p>
<p>
  Like I said, none of this is likely new to the Lobsters community.
  In particular, I suspect Forth programmers would find it too
  obvious.  In Forth, it is very difficult to begin with a long,
  poorly thought-out monolithic word and then break it down into
  smaller ones later.  The stack effects quickly become too hard to
  track mentally with that approach.  The only viable way to develop
  software in Forth is to start with a small set of words that
  represent the important notions of the problem domain, test them
  immediately and then compose higher-level words from the lower-level
  ones.  Forth naturally encourages a layered style of development,
  where the programmer thinks carefully about the domain, invents
  vocabulary and expresses complex ideas in terms of simpler ones,
  almost in a mathematical fashion.  In my experience, this kind of
  deliberate design produces software that remains easy to understand
  and reason about even years after it was written.
</p>
<!-- Small vs large functions -->
<p class="question" id="small-vs-large-functions">
  Not enhancing existing functions but adding new small ones seems
  quite lovely, but how do you come back to such a codebase later with
  many tiny functions?  At points, I've advocated for very large
  functions, particularly traumatized by Java-esque 1000 functions in
  1000 files approaches.  When you had time, would you often
  rearchitecture the conceptual space of all of those functions?
</p>
<p>
  The famous quote from Alan J. Perlis comes to mind:
</p>
<blockquote>
  <p>
    It is better to have 100 functions operate on one data structure
    than 10 functions on 10 data structures.
  </p>
</blockquote>
<p>
  Personally, I enjoy working with a codebase that has thousands of
  functions, provided most of them are small, well-scoped and do one
  thing well.  That said, I am not dogmatically opposed to large
  functions.  It is always a matter of taste and judgement.  Sometimes
  one large, cohesive function is clearer than a pile of tiny ones.
</p>
<p>
  For example, when I worked on parser generators, I often found that
  lexers and finite state machines benefited from a single top-level
  function containing the full tokenisation logic or the full state
  transition logic in one place.  That function could call smaller
  helpers for specific tasks, but we still need the overall
  <code>switch</code>-<code>case</code> or
  <code>if</code>-<code>else</code> or <code>cond</code> ladder
  somewhere.  I think trying to split that ladder into smaller
  functions would only make the code harder to follow.
</p>
<p>
  So while I lean towards small, composable functions, the real goal
  is to strike a balance that keeps code maintainable in the long run.
  Each function should be as small as it can reasonably be and no
  smaller.
</p>
<!-- Domains -->
<p class="question" id="domains-and-projects">
  Like you, I program as a tool to explore domains.  Which do you know
  the most about?
</p>
<p>
  For me too, the appeal of computer programming lies especially in
  how it lets me explore different domains.  There are two kinds of
  domains in which I think I have gained good expertise.  The first
  comes from years of developing software for businesses, which has
  included solving problems such as network events parsing, indexing
  and querying, packet decoding, developing parser generators,
  database session management and TLS certificate lifecycle
  management.  The second comes from areas I pursue purely out of
  curiosity or for hobby computing.  This is the kind I am going to
  focus on in our conversation.
</p>
<p>
  Although computing and software are serious business today, for me,
  as for many others, computing is also a hobby.
</p>
<p>
  Personal hobby projects often lead me down various rabbit holes and
  I end up learning new domains along the way.  For example, although
  I am not a web developer, I learnt to build small, interactive
  single-page tools in plain HTML, CSS and JavaScript simply because I
  needed them for my hobby projects over and over again.  An early
  example is <a href="quickqwerty.html">QuickQWERTY</a>, which I built
  to teach myself and my friends touch-typing on QWERTY keyboards.
  Another example is <a href="cfrs.html">CFRS[]</a>, which I created
  because I wanted to make a total (non-Turing complete) drawing
  language that has turtle graphics like Logo but is absolutely
  minimal like P&prime;&prime;.
</p>
<!-- Double spacing -->
<p class="question" id="double-spacing-and-touch-typing">
  You use double spaces after periods which I'd only experienced from
  people who learned touch typing on typewriters, unexpected!
</p>
<p>
  Yes, I do separate sentences by double spaces.  It is interesting
  that you noticed this.
</p>
<p>
  I once briefly learnt touch typing on typewriters as a kid, but
  those lessons did not stick with me.  It was much later, when I used
  a Java applet-based touch typing tutor that I found online about two
  decades ago, that the lessons really stayed with me.  Surprisingly,
  that application taught me to type with a single space between
  sentences.  By the way, I disliked installing Java plugins into the
  web browser, so I wrote <a href="quickqwerty.html">QuickQWERTY</a>
  as a similar touch typing tutor in plain HTML and JavaScript for
  myself and my friends.
</p>
<p>
  I learnt to use double spaces between sentences first with Vim and
  then later again with Emacs.  For example, in Vim,
  the <code>joinspaces</code> option is on by default, so when we join
  sentences with the normal mode command <code>J</code> or format
  paragraphs with <code>gqap</code>, Vim inserts two spaces after full
  stops.  We need to disable that behaviour with <code>:set
  nojoinspaces</code> if we want single spacing.
</p>
<p>
  It is similar in Emacs.  In Emacs, the
  <code>delete-indentation</code> command (<code>M-^</code>) and
  the <code>fill-paragraph</code> command (<code>M-q</code>) both
  insert two spaces between sentences by default.  Single spacing can
  be enabled with <code>(setq sentence-end-double-space nil)</code>.
</p>
<p>
  Incidentally, I spend a good portion of the README for my Emacs
  quick-start DIY kit named
  <a href="https://github.com/susam/emfy">Emfy</a> discussing sentence
  spacing conventions under the section
  <a href="https://github.com/susam/emfy#single-space-for-sentence-spacing">Single
  Space for Sentence Spacing</a>.  There I explain how to configure
  Emacs to use single spaces, although I use double spaces myself.
  That's because many new Emacs users prefer single spacing.
</p>
<p>
  The defaults in Vim and Emacs made me adopt double spacing.  The
  double spacing convention is also widespread across open source
  software.  If we look at the Vim help pages, Emacs built-in
  documentation or the Unix and Linux man pages, double spacing is the
  norm.  Even inline comments in traditional open source projects
  often use it.  For example, see Vim's
  <a href="https://github.com/vim/vim/blob/v9.1.1752/runtime/doc/usr_01.txt">:h usr_01.txt</a>,
  Emacs's
  <a href="https://cgit.git.savannah.gnu.org/cgit/emacs.git/tree/doc/emacs/emacs.texi?h=emacs-30.2#n1556">(info "(emacs) Intro")</a>
  or the comments in the <a href="https://gcc.gnu.org/git/?p=gcc.git;f=gcc/cfg.cc;hb=releases/gcc-15.2.0">GCC source code</a>.
</p>
<!-- Learning -->
<p class="question" id="approach-to-learning">
  How do you approach learning a new domain?
</p>
<p>
  When I take on a new domain, there is of course a lot of reading
  involved from articles, books and documentation.  But as I read, I
  constantly try to test what I learn.  Whenever I see a claim, I ask
  myself, "If this claim were wrong, how could I demonstrate it?"
  Then I design a little experiment, perhaps write a snippet of code
  or run a command or work through a concrete example, with the goal
  of checking the claim in practice.
</p>
<p>
  Now I am not genuinely hoping to prove a claim wrong.  It is just a
  way to engage with the material.  To illustrate, let me share an
  extremely simple and generic example without going into any
  particular domain.  Suppose I learn that Boolean operations in
  Python short-circuit.  I might write out several experimental
  snippets like the following:
</p>
<pre><code class="language-python">def t(): print('t'); return True
def f(): print('f'); return False
f() or t() or f()
</code></pre>
<p>
  And then confirm that the results do indeed confirm short-circuit
  evaluation (<code>f</code> followed by <code>t</code> in this case).
</p>
<p>
  At this point, one could say, "Well, you just confirmed what the
  documentation already told you."  And that's true.  But for me, the
  value lies in trying to test it for myself.  Even if the claim
  holds, the act of checking forces me to see the idea in action.
  That not only reinforces the concept but also helps me build a much
  deeper intuition for it.
</p>
<p>
  Sometimes these experiments also expose gaps in my own
  understanding.  Suppose I didn't properly know what "short-circuit"
  means.  Then the results might contradict my expectations.  That
  contradiction would push me to correct my misconception and that's
  where the real learning happens.
</p>
<p>
  Occasionally, this process even uncovers subtleties I didn't expect.
  For example, while learning socket programming, I discovered that a
  client can successfully receive data using <code>recv()</code> even
  after calling <code>shutdown()</code>, contrary to what I had first
  inferred from the specifications.  See my Stack Overflow post
  <a href="https://stackoverflow.com/q/39698037/303363">Why can recv()
  receive messages after the client has invoked shutdown()?</a> for
  more details if you are curious.
</p>
<p>
  Now this method cannot always be applied, especially if it is very
  expensive or unwieldy to do so.  For example, if I am learning
  something in the finance domain, it is not always possible to
  perform an actual transaction.  One can sometimes use simulation
  software, mock environments or sandbox systems to explore ideas
  safely.  Still, it is worth noting that this method has its
  limitations.
</p>
<p>
  In mathematics, though, I find this method highly effective.  When I
  study a new branch of mathematics, I try to come up with examples
  and counterexamples to test what I am learning.  Often, failing to
  find a counterexample helps me appreciate more deeply why a claim
  holds and why no counterexamples exist.
</p>
<!-- Distraction -->
<p class="question" id="managing-time-and-distractions">
  Do you have trouble not getting distracted with so much on your
  plate?  I'm curious how you balance the time commitments of
  everything!
</p>
<p>
  Indeed, it is very easy to get distracted.  One thing that has
  helped over the years is the increase in responsibilities in other
  areas of my life.  These days I also spend some of my free time
  studying mathematics textbooks.  With growing responsibilities and
  the time I devote to mathematics, I now get at most a few hours each
  week for hobby computing.  This automatically narrows down my
  options.  I can explore perhaps one or at most two ideas in a month
  and that constraint makes me very deliberate about choosing my
  pursuits.
</p>
<p>
  Many of the explorations do not evolve into something solid that I
  can share.  They remain as little experimental code snippets or
  notes archived in a private repository.  But once in a while, an
  exploration grows into something concrete and feels worth sharing on
  the Web.  That becomes a short-term hobby project.  I might work on
  it over a weekend if it is small or for a few weeks if it is more
  complex.  When that happens, the goal of sharing the project helps
  me focus.
</p>
<p>
  I try not to worry too much about making time.  After all, this is
  just a hobby.  Other areas of my life have higher priority.  I also
  want to devote a good portion of my free time to learning more
  mathematics, which is another hobby I am passionate about.  Whatever
  little spare time remains after attending to the higher-priority
  aspects of my life goes into my computing projects, usually a couple
  of hours a week, most of it on weekends.
</p>
<!-- Blogging -->
<p class="question" id="blogging">
  How does blogging mix in?  What's the development like of a single
  piece of curiosity through wrestling with the domain, learning and
  sharing it etc.?
</p>
<p>
  Maintaining my personal website is another aspect of computing that
  I find very enjoyable.  My website began as a loose collection of
  pages on a LAN site during my university days.  Since then I have
  been adding pages to it to write about various topics that I find
  interesting.  It acquired its blog shape and form much later when
  blogging became fashionable.
</p>
<p>
  I usually write a new blog post when I feel like there is some piece
  of knowledge or some exploration that I want to archive in a
  persistent format.  Now what the development of a post looks like
  depends very much on the post.  So let me share two opposite
  examples to describe what the development of a single piece looks
  like.
</p>
<p>
  One of my most frequently visited posts
  is <a href="lisp-in-vim.html">Lisp in Vim</a>.  It started when I
  was hosting a Common Lisp programming club for beginners.  Although
  I have always used Emacs and SLIME for Common Lisp programming
  myself, many in the club used Vim, so I decided to write a short
  guide on setting up something SLIME-like there.  As a former
  long-time Vim user myself, I wanted to make the Lisp journey easier
  for Vim users too.  I thought it would be a 30-minute exercise where
  I write up a README that explains how to install
  <a href="https://github.com/kovisoft/slimv">Slimv</a> and how to set
  it up in Vim.  But then I discovered a newer plugin called
  <a href="https://github.com/vlime/vlime">Vlime</a> that also offered
  SLIME-like features in Vim!  That detail sent me down a very deep
  rabbit hole.  Now I needed to know how the two packages were
  different, what their strengths and weaknesses were, how routine
  operations were performed in both and so on.  What was meant to be a
  short note turned into a nearly 10,000-word article.  As I was
  comparing the two SLIME-like packages for Vim, I also found a few
  bugs in Slimv and contributed fixes for them
  (<a href="https://github.com/kovisoft/slimv/pull/87">#87</a>,
  <a href="https://github.com/kovisoft/slimv/pull/88">#88</a>,
  <a href="https://github.com/kovisoft/slimv/pull/89">#89</a>,
  <a href="https://github.com/kovisoft/slimv/pull/90">#90</a>).
  Writing this blog post turned into a month-long project!
</p>
<p>
  At the opposite extreme is a post like
  <a href="elliptical-python-programming.html">Elliptical
  Python Programming</a>.  I stumbled upon Python's
  <a href="https://docs.python.org/3/library/constants.html#Ellipsis">Ellipsis</a>
  while reviewing someone's code.  It immediately caught my attention.
  I wondered if, combined with some standard obfuscation techniques,
  one could write arbitrary Python programs that looked almost like
  Morse code.  A few minutes of experimentation showed that a
  genuinely Morse code-like appearance was not possible, but something
  close could be achieved.  So I wrote what I hope is a humorous post
  demonstrating that arbitrary Python programs can be written using a
  very restricted set of symbols, one of which is the ellipsis.  It
  took me less than an hour to write this post.  The final result
  doesn't look quite like Morse code as I had imagined, but it is
  quite amusing nevertheless!
</p>
<!-- Forums -->
<p class="question" id="forums">
  What draws you to post and read online forums?  How do you balance
  or allot time for reading technical articles, blogs etc.?
</p>
<p>
  The exchange of ideas!  Just as I enjoy sharing my own
  computing-related thoughts, ideas and projects, I also find joy in
  reading what others have to share.
</p>
<p>
  Other areas of my life take precedence over hobby projects and hobby
  projects take precedence over technical forums.
</p>
<p>
  After I've given time to the higher-priority parts of my life and to
  my own technical explorations, I use whatever spare time remains to
  read articles, follow technical discussions and occasionally add
  comments.
</p>
<!-- MathB.in -->
<p class="question" id="mathb-moderation-problems">
  When you decided to stop with MathB due to moderation burdens, I
  offered to take over/help and you mentioned others had too.  Did
  anyone end up forking it, to your knowledge?
</p>
<p>
  I first thought of shutting down the
  <a href="https://github.com/susam/mathb">MathB</a>-based pastebin
  website in November 2019.  The website had been running for seven
  years at that time.  When I announced my thoughts to the IRC
  communities that would be affected, I received a lot of support and
  encouragement.  A few members even volunteered to help me out with
  moderation.  That support and encouragement kept me going for
  another six years.  However, the volunteers eventually became busy
  with their own lives and moved on.  After all, moderating user
  content for an open pastebin that anyone in the world can post to is
  a thankless and tiring activity.  So most of the moderation activity
  fell back on me.  Finally, in February 2025, I realised that I no
  longer want to spend time on this kind of work.
</p>
<p>
  I developed MathB with a lot of passion for myself and my friends.
  I had no idea at the time that this little project would keep a
  corner of my mind occupied even during weekends and holidays.  There
  was always a nagging worry.  What if someone posted content that
  triggered compliance concerns and my server was taken offline while
  I was away?  I no longer wanted that kind of burden in my life.  So
  I finally decided to shut it down.  I've written more about this
  in <a href="mathbin-is-shutting-down.html">MathB.in Is Shutting
  Down</a>.
</p>
<p>
  To my knowledge, no one has forked it, but others have developed
  alternatives.  Further, the
  <a href="https://wiki.archiveteam.org/">Archive Team</a> has
  <a href="https://web.archive.org/web/*/https://mathb.in/">archived</a>
  all posts from the now-defunct MathB-based website.  A member of the
  Archive Team reached out to me over IRC and we worked together for
  about a week to get everything successfully archived.
</p>
<!-- Textbooks -->
<p class="question" id="favourite-mathematics-textbooks">
  What're your favorite math textbooks?
</p>
<p>
  I have several favourite mathematics books, but let me share three I
  remember especially fondly.
</p>
<p>
  The first is <em>Advanced Engineering Mathematics</em> by Erwin
  Kreyszig.  I don't often see this book recommended online, but for
  me it played a major role in broadening my horizons.  I think I
  studied the 8th edition back in the early 2000s.  It is a hefty book
  with over a thousand pages and I remember reading it cover to cover,
  solving every exercise problem along the way.  It gave me a solid
  foundation in routine areas like differential equations, linear
  algebra, vector calculus and complex analysis.  It also introduced
  me to Fourier transforms and Laplace transforms, which I found
  fascinating.
</p>
<p>
  Of course, the Fourier transform has a wide range of applications in
  signal processing, communications, spectroscopy and more.  But I
  want to focus on the fun and playful part.  In the early 2000s, I
  was also learning to play the piano as a hobby.  I used to record my
  amateur music compositions with
  <a href="https://github.com/audacity/audacity">Audacity</a> by
  connecting my digital piano to my laptop with a line-in cable.  It
  was great fun to plot the spectrum of my music on Audacity, apply
  high-pass and low-pass filters and observe how the Fourier transform
  of the audio changed and then hear the effect on the music.  That
  kind of hands-on tinkering made Fourier analysis intuitive for me
  and I highly recommend it to anyone who enjoys both music and
  mathematics.
</p>
<p>
  The second book is <em>Introduction to Analytic Number Theory</em>
  by Tom M.  Apostol.  As a child I was intrigued by the prime number
  theorem but lacked the mathematical maturity to understand its
  proof.  Years later, as an adult, I finally taught myself the proof
  from Apostol's book.  It was a fantastic journey that began with
  simple concepts like the Möbius function and Dirichlet products and
  ended with quite clever contour integrals that proved the theorem.
  The complex analysis I had learnt from Kreyszig turned out to be
  crucial for understanding those integrals.  Along the way I gained a
  deeper understanding of the Riemann zeta function \( \zeta(s).  \)
  The book discusses zero-free regions where \( \zeta(s) \) does not
  vanish, which I found especially fascinating.  Results like \(
  \zeta(-1) = -1/12, \) which once seemed mysterious, became obvious
  after studying this book.
</p>
<p>
  The third is <em>Galois Theory</em> by Ian Stewart.  It introduced
  me to field extensions, field homomorphisms and solubility by
  radicals.  I had long known that not all quintic equations are
  soluble by radicals, but I didn't know why.  Stewart's book taught
  me exactly why.  In particular, it demonstrated that the polynomial
  \( t^5 - 6t + 3 \) over the field of rational numbers is not soluble
  by radicals.  This particular result, although fascinating, is just
  a small part of a much larger body of work, which is even more
  remarkable.  To arrive at this result, the book takes us through a
  wonderful journey that includes the theory of polynomial rings,
  algebraic and transcendental field extensions, impossibility proofs
  for ruler-and-compass constructions, the Galois correspondence and
  much more.
</p>
<p>
  One of the most rewarding aspects of reading books like these is how
  they open doors to new knowledge, including things I didn't even
  know that I didn't know.
</p>
<!-- Mathematics and computing -->
<p class="question" id="mathematics-and-computing">
  How does the newer math jell with or inform past or present
  computing, compared to much older stuff?
</p>
<p>
  I don't always think explicitly about how mathematics informs
  computing, past or present.  Often the textbooks I pick feel very
  challenging to me, so much so that all my energy goes into simply
  mastering the material.  It is arduous but enjoyable.  I do it
  purely for the fun of learning without worrying about applications.
</p>
<p>
  Of course, a good portion of pure mathematics probably has no
  real-world applications.  As G. H. Hardy famously wrote in <em>A
  Mathematician's Apology</em>:
</p>
<blockquote>
  <p>
    I have never done anything 'useful'.  No discovery of mine has
    made or is likely to make, directly or indirectly, for good or
    ill, the least difference to the amenity of the world.
  </p>
</blockquote>
<p>
  But there is no denying that some of it does find applications.
  Were Hardy alive today, he might be disappointed that number theory,
  his favourite field of "useless" mathematics, is now a crucial part
  of modern cryptography.  Electronic commerce wouldn't likely exist
  without it.
</p>
<p>
  Similarly, it is amusing how something as abstract as abstract
  algebra finds very concrete applications in coding theory.  Concepts
  such as polynomial rings, finite fields and cosets of subspaces in
  vector spaces over finite fields play a crucial role in
  error-correcting codes, without which modern data transmission and
  storage would not be possible.
</p>
<p>
  On a more personal note, some simpler areas of mathematics have been
  directly useful in my own work.  While solving problems for
  businesses, information entropy, combinatorics and probability
  theory were crucial when I worked on gesture-based authentication
  about one and a half decades ago.
</p>
<p>
  Similarly, when I was developing Bloom filter-based indexing and
  querying for a network events database, again, probability theory
  was crucial in determining the parameters of the Bloom filters (such
  as the number of hash functions, bits per filter and elements per
  filter) to ensure that the false positive rate remained below a
  certain threshold.  Subsequent testing with randomly sampled network
  events confirmed that the observed false positive rate matched the
  theoretical estimate quite well.  It was very satisfying to see
  probability theory and the real world agreeing so closely.
</p>
<p>
  Beyond these specific examples, studying mathematics also influences
  the way I think about problems.  Embarking on journeys like analytic
  number theory or Galois theory is humbling.  There are times when I
  struggle to understand a small paragraph of the book and it takes me
  several hours (or even days) to work out the arguments in detail
  with pen and paper (lots of it) before I really grok them.  That
  experience of grappling with dense reasoning teaches humility and
  also makes me sceptical of complex, hand-wavy logic in day-to-day
  programming.
</p>
<p>
  Several times I have seen code that bundles too many decisions into
  one block of logic, where it is not obvious whether it would behave
  correctly in all circumstances.  Explanations may sometimes be
  offered about why it works for reasonable inputs, but the reasoning
  is often not watertight.  The experience of working through
  mathematical proofs, writing my own, making mistakes and then
  correcting them has taught me that if the reasoning for correctness
  is not clear and rigorous, something could be wrong.  In my
  experience, once such code sees real-world usage, a bug is nearly
  always found.
</p>
<p>
  That's why I usually insist either on simplifying the logic or on
  demonstrating correctness in a clear, rigorous way.  Sometimes this
  means doing a case-by-case analysis for different types of inputs or
  conditions and showing that the code behaves correctly in each case.
  There is also a bit of an art to reducing what seem like numerous or
  even infinitely many cases to a small, manageable set of cases by
  spotting structure, such as symmetries, invariants or natural
  partitions of the input space.  Alternatively, one can look for a
  simpler argument that covers all cases.  These are techniques we
  employ routinely in mathematics and I think that kind of thinking
  and reasoning is quite valuable in software development too.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/my-lobsters-interview.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a>
</p>
]]>
</description>
</item>
<item>
<title>Miller-Rabin Speed Test</title>
<link>https://susam.net/code/web/miller-rabin-speed-test.html</link>
<guid isPermaLink="false">mrpst</guid>
<pubDate>Sat, 16 Aug 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  A demo page that implements the Miller-Rabin primality test to
  accurately detect primes for all numbers less than
  318665857834031151167461 and compare its speed against a simple
  division based primality test algorithm.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/web/miller-rabin-speed-test.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Elliptical Python Programming</title>
<link>https://susam.net/elliptical-python-programming.html</link>
<guid isPermaLink="false">tmdms</guid>
<pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  One thing I love about Python is how it comes with its very own
  built-in zen.  In moments of tribulations, when I am wrestling with
  crooked code and tangled thoughts, I often find solace in its
  timeless wisdom.  Here's a glimpse of the clarity it provides:
</p>
<pre>
<samp>$ <kbd>python3 -m this | grep e-</kbd>
There should be one-- and preferably only one --obvious way to do it.</samp>
</pre>
<p>
  Indeed, there is one and only one <em>obvious</em> way to write the
  number 1 in Python, like so:
</p>
<pre><samp>&gt;&gt;&gt; <kbd>--(...==...)</kbd>
1</samp></pre>
<p>
  You may, quite naturally, place several ones adjacently to produce
  larger integers:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>--(...==...)--(...==...)</kbd>
2</samp>
</pre>
<p>
  And so on, ad infinitum, or until your heap collapses like a poorly
  made soufflé.  Now, the "pre-decrement operator" at the beginning is
  entirely optional, much like the plus sign when you write "+5
  biscuits" in a letter to your grandmother.  It's not wrong, but it
  is unnecessary.  So unless you want to look peculiar to your
  colleagues, you would likely want to adopt a more conventional
  style, such as this:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>(...==...)--(...==...)--(...==...)</kbd>
3</samp>
</pre>
<p>
  Now, all computer programs are, in some sense, just a long, earnest
  stream of bits.  It is currently fashionable to bundle these bits
  into groups of eight and write them as integers.  Following this
  trend, we can compute absolutely anything that is computable as long
  as we know exactly what integers to write.  Now, I wouldn't want to
  bore you with the finer details of computer science, not in this day
  and age, fascinating as they may be.  I trust you are quite capable
  of drawing the rest of the f... well, <em>feathered</em>, nocturnal
  bird.  Once you've grasped the basics, a typical first Python
  program might look something like this:
</p>
<pre class="wrap"><code>exec('%ccode></pre>
<p>
  Now you might be wondering if this is <em>really</em> the way one
  ought to write production Python code.  Isn't it too much trouble to
  type those dots over and over again?  Not if you remap your
  <kbd>tab</kbd> key to type three dots, of course.  But I understand
  not everyone likes to remap their keys like this.  In particular,
  there exists a peculiar species of mammal known to remap their
  <kbd>tab</kbd> key to parentheses.  They claim it leads to
  enlightenment.  Such enlightened living forms may find the following
  program more convenient to type:
</p>
<pre class="wrap"><code>exec('%ccode></pre>
<p>
  This program is functionally equivalent to the earlier one.  But
  Python isn't meant for enlightenment.  It's meant for getting things
  done.  And to get things done, code should be readable, maintainable
  and ideally not resemble an ancient summoning ritual.  That's why I
  personally prefer the earlier style, the one with the ellipses.  It
  gracefully avoids the disconcerting void that lurks within the
  parentheses.  After all, programs must be written for people to read
  and only incidentally for machines to execute.
</p>
<p>
  Finally, I must emphasise that you should never deploy code like
  this in production.  If you plan to write code like this for your
  production CGI scripts, I implore you to add some ellipses for
  logging.  When dung inevitably collides with the fan, you'll be
  immensely glad you scattered some useful logs amidst the ellipses
  that hold together your business logic.  With that small piece of
  unsolicited advice, I'll end this brief distraction from scrolling
  through endless arguments on Internet forums.  Happy coding and may
  your parentheses stay balanced (and may your ellipses be the
  punctuation that ...
  <!-- ).  Now, I can sleep peacefully!  -->
</p>
<!--
  For the enlightened folks who are offended by the penultimate
  paragraph, lighten up!  I am no stranger to the fine art of nested
  parentheses.  This very blog is crafted with an abundance of them,
  all forged through the mighty steel and bank machinery.
-->
<!-- ### -->
<p>
  <a href="https://susam.net/elliptical-python-programming.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/humour.html">#humour</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 1.3.0</title>
<link>https://susam.net/code/news/mathb/1.3.0.html</link>
<guid isPermaLink="false">lpjpy</guid>
<pubDate>Sun, 16 Mar 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB 1.3.0 is likely the final update of MathB, a web-based
  mathematics pastebin service.  The online mathematics pastebin
  service previously hosted at <code>https://mathb.in/</code> has been
  shut down today after 13 years of continuous service.  See the post
  <a href="../../../mathbin-is-shutting-down.html">MathB.in Is
  Shutting Down</a> for more details about this.  This release
  captures the state of this project as it was today at the time of
  shutting down the online service.
</p>
<p>
  This update includes a few new features.  For example, there is now
  a configurable runtime property named <code>:expect</code> that can
  be used to enforce the presence of certain tokens in the posts
  submitted by the users.  This feature was used to enforce the
  presence of LaTeX delimiters in the online service, a measure that
  was instrumental in reducing spam to a great extent in the last few
  years.  There are a few other minor changes too.
  See <a href="https://github.com/susam/mathb/blob/main/CHANGES.md">CHANGES.md</a>
  for a detailed changelog.
</p>
<p>
  The source code of MathB remains free and open-source, so anyone
  interested in hosting their own instance can still do so.  To access
  the source code of MathB, please visit
  <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/1.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.5.0</title>
<link>https://susam.net/code/news/fxyt/0.5.0.html</link>
<guid isPermaLink="false">nwtao</guid>
<pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.5.0 is a minor update of FXYT, a tiny, esoteric, stack-based,
  postfix, canvas colouring language with only 36 simple commands.
  This release fixes an annoying bug that has been affecting some
  mobile device users for a while.  On some mobile web browsers, such
  as Chrome on Samsung Galaxy S8, the drawing canvas would appear to
  be larger than the viewport thus overflowing the visible screen on
  the mobile device.  The user would then be required to manually zoom
  out in order to use this tool conveniently.  This issue has been
  fixed in this release.
</p>
<p>
  If you follow my <a href="../../../cfrs.html">CFRS[]</a> project,
  you might have noticed yesterday that a very similar fix has gone
  into CFRS[] too.  For more details about that, see
  the release page for <a href="../cfrs/0.3.0.html">CFRS[] 0.3.0</a>.
</p>
<p>
  Visit <a href="../../../fxyt.html">FXYT</a> to play with FXYT and
  draw some interesting patterns!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.5.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>CFRS[] 0.3.0</title>
<link>https://susam.net/code/news/cfrs/0.3.0.html</link>
<guid isPermaLink="false">ojrjp</guid>
<pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  CFRS[] 0.3.0 is a minor update of CFRS[], an extremely minimal
  drawing language consisting of only 6 simple commands.  This update
  fixes an annoying bug that caused CFRS[] canvas to overflow the
  visible screen on some mobile web browsers.  In particular, this
  issue was observed on Chrome running on Samsung Galaxy S8.
</p>
<p>
  To read more about CFRS[], go to
  <a href="https://github.com/susam/cfrs#readme">github.com/susam/cfrs</a>.
  Also, visit <a href="../../../cfrs.html">cfrs.html</a> to play with CFRS[]
  now and draw some nice patterns!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/cfrs/0.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.4.0</title>
<link>https://susam.net/code/news/fxyt/0.4.0.html</link>
<guid isPermaLink="false">zgrko</guid>
<pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.4.0 is a minor update of FXYT, a tiny, esoteric, stack-based,
  postfix, canvas colouring language with only 36 simple commands.
  This release increases the maximum allowed code length from 256
  bytes to 1024 bytes.  This means there is now more room for writing
  more complex FXYT programs!
</p>
<p>
  Further, the maximum code length for distributable demo links has
  been increased from 64 bytes to 256 bytes.  This allows several more
  impressive demos to have their own distributable links.  As a
  specific example of one such demo, take a look at
  this <a href="https://susam.net/fxyt.html#XTsN128dN3142pN128qDN3142gbN6284dcDN1571gbN3142SdcDNN1571dlbNN3142dSdcDDN166SDpN120000qdSDpN1000qpN1000qN1000SdpN1000qN1100sN3pN25qYgNSbPN255c">animated
  sine wave</a> developed by <a href="https://github.com/ncw">Nick
  Craig-Wood</a>, of Rclone fame!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.4.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Negative Lookahead Assertion</title>
<link>https://susam.net/negative-lookahead-assertion.html</link>
<guid isPermaLink="false">tdawz</guid>
<pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is an example of negative lookahead assertion in regular
  expression using Python:
</p>
<pre>
<code>import re
strings = ['foo', 'bar', 'baz', 'foo-bar', 'bar-baz', 'baz-foo']
matches = [s for s in strings if re.search('^(?!.*foo)', s)]
print(matches)</code>
</pre>
<p>
  The regular expression <code>^(?!.*foo)</code> in the above example
  matches strings that do not contain the pattern <code>foo</code>.
  The above code example produces the following output:
</p>
<pre><samp>['bar', 'baz', 'bar-baz']</samp></pre>
<p>
  Of course, it is much simpler to use an ordinary regular expression
  that matches <code>foo</code> and then invert the result of the
  match to ignore strings that contain <code>foo</code>.  For example,
  consider the following straightforward solution:
</p>
<pre><code>matches = [s for s in strings if not re.search('foo', s)]</code></pre>
<p>
  This example produces the same result as the earlier example but
  with less complexity.  However, there are situations where, as a
  user of certain software tool, we might not have control over how
  the tool applies the regular expression.  Some tools only allow us
  to provide a pattern and then they automatically select strings that
  match the pattern.  In such cases, if we need to select strings
  that <em>do not</em> match a given pattern, negative lookahead
  assertions become quite useful, provided the regular expression
  flavour supported by the tool allows the use of negative lookahead
  assertions.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/negative-lookahead-assertion.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Guess My RGB 0.3.0</title>
<link>https://susam.net/code/news/myrgb/0.3.0.html</link>
<guid isPermaLink="false">shmtq</guid>
<pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  <a href="../../../myrgb.html">Guess My RGB</a>, the little colour
  guessing game, just got a small update.  This update adds a
  "Mode" link to the footer which can be used to toggle the game
  between normal mode and expert mode.
</p>
<p>
  The expert mode was introduced as a hidden feature five months ago
  in the <a href="0.2.0.html">previous release</a>.  With the current
  release, the expert mode no longer remains a hidden feature.  You
  can simply toggle between modes via the new footer link.
</p>
<p>
  Ready to test your colour skills?  Head over to
  <a href="../../../myrgb.html">myrgb.html</a> and start playing
  today!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/myrgb/0.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Guess My RGB 0.2.0</title>
<link>https://susam.net/code/news/myrgb/0.2.0.html</link>
<guid isPermaLink="false">vojtv</guid>
<pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  <a href="../../../myrgb.html">Guess My RGB</a>, the little colour
  guessing game, received a minor update today.  This update adds a
  hidden feature that lets you play the game in <em>expert mode</em>.
  In this mode, the match percentage for your submitted guess is not
  shown on the screen.
</p>
<p>
  Thanks to @steffahn for
  <a href="https://lobste.rs/s/sbcayb/guess_my_rgb#c_gqrj3r">suggesting
  this feature</a> on th Lobsters forum!
</p>
<p>
  Visit <a href="../../../myrgb.html#x">myrgb.html#x</a> now to play
  the game in the expert mode.
</p>
<p>
  Alternatively, visit <a href="../../../myrgb.html">myrgb.html</a> to
  play it in the normal mode like before.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/myrgb/0.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>CFRS[] 0.2.0</title>
<link>https://susam.net/code/news/cfrs/0.2.0.html</link>
<guid isPermaLink="false">ihmkl</guid>
<pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  CFRS[] 0.2.0 is a minor update of CFRS[], an extremely minimal
  drawing language consisting of only 6 simple commands.  This update
  brings minor changes to the built-in help screen that can be invoked
  by typing <code>?</code> in the input pane.  For example, the help
  screen now has a direct links to built-in demos and community demos.
  Further, based on community feedback, the description of
  the <code>]</code> command has been updated with clearer language
  that better clarifies that this command repeats a repeatable block
  once (i.e. executes the repeatable block again).  See
  the <a href="https://github.com/susam/cfrs/blob/main/CHANGES.md">changelog</a>
  for more details.
</p>
<p>
  To read more about CFRS[], go to
  <a href="https://github.com/susam/cfrs#readme">github.com/susam/cfrs</a>.
  Visit <a href="../../../cfrs.html">cfrs.html</a> to play with CFRS[]
  now and draw some nice pictures and animation.  If you end up
  developing any cool demos, do share them by creating a
  <a href="https://github.com/susam/cfrs/issues">new post here</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/cfrs/0.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Guess My RGB 0.1.0</title>
<link>https://susam.net/code/news/myrgb/0.1.0.html</link>
<guid isPermaLink="false">ndivu</guid>
<pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Guess My RGB 0.1.0 is the first stable release
  of <a href="../../../myrgb.html">this tiny colour guessing game</a>.
  The game is available as a single HTML page that runs in a web
  browser.  It presents a page with a randomly chosen background
  colour.  The player then needs to guess the three RGB hexademical
  digits that make the given background colour.  See
  <a href="https://github.com/susam/myrgb">github.com/susam/myrgb</a>
  for more information about this game.
</p>
<p>
  I wrote this game last Saturday afternoon and shared it on my
  website at <a href="../../../myrgb.html">myrgb.html</a> later that
  night.  I had no intention of sharing this with a wide audience yet
  because I had not had sufficient time testing it well.  But somehow
  a Hacker News (HN) user named <em>talonx</em> discovered this game
  on Sunday morning and shared it on HN in this post:
  <a href="https://news.ycombinator.com/item?id=39882018">news.ycombinator.com/item?id=39882018</a>.
</p>
<p>
  Since I had not shared this game with anyone anywhere yet, I was
  quite surprised to wake up Sunday morning and find my game trending
  at the top of HN.  I believe this is where maintaining an RSS feed
  on my website might have helped.  Every new page that I publish on
  this website also appears as an entry in the RSS feed for this
  website.  This feed can be found
  here: <a href="../../../feed.xml">feed.xml</a>.  I have a couple of
  hundred subscribers to this feed.  It is very likely that the HN
  user who shared this game on HN found it through this feed.
</p>
<p>
  Ever since this game was shared on HN, my website has received a
  large number of hits.  In the last three days (excluding today),
  this game has received a total of 166102 hits.  The actual numbers
  for each day look like this:
</p>
<table class="grid center textcenter">
  <tr>
    <th>Date</th>
    <th>Hits</th>
  </tr>
  <tr>
    <td>31 Mar 2024</td>
    <td>95467</td>
  </tr>
  <tr>
    <td>01 Mar 2024</td>
    <td>48330</td>
  </tr>
  <tr>
    <td>02 Mar 2024</td>
    <td>22305</td>
  </tr>
</table>
<p>
  To all visitors of this website who played this game and shared this
  game with others, thank you!  Crafting tiny software tools like this
  is a creative outlet for me.  To know that there are others out
  there who enjoyed this game brings me joy!
</p>
<p>
  To play this game, go to <a href="../../../myrgb.html">myrgb.html</a>
  now and guess some colours!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/myrgb/0.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.3.0</title>
<link>https://susam.net/code/news/fxyt/0.3.0.html</link>
<guid isPermaLink="false">snbrx</guid>
<pubDate>Fri, 29 Mar 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.3.0 is a minor release of FXYT, a tiny, esoteric,
  stack-based, postfix, canvas colouring language with only 36 simple
  commands.  This release comes with minor bug fixes pertaining to
  initialising the input and output from code embedded in
  distributable links.  No change in the language definition or the
  language implementation has been made in this release.
</p>
<p>
  Visit <a href="../../../fxyt.html">fxyt.html</a> to play with FXYT.
  See <a href="https://github.com/susam/fxyt#readme">README</a> for
  more details.  Also, see
  <a href="https://susam.github.io/fxyt/demo.html">this demo page</a>
  for some nice demos developed by the tiny community around FXYT.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Quicksort with Jenkins for Fun and No Profit</title>
<link>https://susam.net/jenkins-quicksort.html</link>
<guid isPermaLink="false">orprj</guid>
<pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I first encountered Jenkins in 2007 while contributing to the Apache
  Nutch project.  It was called Hudson back then.  The nightly builds
  for the project ran on Hudson at that time.  I remember sifting
  through my emails and reviewing build result notifications to keep
  an eye on the patches that got merged into the trunk everyday.  Yes,
  patches and trunk!  We were still using SVN back then.
</p>
<p>
  Hudson was renamed to Jenkins in 2011.  Since version 2.0 (released
  on 20 Apr 2016), Jenkins supports pipeline scripts written in Groovy
  as a first-class entity.  A pipeline script effectively defines the
  build job.  It can define build properties, build stages, build
  steps, etc.  It can even invoke other build jobs, including itself.
</p>
<p>
  Wait a minute!  If a pipeline can invoke itself, can we, perhaps,
  solve a recursive problem with it?  Absolutely!  This is precisely
  what we are going to do in this post.  We are going to implement
  quicksort as a Jenkins pipeline for fun and not a whit of profit!
</p>
<h2 id="run-jenkins">Run Jenkins<a href="#run-jenkins"></a></h2>
<p>
  Before we get started, I need to tell you how to set up Jenkins just
  enough to try the experiments presented later in this post on your
  local system.  This could be useful if you have never used Jenkins
  before or if you do not have a Jenkins instance available with you
  right now.  If you are already well-versed in Jenkins and have an
  instance at your disposal, feel free to skip ahead directly to
  the <a href="#quicksort">Quicksort</a> section.
</p>
<p>
  The steps below assume a Debian GNU/Linux system.  However, it
  should be possible to do this on any operating system as long as you
  can run Docker containers.  Since software evolves over time, let me
  note down the versions of software tools I am using while writing
  this post.  Here they are:
</p>
<ul>
  <li>Debian GNU/Linux 12.4 (bookworm)</li>
  <li>Docker version 20.10.24+dfsg1, build 297e128</li>
  <li>Docker image tagged jenkins/jenkins:2.426.3-lts-jdk17</li>
  <li>Jenkins 2.426.3</li>
</ul>
<p>
  We will perform only quick-and-dirty experiments in this post, so we
  do not need a production-grade Jenkins instance.  We will run
  Jenkins temporarily in a container.  The following steps show how to
  do this and how to configure Jenkins for the upcoming experiments:
</p>
<ol>
  <li>
    <p>
      Install Docker if it is not already present on the system.  For
      example, on a Debian system, the following command installs
      Docker:
    </p>
    <pre><code>sudo apt-get install docker.io</code></pre>
  </li>
  <li>
    <p>
      Now run the Jenkins container with this command:
    </p>
    <pre><code>sudo docker run --rm -p 8080:8080 jenkins/jenkins:lts</code></pre>
  </li>
  <li>
    <p>
      When the container starts, it prints a password towards the
      bottom of the logs.  Copy the password.
    </p>
  </li>
  <li>
    <p>
      Visit <a href="http://localhost:8080/">http://localhost:8080/</a>
      in a web browser.  When the <em>Unlock Jenkins</em> page
      appears, paste the password and click <em>Continue</em>.
    </p>
  </li>
  <li>
    <p>
      On the <em>Customize Jenkins</em> page, click <em>Install
      suggested plugins</em>.  Alternatively, to avoid installing
      unnecessary plugins, click <em>Select plugins to install</em>,
      deselect everything except <em>Pipeline</em> and
      click <em>Install</em>.  We need the pipeline plugin to perform
      rest of the experiment laid out in this post.
    </p>
  </li>
  <!--
    With suggested plugins:
    Completed installation of 84 plugins in 1 min 52 sec
         
    With only pipeline plugin:
    Completed installation of 50 plugins in 44 sec
  -->
  <li>
    <p>
      On the <em>Create First Admin User</em> page, enter the details
      to create a new user.
    </p>
  </li>
  <li>
    <p>
      On the <em>Instance Configuration</em> page, click <em>Save and
      Finish</em>.
    </p>
  </li>
  <li>
    <p>
      The <em>Jenkins is ready!</em> page appears.  Click <em>Start
      using Jenkins</em>.
    </p>
  </li>
  <li>
    <p>
      Go to <em>Build Executor Status</em> &gt; <em>Built-In Node</em>
      &gt; <em>Configure</em> and change <em>Number of executors</em>
      from the default value of <code>2</code> to <code>10</code>.
      Click <em>Save</em>.
    </p>
  </li>
</ol>
<h2 id="hello-world">Hello World<a href="#hello-world"></a></h2>
<p>
  The following steps show how to run your first Jenkins pipeline:
</p>
<ol>
  <li>
    <p>
      Go to <em>Dashboard</em> &gt; <em>New Item</em>.  Enter an item
      name, say, <code>hello</code>, select <em>Pipeline</em> and
      click <em>OK</em>.
    </p>
  </li>
  <li>
    <p>
      On the next page, scroll down to the <em>Pipeline</em> section
      at the bottom and paste the following pipeline script and
      click <em>Save</em>.
    </p>
<pre>
<code>node {
    echo "hello, world"
}</code>
</pre>
  </li>
  <li>
    <p>
      Now click <em>Build Now</em>.  A new build number appears at the
      bottom half of the left sidebar.  Click on the build number,
      then click <em>Console Output</em> to see the output of the
      pipeline.  The <code>hello, world</code> message should be
      present in the output.
    </p>
  </li>
</ol>
<p>
  To edit the pipeline script anytime, go to <em>Dashboard</em>, click
  on the pipeline, then go to <em>Configure</em>, scroll down to
  the <em>Pipeline</em> section, edit the script and
  click <em>Save</em>.
</p>
<p>
  In real world software development, Jenkins is typically configured
  to automatically pull some source code from a project repository
  maintained under a version control system and then build it using
  the pipeline script found in the file named <code>Jenkinsfile</code>
  present at the top-level directory of the project.  But since we
  only intend to perform fun experiments in this post, we will just
  paste our pipeline script directly into the pipeline configuration
  page on Jenkins as explained above in order to keep things simple.
  Jenkins also supports another way of writing pipelines using a
  declarative style.  They are known as <em>declarative
  pipelines</em>.  In this post, however, we will write
  only <em>scripted pipelines</em> so that we can write simple Groovy
  code for our experiments without having to bother about too many
  pipeline-specific notions like stages, steps, etc.
</p>
<h2 id="factorial">Factorial<a href="#factorial"></a></h2>
<p>
  Now let us write a simple pipeline that calculates the factorial of
  a nonnegative integer.  This will help us to demonstrate how a build
  job can recursively call itself.  We are not going to write
  something like the following:
</p>
<pre>
<code>properties([
    parameters([
        string(
            name: 'INPUT',
            defaultValue: '0',
            description: 'A nonnegative integer'
        )
    ])
])

def factorial(n) {
    return n == 0 ? 1 : n * factorial(n - 1)
}

node {
    echo "${factorial(params.INPUT as int)}"
}</code>
</pre>
<p>
  The code above is an example of a function that calls itself
  recursively.  However, we want the <em>build job</em> (not the
  function) to call itself recursively.  So we write the following
  instead:
</p>
<pre>
<code>properties([
    parameters([
        string(
            name: 'INPUT',
            defaultValue: '0',
            description: 'A nonnegative integer'
        )
    ])
])

def MAX_INPUT = 10

node {
    echo "INPUT: ${params.INPUT}"
    currentBuild.description = "${params.INPUT} -&gt; ..."

    def n = params.INPUT as int
    if (n &gt; MAX_INPUT) {
        echo "ERROR: Input must not be greater than ${MAX_INPUT}"
    }

    env.RESULT = n == 0 ? 1 : n * (
        build(
            job: env.JOB_NAME,
            parameters: [string(name: 'INPUT', value: "${n - 1}")]
        ).getBuildVariables().RESULT as int
    )

    echo "RESULT: ${env.RESULT}"
    currentBuild.description = "${params.INPUT} -&gt; ${env.RESULT}"
}</code>
</pre>
<p>
  This code example demonstrates a few things worth noting:
</p>
<ul>
  <li>
    <p>
      The <code>properties</code> step at the top sets up a build
      parameter named <code>INPUT</code> with a default value
      of <code>0</code>.  This will allow us to enter an input number
      while building the job.
    </p>
  </li>
  <li>
    <p>
      Within the <code>node</code> block, we first check that the
      input is not too large.  If the input number is larger than 10,
      the pipeline refuses to run.  This is just a tiny safety check
      to prevent the overzealous among you from inadvertently causing
      havoc in your Jenkins instance by triggering a job with a large
      input and depleting all the executors with an excess of
      recursive jobs.
    </p>
  </li>
  <li>
    <p>
      Then we perform the classic recursion to compute the factorial
      of a given nonnegative integer.  The only thing that may appear
      unusual here is that instead of just writing <code>factorial(n -
      1)</code>, we make a <code>build()</code> call to invoke the job
      itself recursively and pass <code>n - 1</code> as a build
      parameter input to that job.
    </p>
  </li>
  <li>
    <p>
      Each recursively called job writes its output to an environment
      variable named <code>RESULT</code> and exits.  Then the
      higher-level job invocation looks up the environment variables
      in the build result of the job that just finished with
      the <code>getBuildVariables()</code> call, reads the
      <code>RESULT</code> variable and multiplies the value found
      there by <code>n</code>.
    </p>
  </li>
  <li>
    <p>
      The lines that update <code>currentBuild.description</code> are
      there only to show handy descriptions of what is going on (the
      input and the result) in the build history that appears on the
      left sidebar.  A screenshot presented later illustrates this.
    </p>
  </li>
</ul>
<p>
  To run the above pipeline, perform the following steps on the
  Jenkins instance:
</p>
<ol>
  <li>
    <p>
      Go to <em>Dashboard</em> &gt; <em>New Item</em>.  Enter an item
      name, say, <code>factorial</code>, select <em>Pipeline</em> and
      click <em>OK</em>.
    </p>
  </li>
  <li>
    <p>
      On the next page, scroll down to the <em>Pipeline</em> section
      at the bottom and paste the pipeline script presented above.
    </p>
  </li>
  <li>
    <p>
      Click <em>Build Now</em>.  The first build sets
      the <code>INPUT</code> build parameter to <code>0</code> (the
      default value specified in the pipeline script).  The
      result <code>1</code> shoud appear in the <em>Console
      Output</em> page.
    </p>
  </li>
  <li>
    After the first build completes, the <em>Build Now</em> option on
    the left sidebar gets replaced with the <em>Build with
    Parameters</em> option.  Click it, then enter a number,
    say, <code>5</code> and click <em>Build</em>.  Now we should see
    Jenkins recursively triggering a total of 6 build jobs and each
    build job printing the factorial of the integer it receives as
    input.  The top-level build job prints <code>120</code> as its
    result.
  </li>
</ol>
<p>
  Here is a screenshot that shows what the build history looks like on
  the left sidebar:
</p>
<figure class="soft lightshadow">
  <img src="files/blog/jenkins-factorial.png" alt="Screenshot of Jenkins build history that shows the builds that are triggered while computing the factorial of 0 and 5">
  <figcaption>
    The factorial of 0 computed in build 1 and the factorial of 5
    computed in build 2
  </figcaption>
</figure>
<p>
  In the screenshot above, build number 2 is the build we triggered to
  compute the factorial of 5.  This build resulted in recursively
  triggering five more builds which we see as build numbers 3 to 7.
  The little input and output numbers displayed below each build
  number comes from the <code>currentBuild.description</code> value we
  set in the pipeline script.
</p>
<p>
  If we click on build number 7, we find this on the build page:
</p>
<figure class="soft lightshadow">
  <img src="files/blog/jenkins-recursion.png" alt="Screenshot of Jenkins build page that shows build jobs triggered recursively">
  <figcaption>
    Build #7 page
  </figcaption>
</figure>
<p>
  This was a simple pipeline that demonstrates how a build job can
  trigger itself, pass input to the triggered build and retrieve its
  output.  We did not do much error checking or error handling here.
  We have kept the code as simple as reasonably possible.  The focus
  here was only on demonstrating the recursion.
</p>
<h2 id="quicksort">Quicksort<a href="#quicksort"></a></h2>
<p>
  Now we will implement quicksort in Jenkins.  Sorting numbers using
  the standard library is quite straightforward in Groovy.  Here is an
  example in the form of Jenkins pipeline:
</p>
<pre>
<code>properties([
    parameters([
        string(
            name: 'INPUT',
            defaultValue: '4, 3, 5, 4, 5, 8, 7, 9, 1',
            description: 'Comma-separated list of integers'
        )
    ])
])

node {
    def numbers = params.INPUT.split('\\s*,\\s*').collect {it as int}
    echo "${numbers.sort()}"
}</code>
</pre>
<p>
  It can't get simpler than this.  However, we are not here to
  demonstrate the standard library methods.  We are here to
  demonstrate recursion in Jenkins!  We write the following pipeline
  script instead:
</p>
<pre>
<code>properties([
    parameters([
        string(
            name: 'INPUT',
            defaultValue: '4, 3, 5, 4, 5, 8, 7, 9, 1',
            description: 'Comma-separated list of integers'
        )
    ])
])

def MAX_INPUT_SIZE = 10

node {
    echo "INPUT: ${params.INPUT}"
    currentBuild.description = "${params.INPUT} -&gt; ..."

    def numbers = params.INPUT.split('\\s*,\\s*').collect {it as int}
    if (numbers.size() &gt; MAX_INPUT_SIZE) {
        echo "ERROR: Input must not contain more than ${MAX_INPUT_SIZE} integers"
    }

    def pivot = numbers[0]
    def others = numbers.drop(1)
    def lo = others.findAll { it <= pivot }
    def hi = others.findAll { it &gt; pivot }
    def builds = [:]
    def results = [lo: [], hi: []]

    if (lo) {
        builds.lo = {
            results.lo = build(
                job: env.JOB_NAME,
                parameters: [string(name: 'INPUT', value: lo.join(', '))
            ]).getBuildVariables().RESULT.split('\\s*,\\s*') as List
        }
    }
    if (hi) {
        builds.hi = {
            results.hi = build(
                job: env.JOB_NAME,
                parameters: [string(name: 'INPUT', value: hi.join(', '))
            ]).getBuildVariables().RESULT.split('\\s*,\\s*') as List
        }
    }
    parallel builds

    env.RESULT = (results.lo + [pivot] + results.hi).join(', ')
    echo "RESULT: ${env.RESULT}"
    currentBuild.description = "${params.INPUT} -&gt; ${env.RESULT}"
}</code>
</pre>
<p>
  Some of the code is similar to the one in the previous section.  For
  example, the <code>properties</code> step to set up the build
  parameter, the <code>build()</code> call, setting the result
  in <code>env.RESULT</code>, etc. should look familiar.  Let us pay
  attention to what is different.
</p>
<p>
  Firstly, we have two <code>build()</code> calls instead of just one.
  In fact, we have two closures with one <code>build()</code> call in
  each closure.  Then we use the <code>parallel</code> step to execute
  both these closures in parallel.  In each build job, we pick the
  first integer in the input as the pivot, then compare all the
  remaining integers with this pivot and separate them
  into <code>lo</code> (low numbers) and <code>hi</code> (high
  numbers).  Then we call the build job recursively to repeat this
  algorithm twice: once on the low numbers and again on the high
  numbers.
</p>
<figure class="soft lightshadow">
  <img src="files/blog/jenkins-quicksort.png" alt="Screenshot of Jenkins build history that shows the builds that are triggered while performing quicksort on a list of integers">
  <figcaption>
    Quicksort with recursive Jenkins builds
  </figcaption>
</figure>
<p>
  Unlike most textbook implementations of quicksort which lets the
  recursion run all the way to the base case in which an empty list is
  received and the recursive call returns without doing anything, the
  above implementation is slightly optimised to avoid making recursive
  builds when we find that the list of low numbers or the list of high
  numbers is empty.  We lose a little bit of simplicity by doing this
  but it helps in avoiding wasteful build jobs that just receive an
  empty list of numbers as input and exit without doing anything
  meaningful.  Further optimisation could involve avoiding recursion
  for small input sizes, such as 1 or 2, but that is not done here for
  the sake of simplicity and brevity.
</p>
<p>
  I hope this was fun!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/jenkins-quicksort.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>CFRS[] 0.1.0</title>
<link>https://susam.net/code/news/cfrs/0.1.0.html</link>
<guid isPermaLink="false">fmbcp</guid>
<pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  CFRS[] 0.1.0 is the first release of CFRS[], an extremely minimal
  drawing language that consists of only six simple commands.  Ever
  since this new esoteric language and its implementation was
  <a href="https://news.ycombinator.com/item?id=37956065">announced
  about two months ago</a>, a small but enthusiastic community has
  sprung up around it.  Feedback and enhancement requests from the
  community has been crucial in polishing the implementation and
  arriving at the current stable release.  Further, some community
  members have also submitted very interesting and impressive demos.
</p>
<p>
  To play with CFRS[] now, please
  visit <a href="../../../cfrs.html">cfrs.html</a>.
</p>
<p>
  See <a href="https://github.com/susam/cfrs#readme">github.com/susam/cfrs</a>
  for more information about CFRS.  Also, see this
  <a href="https://susam.github.io/cfrs/demo.html">demo page</a> for a
  curated collection of community demos.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/cfrs/0.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>My Coding Adventures in 2023</title>
<link>https://susam.net/code-2023.html</link>
<guid isPermaLink="false">gvday</guid>
<pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  In moments of leisure, I find myself immersed in crafting personal
  tools and exploring the joys of computer programming.  Sometimes a
  few of these endeavors evolve into concrete utilities that I feel
  comfortable sharing with others under a free software license.
  Below, I present some highlights and updates from this year's coding
  adventures:
</p>
<ul>
  <li>
    <p>
      <a href="https://github.com/susam/devil">Devil</a>: This is a
      new Emacs package that intercepts and translates keystrokes to
      provide a modifier-free, non-modal editing experience.  I wrote
      this directly in my <code>~/.emacs</code> several years ago to
      avoid typing key chords.  This tool allowed me to use comma
      (<code>,</code>) as the leader key for invoking key sequences
      involving <kbd>ctrl</kbd> and <kbd>meta</kbd> keys.  I kept it
      private for a long time because I felt that the Emacs community
      may find some of the design decisions and the default choices to
      be outrageous.  However, after extracting it into a separate
      package and sharing it
      on <a href="https://melpa.org/#/devil">MELPA</a> (and later
      on <a href="https://elpa.nongnu.org/nongnu/devil.html">NonGNU
      ELPA</a> too), I was pleasantly surprised by the warm and
      supportive feedback I received from many kind and generous
      community members.  In fact, this package received several
      updates this year in order to address such feedback and
      enhancement requests as well as to integrate contributions from
      the community.  This package has evolved a lot and become much
      better, thanks to the small and supportive community that formed
      around it.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/cfrs">CFRS[]</a>: This is my
      first contribution to the quirky world of esolangs.  CFRS[] is
      an extremely minimal drawing language consisting of only 6
      simple commands: <code>C</code>,
      <code>F</code>, <code>R</code>, <code>S</code>, <code>[</code>
      and <code>]</code>.  See the
      file <a href="https://github.com/susam/cfrs/blob/main/demo.md">demo.md</a>
      for a collection of some nice demos submitted by the small
      community around this language.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/fxyt">FXYT</a>: A tiny,
      stack-based, postfix, canvas colouring language with only 36
      simple commands.  This is one of my very recent creations.
      There is not much of a community around it yet.  Nevertheless, I
      find it a lot of fun to play with.  The README file at the
      preceding link has some interesting demos.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/pcface">PC Face</a>: This is a
      a collection of tools that I wrote early this year to generate
      bitmap arrays for rendering CP437 glyphs using free and open
      source fonts based on the IBM PC OEM fonts.  The bitmaps are
      available in the form of JavaScript arrays and can be used quite
      easily to render glpyhs on an HTML5 Canvas.  Additionally, this
      project offers a few Python and JavaScript functions to create
      similar bitmap arrays from other similar PC fonts and render
      them.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/invaders">Andromeda
      Invaders</a>: I wrote this game last year to fulfill my
      childhood dream of writing my own invaders-style game.  This
      game received several updates this year around text rendering on
      canvas.  In fact, it was the update for rendering text using IBM
      PC OEM fonts that led to the PC Face project mentioned in the
      previous point.  The gameplay has been tweaked too to increase
      the difficulty level.  Further, I wrote an autoplay algorithm
      for fun.  This algorithm automatically moves the player to avoid
      falling boulders and hit the invader ships.  To see the autoplay
      algorithm in action, visit
      <a href="invaders.html#auto">invaders.html#auto</a>.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/nimb">NIMB</a>: NIMB stands
      for NIMB IRC Matrix Bridge.  Yes, a recursive acronym!  ;) This
      is a simple relay client to bridge together different IRC
      channels and Matrix rooms.  Growing dissatisfied with how the
      official bridge from Matrix assumed admin power level in a
      bridged room, removed idle users, etc., I wrote this as a small
      and simple tool for bridging my channels and rooms.  Later when
      Matrix <a href="https://matrix.org/blog/2023/11/28/shutting-down-bridge-to-libera-chat/">announced</a>
      that they would shut down their official bridge, it had almost
      no impact on me because I had already switched over from their
      official bridge to this little tool for my bridging needs.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/clog">Clog</a>: This is a tiny
      IRC chat logger written in Python.  I use it to keep a local
      archive of the chats of some of my favourite IRC channels.  This
      is perhaps my smallest personal tool.  I have shared it at the
      preceding link in case anyone finds it useful but as far as I
      know, I am the only who uses this.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/emacs4cl">Emacs4CL</a>: This
      is an old project that was first released in 2020.  It provides
      a quick-starter-kit to set up Emacs for Common Lisp programming.
      It received a minor update to ensure that it works well with the
      latest version of Paredit.  Apart from that, by popular demand,
      it leaves the menu bar enabled.  Yes, the menu bar used to be
      disabled earlier which later turned out to be misguided.  After
      receiving several suggestions about how the menu bar is
      essential for discovery of new commands relevant to the current
      major mode, the menu bar is enabled now.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/emfy">Emfy</a>: This too is
      another Emacs quick-starter-kit.  However this one is meant to
      set up a general purpose editing and programming environment
      with Emacs.  It was first released in 2021.  It received one
      minor update this year.  The variable
      <code>require-final-newline</code> is now set to <code>t</code>,
      so that files with newlines missing at the end are automatically
      updated with a trailing newline while saving them.  Further, the
      colour scheme of incremental search matches has been updated to
      have more contrast so that the matches are easier to spot and
      navigate through.
    </p>
  </li>
</ul>
<p>
  As I reflect on this year's coding adventures, I am reminded of the
  beauty of exploration and creativity in coding.  The support and
  feedback I have received from the small yet friendly communities
  around some of these projects has been truly heartening.  Here's to
  another year of solving problems with code, collaboration and the
  boundless world of possibilities that computer programming offers!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code-2023.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/retrospective.html">#retrospective</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.2.0</title>
<link>https://susam.net/code/news/fxyt/0.2.0.html</link>
<guid isPermaLink="false">pqtku</guid>
<pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.2.0 is a minor update of FXYT, a tiny, stack-oriented, canvas
  colouring language written in postfix notation with only 36 simple
  commands.  This update specifies and implements a much stricter
  definition of the <code>F</code> command that sets the frame
  interval.  The problem with the earlier definition as well as
  implementation was that the <code>F</code> command was evaluated for
  every cell in the canvas and the frame interval was set for every
  such interval.  This meant that the frame interval that would be set
  for the next frame would depend on the order in which the evaluation
  occurred.  See section
  <a href="https://github.com/susam/fxyt#frame-interval">Frame
  Interval</a> of the README for the complete details.
</p>
<p>
  This update now ensures that a coordinate-dependent frame interval
  set with the <code>F</code> command behaves uniformly across any
  implementation of FXYT regardless of the order of evaluation.  This
  is done by ensuring that while the command <code>F</code> is
  evaluated for all cells, it is only the frame interval value found
  during the evaluation of cell (0, 0) that is honoured as the frame
  interval for the next frame.
</p>
<p>
  The new update is now available at
  <a href="../../../fxyt.html">fxyt.html</a>.  You are very welcome to
  try it out and play with it.  If you come up with any interesting
  demos, please do
  <a href="https://github.com/susam/fxyt/issues">share them here</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT</title>
<link>https://susam.net/fxyt.html</link>
<guid isPermaLink="false">kzrxk</guid>
<pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Tiny, stack-based, postfix, canvas colouring language with only 36
  simple commands.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/fxyt.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>


</channel>
</rss>
