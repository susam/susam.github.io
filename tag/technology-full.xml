<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="../feed.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
<title>Susam's Technology Pages</title>
<link>https://susam.net/tag/technology.html</link>
<atom:link rel="self" type="application/rss+xml" href="https://susam.net/tag/technology-full.xml"/>
<description>Feed for Susam's Technology Pages</description>

<item>
<title>Nerd Quiz</title>
<link>https://susam.net/nq.html</link>
<guid isPermaLink="false">nqhtm</guid>
<pubDate>Thu, 16 Oct 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  A nerdy, handcrafted quiz built from everyday moments of reading,
  writing, thinking, learning and exploring.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/nq.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>I Reinstated My Guestbook After 20 Years</title>
<link>https://susam.net/reinstated-guestbook.html</link>
<guid isPermaLink="false">gbret</guid>
<pubDate>Fri, 03 Oct 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I have reinstated the <a href="guestbook.html">guestbook</a> on this
  website after 20 years!  As I have written in the
  <a href="about.html">About</a> page, this website began its life as
  an intranet portal in my university network back in 2001â€“2005.  That
  portal first ran on Microsoft Personal Web Server (PWS) and later on
  Microsoft Internet Information Services (IIS), with the guestbook
  data stored in a Microsoft Access database.  At the same time, I
  also maintained a small public website on the Internet, hosted on a
  subdomain provided by a free hosting service, where I published a
  subset of the articles from the intranet portal.  Both the intranet
  portal and the public website had guestbooks.  The guestbook on the
  public website was powered by a CGI script provided by the hosting
  service, which inserted each comment directly into the guestbook
  HTML page.  As some of you might guess, yes, it was vulnerable to
  cross-site scripting, but that's beside the point.
</p>
<p>
  After leaving the university, I registered my own domain name and
  set up my current website on the World Wide Web and included some of
  the content from both the original intranet portal and the old
  public website.  For some reason, though, I never thought to include
  a guestbook.  And so this website went on without a guestbook for
  the next 20 years.  Finally, in June 2025, I decided to bring the
  guestbook back.  I already had a commenting system implemented for
  this website using Common Lisp and Hunchentoot, so I simply reused
  it for the guestbook.  The
  <a href="https://github.com/susam/susam.net/blob/0.3.0/form.lisp">server program</a>
  accepts POST requests to receive comments and writes them to text
  files on the web server for manual review.  The comments are then
  rendered as static HTML pages by my static site generator.  In a
  way, it is less a comment system and more a static comment pages
  generator.
</p>
<p>
  Unfortunately, I could not restore all the comments from the
  original guestbooks.  The ASP source code of my intranet portal as
  well as the guestbook database are now lost to time.  Note that what
  I refer to as ASP here is now known as Classic ASP, to avoid
  confusion with ASP.NET.  A CD-ROM backup eventually succumbed to
  disc rot and with it vanished the source code and the database.  But
  a handful of comments had survived because they had found their way
  into other files and correspondence and I have now included them
  here.  I had better luck with the guestbook of the old public
  website, from which I was able to recover a greater number of
  comments.  It is still only a small fraction of what once existed,
  but it feels good to have even those fragments preserved.  The new
  guestbook is now available here:
  <a href="guestbook.html">Guestbook</a>.
</p>
<p>
  I wasn't expecting anybody to notice the new guestbook.  It is only
  mentioned in the <a href="about.html">About</a> and
  <a href="links.html">Links</a> pages, neither of which see much
  traffic.  Here are a few examples:
</p>
<blockquote>
  <p>
    I love that your website has a guestbook!  :D
  </p>
</blockquote>
<blockquote>
  <p>
    Love the guestbook!  We need more of these.  Makes you feel
    invited.
  </p>
</blockquote>
<p>
  It's a small addition to my website, but after two decades, it feels
  good to see the guestbook alive again and even better to see
  visitors enjoying it!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/reinstated-guestbook.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>My Lobsters Interview</title>
<link>https://susam.net/my-lobsters-interview.html</link>
<guid isPermaLink="false">lbstr</guid>
<pubDate>Fri, 12 Sep 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I recently had an engaging conversation with Alex
  (<a href="https://lobste.rs/~veqq">@veqq</a>) from the
  <a href="https://lobste.rs/">Lobsters</a> community about computing,
  mathematics and a range of related topics.  Our conversation was
  later published on the community website as
  <a href="https://lobste.rs/s/kltoas">Lobsters Interview with
  Susam</a>.
</p>
<p>
  I should mention the sections presented in that post are not in the
  same order in which we originally discussed them.  The sections were
  edited and rearranged by Alex to improve the flow and avoid
  repetition of similar topics too close to each other.
</p>
<p>
  This page preserves a copy of our discussion as edited by Alex, so I
  can keep an archived version on my website.  In my copy, I have
  added a table of contents to make it easier to navigate to specific
  sections.  The interview itself follows the table of contents.  I
  hope you enjoy reading it.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ol>
  <li><a href="#lisp-and-other-things">Lisp and Other Things</a></li>
  <li><a href="#lisp-emacs-and-mathematics">Lisp, Emacs and Mathematics</a></li>
  <li><a href="#interests-and-exploration">Interests and Exploration</a></li>
  <li><a href="#computing-for-fun">Computing for Fun</a></li>
  <li><a href="#computing-activities">Computing Activities</a></li>
  <li><a href="#programming-vs-domains">Programming vs Domains</a></li>
  <li><a href="#old-functionality-and-new-problems">Old Functionality and New Problems</a></li>
  <li><a href="#designing-for-composability">Designing for Composability</a></li>
  <li><a href="#small-vs-large-functions">Small vs Large Functions</a></li>
  <li><a href="#domains-and-projects">Domains and Projects</a></li>
  <li><a href="#double-spacing-and-touch-typing">Double Spacing and Touch Typing</a></li>
  <li><a href="#approach-to-learning">Approach to Learning</a></li>
  <li><a href="#managing-time-and-distractions">Managing Time and Distractions</a></li>
  <li><a href="#blogging">Blogging</a></li>
  <li><a href="#forums">Forums</a></li>
  <li><a href="#mathb-moderation-problems">MathB Moderation Problems</a></li>
  <li><a href="#favourite-mathematics-textbooks">Favourite Mathematics Textbooks</a></li>
  <li><a href="#mathematics-and-computing">Mathematics and Computing</a></li>
</ol>
<h2 id="conversation">Our Conversation<a href="#conversation"></a></h2>
<!-- Lisp and other things -->
<p class="question" id="lisp-and-other-things">
  Hi <a href="https://lobste.rs/~susam">@susam</a>, I primarily know
  you as a Lisper, what other things do you use?
</p>
<p>
  Yes, I use Lisp extensively for my personal projects and much of
  what I do in my leisure is built on it.  I ran
  a <a href="https://github.com/susam/mathb">mathematics pastebin</a>
  for close to thirteen years.  It was quite popular on some IRC
  channels.  The pastebin was written in Common Lisp.
  My <a href="https://susam.net/">personal website</a> and blog are
  generated using a tiny static site generator written in Common Lisp.
  Over the years I have built several other personal tools in it as
  well.
</p>
<p>
  I am an active Emacs Lisp programmer too.  Many of my software tools
  are in fact Emacs Lisp functions that I invoke with convenient key
  sequences.  They help me automate repetitive tasks as well as
  improve my text editing and task management experience.
</p>
<p>
  I use plenty of other tools as well.  In my early adulthood, I spent
  many years working with C, C++, Java and PHP.  My
  <a href="https://issues.apache.org/jira/browse/NUTCH-559">first
  substantial open source contribution</a> was to the Apache Nutch
  project which was in Java and one of my early original open source
  projects was <a href="https://github.com/susam/uncap">Uncap</a>, a C
  program to remap keys on Windows.
</p>
<p>
  These days I use a lot of Python, along with some Go and Rust, but
  Lisp remains important to my personal work.  I also enjoy writing
  small standalone tools directly in HTML and JavaScript, often with
  all the code in a single file in a readable, unminified form.
</p>
<!-- Lisp, Emacs and mathematics -->
<p class="question" id="lisp-emacs-and-mathematics">
  How did you first discover computing, then end up with Lisp, Emacs
  and mathematics?
</p>
<p>
  I got introduced to computers through the Logo programming language
  as a kid.  Using simple arithmetic, geometry, logic and code to
  manipulate a two-dimensional world had a lasting effect on me.
</p>
<p>
  I still vividly remember how I ended up with Lisp.  It was at an
  airport during a long layover in 2007.  I wanted to use the time to
  learn something, so I booted my laptop
  running <a href="https://www.debian.org/">Debian</a> GNU/Linux 4.0
  (Etch) and then started
  <a href="https://www.gnu.org/software/clisp/">GNU CLISP</a> 2.41.
  In those days, Wi-Fi in airports was uncommon.  Smartphones and
  mobile data were also uncommon.  So it was fortunate that I had
  CLISP already installed on my system and my laptop was ready for
  learning Common Lisp.  I had it installed because I had wanted to
  learn Common Lisp for some time.  I was especially attracted by its
  simplicity, by the fact that the entire language can be built up
  from a very small set of special forms.  I
  use <a href="https://www.sbcl.org/">SBCL</a> these days, by the way.
</p>
<p>
  I discovered Emacs through Common Lisp.  Several sources recommended
  using the <a href="https://slime.common-lisp.dev/">Superior Lisp
  Interaction Mode for Emacs (SLIME)</a> for Common Lisp programming,
  so that's where I began.  For many years I continued to use Vim as
  my primary editor, while relying on Emacs and SLIME for Lisp
  development.  Over time, as I learnt more about Emacs itself, I grew
  fond of Emacs Lisp and eventually made Emacs my primary editor and
  computing environment.
</p>
<p>
  I have loved mathematics since my childhood days.  What has always
  fascinated me is how we can prove deep and complex facts using first
  principles and clear logical steps.  That feeling of certainty and
  rigour is unlike anything else.
</p>
<p>
  Over the years, my love for the subject has been rekindled many
  times.  As a specific example, let me share how I got into number
  theory.  One day I decided to learn the RSA cryptosystem.  As I was
  working through the
  <a href="https://people.csail.mit.edu/rivest/Rsapaper.pdf">RSA
  paper</a>, I stumbled upon the Euler totient function
  \( \varphi(n) \) which gives the number of positive integers not
  exceeding n that are relatively prime to n.  The paper first states
  that

  \[
    \varphi(p) = p - 1
  \]

  for prime numbers \( p.  \)  That was obvious since \( p \) has no
  factors other than \( 1 \) and itself, so every integer from \( 1 \)
  up to \( p - 1 \) must be relatively prime to it.  But then it
  presents

  \[
    \varphi(pq) = \varphi(p) \cdot \varphi(q) = (p - 1)(q - 1)
  \]

  for primes \( p \) and \( q.  \)  That was not immediately obvious to
  me back then.  After a few minutes of thinking, I managed to prove
  it from scratch.  By the inclusion-exclusion principle, we count how
  many integers from \( 1 \) up to \( pq \) are not divisible by
  \(p \) or \( q.  \)  There are \( pq \) integers in total.  Among
  them, there are \( q \) integers divisible by \( p \) and \( p \)
  integers divisible by \( q.  \)  So we need to subtract \( p + q \)
  from \(pq.  \)  But since one integer (\( pq \) itself) is counted in
  both groups, we add \( 1 \) back.  Therefore

  \[
    \varphi(pq) = pq - (p + q) + 1 = (p - 1)(q - 1).
  \]

  Next I could also obtain the general formula for \( \varphi(n) \)
  for an arbitrary positive integer \( n \) using the same idea.
  There are several other proofs too, but that is how I derived the
  general formula for \( \varphi(n) \) when I first encountered it.
  And just like that, I had begun to learn number theory!
</p>
<!-- Computing for fun -->
<p class="question" id="computing-for-fun">
  You've said you prefer computing for fun.  What is fun to you?  Do
  you have an idea of what makes something fun or not?
</p>
<p>
  For me, fun in computing began when I first learnt IBM/LCSI PC Logo
  when I was nine years old.  I had very limited access to computers
  back then, perhaps only about two hours per <em>month</em> in the
  computer laboratory at my primary school.  Most of my Logo
  programming happened with pen and paper at home.  I would "test" my
  programs by tracing the results on graph paper.  Eventually I would
  get about thirty minutes of actual computer time in the lab to run
  them for real.
</p>
<p>
  So back then, most of my computing happened without an actual
  computer.  But even with that limited access to computers, a whole
  new world opened up for me: one that showed me the joy of computing
  and more importantly, the joy of sharing my little programs with my
  friends and teachers.  One particular Logo program I still remember
  very well drew a house with animated dashed lines, where the dashes
  moved around the outline of the house.  Everyone around me loved it,
  copied it and tweaked it to change the colours, alter the details
  and add their own little touches.
</p>
<p>
  For me, fun in computing comes from such exploration and sharing.  I
  enjoy asking "what happens if" and then seeing where it leads me.
  My Emacs package
  <a href="https://elpa.nongnu.org/nongnu/devil.html">devil-mode</a>
  comes from such exploration.  It came from asking, "What happens if
  we avoid using the <kbd>ctrl</kbd> and <kbd>meta</kbd> modifier keys
  and use <kbd>,</kbd> (the comma key) or another suitable key as a
  leader key instead?  And can we still have a non-modal editing
  experience?"
</p>
<p>
  Sometimes computing for fun may mean crafting a minimal esoteric
  drawing language, making a small game or building a tool that solves
  an interesting problem elegantly.  It is a bonus if the exploration
  results in something working well enough that I can share with
  others on the World Wide Web and others find it fun too.
</p>
<!-- Pursuits -->
<p class="question" id="interests-and-exploration">
  How do you choose what to investigate?  Which most interest you,
  with what commonalities?
</p>
<p>
  For me, it has always been one exploration leading to another.
</p>
<p>
  For example, I originally built
  <a href="https://github.com/susam/mathb">MathB</a> for my friends
  and myself who were going through a phase in our lives when we used
  to challenge each other with mathematical puzzles.  This tool became
  a nice way to share solutions with each other.  Its use spread from
  my friends to their friends and colleagues, then to schools and
  universities and eventually to IRC channels.
</p>
<p>
  Similarly, I built <a href="https://github.com/susam/texme">TeXMe</a>
  when I was learning neural networks and taking a lot of notes on the
  subject.  I was not ready to share the notes online, but I did want
  to share them with my friends and colleagues who were also learning
  the same topic.  Normally I would write my notes in LaTeX, compile
  them to PDF and share the PDF, but in this case, I wondered, what if
  I took some of the code from MathB and created a tool that would let
  me write plain Markdown
  (<a href="https://github.github.com/gfm/">GFM</a>) + LaTeX
  (<a href="https://www.mathjax.org/">MathJax</a>) in
  a <code>.html</code> file and have the tool render the file as soon
  as it was opened in a web browser?  That resulted in TeXMe, which
  has surprisingly become one of my most popular projects, receiving
  millions of hits in some months according to the CDN statistics.
</p>
<p>
  Another example is <a href="https://susam.github.io/muboard/">Muboard</a>,
  which is a bit like an interactive mathematics chalkboard.  I built
  this when I was hosting an
  <a href="journey-to-prime-number-theorem.html">analytic number
  theory book club</a> and I needed a way to type LaTeX snippets live
  on screen and see them immediately rendered.  That made me wonder:
  what if I took TeXMe, made it interactive and gave it a chalkboard
  look-and-feel?  That led to Muboard.
</p>
<p>
  So we can see that sharing mathematical notes and snippets has been
  a recurring theme in several of my projects.  But that is only a
  small fraction of my interests.  I have a wide variety of interests
  in computing.  I also engage in random explorations, like writing
  IRC clients
  (<a href="https://github.com/susam/nimb">NIMB</a>,
  <a href="https://github.com/susam/tzero">Tzero</a>),
  ray tracing
  (<a href="https://github.com/susam/pov25">POV-Ray</a>,
  <a href="https://github.com/spxy/java-ray-tracing">Java ray tracer</a>),
  writing Emacs guides
  (<a href="https://github.com/susam/emacs4cl">Emacs4CL</a>,
  <a href="https://github.com/susam/emfy">Emfy</a>),
  developing small single-file HTML games
  (<a href="invaders.html">Andromeda Invaders</a>,
  <a href="myrgb.html">Guess My RGB</a>),
  purely recreational programming
  (<a href="fxyt.html">FXYT</a>,
  <a href="https://github.com/susam/may4">may4.fs</a>,
  <a href="self-printing-machine-code.html">self-printing machine code</a>,
  <a href="primegrid.html">prime number grid explorer</a>)
  and so on.  The list goes on.  When it comes to hobby computing, I
  don't think I can pick just one domain and say it interests me the
  most.  I have a lot of interests.
</p>
<!-- What is computing?  -->
<p class="question" id="computing-activities">
  What is computing, to you?
</p>
<p>
  Computing, to me, covers a wide range of activities: programming a
  computer, using a computer, understanding how it works, even
  building one.  For example, I once built a tiny 16-bit CPU along
  with a small main memory that could hold only eight 16-bit
  instructions, using VHDL and a Xilinx CPLD kit.  The design was
  based on the Mano CPU introduced in the book <em>Computer System
  Architecture</em> (3rd ed.) by M. Morris Mano.  It was incredibly
  fun to enter instructions into the main memory, one at a time, by
  pushing DIP switches up and down and then watch the CPU I had built
  execute an entire program.  For someone like me, who usually works
  with software at higher levels of abstraction, that was a thrilling
  experience!
</p>
<p>
  Beyond such experiments, computing also includes more practical and
  concrete activities, such as installing and using my favourite Linux
  distribution (Debian), writing software tools in languages like
  Common Lisp, Emacs Lisp, Python and the shell command language or
  customising my Emacs environment to automate repetitive tasks.
</p>
<p>
  To me, computing also includes the abstract stuff like spending time
  with abstract algebra and number theory and getting a deeper
  understanding of the results pertaining to groups, rings and fields,
  as well as numerous number-theoretic results.  Browsing the
  <a href="https://oeis.org/">On-Line Encyclopedia of Integer
  Sequences</a> (OEIS), writing small programs to explore interesting
  sequences or just thinking about them is computing too.  I think
  many of the interesting results in computer science have deep
  mathematical foundations.  I believe much of computer science is
  really discrete mathematics in action.
</p>
<p>
  And if we dive all the way down from the CPU to the level of
  transistors, we encounter continuous mathematics as well, with
  non-linear voltage-current relationships and analogue behaviour that
  make digital computing possible.  It is fascinating how, as a
  relatively new species on this planet, we have managed to take sand
  and find a way to use continuous voltages and currents in electronic
  circuits built with silicon and convert them into the discrete
  operations of digital logic.  We have machines that can simulate
  themselves!
</p>
<p>
  To me, all of this is fun.  To study and learn about these things,
  to think about them, to understand them better and to accomplish
  useful or amusing results with this knowledge is all part of the
  fun.
</p>
<!-- Programming vs domains -->
<p class="question" id="programming-vs-domains">
  How do you view programming vs. domains?
</p>
<p>
  I focus more on the domain than the tool.  Most of the time it is a
  problem that catches my attention and then I explore it to
  understand the domain and arrive at a solution.  The problem itself
  usually points me to one of the tools I already know.
</p>
<p>
  For example, if it is about working with text files, I might write
  an Emacs Lisp function.  If it involves checking large sets of
  numbers rapidly for patterns, I might choose C++ or Rust.  But if I
  want to share interactive visualisations of those patterns with
  others, I might rewrite the solution in HTML and JavaScript,
  possibly with the use of the Canvas API, so that I can share the
  work as a self-contained file that others can execute easily within
  their web browsers.  When I do that, I prefer to keep the HTML neat
  and readable, rather than bundled or minified, so that people who
  like to 'View Source' can copy, edit and customise the code
  themselves to immediately see their changes take effect.
</p>
<p>
  Let me share a specific example.  While working on a web-based game, I first
  used <code>CanvasRenderingContext2D</code>'s <code>fillText()</code>
  to display text on the game canvas.  However, dissatisfied with the
  text rendering quality, I began looking for IBM PC OEM fonts and
  similar retro fonts online.  After downloading a few font packs, I
  wrote a little Python script to convert them to bitmaps (arrays of
  integers) and then used the bitmaps to draw text on the canvas using
  JavaScript, one cell at a time, to get pixel-perfect results!  These
  tiny Python and JavaScript tools were good enough that I felt
  comfortable sharing them together as a tiny toolkit called
  <a href="https://susam.github.io/pcface/src/demo.html">PCFace</a>.
  This toolkit offers JavaScript bitmap arrays and tiny JavaScript
  rendering functions, so that someone else who wants to display text
  on their game canvas using PC fonts and nothing but plain HTML and
  JavaScript can do so without having to solve the problem from
  scratch!
</p>
<!-- Applicability of old functionality for new problems -->
<p class="question" id="old-functionality-and-new-problems">
  Has the rate of your making new Emacs functions has diminished over
  time (as if everything's covered) or do the widening domains lead to
  more?  I'm curious how applicable old functionality is for new
  problems and how that impacts the APIs!
</p>
<p>
  My rate of making new Emacs functions has definitely decreased.
  There are two reasons.  One is that over the years my computing
  environment has converged into a comfortable, stable setup I am very
  happy with.  The other is that at this stage of life I simply cannot
  afford the time to endlessly tinker with Emacs as I did in my
  younger days.
</p>
<p>
  More generally, when it comes to APIs, I find that well-designed
  functionality tends to remain useful even when new problems appear.
  In Emacs, for example, many of my older functions continue to serve
  me well because they were written in a composable way.  New problems
  can often be solved with small wrappers or combinations of existing
  functions.  I think APIs that consist of functions that are simple,
  orthogonal and flexible age well.  If each function in an API does
  one thing and does it well (the Unix philosophy), it will have
  long-lasting utility.
</p>
<p>
  Of course, new domains and problems do require new functions and
  extensions to an API, but I think it is very important to not give
  in to the temptation of enhancing the existing functions by making
  them more complicated with optional parameters, keyword arguments,
  nested branches and so on.  Personally, I have found that it is much
  better to implement new functions that are small, orthogonal and
  flexible, each doing one thing and doing it well.
</p>
<p class="question" id="designing-for-composability">
  What design methods or tips do you have, to increase composability?
</p>
<p>
  For me, good design starts with good vocabulary.  Clear vocabulary
  makes abstract notions concrete and gives collaborators a shared
  language to work with.  For example, while working on a network
  events database many years ago, we collected data minute by minute
  from network devices.  We decided to call each minute of data from a
  single device a "nugget".  So if we had 15 minutes of data from 10
  devices, that meant 150 nuggets.
</p>
<p>
  Why "nugget"?  Because it was shorter and more convenient than
  repeatedly saying "a minute of data from one device".  Why not
  something less fancy like "chunk"?  Because we reserved "chunk" for
  subdivisions within a nugget.  Perhaps there were better choices,
  but "nugget" was the term we settled on and it quickly became shared
  terminology between the collaborators.  Good terminology naturally
  carries over into code.  With this vocabulary in place, function
  names like <code>collect_nugget()</code>,
  <code>open_nugget()</code>, <code>parse_chunk()</code>,
  <code>index_chunk()</code>, <code>skip_chunk()</code>,
  etc. immediately become meaningful to everyone involved.
</p>
<p>
  Thinking about the vocabulary also ensures that we are thinking
  about the data, concepts and notions we are working with in a
  deliberate manner and that kind of thinking also helps when we
  design the architecture of software.
</p>
<p>
  Too often I see collaborators on software projects jump straight
  into writing functions that take some input and produce some desired
  effect, with variable names and function names decided on the fly.
  To me, this feels backwards.  I prefer the opposite approach.
  Define the terms first and let the code follow from them.
</p>
<p>
  I also prefer developing software in a layered manner, where complex
  functionality is built from simpler, well-named building blocks.  It
  is especially important to avoid <em>layer violations</em>, where
  one complex function invokes another complex function.  That creates
  tight coupling between two complex functions.  If one function
  changes in the future, we have to reason carefully about how it
  affects the other.  Since both are already complex, the cognitive
  burden is high.  A better approach, I think, is to identify the
  common functionality they share and factor that out into smaller,
  simpler functions.
</p>
<p>
  To summarise, I like to develop software with a clear vocabulary,
  consistent use of that vocabulary, a layered design where complex
  functions are built from simpler ones and by avoiding layer
  violations.  I am sure none of this is new to the Lobsters
  community.  Some of these ideas also occur
  in <a href="https://en.wikipedia.org/wiki/Domain-driven_design">domain-driven
  design</a> (DDD).  DDD defines the term <em>ubiquitous language</em>
  to mean, "A language structured around the domain model and used by
  all team members within a bounded context to connect all the
  activities of the team with the software."  If I could call this
  approach of software development something, I would simply call it
  "vocabulary-driven development" (VDD), though of course DDD is the
  more comprehensive concept.
</p>
<p>
  Like I said, none of this is likely new to the Lobsters community.
  In particular, I suspect Forth programmers would find it too
  obvious.  In Forth, it is very difficult to begin with a long,
  poorly thought-out monolithic word and then break it down into
  smaller ones later.  The stack effects quickly become too hard to
  track mentally with that approach.  The only viable way to develop
  software in Forth is to start with a small set of words that
  represent the important notions of the problem domain, test them
  immediately and then compose higher-level words from the lower-level
  ones.  Forth naturally encourages a layered style of development,
  where the programmer thinks carefully about the domain, invents
  vocabulary and expresses complex ideas in terms of simpler ones,
  almost in a mathematical fashion.  In my experience, this kind of
  deliberate design produces software that remains easy to understand
  and reason about even years after it was written.
</p>
<!-- Small vs large functions -->
<p class="question" id="small-vs-large-functions">
  Not enhancing existing functions but adding new small ones seems
  quite lovely, but how do you come back to such a codebase later with
  many tiny functions?  At points, I've advocated for very large
  functions, particularly traumatized by Java-esque 1000 functions in
  1000 files approaches.  When you had time, would you often
  rearchitecture the conceptual space of all of those functions?
</p>
<p>
  The famous quote from Alan J. Perlis comes to mind:
</p>
<blockquote>
  <p>
    It is better to have 100 functions operate on one data structure
    than 10 functions on 10 data structures.
  </p>
</blockquote>
<p>
  Personally, I enjoy working with a codebase that has thousands of
  functions, provided most of them are small, well-scoped and do one
  thing well.  That said, I am not dogmatically opposed to large
  functions.  It is always a matter of taste and judgement.  Sometimes
  one large, cohesive function is clearer than a pile of tiny ones.
</p>
<p>
  For example, when I worked on parser generators, I often found that
  lexers and finite state machines benefited from a single top-level
  function containing the full tokenisation logic or the full state
  transition logic in one place.  That function could call smaller
  helpers for specific tasks, but we still need the overall
  <code>switch</code>-<code>case</code> or
  <code>if</code>-<code>else</code> or <code>cond</code> ladder
  somewhere.  I think trying to split that ladder into smaller
  functions would only make the code harder to follow.
</p>
<p>
  So while I lean towards small, composable functions, the real goal
  is to strike a balance that keeps code maintainable in the long run.
  Each function should be as small as it can reasonably be and no
  smaller.
</p>
<!-- Domains -->
<p class="question" id="domains-and-projects">
  Like you, I program as a tool to explore domains.  Which do you know
  the most about?
</p>
<p>
  For me too, the appeal of computer programming lies especially in
  how it lets me explore different domains.  There are two kinds of
  domains in which I think I have gained good expertise.  The first
  comes from years of developing software for businesses, which has
  included solving problems such as network events parsing, indexing
  and querying, packet decoding, developing parser generators,
  database session management and TLS certificate lifecycle
  management.  The second comes from areas I pursue purely out of
  curiosity or for hobby computing.  This is the kind I am going to
  focus on in our conversation.
</p>
<p>
  Although computing and software are serious business today, for me,
  as for many others, computing is also a hobby.
</p>
<p>
  Personal hobby projects often lead me down various rabbit holes and
  I end up learning new domains along the way.  For example, although
  I am not a web developer, I learnt to build small, interactive
  single-page tools in plain HTML, CSS and JavaScript simply because I
  needed them for my hobby projects over and over again.  An early
  example is <a href="quickqwerty.html">QuickQWERTY</a>, which I built
  to teach myself and my friends touch-typing on QWERTY keyboards.
  Another example is <a href="cfrs.html">CFRS[]</a>, which I created
  because I wanted to make a total (non-Turing complete) drawing
  language that has turtle graphics like Logo but is absolutely
  minimal like P&prime;&prime;.
</p>
<!-- Double spacing -->
<p class="question" id="double-spacing-and-touch-typing">
  You use double spaces after periods which I'd only experienced from
  people who learned touch typing on typewriters, unexpected!
</p>
<p>
  Yes, I do separate sentences by double spaces.  It is interesting
  that you noticed this.
</p>
<p>
  I once briefly learnt touch typing on typewriters as a kid, but
  those lessons did not stick with me.  It was much later, when I used
  a Java applet-based touch typing tutor that I found online about two
  decades ago, that the lessons really stayed with me.  Surprisingly,
  that application taught me to type with a single space between
  sentences.  By the way, I disliked installing Java plugins into the
  web browser, so I wrote <a href="quickqwerty.html">QuickQWERTY</a>
  as a similar touch typing tutor in plain HTML and JavaScript for
  myself and my friends.
</p>
<p>
  I learnt to use double spaces between sentences first with Vim and
  then later again with Emacs.  For example, in Vim,
  the <code>joinspaces</code> option is on by default, so when we join
  sentences with the normal mode command <code>J</code> or format
  paragraphs with <code>gqap</code>, Vim inserts two spaces after full
  stops.  We need to disable that behaviour with <code>:set
  nojoinspaces</code> if we want single spacing.
</p>
<p>
  It is similar in Emacs.  In Emacs, the
  <code>delete-indentation</code> command (<code>M-^</code>) and
  the <code>fill-paragraph</code> command (<code>M-q</code>) both
  insert two spaces between sentences by default.  Single spacing can
  be enabled with <code>(setq sentence-end-double-space nil)</code>.
</p>
<p>
  Incidentally, I spend a good portion of the README for my Emacs
  quick-start DIY kit named
  <a href="https://github.com/susam/emfy">Emfy</a> discussing sentence
  spacing conventions under the section
  <a href="https://github.com/susam/emfy#single-space-for-sentence-spacing">Single
  Space for Sentence Spacing</a>.  There I explain how to configure
  Emacs to use single spaces, although I use double spaces myself.
  That's because many new Emacs users prefer single spacing.
</p>
<p>
  The defaults in Vim and Emacs made me adopt double spacing.  The
  double spacing convention is also widespread across open source
  software.  If we look at the Vim help pages, Emacs built-in
  documentation or the Unix and Linux man pages, double spacing is the
  norm.  Even inline comments in traditional open source projects
  often use it.  For example, see Vim's
  <a href="https://github.com/vim/vim/blob/v9.1.1752/runtime/doc/usr_01.txt">:h usr_01.txt</a>,
  Emacs's
  <a href="https://cgit.git.savannah.gnu.org/cgit/emacs.git/tree/doc/emacs/emacs.texi?h=emacs-30.2#n1556">(info "(emacs) Intro")</a>
  or the comments in the <a href="https://gcc.gnu.org/git/?p=gcc.git;f=gcc/cfg.cc;hb=releases/gcc-15.2.0">GCC source code</a>.
</p>
<!-- Learning -->
<p class="question" id="approach-to-learning">
  How do you approach learning a new domain?
</p>
<p>
  When I take on a new domain, there is of course a lot of reading
  involved from articles, books and documentation.  But as I read, I
  constantly try to test what I learn.  Whenever I see a claim, I ask
  myself, "If this claim were wrong, how could I demonstrate it?"
  Then I design a little experiment, perhaps write a snippet of code
  or run a command or work through a concrete example, with the goal
  of checking the claim in practice.
</p>
<p>
  Now I am not genuinely hoping to prove a claim wrong.  It is just a
  way to engage with the material.  To illustrate, let me share an
  extremely simple and generic example without going into any
  particular domain.  Suppose I learn that Boolean operations in
  Python short-circuit.  I might write out several experimental
  snippets like the following:
</p>
<pre><code class="language-python">def t(): print('t'); return True
def f(): print('f'); return False
f() or t() or f()
</code></pre>
<p>
  And then confirm that the results do indeed confirm short-circuit
  evaluation (<code>f</code> followed by <code>t</code> in this case).
</p>
<p>
  At this point, one could say, "Well, you just confirmed what the
  documentation already told you."  And that's true.  But for me, the
  value lies in trying to test it for myself.  Even if the claim
  holds, the act of checking forces me to see the idea in action.
  That not only reinforces the concept but also helps me build a much
  deeper intuition for it.
</p>
<p>
  Sometimes these experiments also expose gaps in my own
  understanding.  Suppose I didn't properly know what "short-circuit"
  means.  Then the results might contradict my expectations.  That
  contradiction would push me to correct my misconception and that's
  where the real learning happens.
</p>
<p>
  Occasionally, this process even uncovers subtleties I didn't expect.
  For example, while learning socket programming, I discovered that a
  client can successfully receive data using <code>recv()</code> even
  after calling <code>shutdown()</code>, contrary to what I had first
  inferred from the specifications.  See my Stack Overflow post
  <a href="https://stackoverflow.com/q/39698037/303363">Why can recv()
  receive messages after the client has invoked shutdown()?</a> for
  more details if you are curious.
</p>
<p>
  Now this method cannot always be applied, especially if it is very
  expensive or unwieldy to do so.  For example, if I am learning
  something in the finance domain, it is not always possible to
  perform an actual transaction.  One can sometimes use simulation
  software, mock environments or sandbox systems to explore ideas
  safely.  Still, it is worth noting that this method has its
  limitations.
</p>
<p>
  In mathematics, though, I find this method highly effective.  When I
  study a new branch of mathematics, I try to come up with examples
  and counterexamples to test what I am learning.  Often, failing to
  find a counterexample helps me appreciate more deeply why a claim
  holds and why no counterexamples exist.
</p>
<!-- Distraction -->
<p class="question" id="managing-time-and-distractions">
  Do you have trouble not getting distracted with so much on your
  plate?  I'm curious how you balance the time commitments of
  everything!
</p>
<p>
  Indeed, it is very easy to get distracted.  One thing that has
  helped over the years is the increase in responsibilities in other
  areas of my life.  These days I also spend some of my free time
  studying mathematics textbooks.  With growing responsibilities and
  the time I devote to mathematics, I now get at most a few hours each
  week for hobby computing.  This automatically narrows down my
  options.  I can explore perhaps one or at most two ideas in a month
  and that constraint makes me very deliberate about choosing my
  pursuits.
</p>
<p>
  Many of the explorations do not evolve into something solid that I
  can share.  They remain as little experimental code snippets or
  notes archived in a private repository.  But once in a while, an
  exploration grows into something concrete and feels worth sharing on
  the Web.  That becomes a short-term hobby project.  I might work on
  it over a weekend if it is small or for a few weeks if it is more
  complex.  When that happens, the goal of sharing the project helps
  me focus.
</p>
<p>
  I try not to worry too much about making time.  After all, this is
  just a hobby.  Other areas of my life have higher priority.  I also
  want to devote a good portion of my free time to learning more
  mathematics, which is another hobby I am passionate about.  Whatever
  little spare time remains after attending to the higher-priority
  aspects of my life goes into my computing projects, usually a couple
  of hours a week, most of it on weekends.
</p>
<!-- Blogging -->
<p class="question" id="blogging">
  How does blogging mix in?  What's the development like of a single
  piece of curiosity through wrestling with the domain, learning and
  sharing it etc.?
</p>
<p>
  Maintaining my personal website is another aspect of computing that
  I find very enjoyable.  My website began as a loose collection of
  pages on a LAN site during my university days.  Since then I have
  been adding pages to it to write about various topics that I find
  interesting.  It acquired its blog shape and form much later when
  blogging became fashionable.
</p>
<p>
  I usually write a new blog post when I feel like there is some piece
  of knowledge or some exploration that I want to archive in a
  persistent format.  Now what the development of a post looks like
  depends very much on the post.  So let me share two opposite
  examples to describe what the development of a single piece looks
  like.
</p>
<p>
  One of my most frequently visited posts
  is <a href="lisp-in-vim.html">Lisp in Vim</a>.  It started when I
  was hosting a Common Lisp programming club for beginners.  Although
  I have always used Emacs and SLIME for Common Lisp programming
  myself, many in the club used Vim, so I decided to write a short
  guide on setting up something SLIME-like there.  As a former
  long-time Vim user myself, I wanted to make the Lisp journey easier
  for Vim users too.  I thought it would be a 30-minute exercise where
  I write up a README that explains how to install
  <a href="https://github.com/kovisoft/slimv">Slimv</a> and how to set
  it up in Vim.  But then I discovered a newer plugin called
  <a href="https://github.com/vlime/vlime">Vlime</a> that also offered
  SLIME-like features in Vim!  That detail sent me down a very deep
  rabbit hole.  Now I needed to know how the two packages were
  different, what their strengths and weaknesses were, how routine
  operations were performed in both and so on.  What was meant to be a
  short note turned into a nearly 10,000-word article.  As I was
  comparing the two SLIME-like packages for Vim, I also found a few
  bugs in Slimv and contributed fixes for them
  (<a href="https://github.com/kovisoft/slimv/pull/87">#87</a>,
  <a href="https://github.com/kovisoft/slimv/pull/88">#88</a>,
  <a href="https://github.com/kovisoft/slimv/pull/89">#89</a>,
  <a href="https://github.com/kovisoft/slimv/pull/90">#90</a>).
  Writing this blog post turned into a month-long project!
</p>
<p>
  At the opposite extreme is a post like
  <a href="elliptical-python-programming.html">Elliptical
  Python Programming</a>.  I stumbled upon Python's
  <a href="https://docs.python.org/3/library/constants.html#Ellipsis">Ellipsis</a>
  while reviewing someone's code.  It immediately caught my attention.
  I wondered if, combined with some standard obfuscation techniques,
  one could write arbitrary Python programs that looked almost like
  Morse code.  A few minutes of experimentation showed that a
  genuinely Morse code-like appearance was not possible, but something
  close could be achieved.  So I wrote what I hope is a humorous post
  demonstrating that arbitrary Python programs can be written using a
  very restricted set of symbols, one of which is the ellipsis.  It
  took me less than an hour to write this post.  The final result
  doesn't look quite like Morse code as I had imagined, but it is
  quite amusing nevertheless!
</p>
<!-- Forums -->
<p class="question" id="forums">
  What draws you to post and read online forums?  How do you balance
  or allot time for reading technical articles, blogs etc.?
</p>
<p>
  The exchange of ideas!  Just as I enjoy sharing my own
  computing-related thoughts, ideas and projects, I also find joy in
  reading what others have to share.
</p>
<p>
  Other areas of my life take precedence over hobby projects and hobby
  projects take precedence over technical forums.
</p>
<p>
  After I've given time to the higher-priority parts of my life and to
  my own technical explorations, I use whatever spare time remains to
  read articles, follow technical discussions and occasionally add
  comments.
</p>
<!-- MathB.in -->
<p class="question" id="mathb-moderation-problems">
  When you decided to stop with MathB due to moderation burdens, I
  offered to take over/help and you mentioned others had too.  Did
  anyone end up forking it, to your knowledge?
</p>
<p>
  I first thought of shutting down the
  <a href="https://github.com/susam/mathb">MathB</a>-based pastebin
  website in November 2019.  The website had been running for seven
  years at that time.  When I announced my thoughts to the IRC
  communities that would be affected, I received a lot of support and
  encouragement.  A few members even volunteered to help me out with
  moderation.  That support and encouragement kept me going for
  another six years.  However, the volunteers eventually became busy
  with their own lives and moved on.  After all, moderating user
  content for an open pastebin that anyone in the world can post to is
  a thankless and tiring activity.  So most of the moderation activity
  fell back on me.  Finally, in February 2025, I realised that I no
  longer want to spend time on this kind of work.
</p>
<p>
  I developed MathB with a lot of passion for myself and my friends.
  I had no idea at the time that this little project would keep a
  corner of my mind occupied even during weekends and holidays.  There
  was always a nagging worry.  What if someone posted content that
  triggered compliance concerns and my server was taken offline while
  I was away?  I no longer wanted that kind of burden in my life.  So
  I finally decided to shut it down.  I've written more about this
  in <a href="mathbin-is-shutting-down.html">MathB.in Is Shutting
  Down</a>.
</p>
<p>
  To my knowledge, no one has forked it, but others have developed
  alternatives.  Further, the
  <a href="https://wiki.archiveteam.org/">Archive Team</a> has
  <a href="https://web.archive.org/web/*/https://mathb.in/">archived</a>
  all posts from the now-defunct MathB-based website.  A member of the
  Archive Team reached out to me over IRC and we worked together for
  about a week to get everything successfully archived.
</p>
<!-- Textbooks -->
<p class="question" id="favourite-mathematics-textbooks">
  What're your favorite math textbooks?
</p>
<p>
  I have several favourite mathematics books, but let me share three I
  remember especially fondly.
</p>
<p>
  The first is <em>Advanced Engineering Mathematics</em> by Erwin
  Kreyszig.  I don't often see this book recommended online, but for
  me it played a major role in broadening my horizons.  I think I
  studied the 8th edition back in the early 2000s.  It is a hefty book
  with over a thousand pages and I remember reading it cover to cover,
  solving every exercise problem along the way.  It gave me a solid
  foundation in routine areas like differential equations, linear
  algebra, vector calculus and complex analysis.  It also introduced
  me to Fourier transforms and Laplace transforms, which I found
  fascinating.
</p>
<p>
  Of course, the Fourier transform has a wide range of applications in
  signal processing, communications, spectroscopy and more.  But I
  want to focus on the fun and playful part.  In the early 2000s, I
  was also learning to play the piano as a hobby.  I used to record my
  amateur music compositions with
  <a href="https://github.com/audacity/audacity">Audacity</a> by
  connecting my digital piano to my laptop with a line-in cable.  It
  was great fun to plot the spectrum of my music on Audacity, apply
  high-pass and low-pass filters and observe how the Fourier transform
  of the audio changed and then hear the effect on the music.  That
  kind of hands-on tinkering made Fourier analysis intuitive for me
  and I highly recommend it to anyone who enjoys both music and
  mathematics.
</p>
<p>
  The second book is <em>Introduction to Analytic Number Theory</em>
  by Tom M.  Apostol.  As a child I was intrigued by the prime number
  theorem but lacked the mathematical maturity to understand its
  proof.  Years later, as an adult, I finally taught myself the proof
  from Apostol's book.  It was a fantastic journey that began with
  simple concepts like the MÃ¶bius function and Dirichlet products and
  ended with quite clever contour integrals that proved the theorem.
  The complex analysis I had learnt from Kreyszig turned out to be
  crucial for understanding those integrals.  Along the way I gained a
  deeper understanding of the Riemann zeta function \( \zeta(s).  \)
  The book discusses zero-free regions where \( \zeta(s) \) does not
  vanish, which I found especially fascinating.  Results like \(
  \zeta(-1) = -1/12, \) which once seemed mysterious, became obvious
  after studying this book.
</p>
<p>
  The third is <em>Galois Theory</em> by Ian Stewart.  It introduced
  me to field extensions, field homomorphisms and solubility by
  radicals.  I had long known that not all quintic equations are
  soluble by radicals, but I didn't know why.  Stewart's book taught
  me exactly why.  In particular, it demonstrated that the polynomial
  \( t^5 - 6t + 3 \) over the field of rational numbers is not soluble
  by radicals.  This particular result, although fascinating, is just
  a small part of a much larger body of work, which is even more
  remarkable.  To arrive at this result, the book takes us through a
  wonderful journey that includes the theory of polynomial rings,
  algebraic and transcendental field extensions, impossibility proofs
  for ruler-and-compass constructions, the Galois correspondence and
  much more.
</p>
<p>
  One of the most rewarding aspects of reading books like these is how
  they open doors to new knowledge, including things I didn't even
  know that I didn't know.
</p>
<!-- Mathematics and computing -->
<p class="question" id="mathematics-and-computing">
  How does the newer math jell with or inform past or present
  computing, compared to much older stuff?
</p>
<p>
  I don't always think explicitly about how mathematics informs
  computing, past or present.  Often the textbooks I pick feel very
  challenging to me, so much so that all my energy goes into simply
  mastering the material.  It is arduous but enjoyable.  I do it
  purely for the fun of learning without worrying about applications.
</p>
<p>
  Of course, a good portion of pure mathematics probably has no
  real-world applications.  As G. H. Hardy famously wrote in <em>A
  Mathematician's Apology</em>:
</p>
<blockquote>
  <p>
    I have never done anything 'useful'.  No discovery of mine has
    made or is likely to make, directly or indirectly, for good or
    ill, the least difference to the amenity of the world.
  </p>
</blockquote>
<p>
  But there is no denying that some of it does find applications.
  Were Hardy alive today, he might be disappointed that number theory,
  his favourite field of "useless" mathematics, is now a crucial part
  of modern cryptography.  Electronic commerce wouldn't likely exist
  without it.
</p>
<p>
  Similarly, it is amusing how something as abstract as abstract
  algebra finds very concrete applications in coding theory.  Concepts
  such as polynomial rings, finite fields and cosets of subspaces in
  vector spaces over finite fields play a crucial role in
  error-correcting codes, without which modern data transmission and
  storage would not be possible.
</p>
<p>
  On a more personal note, some simpler areas of mathematics have been
  directly useful in my own work.  While solving problems for
  businesses, information entropy, combinatorics and probability
  theory were crucial when I worked on gesture-based authentication
  about one and a half decades ago.
</p>
<p>
  Similarly, when I was developing Bloom filter-based indexing and
  querying for a network events database, again, probability theory
  was crucial in determining the parameters of the Bloom filters (such
  as the number of hash functions, bits per filter and elements per
  filter) to ensure that the false positive rate remained below a
  certain threshold.  Subsequent testing with randomly sampled network
  events confirmed that the observed false positive rate matched the
  theoretical estimate quite well.  It was very satisfying to see
  probability theory and the real world agreeing so closely.
</p>
<p>
  Beyond these specific examples, studying mathematics also influences
  the way I think about problems.  Embarking on journeys like analytic
  number theory or Galois theory is humbling.  There are times when I
  struggle to understand a small paragraph of the book and it takes me
  several hours (or even days) to work out the arguments in detail
  with pen and paper (lots of it) before I really grok them.  That
  experience of grappling with dense reasoning teaches humility and
  also makes me sceptical of complex, hand-wavy logic in day-to-day
  programming.
</p>
<p>
  Several times I have seen code that bundles too many decisions into
  one block of logic, where it is not obvious whether it would behave
  correctly in all circumstances.  Explanations may sometimes be
  offered about why it works for reasonable inputs, but the reasoning
  is often not watertight.  The experience of working through
  mathematical proofs, writing my own, making mistakes and then
  correcting them has taught me that if the reasoning for correctness
  is not clear and rigorous, something could be wrong.  In my
  experience, once such code sees real-world usage, a bug is nearly
  always found.
</p>
<p>
  That's why I usually insist either on simplifying the logic or on
  demonstrating correctness in a clear, rigorous way.  Sometimes this
  means doing a case-by-case analysis for different types of inputs or
  conditions and showing that the code behaves correctly in each case.
  There is also a bit of an art to reducing what seem like numerous or
  even infinitely many cases to a small, manageable set of cases by
  spotting structure, such as symmetries, invariants or natural
  partitions of the input space.  Alternatively, one can look for a
  simpler argument that covers all cases.  These are techniques we
  employ routinely in mathematics and I think that kind of thinking
  and reasoning is quite valuable in software development too.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/my-lobsters-interview.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a>
</p>
]]>
</description>
</item>
<item>
<title>Prime Number Grid Explorer</title>
<link>https://susam.net/primegrid.html</link>
<guid isPermaLink="false">pghtm</guid>
<pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  A simple single-page HTML application to explore the distribution of
  prime numbers in a grid.  Choose a starting number along with the
  number of rows and columns and the page generates the corresponding
  grid.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/primegrid.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Miller-Rabin Speed Test</title>
<link>https://susam.net/code/web/miller-rabin-speed-test.html</link>
<guid isPermaLink="false">mrpst</guid>
<pubDate>Sat, 16 Aug 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  A demo page that implements the Miller-Rabin primality test to
  accurately detect primes for all numbers less than
  318665857834031151167461 and compare its speed against a simple
  division based primality test algorithm.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/web/miller-rabin-speed-test.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>My Blogroll Is Now My Feed Reader</title>
<link>https://susam.net/blogroll-as-feed-reader.html</link>
<guid isPermaLink="false">mbmfr</guid>
<pubDate>Sat, 05 Jul 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  On a particularly hot summer weekend last month, I implemented a new
  feature for this website: a blogroll that lists recent entries from
  my favourite blogs.  Check it out here: <a href="roll.html">roll.html</a>.
</p>
<p>
  It has been nearly two weeks since I set up this blogroll and it has
  already changed how I keep up with my feeds.  I no longer bother
  with feed readers or aggregators.  I could never quite make a habit
  of using them regularly anyway.  Thanks to this simple addition to
  my website, I find myself visiting my blogroll often.  It has earned
  a permanent place in my bookmarks.  When I have some spare time, I
  click on the bookmark, visit my blogroll and, when I find new posts
  appear there, I click through and read the full blog posts.
</p>
<p>
  Credit for this nifty and surprisingly effective idea goes to Alex
  Kladov.  It was Alex's website,
  <a href="https://matklad.github.io/">matklad.github.io</a>, that
  inspired me to implement my own blogroll.  It showed me that a
  blogroll can be more than just a static list of links.  It can be a
  regularly updated page that highlights new posts from the blogs I
  follow.
</p>
<p>
  I suspect the fact that my blogroll is generated by my own
  handcrafted <a href="https://github.com/susam/susam.net/blob/main/roll.lisp">Common
  Lisp program</a> plays a part in why I enjoy using it.  There is a
  certain joy in using something you have built yourself.  At last, I
  feel I can stay on top of my feeds!  If you maintain a personal
  website and struggle to keep up with your feeds, I recommend this
  approach.  Writing the blogroll generator was a fun weekend project
  and it has greatly improved how I spend my spare time online!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/blogroll-as-feed-reader.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Noise From My Feeds</title>
<link>https://susam.net/feed-noise.html</link>
<guid isPermaLink="false">xjdrj</guid>
<pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Hello!  If you are subscribed to this website's feeds, you may have
  noticed something odd recently.  Your feed reader might have shown a
  bunch of old posts as if they were published today.  If that
  happened with your feed reader, I apologise for the noise.  I hope
  this post will give you some clarity on why this happened.  The
  reason for this noise is a change to the way the RSS feeds are
  generated for this website.  Each post in the feeds includes a GUID,
  which is used by many feed readers to decide whether a post is new
  or if it has been seen already.  Until now, the GUID was simply the
  post's URL, like this:
</p>
<pre>
<code>&lt;url&gt;https://susam.net/product-of-additive-inverses.html&lt;/url&gt;
&lt;guid&gt;https://susam.net/product-of-additive-inverses.html&lt;/guid&gt;</code>
</pre>
<p>
  However, today this has changed to a short unique string, like so:
</p>
<pre>
<code>&lt;url&gt;https://susam.net/product-of-additive-inverses.html&lt;/url&gt;
&lt;guid isPermaLink="false"&gt;rxpnz&lt;/guid&gt;</code>
</pre>
<p>
  If your feed reader looks at this GUID value to decide whether a new
  post has been published, it will show you a whole bunch of old posts
  once again in your reader, as if they were new.  These GUIDs won't
  change again in the future, so this is a one-time problem.  The full
  URL of the post is still present in the feeds, as you can see in the
  example above, so your feed reader still knows where to take you if
  you wish to visit this website to read a post.  The short string
  serves as a unique identifier for each post.
</p>
<p>
  This website is a passion project I work on in my spare time.
  Sometimes, after publishing a post, I realise the title could be
  sharper or the URL could be cleaner.  I make the necessary changes
  and set up HTTP redirects on my web server, so that visitors using
  the old URL are still taken to the updated location of the post.
  Previously, however, the GUID (being the URL) changed too, which
  caused many feed readers to treat the updated post as a new one even
  when it wasn't.  Switching to stable GUIDs prevents this problem
  from occurring again.  The GUIDs now stay the same no matter what
  changes I make behind the scenes, which means no more unnecessary
  noise in your feed reader.
</p>
<p>
  I am sorry if this caused any confusion or clutter.  If your feed
  reader is currently flooded with old posts appearing as new, the
  best solution is to mark those items as read.  Thank you for your
  patience with this issue.  I hope to keep future surprises limited
  to content, not configuration.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/feed-noise.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>More Contrast, Please</title>
<link>https://susam.net/more-contrast-please.html</link>
<guid isPermaLink="false">ygqwk</guid>
<pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  So you have decided to go with a dark theme for your website.  Great
  choice!  I love dark themes too!  My journey with computers began
  with monochrome CRT monitors, where white text was displayed on dark
  background.  I am still very fond of that colour scheme.  Done well,
  dark themes can be elegant and easy on the eyes.  But there is a
  common pitfall that I see all too often in modern web design &ndash;
  the overuse of low-contrast colour schemes.  This is something worth
  keeping in mind while crafting a new theme.
</p>
<p>
  Take a look at this example where the text colour
  is <code>#777777</code> and the background is <code>#222222</code>:
</p>
<p style="background: #222222; color: #777777; padding: 1em; text-align: center; font-size: 1rem; font-family: helvetica, sans-serif">
  The five boxing wizards jump quickly.
</p>
<p>
  I am hoping that most people would agree that the colour contrast
  above is too low.  I certainly find it uncomfortable to read.
  However, the situation becomes a bit less clear with the following
  example, where the text colour is set to <code>#A9A9B3</code> and the background
  is <code>#2A2A2D</code>:
</p>
<p style="background: #2a2a2d; color: #a9a9b3; padding: 1em; text-align: center; font-size: 1rem; font-family: helvetica, sans-serif">
  The five boxing wizards jump quickly.
</p>
<p>
  The above example is, in fact, based on a real website I came across
  today.  Now this is definitely better than the first example and I
  am sure some people would find this perfectly acceptable.  However,
  I still find this uncomfortable to read.  In fact, I have realised
  that as I get older, I need a higher contrast ratio to make the text
  more comfortable to read.
</p>
<p>
  I would suggest that any colour choices for foreground text and
  background page colours should, at the very least, meet
  the <a href="https://www.w3.org/TR/WCAG22/#contrast-enhanced">Web
  Content Accessibility Guidelines (WCAG) Level AAA</a>
  recommendations.  This means the contrast ratio for normal-sized
  text against the background should be at least 7:1.  There are also
  the slightly weaker Level AA guidelines, which require that
  normal-sized text have a contrast ratio of at least 4.5:1.  That
  said, I personally recommend aiming for a 7:1 contrast ratio
  regardless.
</p>
<p>
  The first example above has a contrast ratio of just 3.6:1, meaning
  it fails to meet both the Level AA and Level AAA requirements.  The
  second example, on the other hand, has a contrast ratio of
  6.1:1.  While it satisfies the Level AA requirements, it still falls
  short of meeting the Level AAA standards.
</p>
<p>
  To calculate the contrast ratio according to
  the <a href="https://www.w3.org/WAI/WCAG22/Techniques/general/G17.html#tests">WCAG
  contrast formula</a>, use one of these tools:
</p>
<ul>
  <li>
    <a href="contrast.html">My Colour Contrast Calculator</a>
  </li>
  <li>
    <a href="https://webaim.org/resources/contrastchecker/">WebAIM Contrast Checker</a>
  </li>
</ul>
<p>
  If we improve the contrast for the second example above, we would
  need to choose a brighter shade for the text, such as
  <code>#B7B7BE</code>.  On the dark background <code>#2A2A2D</code>,
  this results in a contrast ratio of 7.2:1.  Here is how it looks:
</p>
<p style="background: #2a2a2d; color: #b7b7be; padding: 1em; text-align: center; font-size: 1rem; font-family: helvetica, sans-serif">
  The five boxing wizards jump quickly.
</p>
<p>
  I definitely find this much easier to read.  If you are developing a
  dark colour theme for your web page or software, I request you to
  run your colours through a contrast calculator tool and ensure the
  contrast ratio is greater than 7:1.  Anything less and the theme
  might become uncomfortable for people like me.  Small adjustments
  like this can significantly improve readability and comfort for your
  readers.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/more-contrast-please.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Hacker News Hug of Deaf</title>
<link>https://susam.net/hn-bell.html</link>
<guid isPermaLink="false">fcycm</guid>
<pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<blockquote>
  <p>
    "It's essentially the Hacker News Hug of Deaf."
    &ndash;
    <a href="https://news.ycombinator.com/item?id=30146019#30147639">@TonyTrapp</a>
  </p>
</blockquote>
<p>
  About three years ago, I set up a tiny <code>netcat</code> loop on
  one of my Debian servers to accept arbitrary connections from the
  Hacker News (HN) community.  The loop ran for 24 hours and did
  exactly three things whenever a client connected:
</p>
<ol>
  <li>
    Send a simple <code>ok</code> message to the client.
  </li>
  <li>
    Close the connection immediately.
  </li>
  <li>
    Make my terminal beep four times.
  </li>
</ol>
<p>
  That's it!  It was a playful experiment in response to a thread
  about quirky, do-it-yourself alerting systems for friends and
  family.  See
  <a href="https://news.ycombinator.com/item?id=30146019#30146451">this
  HN thread</a> for the original discussion.  Here is the exact
  command I ran on my server:
</p>
<pre class="wrap"><code>while true; do (echo ok | nc -q 1 -vlp 8000 2&gt;&amp;1; echo; date -u) | tee -a beeper.log; for i in 1 2 3 4; do printf '\a'; sleep 1; done &amp; done</code></pre>
<p>
  The <code>nc</code> command closes the connection immediately after
  sending the <code>ok</code> message and runs an
  inner <code>for</code> loop in a background shell that
  asynchronously prints the bell character to the terminal four times.
  Meanwhile, the outer <code>while</code> command loops back quickly
  to run a new <code>nc</code> process, thus making this one-liner
  script instantly ready to accept the next incoming connection.
</p>
<p>
  Soon after I shared this, members of the HN community began
  connecting to the demo running on <code>susam.net:8000</code>.
  Anyone on the Internet could use any client of their choice to
  connect.  Here's how I explained it in the HN thread:
</p>
<blockquote>
  <p>
    Now anytime someone connects to port 8000 of my system
    by <em>any</em> means, I will hear 4 beeps!  The other party can
    use <em>whatever client</em> they have to connect to port 8000 of
    my system, e.g. a web browser, <code>nc HOST
    8000</code>, <code>curl HOST:8000</code>, or even, <code>ssh HOST
    -p 8000</code>, <code>irssi -c HOST -p 8000</code>, etc.
  </p>
</blockquote>
<p>
  In the next 24 hours, I received over 4761 connections, each one
  triggering four beeps.  That's a total of 19&#x202f;044 terminal
  beeps echoing throughout the day!
</p>
<figure class="soft">
  <img src="files/blog/beeper1.png" alt="Graph">
  <figcaption>
    Number of connections received every hour since 31 Jan 2022 10:00 UTC
  </figcaption>
</figure>
<p>
  The data for the above graph is available at
  <a href="https://gist.github.com/susam/159c7d92659b3185eb0b0d683998a3b7">beeper.log</a>.
  Now, 4761 isn't a huge number in the grand scheme of things, but it
  was still pretty cool to see people notice an obscure comment buried
  in a regular HN thread, act on it and make my terminal beep
  thousands of time.
</p>
<p>
  At the end of the day, this was a fun experiment.  Pointless, but
  fun!  Computing isn't always about solving problems.  Sometimes,
  it's also about exploring quirky ideas.  The joy is in the
  exploration and having others join in made it even more enjoyable.
  Activities like this keep computing fun for me!
</p>
<hr>
<p id="update-2025-04-10">
  <strong>Update on 10 Apr 2025:</strong>
  I <a href="https://news.ycombinator.com/item?id=43642123">shared
  this article on Hacker News</a> today and saw another surge in
  connections to my beeper loop.
</p>
<figure class="soft">
  <img src="files/blog/beeper2.png" alt="Graph">
  <figcaption>
    Number of connections received every hour since 10 Apr 2025 10:00 UTC
  </figcaption>
</figure>
<p>
  The data for the above graph is available at
  <a href="https://gist.github.com/susam/3cec5db1a78a9db527327460656daeae">beeper2.log</a>.
  The data shows a total of 352&#x202f;831 connections from 1396
  unique client addresses over 14 hours.  That amounts to a total of
  1&#x202f;411&#x202f;324 beeps!  Much of the traffic seems to have
  come from persistent client loops constantly connecting to my beeper
  loop.  In particular, the client identified by the anonymised
  identifier C0276 made the largest number of connections by far, with
  327&#x202f;209 total connections.  The second most active client,
  C0595, made only 6771 connections.  There were 491 clients that
  connected exactly once.  If you'd like to see the number of
  connections by each client, see
  <a href="https://gist.github.com/susam/d6766f4b722f899250a8f3da0c98f993">beeperclient2.log</a>.
</p>
<p>
  In conclusion, the difference in the volume of connections between
  the earlier experiment and today's is striking.  In the first round,
  three years ago, there were only 4761 connections from some readers
  of a comment thread.  But in today's round, with this post being
  featured on the HN front page, there were 352&#x202f;831
  connections!  It is fascinating to see how odd experiments like this
  can find so many participants within the HN community!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/hn-bell.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/networking.html">#networking</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>More Purple Links, Please</title>
<link>https://susam.net/more-purple-links-please.html</link>
<guid isPermaLink="false">gyrti</guid>
<pubDate>Thu, 03 Apr 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  While I am browsing the Web, one thing I always like to see is a
  page with purple links.  Since the early days of the Web, purple has
  has become the default colour for visited links.  Here's a relevant
  note from the
  <a href="https://ksi.cpsc.ucalgary.ca/archives/WWW-TALK/www-talk-1993q2.messages/47.html">changelog</a>
  of NCSA Mosaic 0.13 (1993):
</p>
<blockquote>
  Changed default anchor representations: blue and single solid
  underline for unvisited, dark purple and single dashed underline for
  visited.
</blockquote>
<p>
  Visiting a web page and finding purple links brings a sense of ease.
  The purple links indicate that I am familiar with some of the
  references the web page makes to other articles.  Each purple link
  serves as a small marker of a prior journey, a reminder that I've
  explored certain paths before.  To me, purple links are like
  well-worn books with faded covers and creased spines.  Blue links,
  on the other hand, are like new books, to be opened and explored.
</p>
<p>
  Although I'm quite fond of purple links, I know that not everyone
  shares this sentiment.  Modern web design trends have moved away
  from this tradition, favouring sleek, minimalist aesthetics where
  visited and unvisisted links look nearly the same.  While this can
  be visually appealing, in my opinion, it detracts from the
  experience of using the Web as a source of knowledge.  When links
  look indistinguishable or unconventional, it can be hard to tell
  what I've already read, especially when I am revisiting a topic and
  want to easily spot the links that are new.
</p>
<p>
  Now it is not hard to change the visited link style with a little
  userscript.  For example the following userscript can override the
  website's stylesheet to colour visited links purple again:
</p>
<pre>
<code>// ==UserScript==
// @name Purple Links
// @match *://*/*
// ==/UserScript==
document.head.appendChild(document.createElement('style'))
document.head.lastElementChild.innerHTML = 'a:visited {color: #518}'</code>
</pre>
<p>
  This little userscript should work well on most web pages with light
  backgrounds.  But if a web page uses a dark theme or a custom colour
  scheme, then the above userscript may need adjustments to either
  handle other colour schemes gracefully.
</p>
<p>
  To me, the purple links serve as small reminders of all the digital
  paths I've already walked.  I wish more websites would honour this
  convention.  More purple links, please.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/more-purple-links-please.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>PDF Dimmer Bookmarklet</title>
<link>https://susam.net/pdf-dimmer-bookmarklet.html</link>
<guid isPermaLink="false">bgigh</guid>
<pubDate>Wed, 02 Apr 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I often read PDF documents in Firefox and sometimes I prefer to work
  in dark mode, especially at night when the room lights are dimmed.
  However, the bright white background of the Firefox PDF viewer can
  be glaring and uncomfortable when dark mode is enabled.
  Additionally, writing a userscript to invert the background and text
  colours in the PDF viewer does not work.  I have confirmed with
  Firefox version 137.0 that userscripts do not run within the PDF
  viewer.
</p>
<p>
  For example, consider this simple userscript that just prints a
  "hello" message when a web page loads:
  <a href="code/lab/userscript/hello.js">hello.js</a>.  This script
  works on regular web pages but does not execute when viewing a PDF
  file in Firefox.
  See <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1454760">Bug
  1454760</a> for more details about this restriction.
</p>
<p>
  While userscripts are often my go-to solution for customisations
  like this, for this particular problem, I resorted to writing a tiny
  bookmarklet to work around the above limitation.  Here is the
  bookmarklet:
</p>
<pre><code>javascript:(()=&gt;{['thumbnailView','viewer'].map(id=&gt;document.getElementById(id).style.filter='invert(0.9)saturate(0)')})()</code></pre>
<p>
  To add this to Firefox, from the Firefox menu, select "Bookmarks".
  Then in the left sidebar, right click on either "Bookmarks Toolbar"
  or "Bookmarks Menu", depending on where you want to add the
  bookmarklet and select "Add Bookmark".  Enter some name in the
  "Name" field and then in the "URL" field, enter the above line of
  code.  Click "Save" and you are done.  The next time you open a PDF
  file in Firefox, find the bookmark in the bookmarks menu or toolbar,
  click on it and it should instantly invert the colour scheme of the
  PDF viewer.
</p>
<p>
  Alternatively, simply drag the following link and drop it onto your
  Firefox toolbar:
</p>
<p class="textcenter">
  <a href="javascript:(()=%3e%7b%5b'thumbnailView','viewer'%5d.map(id=%3edocument.getElementById(id).style.filter='invert(0.9)saturate(0)')%7d)()">Dim PDF</a>
</p>
<p>
  While the default PDF viewer of Firefox does not support
  userscripts, this bookmarklet is a simple, effective way to give
  PDFs a darker look.  If you're like me and often read books and
  papers in PDF format at night, you might find this handy.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/pdf-dimmer-bookmarklet.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 1.3.0</title>
<link>https://susam.net/code/news/mathb/1.3.0.html</link>
<guid isPermaLink="false">lpjpy</guid>
<pubDate>Sun, 16 Mar 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB 1.3.0 is likely the final update of MathB, a web-based
  mathematics pastebin service.  The online mathematics pastebin
  service previously hosted at <code>https://mathb.in/</code> has been
  shut down today after 13 years of continuous service.  See the post
  <a href="../../../mathbin-is-shutting-down.html">MathB.in Is
  Shutting Down</a> for more details about this.  This release
  captures the state of this project as it was today at the time of
  shutting down the online service.
</p>
<p>
  This update includes a few new features.  For example, there is now
  a configurable runtime property named <code>:expect</code> that can
  be used to enforce the presence of certain tokens in the posts
  submitted by the users.  This feature was used to enforce the
  presence of LaTeX delimiters in the online service, a measure that
  was instrumental in reducing spam to a great extent in the last few
  years.  There are a few other minor changes too.
  See <a href="https://github.com/susam/mathb/blob/main/CHANGES.md">CHANGES.md</a>
  for a detailed changelog.
</p>
<p>
  The source code of MathB remains free and open-source, so anyone
  interested in hosting their own instance can still do so.  To access
  the source code of MathB, please visit
  <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/1.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB.in Is Shutting Down</title>
<link>https://susam.net/mathbin-is-shutting-down.html</link>
<guid isPermaLink="false">rrbdk</guid>
<pubDate>Sun, 23 Feb 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Thirteen years ago, on a quiet Saturday night, I sat down and began
  developing MathB.in.  After coding all through the night, as the sun
  rose on Sunday, 25 March 2012, the website was ready.  I registered
  a new domain name and shared it with a few friends who loved
  mathematics.  Back then, we spent hours discussing fascinating
  mathematics problems and this website became a simple way for us to
  share snippets with each other.  Word spread quickly&mdash;my
  friends shared it with their friends, who passed it along to others.
  The community grew organically.  Then, one day, I announced the
  project on the MathJax mailing list and its reach expanded even
  further.  Within a year, this mathematics pastebin service had users
  from around the world.  Watching the usage of this little project
  grow was an incredibly rewarding experience.
</p>
<figure class="soft">
  <a href="files/blog/mathbin.png"><img
     src="files/blog/mathbin.png"
     alt="A screenshot of a mathematics pastebin service displaying Markdown and LaTeX code in the left pane and the rendered content in the right pane."></a>
  <figcaption>
    A screenshot of MathB.in, a mathematics pastebin service
  </figcaption>
</figure>
<p>
  The world has changed a lot since I first published MathB.in.  The
  internet has evolved and so have I.  Maintaining a mathematics
  pastebin service like this single-handedly has become increasingly
  difficult over the years.  Over the past 13 years, I have received
  notices from regulatory authorities whenever someone submitted
  content that triggered compliance concerns.  Each time, my server
  would be taken offline and I would be given a 7-day deadline to boot
  it into rescue mode, remove the offending content and restore
  service.  Missing the deadline would put my server hosting account
  at risk of cancellation.
</p>
<p>
  To prevent these disruptions, I began reviewing and filtering
  incoming content as much as possible every few days.  The
  appreciation and positive feedback from happy users kept me going.
  However, at this stage of my life, I can no longer afford to spend
  time moderating user content.  On top of that, the growing
  complexity of data protection and digital safety regulations places
  a significant burden on me as the maintainer of this service.
  Complying with these regulations requires considerable legal
  expertise that I cannot afford.
</p>
<p>
  Some might suggest that I could improve the spam-detection
  capabilities of this service and indeed, I have done so over the
  years.  However, all anti-spam measures are inherently
  probabilistic.  No matter how much automation is in place, a manual
  review of every post is still necessary to guarantee that all
  content is legitimate.  It only takes one dodgy submission to
  trigger compliance alerts.  While I respect the need for these
  regulations, I do not want to spend my weekends worrying about what
  users from around the world might be posting on this little pastebin
  service.  Nor do I want to be in a constant state of vigilance just
  to keep my server running.  It takes up more time than I can spare.
</p>
<p>
  Some have suggested forming a team of volunteers to review
  submissions, but that does not solve the core issue: since the
  server hosting account is in my name, I would still be responsible
  for remediating any compliance issues or risk having my account
  cancelled.  Another alternative is to move the service under a
  non-profit organisation, but with increased responsibilities in
  other areas of my life, handling the operational demands of such an
  endeavour is far beyond what I can commit to.  After all, this was
  meant to be a fun project built for me and my friends, not something
  that requires me to deal with regulatory issues.
</p>
<p>
  Another alternative would be to encode the content of a MathB.in
  post and embed it into the URL, which could then be distributed with
  others.  Upon visiting the URL, the application would read the
  encoded content from the URL, decode it and render it.  While this
  eliminates the need to store user content on my server, it
  introduces a new concern: the risk of someone sharing URLs with
  malicious content embedded in them.  I am not comfortable with such
  content being rendered on a page served from a domain that I am the
  registrant of.  The regulatory implications of rendering such
  content are also unclear.  I could still be held accountable for
  content rendered on the website, regardless of whether it's stored
  on the server.  This problem could be mitigated to some extent by
  refusing to render content containing known malicious patterns but
  no such solution can be foolproof.
</p>
<p>
  As a result, after much thought, I have regrettably made the
  decision to shut down MathB.in on Sunday, 16 March 2025.  The
  website will go offline on that day.  If you have any important
  posts that you would like to keep, now is the time to copy and save
  them for yourself.
</p>
<p>
  To all of you who have used this project, I want to express my
  sincere gratitude.  Running a project that could serve you in a
  meaningful way has given me a strong sense of accomplishment and
  pride.  To those who are disappointed by this service's closure, I
  am sorry.  I wish I could continue to dedicate the time and effort
  needed to maintain and develop it, but I must acknowledge my
  limitations and step away from a project that has become an artefact
  of my past, not my present.
</p>
<p>
  The source code for this website is available at
  <a href="https://github.com/susam/mathb">github.com/susam/mathb</a>
  under the MIT license.  Feel free to use the code and set up your
  own instance if you'd like!  Alternatively, consider hosting your
  mathematical snippets and notes on your own web space using a kit
  like MathCask available at
  <a href="https://github.com/susam/mathcask">github.com/susam/mathcask</a>.
</p>
<p>
  Finally, I hope you'll hold no hard feelings.  If you have enjoyed
  using MathB.in, I would love to stay connected on the Fediverse.  My
  Mastodon handle is
  <a href="https://mastodon.social/@susam">@susam@mastodon.social</a>.
  See you there!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/mathbin-is-shutting-down.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>The IndieWeb Doesn't Need to "Take Off"</title>
<link>https://susam.net/indieweb-does-not-need-to-take-off.html</link>
<guid isPermaLink="false">fgxtg</guid>
<pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  There's a corner of the Internet where people have been reclaiming
  their digital independence by hosting their own websites and
  promoting the idea of owning your own content.  It's called the
  IndieWeb.  This community has its own
  <a href="https://indieweb.org/">website</a>, IRC channels, social
  media presence, etc., all dedicated to the idea that individuals
  should control their own digital presence through personal websites.
</p>
<p>
  Publishing your own website isn't a new concept.  It is the very
  essence of the Web!  This is what the Web has always been about
  since its early days.  But in an era where corporate-controlled
  platforms dominate online interaction, the IndieWeb emphasises the
  original spirit of the Web, where individuals have control over
  their content, identities and online spaces.  Every time this topic
  arises in online discussions, someone inevitably claims that the
  IndieWeb hasn't taken off!
</p>
<p>
  I feel that such claims about the IndieWeb not "taking off" are
  either stating the obvious or, if that's not the intention,
  completely missing the point.  It's like saying that gardening
  hasn't taken off because most people buy their vegetables at the
  supermarket.  The IndieWeb doesn't need to "take off" to be valuable
  to those who participate in it.  Maintaining a personal website is
  about owning your digital presence, embracing creative freedom and
  expressing your individuality!  It's not about appealing to the
  masses!
</p>
<p>
  I remember how, in the early 2000s, I used to spend my spare time
  learning HTML and writing my website, one HTML tag at a time.
  Writing a few lines of code in a text editor and then watching the
  browser render that code into a vibrant web page full of colours and
  images felt like an art form.  It was doubly fun to find other
  netizens who shared that same joy of maintaining and publishing
  their websites.  The IndieWeb is about preserving that hacker
  culture where websites are crafted and hosted not for mass appeal
  but for the sheer joy of creation and sharing with like-minded
  individuals.
</p>
<p>
  The IndieWeb doesn't need to go mainstream to be meaningful.  It's a
  celebration of a more personal, decentralised and creative world
  wide web.  For those of us who still care about these values, it is
  already meaningful.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/indieweb-does-not-need-to-take-off.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.5.0</title>
<link>https://susam.net/code/news/fxyt/0.5.0.html</link>
<guid isPermaLink="false">nwtao</guid>
<pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.5.0 is a minor update of FXYT, a tiny, esoteric, stack-based,
  postfix, canvas colouring language with only 36 simple commands.
  This release fixes an annoying bug that has been affecting some
  mobile device users for a while.  On some mobile web browsers, such
  as Chrome on Samsung Galaxy S8, the drawing canvas would appear to
  be larger than the viewport thus overflowing the visible screen on
  the mobile device.  The user would then be required to manually zoom
  out in order to use this tool conveniently.  This issue has been
  fixed in this release.
</p>
<p>
  If you follow my <a href="../../../cfrs.html">CFRS[]</a> project,
  you might have noticed yesterday that a very similar fix has gone
  into CFRS[] too.  For more details about that, see
  the release page for <a href="../cfrs/0.3.0.html">CFRS[] 0.3.0</a>.
</p>
<p>
  Visit <a href="../../../fxyt.html">FXYT</a> to play with FXYT and
  draw some interesting patterns!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.5.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>CFRS[] 0.3.0</title>
<link>https://susam.net/code/news/cfrs/0.3.0.html</link>
<guid isPermaLink="false">ojrjp</guid>
<pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  CFRS[] 0.3.0 is a minor update of CFRS[], an extremely minimal
  drawing language consisting of only 6 simple commands.  This update
  fixes an annoying bug that caused CFRS[] canvas to overflow the
  visible screen on some mobile web browsers.  In particular, this
  issue was observed on Chrome running on Samsung Galaxy S8.
</p>
<p>
  To read more about CFRS[], go to
  <a href="https://github.com/susam/cfrs#readme">github.com/susam/cfrs</a>.
  Also, visit <a href="../../../cfrs.html">cfrs.html</a> to play with CFRS[]
  now and draw some nice patterns!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/cfrs/0.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.4.0</title>
<link>https://susam.net/code/news/fxyt/0.4.0.html</link>
<guid isPermaLink="false">zgrko</guid>
<pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.4.0 is a minor update of FXYT, a tiny, esoteric, stack-based,
  postfix, canvas colouring language with only 36 simple commands.
  This release increases the maximum allowed code length from 256
  bytes to 1024 bytes.  This means there is now more room for writing
  more complex FXYT programs!
</p>
<p>
  Further, the maximum code length for distributable demo links has
  been increased from 64 bytes to 256 bytes.  This allows several more
  impressive demos to have their own distributable links.  As a
  specific example of one such demo, take a look at
  this <a href="https://susam.net/fxyt.html#XTsN128dN3142pN128qDN3142gbN6284dcDN1571gbN3142SdcDNN1571dlbNN3142dSdcDDN166SDpN120000qdSDpN1000qpN1000qN1000SdpN1000qN1100sN3pN25qYgNSbPN255c">animated
  sine wave</a> developed by <a href="https://github.com/ncw">Nick
  Craig-Wood</a>, of Rclone fame!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.4.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Negative Lookahead Assertion</title>
<link>https://susam.net/negative-lookahead-assertion.html</link>
<guid isPermaLink="false">tdawz</guid>
<pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is an example of negative lookahead assertion in regular
  expression using Python:
</p>
<pre>
<code>import re
strings = ['foo', 'bar', 'baz', 'foo-bar', 'bar-baz', 'baz-foo']
matches = [s for s in strings if re.search('^(?!.*foo)', s)]
print(matches)</code>
</pre>
<p>
  The regular expression <code>^(?!.*foo)</code> in the above example
  matches strings that do not contain the pattern <code>foo</code>.
  The above code example produces the following output:
</p>
<pre><samp>['bar', 'baz', 'bar-baz']</samp></pre>
<p>
  Of course, it is much simpler to use an ordinary regular expression
  that matches <code>foo</code> and then invert the result of the
  match to ignore strings that contain <code>foo</code>.  For example,
  consider the following straightforward solution:
</p>
<pre><code>matches = [s for s in strings if not re.search('foo', s)]</code></pre>
<p>
  This example produces the same result as the earlier example but
  with less complexity.  However, there are situations where, as a
  user of certain software tool, we might not have control over how
  the tool applies the regular expression.  Some tools only allow us
  to provide a pattern and then they automatically select strings that
  match the pattern.  In such cases, if we need to select strings
  that <em>do not</em> match a given pattern, negative lookahead
  assertions become quite useful, provided the regular expression
  flavour supported by the tool allows the use of negative lookahead
  assertions.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/negative-lookahead-assertion.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>The SHA-256 hash of this sentence begins with 0573e7473.</title>
<link>https://susam.net/0573e7473.html</link>
<guid isPermaLink="false">oywyy</guid>
<pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<pre><code>The SHA-256 hash of this sentence begins with 0573e7473.</code></pre>
<!-- ### -->
<p>
  <a href="https://susam.net/0573e7473.html">Read on website</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Guess My RGB 0.3.0</title>
<link>https://susam.net/code/news/myrgb/0.3.0.html</link>
<guid isPermaLink="false">shmtq</guid>
<pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  <a href="../../../myrgb.html">Guess My RGB</a>, the little colour
  guessing game, just got a small update.  This update adds a
  "Mode" link to the footer which can be used to toggle the game
  between normal mode and expert mode.
</p>
<p>
  The expert mode was introduced as a hidden feature five months ago
  in the <a href="0.2.0.html">previous release</a>.  With the current
  release, the expert mode no longer remains a hidden feature.  You
  can simply toggle between modes via the new footer link.
</p>
<p>
  Ready to test your colour skills?  Head over to
  <a href="../../../myrgb.html">myrgb.html</a> and start playing
  today!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/myrgb/0.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Guess My RGB 0.2.0</title>
<link>https://susam.net/code/news/myrgb/0.2.0.html</link>
<guid isPermaLink="false">vojtv</guid>
<pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  <a href="../../../myrgb.html">Guess My RGB</a>, the little colour
  guessing game, received a minor update today.  This update adds a
  hidden feature that lets you play the game in <em>expert mode</em>.
  In this mode, the match percentage for your submitted guess is not
  shown on the screen.
</p>
<p>
  Thanks to @steffahn for
  <a href="https://lobste.rs/s/sbcayb/guess_my_rgb#c_gqrj3r">suggesting
  this feature</a> on th Lobsters forum!
</p>
<p>
  Visit <a href="../../../myrgb.html#x">myrgb.html#x</a> now to play
  the game in the expert mode.
</p>
<p>
  Alternatively, visit <a href="../../../myrgb.html">myrgb.html</a> to
  play it in the normal mode like before.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/myrgb/0.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Pretty-Printing JSON Response with HTTP Headers</title>
<link>https://susam.net/pretty-print-json-response-with-http-headers.html</link>
<guid isPermaLink="false">fgqkm</guid>
<pubDate>Sun, 14 Apr 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Often while using <code>curl</code> with URLs that return a JSON
  response, I need to print the HTTP response headers along with the
  JSON response.  Here is an example that shows how this can be done:
</p>
<pre>
<samp>$ <kbd>curl -sSi https://susam.net/code/lab/json/books.json</kbd>
HTTP/1.1 200 OK
Server: nginx/1.18.0
Date: Sat, 05 Apr 2024 11:53:24 GMT
Content-Type: application/json
Content-Length: 172
Last-Modified: Sat, 05 Apr 2024 11:53:05 GMT
Connection: keep-alive
ETag: "67f119a1-ac"
Accept-Ranges: bytes

[
  {"title": "Gulliver's Travels", "author": "Jonathan Swift", "published": 1726},
  {"title": "Treasure Island", "author": "Robert Louis Stevenson", "published": 1883}
]</samp>
</pre>
<p>
  The above output is obtained using curl 7.77.0
  (x86_64-apple-darwin21.0).  The <code>-i</code> option is
  responsible for including the HTTP response headers.
  The <code>-s</code> and <code>-S</code> options are not too
  important for the current discussion but I usually happen to use
  them out of habit.  The <code>-s</code> option suppresses the
  progress meter and error messages but the <code>-S</code> re-enables
  the display of error messages.  This helps me avoid the progress
  meter in the output without having to lose visibility of any errors
  that may arise.
</p>
<p>
  So far so good!  But can we also have the JSON response
  pretty-printed with say <code>jq</code>?  The above command prints
  both the HTTP headers and the response to the standard output, so
  piping the standard output to <code>jq</code> does not work.
  The <code>jq</code> command fails with an error as soon as it
  encounters the HTTP headers.
</p>
<p>
  If, however, we manage to send the HTTP header and the response to
  different streams or files, then we could utilise <code>jq</code> to
  pretty-print the stream or file that contains the JSON response.
  Here is an example that shows how to do this:
</p>
<pre>
<samp>$ <kbd>curl -sSD head.txt -o out.json https://susam.net/code/lab/json/books.json &amp;&amp; cat head.txt &amp;&amp; jq . out.json</kbd>
HTTP/1.1 200 OK
Server: nginx/1.18.0
Date: Sat, 05 Apr 2024 11:53:51 GMT
Content-Type: application/json
Content-Length: 172
Last-Modified: Sat, 05 Apr 2024 11:53:05 GMT
Connection: keep-alive
ETag: "67f119a1-ac"
Accept-Ranges: bytes

[
  {
    "title": "Gulliver's Travels",
    "author": "Jonathan Swift",
    "published": 1726
  },
  {
    "title": "Treasure Island",
    "author": "Robert Louis Stevenson",
    "published": 1883
  }
]</samp>
</pre>
<p>
  Alternatively, we can achieve this using a single command by
  printing the the HTTP headers to standard error.  This ensures that
  only the JSON response is printed to standard output, which we can
  then pretty-print using <code>jq</code>.  Here is an example:
</p>
<pre>
<samp>$ <kbd>curl -sSD /dev/stderr https://susam.net/code/lab/json/books.json | jq .</kbd>
HTTP/1.1 200 OK
Server: nginx/1.18.0
Date: Sat, 05 Apr 2024 11:54:12 GMT
Content-Type: application/json
Content-Length: 172
Last-Modified: Sat, 05 Apr 2024 11:53:05 GMT
Connection: keep-alive
ETag: "67f119a1-ac"
Accept-Ranges: bytes

[
  {
    "title": "Gulliver's Travels",
    "author": "Jonathan Swift",
    "published": 1726
  },
  {
    "title": "Treasure Island",
    "author": "Robert Louis Stevenson",
    "published": 1883
  }
]</samp>
</pre>
<!-- ### -->
<p>
  <a href="https://susam.net/pretty-print-json-response-with-http-headers.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/networking.html">#networking</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Emacs Info Expressions</title>
<link>https://susam.net/emacs-info-expressions.html</link>
<guid isPermaLink="false">ihxrc</guid>
<pubDate>Fri, 12 Apr 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  On <code>#emacs</code> IRC or Matrix channels, we often share
  references to the built-in Emacs documentation as Elisp expressions
  that look like this:
</p>
<pre><code>(info "(emacs) Basic Undo")</code></pre>
<p>
  Here is another example:
</p>
<pre><code>(info "(emacs) Word Search")</code></pre>
<p>
  This is a common practice in the Emacs channels even though all of
  the Emacs manual is available on the world wide web too.  For
  example, the section referred to in the above expression is
  available here:
  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Word-Search.html">GNU
  Emacs Manual: Word Search</a>.  The reason for sharing Elisp
  expressions like this is likely partly tradition and partly
  convenience.  Many Emacs users are logged into IRC networks via
  Emacs itself, so once the recipient sees an Elisp expression like
  the above one in their chat buffer, visiting the corresponding
  manual page is a simple matter of placing the cursor right after the
  closing parenthesis and typing <code>C-x C-e</code>.
</p>
<p>
  But isn't it clumsy for the sender to type Elisp expressions like
  this merely to share a pointer to a section of a manual with others?
  Turns out, it is not.  This is Emacs!  So of course there are
  key-bindings to do this.
</p>
<h2 id="copy-info-node-name">Copy Info Node Name<a href="#copy-info-node-name"></a></h2>
<p>
  Say, while helping another Emacs user we type <code>M-x info-apropos
  RET version control RET</code> and land on the section "Branches"
  and realise that this is the section that the person we are trying
  to help should read.  Now when we are on this section, we can simply
  type <code>c</code> and Emacs will copy the name of the current Info
  node to the kill ring.  This name looks like this:
</p>
<pre><code>(emacs) Branches</code></pre>
<p>
  Now we can go to the <code>*scratch*</code> buffer (or any buffer),
  copy the node name and complete the <code>info</code> expression
  manually.  For example, we could type the following key sequence on
  a fresh new line to create the Elisp expression and copy it to the
  kill ring:
</p>
<pre><code>" " C-b C-y C-a C-SPC C-e M-( info C-a C-k C-/</code></pre>
<p>
  On vanilla Emacs, the above rather long key sequence first types two
  double-quotes next to each other (<code>" "</code>), then moves the
  cursor back to go within the double-quotes (<code>C-b</code>), then
  pastes the text <code>(emacs) Branches</code> from the kill ring
  (<code>C-y</code>), then selects the pasted text (<code>C-a C-SPC
  C-e</code>), then surrounds it within parentheses
  (<code>M-(</code>), then inserts the text <code>info</code> just
  after the opening parentheses and finally copies the resulting
  expression to the kill ring (<code>C-a C-k C-/</code>).  The
  expression copied to the kill ring looks like this:
</p>
<pre><code>(info "(emacs) Branches")</code></pre>
<p>
  Can we avoid constructing the <code>info</code> expression manually
  and have Emacs do it for us?  Turns out we can as we see in the next
  section.
</p>
<h2 id="copy-info-expression">Copy Info Expression<a href="#copy-info-expression"></a></h2>
<p>
  I recently learnt from <a href="https://karthinks.com/">Karthink</a>
  and <a href="https://mastodon.social/@mekeor@catgirl.cloud">Mekeor
  Melire</a> that we can ask Emacs to create the
  entire <code>info</code> expression automatically for us.  All we
  need to do is use the zero prefix argument with the <code>c</code>
  key.  So when we are on section "Branches", if we type <code>C-0
  c</code>, the following expression is copied to the kill ring:
</p>
<pre><code>(info "(emacs) Branches")</code></pre>
<p>
  I should have known this because indeed while we are in the Info
  documentation browser, if we type <code>C-h k c</code> to describe
  the key sequence <code>c</code>, we see the following documentation:
</p>
<pre>
<code>c runs the command Info-copy-current-node-name (found in
Info-mode-map), which is an interactive byte-compiled Lisp function in
&lsquo;info.el&rsquo;.

It is bound to c, w, &lt;menu-bar&gt; &lt;info&gt; &lt;Copy Node Name&gt;.

(Info-copy-current-node-name &amp;optional ARG)

Put the name of the current Info node into the kill ring.  The name of
the Info file is prepended to the node name in parentheses.  With a
zero prefix arg, put the name inside a function call to
&lsquo;info&rsquo;.

  Probably introduced at or before Emacs version 22.1.

[back]</code>
</pre>
<p>
  So indeed Emacs has a convenient key sequence to create the
  complete <code>info</code> expression for the current Info node.
  The person who receives this <code>info</code> expression can visit
  the corresponding section of the manual simply by evaluating it.
  For example, after copying the expression in Emacs, they could
  simply type <code>C-y C-x C-e</code> to paste the expression into a
  buffer and evaluate it immediately.  Alternatively, they might want
  to type <code>M-: C-y RET</code> to bring the
  <code>eval-expression</code> minibuffer, paste the expression and
  evaluate it.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/emacs-info-expressions.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>From Web Feed Entry to 186k Hits</title>
<link>https://susam.net/from-web-feed-to-186850-hits.html</link>
<guid isPermaLink="false">blshr</guid>
<pubDate>Sun, 07 Apr 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Last Sunday (31 Mar 2024), I published a tiny colour guessing game
  called <a href="myrgb.html">Guess My RGB</a>.  I developed most of
  it on Saturday afternoon, took a break and revisited it later that
  night for some final code cleanup.  Around 02:00 UTC, I uploaded the
  game to my website.  Since the entire game is contained in a single
  HTML file named <a href="myrgb.html">myrgb.html</a>, it was just a
  matter of uploading this file to my web server.  Shortly after, I
  went to bed.
</p>
<p>
  I had no intention of sharing this game with a wide audience yet, as
  it hadn't been thoroughly tested.  However, when I woke up the next
  morning, I discovered that a Hacker News (HN) user had already found
  and shared the game on HN in this post:
  <a href="https://news.ycombinator.com/item?id=39882018">news.ycombinator.com/item?id=39882018</a>.
</p>
<p>
  Since I had not shared this game with anyone anywhere yet, I was
  quite surprised to wake up Sunday morning and find my game trending
  at the top of HN.  I believe this is where maintaining an RSS feed
  on my website might have helped.  Every new page that I publish on
  this website also appears as an entry in the RSS feed for this
  website.  This feed can be found here:
  <a href="feed.xml">feed.xml</a>.  I have a few hundred subscribers
  to this feed.  It is very likely that the HN user who shared this
  game on HN found it through this feed.  Indeed my web server logs
  show that the feed was fetched by a feed reader just minutes before
  the game was posted on HN.
</p>
<p>
  In the week since its HN mention, my game has received a total of
  186,850 hits.  Not a staggering number but encouraging!  The actual
  numbers for each day look like this:
</p>
<!-- 95467 + 48330 + 22305 + 10189 + 4685 + 2101 + 3773 = 186850 -->
<table class="grid center textcenter">
  <tr>
    <th>Date</th>
    <th>Hits</th>
  </tr>
  <tr>
    <td>31 Mar 2024</td>
    <td>95467</td>
  </tr>
  <tr>
    <td>01 Apr 2024</td>
    <td>48330</td>
  </tr>
  <tr>
    <td>02 Apr 2024</td>
    <td>22305</td>
  </tr>
  <tr>
    <td>03 Apr 2024</td>
    <td>10189</td>
  </tr>
  <tr>
    <td>04 Apr 2024</td>
    <td>4685</td>
  </tr>
  <tr>
    <td>05 Apr 2024</td>
    <td>2101</td>
  </tr>
  <tr>
    <td>06 Mar 2024</td>
    <td>3773</td>
  </tr>
</table>
<p>
  So the next time someone tells you that RSS is dead, remember how an
  RSS feed entry helped my little game get discovered.  It took only
  one entry in my web feed, one kind feed subscriber and a few kind HN
  upvoters to reach a large audience!  It is a testament to the
  enduring value of simple, open web technologies that can amplify
  your content and connect you with a passionate audience.
</p>
<p>
  To all visitors of this website who played this game and shared this
  game with others, thank you!  Crafting
  <a href="https://github.com/susam?tab=repositories&amp;sort=stargazers">tiny
  software tools</a> like this is a creative outlet for me.  To know
  that there are others out there who enjoyed this game brings me joy!
  To play this game now, visit <a href="myrgb.html">myrgb.html</a> and
  guess some colours!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/from-web-feed-to-186850-hits.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>CFRS[] 0.2.0</title>
<link>https://susam.net/code/news/cfrs/0.2.0.html</link>
<guid isPermaLink="false">ihmkl</guid>
<pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  CFRS[] 0.2.0 is a minor update of CFRS[], an extremely minimal
  drawing language consisting of only 6 simple commands.  This update
  brings minor changes to the built-in help screen that can be invoked
  by typing <code>?</code> in the input pane.  For example, the help
  screen now has a direct links to built-in demos and community demos.
  Further, based on community feedback, the description of
  the <code>]</code> command has been updated with clearer language
  that better clarifies that this command repeats a repeatable block
  once (i.e. executes the repeatable block again).  See
  the <a href="https://github.com/susam/cfrs/blob/main/CHANGES.md">changelog</a>
  for more details.
</p>
<p>
  To read more about CFRS[], go to
  <a href="https://github.com/susam/cfrs#readme">github.com/susam/cfrs</a>.
  Visit <a href="../../../cfrs.html">cfrs.html</a> to play with CFRS[]
  now and draw some nice pictures and animation.  If you end up
  developing any cool demos, do share them by creating a
  <a href="https://github.com/susam/cfrs/issues">new post here</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/cfrs/0.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Guess My RGB 0.1.0</title>
<link>https://susam.net/code/news/myrgb/0.1.0.html</link>
<guid isPermaLink="false">ndivu</guid>
<pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Guess My RGB 0.1.0 is the first stable release
  of <a href="../../../myrgb.html">this tiny colour guessing game</a>.
  The game is available as a single HTML page that runs in a web
  browser.  It presents a page with a randomly chosen background
  colour.  The player then needs to guess the three RGB hexademical
  digits that make the given background colour.  See
  <a href="https://github.com/susam/myrgb">github.com/susam/myrgb</a>
  for more information about this game.
</p>
<p>
  I wrote this game last Saturday afternoon and shared it on my
  website at <a href="../../../myrgb.html">myrgb.html</a> later that
  night.  I had no intention of sharing this with a wide audience yet
  because I had not had sufficient time testing it well.  But somehow
  a Hacker News (HN) user named <em>talonx</em> discovered this game
  on Sunday morning and shared it on HN in this post:
  <a href="https://news.ycombinator.com/item?id=39882018">news.ycombinator.com/item?id=39882018</a>.
</p>
<p>
  Since I had not shared this game with anyone anywhere yet, I was
  quite surprised to wake up Sunday morning and find my game trending
  at the top of HN.  I believe this is where maintaining an RSS feed
  on my website might have helped.  Every new page that I publish on
  this website also appears as an entry in the RSS feed for this
  website.  This feed can be found
  here: <a href="../../../feed.xml">feed.xml</a>.  I have a couple of
  hundred subscribers to this feed.  It is very likely that the HN
  user who shared this game on HN found it through this feed.
</p>
<p>
  Ever since this game was shared on HN, my website has received a
  large number of hits.  In the last three days (excluding today),
  this game has received a total of 166102 hits.  The actual numbers
  for each day look like this:
</p>
<table class="grid center textcenter">
  <tr>
    <th>Date</th>
    <th>Hits</th>
  </tr>
  <tr>
    <td>31 Mar 2024</td>
    <td>95467</td>
  </tr>
  <tr>
    <td>01 Mar 2024</td>
    <td>48330</td>
  </tr>
  <tr>
    <td>02 Mar 2024</td>
    <td>22305</td>
  </tr>
</table>
<p>
  To all visitors of this website who played this game and shared this
  game with others, thank you!  Crafting tiny software tools like this
  is a creative outlet for me.  To know that there are others out
  there who enjoyed this game brings me joy!
</p>
<p>
  To play this game, go to <a href="../../../myrgb.html">myrgb.html</a>
  now and guess some colours!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/myrgb/0.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Guess My RGB</title>
<link>https://susam.net/myrgb.html</link>
<guid isPermaLink="false">uiorn</guid>
<pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  A tiny, web-based, RGB colour guessing game.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/myrgb.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/game.html">#game</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.3.0</title>
<link>https://susam.net/code/news/fxyt/0.3.0.html</link>
<guid isPermaLink="false">snbrx</guid>
<pubDate>Fri, 29 Mar 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.3.0 is a minor release of FXYT, a tiny, esoteric,
  stack-based, postfix, canvas colouring language with only 36 simple
  commands.  This release comes with minor bug fixes pertaining to
  initialising the input and output from code embedded in
  distributable links.  No change in the language definition or the
  language implementation has been made in this release.
</p>
<p>
  Visit <a href="../../../fxyt.html">fxyt.html</a> to play with FXYT.
  See <a href="https://github.com/susam/fxyt#readme">README</a> for
  more details.  Also, see
  <a href="https://susam.github.io/fxyt/demo.html">this demo page</a>
  for some nice demos developed by the tiny community around FXYT.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Search User Comment on Jira</title>
<link>https://susam.net/search-user-comment-on-jira.html</link>
<guid isPermaLink="false">xrnzg</guid>
<pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I have been using Jira for a very long time now.  I first came
  across it while contributing to Apache projects in 2006.  I find the
  search features of Jira to be remarkably clumsy and inadequate.
  Nevertheless, very recently I learnt to solve a common problem of
  mine.  Let us say, I know a user named <code>jdoe</code> has
  commented about a specific topic in some Jira ticket.  How do I find
  that ticket?  Here is the search filter for it:
</p>
<pre><code>issueFunction in commented("by jdoe") and comment ~ "hello"</code></pre>
<p>
  The above example would search all comments by
  user <code>jdoe</code> that contains the
  string <code>"hello"</code>.  However one limitation of this
  solution is that the <code>issueFunction</code> field is provided by
  ScriptRunner for Jira, so you need this app to be available on your
  Jira for this solution to work.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/search-user-comment-on-jira.html">Read on website</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Quicksort with Jenkins for Fun and No Profit</title>
<link>https://susam.net/jenkins-quicksort.html</link>
<guid isPermaLink="false">orprj</guid>
<pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I first encountered Jenkins in 2007 while contributing to the Apache
  Nutch project.  It was called Hudson back then.  The nightly builds
  for the project ran on Hudson at that time.  I remember sifting
  through my emails and reviewing build result notifications to keep
  an eye on the patches that got merged into the trunk everyday.  Yes,
  patches and trunk!  We were still using SVN back then.
</p>
<p>
  Hudson was renamed to Jenkins in 2011.  Since version 2.0 (released
  on 20 Apr 2016), Jenkins supports pipeline scripts written in Groovy
  as a first-class entity.  A pipeline script effectively defines the
  build job.  It can define build properties, build stages, build
  steps, etc.  It can even invoke other build jobs, including itself.
</p>
<p>
  Wait a minute!  If a pipeline can invoke itself, can we, perhaps,
  solve a recursive problem with it?  Absolutely!  This is precisely
  what we are going to do in this post.  We are going to implement
  quicksort as a Jenkins pipeline for fun and not a whit of profit!
</p>
<h2 id="run-jenkins">Run Jenkins<a href="#run-jenkins"></a></h2>
<p>
  Before we get started, I need to tell you how to set up Jenkins just
  enough to try the experiments presented later in this post on your
  local system.  This could be useful if you have never used Jenkins
  before or if you do not have a Jenkins instance available with you
  right now.  If you are already well-versed in Jenkins and have an
  instance at your disposal, feel free to skip ahead directly to
  the <a href="#quicksort">Quicksort</a> section.
</p>
<p>
  The steps below assume a Debian GNU/Linux system.  However, it
  should be possible to do this on any operating system as long as you
  can run Docker containers.  Since software evolves over time, let me
  note down the versions of software tools I am using while writing
  this post.  Here they are:
</p>
<ul>
  <li>Debian GNU/Linux 12.4 (bookworm)</li>
  <li>Docker version 20.10.24+dfsg1, build 297e128</li>
  <li>Docker image tagged jenkins/jenkins:2.426.3-lts-jdk17</li>
  <li>Jenkins 2.426.3</li>
</ul>
<p>
  We will perform only quick-and-dirty experiments in this post, so we
  do not need a production-grade Jenkins instance.  We will run
  Jenkins temporarily in a container.  The following steps show how to
  do this and how to configure Jenkins for the upcoming experiments:
</p>
<ol>
  <li>
    <p>
      Install Docker if it is not already present on the system.  For
      example, on a Debian system, the following command installs
      Docker:
    </p>
    <pre><code>sudo apt-get install docker.io</code></pre>
  </li>
  <li>
    <p>
      Now run the Jenkins container with this command:
    </p>
    <pre><code>sudo docker run --rm -p 8080:8080 jenkins/jenkins:lts</code></pre>
  </li>
  <li>
    <p>
      When the container starts, it prints a password towards the
      bottom of the logs.  Copy the password.
    </p>
  </li>
  <li>
    <p>
      Visit <a href="http://localhost:8080/">http://localhost:8080/</a>
      in a web browser.  When the <em>Unlock Jenkins</em> page
      appears, paste the password and click <em>Continue</em>.
    </p>
  </li>
  <li>
    <p>
      On the <em>Customize Jenkins</em> page, click <em>Install
      suggested plugins</em>.  Alternatively, to avoid installing
      unnecessary plugins, click <em>Select plugins to install</em>,
      deselect everything except <em>Pipeline</em> and
      click <em>Install</em>.  We need the pipeline plugin to perform
      rest of the experiment laid out in this post.
    </p>
  </li>
  <!--
    With suggested plugins:
    Completed installation of 84 plugins in 1 min 52 sec
         
    With only pipeline plugin:
    Completed installation of 50 plugins in 44 sec
  -->
  <li>
    <p>
      On the <em>Create First Admin User</em> page, enter the details
      to create a new user.
    </p>
  </li>
  <li>
    <p>
      On the <em>Instance Configuration</em> page, click <em>Save and
      Finish</em>.
    </p>
  </li>
  <li>
    <p>
      The <em>Jenkins is ready!</em> page appears.  Click <em>Start
      using Jenkins</em>.
    </p>
  </li>
  <li>
    <p>
      Go to <em>Build Executor Status</em> &gt; <em>Built-In Node</em>
      &gt; <em>Configure</em> and change <em>Number of executors</em>
      from the default value of <code>2</code> to <code>10</code>.
      Click <em>Save</em>.
    </p>
  </li>
</ol>
<h2 id="hello-world">Hello World<a href="#hello-world"></a></h2>
<p>
  The following steps show how to run your first Jenkins pipeline:
</p>
<ol>
  <li>
    <p>
      Go to <em>Dashboard</em> &gt; <em>New Item</em>.  Enter an item
      name, say, <code>hello</code>, select <em>Pipeline</em> and
      click <em>OK</em>.
    </p>
  </li>
  <li>
    <p>
      On the next page, scroll down to the <em>Pipeline</em> section
      at the bottom and paste the following pipeline script and
      click <em>Save</em>.
    </p>
<pre>
<code>node {
    echo "hello, world"
}</code>
</pre>
  </li>
  <li>
    <p>
      Now click <em>Build Now</em>.  A new build number appears at the
      bottom half of the left sidebar.  Click on the build number,
      then click <em>Console Output</em> to see the output of the
      pipeline.  The <code>hello, world</code> message should be
      present in the output.
    </p>
  </li>
</ol>
<p>
  To edit the pipeline script anytime, go to <em>Dashboard</em>, click
  on the pipeline, then go to <em>Configure</em>, scroll down to
  the <em>Pipeline</em> section, edit the script and
  click <em>Save</em>.
</p>
<p>
  In real world software development, Jenkins is typically configured
  to automatically pull some source code from a project repository
  maintained under a version control system and then build it using
  the pipeline script found in the file named <code>Jenkinsfile</code>
  present at the top-level directory of the project.  But since we
  only intend to perform fun experiments in this post, we will just
  paste our pipeline script directly into the pipeline configuration
  page on Jenkins as explained above in order to keep things simple.
  Jenkins also supports another way of writing pipelines using a
  declarative style.  They are known as <em>declarative
  pipelines</em>.  In this post, however, we will write
  only <em>scripted pipelines</em> so that we can write simple Groovy
  code for our experiments without having to bother about too many
  pipeline-specific notions like stages, steps, etc.
</p>
<h2 id="factorial">Factorial<a href="#factorial"></a></h2>
<p>
  Now let us write a simple pipeline that calculates the factorial of
  a nonnegative integer.  This will help us to demonstrate how a build
  job can recursively call itself.  We are not going to write
  something like the following:
</p>
<pre>
<code>properties([
    parameters([
        string(
            name: 'INPUT',
            defaultValue: '0',
            description: 'A nonnegative integer'
        )
    ])
])

def factorial(n) {
    return n == 0 ? 1 : n * factorial(n - 1)
}

node {
    echo "${factorial(params.INPUT as int)}"
}</code>
</pre>
<p>
  The code above is an example of a function that calls itself
  recursively.  However, we want the <em>build job</em> (not the
  function) to call itself recursively.  So we write the following
  instead:
</p>
<pre>
<code>properties([
    parameters([
        string(
            name: 'INPUT',
            defaultValue: '0',
            description: 'A nonnegative integer'
        )
    ])
])

def MAX_INPUT = 10

node {
    echo "INPUT: ${params.INPUT}"
    currentBuild.description = "${params.INPUT} -&gt; ..."

    def n = params.INPUT as int
    if (n &gt; MAX_INPUT) {
        echo "ERROR: Input must not be greater than ${MAX_INPUT}"
    }

    env.RESULT = n == 0 ? 1 : n * (
        build(
            job: env.JOB_NAME,
            parameters: [string(name: 'INPUT', value: "${n - 1}")]
        ).getBuildVariables().RESULT as int
    )

    echo "RESULT: ${env.RESULT}"
    currentBuild.description = "${params.INPUT} -&gt; ${env.RESULT}"
}</code>
</pre>
<p>
  This code example demonstrates a few things worth noting:
</p>
<ul>
  <li>
    <p>
      The <code>properties</code> step at the top sets up a build
      parameter named <code>INPUT</code> with a default value
      of <code>0</code>.  This will allow us to enter an input number
      while building the job.
    </p>
  </li>
  <li>
    <p>
      Within the <code>node</code> block, we first check that the
      input is not too large.  If the input number is larger than 10,
      the pipeline refuses to run.  This is just a tiny safety check
      to prevent the overzealous among you from inadvertently causing
      havoc in your Jenkins instance by triggering a job with a large
      input and depleting all the executors with an excess of
      recursive jobs.
    </p>
  </li>
  <li>
    <p>
      Then we perform the classic recursion to compute the factorial
      of a given nonnegative integer.  The only thing that may appear
      unusual here is that instead of just writing <code>factorial(n -
      1)</code>, we make a <code>build()</code> call to invoke the job
      itself recursively and pass <code>n - 1</code> as a build
      parameter input to that job.
    </p>
  </li>
  <li>
    <p>
      Each recursively called job writes its output to an environment
      variable named <code>RESULT</code> and exits.  Then the
      higher-level job invocation looks up the environment variables
      in the build result of the job that just finished with
      the <code>getBuildVariables()</code> call, reads the
      <code>RESULT</code> variable and multiplies the value found
      there by <code>n</code>.
    </p>
  </li>
  <li>
    <p>
      The lines that update <code>currentBuild.description</code> are
      there only to show handy descriptions of what is going on (the
      input and the result) in the build history that appears on the
      left sidebar.  A screenshot presented later illustrates this.
    </p>
  </li>
</ul>
<p>
  To run the above pipeline, perform the following steps on the
  Jenkins instance:
</p>
<ol>
  <li>
    <p>
      Go to <em>Dashboard</em> &gt; <em>New Item</em>.  Enter an item
      name, say, <code>factorial</code>, select <em>Pipeline</em> and
      click <em>OK</em>.
    </p>
  </li>
  <li>
    <p>
      On the next page, scroll down to the <em>Pipeline</em> section
      at the bottom and paste the pipeline script presented above.
    </p>
  </li>
  <li>
    <p>
      Click <em>Build Now</em>.  The first build sets
      the <code>INPUT</code> build parameter to <code>0</code> (the
      default value specified in the pipeline script).  The
      result <code>1</code> shoud appear in the <em>Console
      Output</em> page.
    </p>
  </li>
  <li>
    After the first build completes, the <em>Build Now</em> option on
    the left sidebar gets replaced with the <em>Build with
    Parameters</em> option.  Click it, then enter a number,
    say, <code>5</code> and click <em>Build</em>.  Now we should see
    Jenkins recursively triggering a total of 6 build jobs and each
    build job printing the factorial of the integer it receives as
    input.  The top-level build job prints <code>120</code> as its
    result.
  </li>
</ol>
<p>
  Here is a screenshot that shows what the build history looks like on
  the left sidebar:
</p>
<figure class="soft lightshadow">
  <img src="files/blog/jenkins-factorial.png" alt="Screenshot of Jenkins build history that shows the builds that are triggered while computing the factorial of 0 and 5">
  <figcaption>
    The factorial of 0 computed in build 1 and the factorial of 5
    computed in build 2
  </figcaption>
</figure>
<p>
  In the screenshot above, build number 2 is the build we triggered to
  compute the factorial of 5.  This build resulted in recursively
  triggering five more builds which we see as build numbers 3 to 7.
  The little input and output numbers displayed below each build
  number comes from the <code>currentBuild.description</code> value we
  set in the pipeline script.
</p>
<p>
  If we click on build number 7, we find this on the build page:
</p>
<figure class="soft lightshadow">
  <img src="files/blog/jenkins-recursion.png" alt="Screenshot of Jenkins build page that shows build jobs triggered recursively">
  <figcaption>
    Build #7 page
  </figcaption>
</figure>
<p>
  This was a simple pipeline that demonstrates how a build job can
  trigger itself, pass input to the triggered build and retrieve its
  output.  We did not do much error checking or error handling here.
  We have kept the code as simple as reasonably possible.  The focus
  here was only on demonstrating the recursion.
</p>
<h2 id="quicksort">Quicksort<a href="#quicksort"></a></h2>
<p>
  Now we will implement quicksort in Jenkins.  Sorting numbers using
  the standard library is quite straightforward in Groovy.  Here is an
  example in the form of Jenkins pipeline:
</p>
<pre>
<code>properties([
    parameters([
        string(
            name: 'INPUT',
            defaultValue: '4, 3, 5, 4, 5, 8, 7, 9, 1',
            description: 'Comma-separated list of integers'
        )
    ])
])

node {
    def numbers = params.INPUT.split('\\s*,\\s*').collect {it as int}
    echo "${numbers.sort()}"
}</code>
</pre>
<p>
  It can't get simpler than this.  However, we are not here to
  demonstrate the standard library methods.  We are here to
  demonstrate recursion in Jenkins!  We write the following pipeline
  script instead:
</p>
<pre>
<code>properties([
    parameters([
        string(
            name: 'INPUT',
            defaultValue: '4, 3, 5, 4, 5, 8, 7, 9, 1',
            description: 'Comma-separated list of integers'
        )
    ])
])

def MAX_INPUT_SIZE = 10

node {
    echo "INPUT: ${params.INPUT}"
    currentBuild.description = "${params.INPUT} -&gt; ..."

    def numbers = params.INPUT.split('\\s*,\\s*').collect {it as int}
    if (numbers.size() &gt; MAX_INPUT_SIZE) {
        echo "ERROR: Input must not contain more than ${MAX_INPUT_SIZE} integers"
    }

    def pivot = numbers[0]
    def others = numbers.drop(1)
    def lo = others.findAll { it <= pivot }
    def hi = others.findAll { it &gt; pivot }
    def builds = [:]
    def results = [lo: [], hi: []]

    if (lo) {
        builds.lo = {
            results.lo = build(
                job: env.JOB_NAME,
                parameters: [string(name: 'INPUT', value: lo.join(', '))
            ]).getBuildVariables().RESULT.split('\\s*,\\s*') as List
        }
    }
    if (hi) {
        builds.hi = {
            results.hi = build(
                job: env.JOB_NAME,
                parameters: [string(name: 'INPUT', value: hi.join(', '))
            ]).getBuildVariables().RESULT.split('\\s*,\\s*') as List
        }
    }
    parallel builds

    env.RESULT = (results.lo + [pivot] + results.hi).join(', ')
    echo "RESULT: ${env.RESULT}"
    currentBuild.description = "${params.INPUT} -&gt; ${env.RESULT}"
}</code>
</pre>
<p>
  Some of the code is similar to the one in the previous section.  For
  example, the <code>properties</code> step to set up the build
  parameter, the <code>build()</code> call, setting the result
  in <code>env.RESULT</code>, etc. should look familiar.  Let us pay
  attention to what is different.
</p>
<p>
  Firstly, we have two <code>build()</code> calls instead of just one.
  In fact, we have two closures with one <code>build()</code> call in
  each closure.  Then we use the <code>parallel</code> step to execute
  both these closures in parallel.  In each build job, we pick the
  first integer in the input as the pivot, then compare all the
  remaining integers with this pivot and separate them
  into <code>lo</code> (low numbers) and <code>hi</code> (high
  numbers).  Then we call the build job recursively to repeat this
  algorithm twice: once on the low numbers and again on the high
  numbers.
</p>
<figure class="soft lightshadow">
  <img src="files/blog/jenkins-quicksort.png" alt="Screenshot of Jenkins build history that shows the builds that are triggered while performing quicksort on a list of integers">
  <figcaption>
    Quicksort with recursive Jenkins builds
  </figcaption>
</figure>
<p>
  Unlike most textbook implementations of quicksort which lets the
  recursion run all the way to the base case in which an empty list is
  received and the recursive call returns without doing anything, the
  above implementation is slightly optimised to avoid making recursive
  builds when we find that the list of low numbers or the list of high
  numbers is empty.  We lose a little bit of simplicity by doing this
  but it helps in avoiding wasteful build jobs that just receive an
  empty list of numbers as input and exit without doing anything
  meaningful.  Further optimisation could involve avoiding recursion
  for small input sizes, such as 1 or 2, but that is not done here for
  the sake of simplicity and brevity.
</p>
<p>
  I hope this was fun!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/jenkins-quicksort.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Elisp in Replacement String</title>
<link>https://susam.net/elisp-in-replacement-string.html</link>
<guid isPermaLink="false">rmcte</guid>
<pubDate>Tue, 09 Jan 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  It is likely well known among Emacs users that the following key
  sequence starts a search-and-replace operation to match strings with
  the regular expression pattern <code>f..</code> and replace the
  matches with <code>bar</code>.
</p>
<pre><code>C-M-% f.. RET bar RET</code></pre>
<p>
  Similarly, the following key sequence looks for strings that match a
  pattern that has two capturing groups and replaces each match with a
  new string that swaps the substrings matched by the capturing
  groups:
</p>
<pre><code>C-M-% \(f..\)-\(b..\) RET \2-\1</code></pre>
<p>
  For example, this operation matches a string
  like <code>foo-bar</code> and replaces it with <code>bar-foo</code>.
  A string like <code>postfix-boxing</code> becomes
  <code>postbox-fixing</code>.  The backreference <code>\1</code>
  refers to the string matched by the first capturing
  group <code>\(f..\)</code> and similarly <code>\2</code> refers to
  the string matched by the second capturing
  group <code>\(b..\)</code>.  The replacement string then swaps the
  positions of the matches in both capturing groups.
</p>
<p>
  What may be less commonly known is the ability to utilise Elisp
  expressions to dynamically compute portions of the replacement
  strings.  To employ this feature, simply write <code>\,</code>
  (i.e. backslash and comma) followed by the Elisp expression in the
  replacement string.  Consider the following key sequence:
</p>
<pre><code>C-M-% f.. RET \,(upcase \&amp;) RET</code></pre>
<p>
  The backreference <code>\&amp;</code> refers to the whole match.  We
  pass it as the argument to the Elisp function <code>upcase</code>.
  This function converts its argument to upper-case.  This example
  searches for strings that match the pattern <code>f..</code> and
  replaces each match with the upper-case form of the match.  A string
  like <code>foo-bar</code> is replaced with <code>FOO-bar</code>.
</p>
<p>
  Here is another slightly more sophisticated example:
</p>
<pre><code>C-M-% host:\([0-9]+\) RET host:\,(+ 1000 \#1)</code></pre>
<p>
  The backreference <code>\#1</code> refers to the string matched by
  the first capturing group <code>\([0-9]+\)</code> as
  a <em>number</em>.  The Elisp expression in the replacement pattern
  simply adds <code>1000</code> to that number and replaces the
  matched string with the result.  A string like <code>host:80</code>
  becomes <code>host:1080</code>.  Another string like
  <code>localhost:8000</code> becomes <code>localhost:9000</code>.
</p>
<p>
  Finally, here is an example from the real world of text editing
  where this feature was useful to me recently while solving a text
  editing problem.  Consider the following text buffer with a list of
  numbered items:
</p>
<pre>
<code>### 1) apple
### 2) ball
### 3) bat
### 4) cat
### 5) dog
### 6) elephant
### 7) fish
### 8) grapes
### 9) hen
### 10) ink
### 11) jug
### 12) kite
### 13) lion</code>
</pre>
<p>
  While this is a toy example presented here for the sake of
  simplicity and clarity, this example is based on an actual text
  editing problem I encountered recently.  In my actual problem
  though, there were more words on each line and there were some
  arbitrary paragraphs of text between every consecutive pair of
  items.  Further, the list was long with 50 or so items.  The problem
  now was to remove item number 3 and renumber all the lines below it.
</p>
<p>
  It is quite straightforward to remove item 3.  Just move the point
  (cursor) to that line and type <code>C-S-&lt;backspace&gt;</code>
  or <code>C-a C-k</code> to kill that line.  We get this:
</p>
<pre>
<code>### 1) apple
### 2) ball
### 4) cat
### 5) dog
### 6) elephant
### 7) fish
### 8) grapes
### 9) hen
### 10) ink
### 11) jug
### 12) kite
### 13) lion</code>
</pre>
<p>
  How do we now renumber all the items starting from <code>4)
  cat</code>?  This is where the support for Elisp expressions in
  replacement strings turns out to be useful.  First move the point to
  the beginning of that line.  Then type the following key sequence:
</p>
<pre><code>C-M-% ^### \([0-9]+\) RET ### \,(1- \#1) RET</code></pre>
<p>
  The search pattern captures the item number on each line in a
  capturing group.  The replacement string contains an Elisp
  expression that subtracts one from this number.  Thus a string
  like <code>### 4</code> gets replaced with <code>### 3</code>.
  After completing the replacement, the buffer looks like this:
</p>
<pre>
<code>### 1) apple
### 2) ball
### 3) cat
### 4) dog
### 5) elephant
### 6) fish
### 7) grapes
### 8) hen
### 9) ink
### 10) jug
### 11) kite
### 12) lion</code>
</pre>
<p>
  I hope this was useful.  Do you have an interesting
  Elisp-in-replacement-string story?  Please share it in the comments.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/elisp-in-replacement-string.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/lisp.html">#lisp</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>From Fill Prefix to TRAMP</title>
<link>https://susam.net/from-fill-prefix-to-tramp.html</link>
<guid isPermaLink="false">zxgyx</guid>
<pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Our <a href="cc/mastering-emacs/">tiny book club</a> that
  used to meet during the weekends and holidays and discuss the
  book <a href="https://www.masteringemacs.org/">Mastering Emacs</a>,
  2022 edition concluded today.  In our
  <a href="cc/mastering-emacs/log.html#72">final meeting</a> today,
  we first discussed how to work across multiple directories in the
  same Dired buffer.  Then we did several demos of the various shells
  and terminal modes available in Emacs out of the box.  That
  completed our discussion on Chapter 6.  Then we moved on to Chapter
  7 (the final chapter) that first reiterates the importance of using
  the describe-system to ask Emacs questions about itself and then
  offers some recommendations about third-party packages and online
  Emacs communities.  Completing this chapter brought our book club
  discussions to an end.
</p>
<p>
  A big thanks to Mickey Petersen for writing the book and also very
  generously granting me the permission to share his book on screen
  while discussing it.
</p>
<p>
  This book club began on 16 Dec 2022 when we had our first meeting
  over Jitsi.  About 3&half; months after beginning these meetings, I
  posted an update about this book club in another blog post
  titled <a href="from-lunar-phases-to-yank-pop.html">From Lunar
  Phases to Yank-Pop</a>.  If you have not read that post yet, I
  suggest you read it before returning to this post.  Especially if
  you have recently begun learning Emacs, I think you will find that
  post useful.
</p>
<p>
  Back then, when I posted that last update, we had spent about 26
  hours together across 36 meetings and we were reading Chapter 5 of
  the book.  It took another 36 meetings to complete that chapter and
  the remaining two chapters.  After a total of 72 meetings, we
  completed discussing Chapter 7 of the book today which concluded
  this series of book club meetings.  In total, we have spent a little
  over 52 hours together to discuss this book, trying out every
  concept and command introduced in the book and sharing our insights
  about the material with each other.
</p>
<p>
  In this post, I will share some highlights from our meetings since
  the <a href="from-lunar-phases-to-yank-pop.html">last update</a>.
  These highlights share some concepts and commands we learnt that
  most members of our book club were not familiar with earlier but
  were found to be very useful after having learnt them.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#fill-prefix">Fill Prefix</a></li>
  <li><a href="#elisp-expressions-in-replacement-strings">Elisp Expressions in Replacement Strings</a></li>
  <li><a href="#keep-lines-and-flush-lines">Keep Lines and Flush Lines</a></li>
  <li><a href="#keyboard-macros">Keyboard Macros</a></li>
  <li><a href="#dabbrev">DAbbrev</a></li>
  <li><a href="#tab-vs-m-i">TAB vs M-i</a></li>
  <li><a href="#project-management">Project Management</a></li>
  <li><a href="#eshell-with-tramp">Eshell with TRAMP</a></li>
  <li><a href="#thanks">Thanks</a></li>
</ul>
<h2 id="fill-prefix">Fill Prefix<a href="#fill-prefix"></a></h2>
<p>
  Most of us in the book discussion group knew about filling
  paragraphs with <code>M-q</code>.  Consider the following badly
  formatted paragraphs with very long and very short lines:
</p>
<pre>
<code>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
incididunt ut labore et dolore
magna aliqua.  Arcu dui vivamus arcu felis bibendum ut tristique et egestas.
Bibendum arcu vitae
elementum curabitur vitae.</code>
</pre>
<p>
  Now put the point (cursor) anywhere on the paragraph and
  type <code>M-q</code>.  The paragraph gets neatly formatted to
  something like this:
</p>
<pre>
<code>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
eiusmod tempor incididunt ut labore et dolore magna aliqua.  Arcu dui
vivamus arcu felis bibendum ut tristique et egestas.  Bibendum arcu
vitae elementum curabitur vitae.</code>
</pre>
<p>
  The key sequence <code>M-q</code> invokes
  the <code>fill-paragraph</code> command that reformats the paragraph
  such that each line is as long as possible without exceeding the
  fill width (70 columns by default).  Most of us already used this
  command very often while writing and editing text.  However what
  some of us did not know was that there is such a thing as fill
  prefix which is taken into account while filling paragraphs.  To
  illustrate this concept, we will first consider this badly formatted
  paragraph:
</p>
<pre>
<code>:::: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
:::: incididunt ut labore et dolore
:::: magna aliqua.  Arcu dui vivamus arcu felis bibendum ut tristique et egestas.
:::: Bibendum arcu vitae
:::: elementum curabitur vitae.</code>
</pre>
<p>
  Each line has a prefix consisting of four colons and a space.  After
  we reformat this paragraph with <code>M-q</code>, we get something
  like this:
</p>
<pre>
<code>:::: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
eiusmod tempor :::: incididunt ut labore et dolore :::: magna aliqua.
Arcu dui vivamus arcu felis bibendum ut tristique et egestas.  ::::
Bibendum arcu vitae :::: elementum curabitur vitae.</code>
</pre>
<p>
  This is not what we want.  We want the paragraph to be formatted
  such that each line does not exceed 70 characters in length (which
  we have, in fact, accomplished above) and each line contains the
  four colons and a space as the prefix (this is broken above).  Can
  we do this?  Yes, by setting the fill prefix.  Type <code>C-/</code>
  or <code>C-x u</code> to undo the bad formatting we did just now and
  let us try again.  This time move the point over to
  the <code>L</code> of <code>Lorem</code> and type <code>C-x .</code>
  to set the fill prefix to the current line up to the point.  A
  confirmation is printed in the echo area that <code>":::: "</code>
  has been set as the fill prefix.  Then type <code>M-q</code> and the
  paragraph is now neatly formatted to look like this:
</p>
<pre>
<code>:::: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
:::: eiusmod tempor incididunt ut labore et dolore magna aliqua.  Arcu
:::: dui vivamus arcu felis bibendum ut tristique et egestas.
:::: Bibendum arcu vitae elementum curabitur vitae.</code>
</pre>
<p>
  Note how every line is as long as possible without exceeding 70
  characters in length and each line has the fill prefix.  Emacs took
  care to remove the fill prefix from each line, subtract the length
  of the fill prefix from the maximum character budget it has for each
  line, reformat the lines and then reinsert the fill prefix on each
  line of the result.
</p>
<p>
  To turn off the fill prefix, simply set it to an empty prefix by
  typing <code>C-x .</code> at the beginning of the line.
  Thus <code>C-a C-x .</code> becomes an idiom for turning off the
  fill prefix.
</p>
<h2 id="elisp-expressions-in-replacement-strings">Elisp Expressions in Replacement Strings<a href="#elisp-expressions-in-replacement-strings"></a></h2>
<p>
  It was no surprise to anyone in the book discussion group that the
  key sequence <code>C-M-% f.. RET bar RET</code> starts a
  search-and-replace operation for strings that match the regular
  expression pattern <code>f..</code> to be replaced with the
  text <code>bar</code>.
</p>
<p>
  The concept of backreferences was also known to most.  For
  example, <code>C-M-% \(f..\)-\(b..\) RET \2-\1 RET</code> searches
  for strings matching the given regular expression pattern and
  replaces it with a new string that swaps the positions of the first
  capturing group and the second capturing group.  The
  backreference <code>\1</code> refers to the string matched by the
  first capturing group <code>\(f..\)</code> and
  similarly <code>\2</code> refers to the string matched by the second
  capturing group <code>\(b..\)</code>.  In this example, a string
  like <code>foo-bar</code> is replaced with <code>bar-foo</code>
  or <code>playful-banter</code> with <code>playban-fulter</code>.
</p>
<p>
  However what came as a surprise to some of us was that we could also
  use Elisp expressions in the replacement strings.  The syntax to do
  so is to write <code>\,</code> followed by the Elisp expression in
  the replacement string.  For example, consider the key
  sequence <code>C-M-% f.. RET \,(upcase \&amp;) RET</code>.  Note how
  we are using the backreference <code>\&amp;</code> that refers to
  the whole match as the argument to the Elisp function
  <code>upcase</code> that converts its argument to upper-case.  This
  example searches for strings that match the pattern <code>f..</code>
  and replaces them with the upper-case form of the match.  A string
  like <code>foo-bar</code> is replaced with <code>FOO-bar</code>.
</p>
<p>
  Here is another slightly more sophisticated example: <code>C-M-%
  port-\([0-9]+\) RET port-\,(+ 1000 \#1)</code>.  The
  backreference <code>\#1</code> refers to the string matched by the
  first capturing group <code>\([0-9]+\)</code> as <em>number</em>.
  The Elisp expression in the replacement pattern simply adds 1000 to
  that number and replaces the matched string with the result.  A
  string like <code>port-80</code> becomes <code>port-1080</code>.
</p>
<h2 id="keep-lines-and-flush-lines">Keep Lines and Flush Lines<a href="#keep-lines-and-flush-lines"></a></h2>
<p>
  A nifty set of commands that our group members enjoyed learning were
  the commands for keeping and flushing lines.  These commands can be
  incredibly useful while filtering large log files.  Here is a brief
  illustration of a couple of these commands:
</p>
<ul>
  <li>
    <p>
      <code>M-x keep-lines RET f.. RET</code>: Keep lines in region
      that match the regular expression <code>f..</code> and delete
      the rest.  If no region is active, then keep matching lines
      between the point and end of buffer; delete the rest.  The
      deleted lines are not copied to kill ring.
    </p>
  </li>
  <li>
    <p>
      <code>M-x flush-lines RET f.. RET</code>: Delete lines in the
      region that match the regular expression <code>f..</code>.  If
      no region is active, then delete matching lines between the
      point and end of buffer.  The deleted lines are not copied to
      kill ring.
    </p>
  </li>
</ul>
<p>
  Note how each point above mentions that the deleted lines are not
  copied to the kill ring.  This can be an inconvenience if we want to
  quickly yank the deleted lines to another buffer.  Emacs 28.1
  introduces a couple of more commands that remedy this situation to
  an extent.  Here they are:
</p>
<ul>
  <li>
    <p>
      <code>M-x copy-matching-lines RET f.. RET</code>: Copy lines in
      the region that match the regular expression <code>f..</code>.
      If no region is active, then copy matching lines between the
      point and end of buffer.
    </p>
  </li>
  <li>
    <p>
      <code>M-x kill-matching-lines RET f.. RET</code>: Kill lines in
      region that match the regular expression <code>f..</code> to the
      kill ring.  If no region is active, then kill matching lines
      between the point and end of buffer.
    </p>
  </li>
</ul>
<h2 id="keyboard-macros">Keyboard Macros<a href="#keyboard-macros"></a></h2>
<p>
  Most experienced Emacs users in our group were aware of keyboard
  macros.  However, some people did learn this wonderful automation
  feature for the first time in our meetings, so I thought this
  deserves its own section in this post.
</p>
<p>
  Keyboard macros is a large topic on its own which is best learnt
  from
  section <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html">Keyboard
  Macros</a> of the manual.  On Emacs, type <code>M-: (info "(emacs)
  Keyboard Macros") RET</code> to open this section using the Info
  documentation browser.  In this blog post though, we will very
  briefly talk about keyboard macros that should be enough to get
  someone very new to it started with them quickly.
</p>
<p>
  Say, we have a buffer that looks like this:
</p>
<pre>
<code>foo:bar:baz
bar:baz:qux
quux:corge:grault
garply:waldo:fred</code>
</pre>
<p>
  Now suppose we want to swap the first two fields separated by colon
  in each line.  Of course, we could do it using regular expressions,
  for example, with the key sequence
  <code>C-M-% ^\(.+?:\)\(.+?:\) RET \2\1 RET</code>.  But we can also
  solve this problem in a "dumb" way by simply performing the edits
  necessary to do the swap on one line and then asking Emacs to repeat
  what we did on the other lines.  Here are the steps:
</p>
<ol>
  <li>
    <p>
      First move the point to somewhere on the first line.
    </p>
  </li>
  <li>
    <p>
      Then type <code>C-x (</code> to start recording a keyboard
      macro.
    </p>
  </li>
  <li>
    <p>
      Then type <code>C-a M-d C-d M-f : C-y C-n</code> to swap the
      first and second fields on the first line and move the point to
      the next line.  This is just one way to achieve the swap.  You
      may use any editing commands you are comfortable with to make
      the swap happen and move the point to the next line.
    </p>
  </li>
  <li>
    Now type <code>C-x )</code> to stop macro recording.
  </li>
  <li>
    <p>
      Now type <code>C-x e</code> to replay the macro in the second
      line.  As soon as we type this key sequence, the swap occurs in
      the second line and the cursor moves to the third line.  Keep
      repeating this key sequence to keep repeating the swap operation
      on subsequent lines.
    </p>
  </li>
</ol>
<p>
  To summarise, <code>C-x (</code> starts recording a new keyboard
  macro, <code>C-x )</code> stops recording the keyboard macro
  and <code>C-x e</code> replays the last keyboard macro.
  Alternatively, we could also use the function keys <code>F3</code>
  and <code>F4</code>.  To start recording a keyboard macro,
  type <code>F3</code>.  Type <code>F4</code> to stop recording a
  keyboard macro.  Then type <code>F4</code> again to replay the last
  macro.
</p>
<p>
  Pay close attention to step 3 above.  We start the key sequence
  with <code>C-a</code> to move the point to the first column.  This
  may feel redundant when the cursor is already at the first column.
  However in our meetings, I used to emphasise often about the
  importance of doing this.  Typing <code>C-a</code> at the beginning
  ensures that we do not carry over any assumption about where the
  cursor is on the line into the rest of the keyboard macro definition
  we are going to record.  By typing <code>C-a</code>, we ensure that
  no matter where the cursor is on the line, when we replay the macro,
  the cursor would first move to the beginning of the line.  This
  guarantee allows us to confidently define the rest of the editing
  operations necessary to perform the swap.
</p>
<p>
  Similarly, at the end we type <code>C-n</code> to move the point to
  the next line.  I used to emphasise the importance of doing this too
  in our meetings.  Moving the cursor to the next line ensures that
  the cursor is in a good place to allow repeating the keyboard macro
  again immediately.  This is why we could type <code>C-x e</code> (or
  alternatively, <code>F4</code>) over and over again to replay the
  macro on subsequent lines.  In fact, if we feel confident about the
  keyboard macro, we can repeat it several times automatically using
  the digit argument.  For example, type <code>C-3 C-x e</code> (or
  alternatively <code>C-3 F4</code>) to repeat the keyboard macro 3
  times.  We could also type <code>C-0 C-x e</code> (or
  alternatively <code>C-0 F4</code>) to repeat the keyboard macro
  until there is an error (e.g. reaching the end of the buffer).
</p>
<h2 id="dabbrev">DAbbrev<a href="#dabbrev"></a></h2>
<p>
  DAbbrev stands for <em>dynamic abbrevation</em>.  This is a pretty
  useful package that many of us learnt only from our book club
  meetings.  We discussed two simple key sequences supported by this
  package:
</p>
<ul>
  <li>
    <p>
      <code>M-/</code>: Expand the word before the point to the
      nearest preceding word for which the current word is a prefix.
      If no suitable preceding word is found, then expand the current
      word to the nearest succeeding word for which the current word
      is a prefix.
    </p>
  </li>
  <li>
    <p>
      <code>C-M-/</code>: Find all words in the buffer that has the
      current word before the cursor as the prefix and expand the
      current word to the longest common prefix of all these matching
      words.  However, if the longest common prefix of the matching
      words is same as the word before the cursor, then present them
      as suggestions for completion.  If there is exactly one matching
      word, expand the word before the cursor to that word.
    </p>
  </li>
</ul>
<p>
  Let us look at some examples.  Suppose there is a buffer with the
  following one line of text:
</p>
<pre><code>abacus apple appliance application</code></pre>
<p>
  Now if we type <code>ap</code> on the next line and
  type <code>M-/</code>, DAbbrev automatically expands the partially
  written word to <code>application</code> because that is the nearest
  word that has <code>ap</code> as the prefix.
</p>
<p>
  But if we type <code>ap</code> and type <code>C-M-/</code>, the word
  expands to <code>appl</code> since that is the longest common prefix
  among all the matching words.  If we type <code>C-M-/</code> again
  then <code>apple</code>, <code>appliance</code>
  and <code>application</code> are presented as possible completions
  in a temporary buffer named <code>*Completions*</code>.  If we
  type <code>ic</code>, so that the word before the cursor
  becomes <code>applic</code> and type <code>C-M-/</code>, it is
  expanded to <code>application</code> because that is the only
  possible completion now.
</p>
<p>
  These two commands are simpler than it sounds from the verbose
  descriptions of these commands presented in the above paragraphs.
  When we actually begin to use them, they become intuitive in no
  time.  Roughly speaking, while <code>M-/</code> expands the word
  before the point to the nearest preceding word, <code>C-M-/</code>
  considers all matching words in the file for expansion and presents
  completion options to the user when it finds multiple of them.
</p>
<h2 id="tab-vs-m-i">TAB vs M-i<a href="#tab-vs-m-i"></a></h2>
<p>
  The behaviour of Emacs when we type <code>TAB</code> can be
  surprising to beginners.  In most other mainstream editors, this key
  either inserts a tab character or it inserts enough number of spaces
  so that the cursor moves to the next tab stop.  But in
  Emacs, <code>TAB</code> most often indents the current line
  according to the syntax rules implemented by the major mode enabled
  in the buffer.
</p>
<p>
  What is a simple key on other editors happens to be a complex
  feature in Emacs.  The exact behaviour of <code>TAB</code> is
  controlled by variables
  like <code>tab-always-indent</code>, <code>indent-line-function</code>,
  etc.  Some major modes may refer to other such special variables to
  decide what <code>TAB</code> should do.  However, as a user of Emacs
  this is not something we normally have to worry about.  Most major
  modes set up all these variables appropriately, so that
  <code>TAB</code> almost always does what an experienced Emacs user
  expects, i.e. indent the current line of code correctly.
</p>
<p>
  But what if we really do want to just insert a tab or enough number
  of spaces to move the point to the next tab stop column?  That is
  done with <code>M-i</code>.  If the
  variable <code>indent-tabs-mode</code> is set to <code>t</code>,
  then <code>M-i</code> inserts a literal tab character.  If it is set
  to <code>nil</code>, then <code>M-i</code> inserts enough number of
  spaces to move the point to the next tab stop column.
</p>
<p>
  To summarise, the behaviour of <code>M-i</code> is similar to
  the <code>TAB</code> behaviour we observe in other editors.  In
  practice though, the key sequence <code>M-i</code> is rarely
  required.  Most people just type <code>TAB</code> to automatically
  indent code.  In fact, we can also select a region of code and
  type <code>TAB</code> to reindent the whole region.
</p>
<h2 id="project-management">Project Management<a href="#project-management"></a></h2>
<p>
  The project management commands that come out of the box (from the
  package named <code>project.el</code>) came as a surprise to some.
  In fact, some members of our group who never used the project
  management commands earlier happen to use them regularly now after
  learning about them in our meetings.
</p>
<p>
 When we use a project command like <code>C-x p f</code> to visit a
 file in the current project, the command automatically detects the
 top-level directory of the project by checking parent directories for
 version control system artefacts (e.g. <code>.git</code> directory)
 and presents files within that top-level directory as autocomplete
 options.
</p>
<p>
  There is a lot that can be written about the project management
  features that come out of the box in Emacs.  The following list
  introduces only the very simple ones to get someone started with
  them:
</p>
<ul>
  <li>
    <p>
      <code>C-x p f logger RET</code>: Find file with name that
      matches <code>logger</code> in the current project.  This
      searches all subdirectories recursively.  If there is only one
      matching file (say, <code>src/logger.cc</code>), that file is
      opened.  If there are multiple matching files, they are
      presented as completion options.  Running this command or, in
      fact, running any project command leads to discovering the
      current project and adding an entry for the discovered project
      to <code>~/.emacs.d/projects</code>.  This is useful for a
      command like the one presented in the next point.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p f foo TAB RET logger TAB RET</code>: When we
      type <code>C-x p f</code> while visiting a file that does not
      belong to any project, then its prompts for a project path
      first.  In this example, we type <code>foo TAB RET</code> to
      automatically expand it to a known project path such
      as <code>~/git/foo/</code> and enter it.  Then we
      type <code>logger TAB RET</code> to automatically expand it to a
      file name such as <code>src/logger.cc</code> and visit it.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p p bar TAB RET f logger TAB RET</code>: Say we are in
      project <code>~/git/foo/</code> but we want to switch to another
      previously discovered project <code>~/git/bar/</code> and find a
      file there.  To do so, we first type <code>C-x p p</code> to
      switch project.  At the project selection prompt, we
      type <code>bar TAB</code> to automatically complete the
      directory path of the known project <code>~/git/bar/</code>.
      Then another prompt is presented to choose an action from a
      number of actions.  In this case, we type <code>f</code> to find
      a file in the project we have switched to.  Finally, we
      type <code>logger TAB RET</code> to automatically expand the
      partially entered name to a path like <code>src/logger.cc</code>
      and visit it.  The key sequence <code>C-x p p</code> is very
      useful when the current file belongs to one project but we want
      to run a project command on another project.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p p ... RET ~/git/baz/ RET f logger TAB RET</code>:
      This awkward key sequence discovers a new project directory
      at <code>~/git/baz/</code> and then finds a file in it.  The key
      sequence <code>C-x p p ... RET</code> is rarely required though.
      See the notes after the end of this list to read why.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p g ^key\&gt; RET</code>: Find all matches for the
      regular expression <code>^key\&gt;</code> in the current
      project.  The results are displayed in <code>*xref*</code>
      buffer.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p s</code>: Start a shell in the current project's
      root directory.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p d</code>: Start Dired in the current project's root
      directory.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p k yes RET</code>: Kill all buffers belonging to the
      current project.
    </p>
  </li>
</ul>
<p>
  There are several more project commands but we will end the above
  list here for the sake of brevity.  Do pay attention to the second
  point that mentions that if the current file does not belong to any
  project, we are first prompted to enter the project name.  This is a
  common theme for all project commands.  Anytime we invoke a project
  command, it works on the current project.  However if there is no
  current project, then it automatically prompts us to enter a project
  name before executing the command.
</p>
<p>
  The key sequence <code>C-x p p ... RET</code> is very rarely
  required during day-to-day editing activities.  Once a project has
  been discovered (say, due to having run a project command on that
  project earlier) and added to the list of known projects
  at <code>~/.emacs.d/projects</code>, we never have to discover it
  again.  We can use the other key sequences to switch to or work on a
  known project.  Most day-to-day project activities involve working
  on known projects.
</p>
<p>
  Further, even when we do want to discover a new project and add it
  to the list of known projects, a much more natural way to do it is
  to run a project command while we are visiting a file in the project
  directory.  In most cases, we already have a file from some project
  open in the current buffer.  Therefore it makes more sense to just
  go ahead with a project command, say, with <code>C-x p
  f</code>, <code>C-x p g</code>, etc. directly instead of explicitly
  discovering the project with <code>C-x p p ... RET</code>.  Merely
  running a project command while we have a file from a project open
  ends up discovering the current project automatically.  Explicitly
  discovering projects with <code>C-x p p ... RET</code> is almost
  never necessary.
</p>
<h2 id="eshell-with-tramp">Eshell with TRAMP<a href="#eshell-with-tramp"></a></h2>
<p>
  Many members of our group knew about Eshell and TRAMP separately.
  For example, <code>M-x eshell RET</code> starts Eshell.  Eshell is
  implemented purely in Elisp and we can use it much like a regular
  shell.  Here is an example session:
</p>
<pre>
<samp>~ $ <kbd>cd /tmp/</kbd>
/tmp $ <kbd>echo hello &gt; hello.txt</kbd>
/tmp $ <kbd>cat hello.txt</kbd>
hello
/tmp $ <kbd>python3 --version</kbd>
Python 3.11.5
/tmp $ <kbd>which cd echo cat python3 which</kbd>
eshell/cd is a byte-compiled Lisp function in &lsquo;em-dirs.el&rsquo;.
eshell/echo is a byte-compiled Lisp function in &lsquo;em-basic.el&rsquo;.
eshell/cat is a byte-compiled Lisp function in &lsquo;em-unix.el&rsquo;.
/usr/bin/python3
eshell/which is a byte-compiled Lisp function in &lsquo;esh-cmd.el&rsquo;.</samp>
</pre>
<p>
  We also knew about TRAMP.  For example, when we type the key
  sequence <code>C-x C-f /ssh:alice@box:/tmp/foo.txt RET</code>, TRAMP
  notices that we intend to connect to a remote system
  named <code>box</code> as the user <code>alice</code> via SSH and
  edit a file named <code>/tmp/foo.txt</code> on the remote system.
  TRAMP then transparently establishes the SSH connection for us.  If
  public key authentication is already set up, then the connection is
  successfully established immediately.  Otherwise it prompts for a
  password.  In the end, we get a buffer to edit the remote
  file <code>/tmp/foo.txt</code>.  Once we have this buffer, we never
  have to do anything special to work on the remote file.  All Emacs
  commands work seamlessly on this buffer for the remote file.  For
  example, when we type <code>C-x C-s</code> TRAMP would go ahead and
  save the file to the remote system using the established SSH
  connection.  If we type <code>C-x d</code>, TRAMP would create a
  Dired buffer for the remote directory <code>/tmp/</code>.  All the
  Emacs commands for working with files and directories we know just
  work fine with the remote file or directory.
</p>
<p>
  So we knew about Eshell and we knew about TRAMP.  However what many
  of us found pleasantly surprising was how remarkably well Eshell and
  TRAMP work together.  Here is an example Eshell session that
  illustrates this point:
</p>
<pre>
<samp>~ $ <kbd>cd /ssh:alice@box:/tmp/</kbd>
/ssh:alice@box:/tmp $ <kbd>echo foo &gt; foo.txt</kbd>
/ssh:alice@box:/tmp $ <kbd>ls</kbd>
foo.txt
/ssh:alice@box:/tmp $ <kbd>cd /tmp/</kbd>
/tmp $ <kbd>echo bar &gt; bar.txt</kbd>
/tmp $ <kbd>ls</kbd>
bar.txt
/tmp $ <kbd>cp /ssh:alice@box:/tmp/foo.txt .</kbd>
/tmp $ <kbd>ls</kbd>
bar.txt  foo.txt
/tmp $</samp>
</pre>
<p>
  Look at how the command <code>cd /ssh:alice@box:/tmp/</code> above
  has seamlessly and transparently set the current directory of the
  shell to the remote directory.  When we create a file after that, it
  gets created on the remote directory!  We can work across
  directories opened with multiple TRAMP methods too.  For example
  first consider this session where the current local user does not
  have the permissions to write to the local <code>/etc/</code>
  directory:
</p>
<pre>
<samp>~ $ <kbd>cp /ssh:alice@box:/etc/wgetrc /etc/</kbd>
Opening output file Permission denied /etc/wgetrc</samp>
</pre>
<p>
  But if the current user has <code>sudo</code> privilege, we can do
  something like this:
</p>
<pre>
<samp>~ $ <kbd>cp /ssh:alice@box:/etc/wgetrc /sudo::/etc/</kbd>
~ $ <kbd>ls /etc/wgetrc</kbd>
/etc/wgetrc</samp>
</pre>
<p>
  We copied a file from a remote system and wrote it to a protected
  directory on the local system by using the <code>sudo</code>
  privilege.  We used the <code>ssh</code> method to read a remote
  file and the <code>sudo</code> method to write the file to a
  protected local directory.  TRAMP really does live up to its
  name: <em>Transparent Remote Access, Multiple Protocol</em>!
</p>
<h2 id="thanks">Thanks<a href="#thanks"></a></h2>
<p>
  It has been a pleasure hosting these Emacs book club meetings
  throughout this year.  I have really enjoyed discussing the book in
  great detail, examining each new concept introduced in the book
  carefully and performing demos to illustrate the concepts.  A big
  thank you to the Emacs communities on Libera and Matrix networks who
  showed interest in these meetings, joined these meetings,
  participated in the discussions and helped make these meetings
  successful!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/from-fill-prefix-to-tramp.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/meetup.html">#meetup</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Notes on Mastering Emacs: Chapter 7: Conclusion</title>
<link>https://susam.net/cc/mastering-emacs/ch07.html</link>
<guid isPermaLink="false">zoygz</guid>
<pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  The following notes were taken while discussing Chapter 6 of the
  book <em>Mastering Emacs</em> by Mickey Petersen (2022 edition) in
  <a href="./">book discussion group meetings</a>.
</p>
<p>
  An index of notes for all chapters are available
  at <a href="notes.html">notes.html</a>.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#third-party-packages-and-tools">Third-Party Packages and Tools</a></li>
  <li><a href="#communities">Communities</a></li>
</ul>
<h2 id="third-party-packages-and-tools">Third-Party Packages and Tools<a href="#third-party-packages-and-tools"></a></h2>
<p>
  Here is a list of third-party packages and tools this chapter
  introduces to the reader:
</p>
<ul>
  <li>nov, an EPUB reader</li>
  <li>Magit, a Git UI system with a chord-based key system</li>
  <li>Multiple Cursors</li>
  <li>LSP Mode, a language server interface for Emacs</li>
  <li>Eglot, another language server interface for Emacs</li>
  <li>Helm, a powerful completion framework</li>
  <li>Flycheck, a generic framework for linting and syntax error checking</li>
  <li>Org mode, an organiser for notes, agenda, literate programming, etc.</li>
  <li>YASnippet, a text snippet expansion tool</li>
  <li>Hydra, a package to build flexible popup UIs for key bindings</li>
  <li>dumb-jump, a package to jump to definitions from symbols</li>
</ul>
<p>
  Note that Eglot comes out of the box since Emacs version 29.1.
</p>
<h2 id="communities">Communities<a href="#communities"></a></h2>
<p>
  Some of the communities recommended by this chapter are:
</p>
<ul>
  <li><a href="https://old.reddit.com/r/emacs/">Reddit r/emacs</a></li>
  <li><a href="https://emacs.stackexchange.com/">Emacs Stack Exchange</a></li>
  <li><a href="https://planet.emacslife.com/">Planet Emacslife</a></li>
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/cc/mastering-emacs/ch07.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a> |
  <a href="https://susam.net/tag/meetup.html">#meetup</a>
</p>
]]>
</description>
</item>
<item>
<title>Notes on Mastering Emacs: Chapter 6: The Practicals of Emacs</title>
<link>https://susam.net/cc/mastering-emacs/ch06.html</link>
<guid isPermaLink="false">nqgkb</guid>
<pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  The following notes were taken while discussing Chapter 6 of the
  book <em>Mastering Emacs</em> by Mickey Petersen (2022 edition) in
  <a href="./">book discussion group meetings</a>.
</p>
<p>
  An index of notes for all chapters are available
  at <a href="notes.html">notes.html</a>.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#exploring-emacs">Exploring Emacs</a></li>
  <li><a href="#project-management">Project Management</a></li>
  <li><a href="#xref">Xref</a>
    <ul>
      <li><a href="#xref-setup">Xref Setup</a></li>
      <li><a href="#search-tools-for-xref">Search Tools for Xref</a></li>
      <li><a href="#four-most-common-xref-commands">Four Most Common Xref Commands</a></li>
      <li><a href="#xref-and-dired">Xref and Dired</a></li>
    </ul>
  </li>
  <li><a href="#working-with-log-files">Working with Log Files</a></li>
  <li><a href="#highlighting">Highlighting</a></li>
  <li><a href="#auto-revert-mode">Auto-Revert Mode</a></li>
  <li><a href="#auto-revert-tail-mode">Auto Revert Tail Mode</a></li>
  <li><a href="#browsing-tarballs">Browsing Tarballs</a></li>
  <li><a href="#dired-thumbnail-image-browser">Dired: Thumbnail Image Browser</a>
    <ul>
      <li><a href="#preview-buffer-quirks">Preview Buffer Quirks</a></li>
      <li><a href="#working-on-marked-files">Working on Marked Files</a></li>
      <li><a href="#deleting-images">Deleting Images</a></li>
      <li><a href="#tagging-and-untagging">Tagging and Untagging</a></li>
      <li><a href="#using-tags">Using Tags</a></li>
      <li><a href="#display-buffer">Display Buffer</a></li>
    </ul>
  </li>
  <li><a href="#docview">DocView</a>
    <ul>
      <li><a href="#docview-resolution">DocView Resolution</a></li>
    </ul>
  </li>
  <li><a href="#tramp">TRAMP</a>
    <ul>
      <li><a href="#default-directory">Default Directory</a></li>
      <li><a href="#multi-hops">Multi-Hops</a></li>
    </ul>
  </li>
  <li><a href="#eww">EWW: Emacs Web Wowser</a></li>
  <li><a href="#invoking-external-browser">Invoking External Browser</a></li>
  <li><a href="#dired">Dired</a>
    <ul>
      <li><a href="#dired-getting-started">Dired: Getting Started</a></li>
      <li><a href="#dired-navigation">Dired: Navigation</a></li>
      <li><a href="#dired-marking-and-unmarking">Dired: Marking and Unmarking</a></li>
      <li><a href="#dired-operations">Dired: Operations</a></li>
      <li><a href="#dired-copying-or-renaming-between-buffers">Dired: Copying or Renaming Between Buffers</a></li>
      <li><a href="#dired-more-keys">Dired: More Keys</a></li>
      <li><a href="#dired-x">Dired-X</a></li>
      <li><a href="#dired-working-across-directories">Dired: Working Across Directories</a></li>
    </ul>
  </li>
  <li><a href="#shell-commands">Shell Commands</a></li>
  <li><a href="#compiling-in-emacs">Compiling in Emacs</a></li>
  <li><a href="#shells-in-emacs">Shells in Emacs</a>
    <ul>
      <li><a href="#m-x-shell">M-x shell</a></li>
      <li><a href="#m-x-ansi-term">M-x ansi-term</a></li>
      <li><a href="#m-x-eshell">M-x eshell</a></li>
    </ul>
  </li>
</ul>
<h2 id="exploring-emacs">Exploring Emacs<a href="#exploring-emacs"></a></h2>
<p>
  The book suggests the following techniques to explore Emacs:
</p>
<ul>
  <li>
    <p>
      Reading the manual.  For example, type <code>M-x info RET</code>
      or <code>C-h i</code>, then navigate to the <code>Emacs</code>
      hyperlink, then type <code>C-s version control RET</code> and
      then navigate to the node named <code>Version Control</code> to
      read the corresponding manual.
    </p>
    <p>
      Note that the section named <em>The Info Manual</em> in Chapter
      3 offers more alternatives to reach a specific node in a more
      straightforward manner.  For example, <code>C-h i m emacs RET m
      Version Control RET</code> accomplishes the same result.
      Alternatively, <code>C-h R emacs RET m Version Control
      RET</code> also accomplishes the same result.  Yet another way
      to accomplish the same result is to evaluate the Elisp
      expression <code>(info "(emacs)Version Control")</code>.  See
      section <a href="ch03.html#info">Info</a> in chapter 3 notes for
      more details.
    </p>
    <p>
      Yet another way to explore the manual is to use
      the <code>info-apropos</code> command.  For example,
      type <code>M-x info-apropos RET version control RET</code> to
      find manuals which have the string "version control" in them.
    </p>
  </li>
  <li>
    <p>
      Using apropos.  For example, type <code>C-h d version control
      RET</code> to search for all symbols whose documentation string
      contains the specified pattern.  Then type <code>C-h a ^vc-
      RET</code> to search for all commands that match this pattern.
      This is a convenient way to list the vc commands.  Also, see
      section <a href="ch03.html#apropos">Apropos</a> in chapter 3
      notes for more details.
    </p>
  </li>
  <li>
    <p>
      Exploring prefix keys.  For example, type <code>C-x v C-h</code>
      to list all key sequences bound to the prefix key <code>C-x
      v</code>.  This is in fact a convenient way to list all the vc
      key bindings.  Also, see section
      <a href="ch03.html#discovering-and-remembering-keys">Discovering
      and Remembering Keys</a> in chapter 3 notes for more details.
    </p>
  </li>
  <li>
    <p>
      Describe what a key does.  For example, type <code>C-h k</code>
      followed by <code>C-x v v</code> to see the command that is
      bound to the latter key sequence as well as its documentation
      string along with other details like the keymap where the key
      binding is found, the file where the command is defined, other
      key bindings for the same command, etc.  See
      section <a href="ch03.html#describe">Describe</a> in chapter 3
      notes for some more details.
    </p>
  </li>
  <li>
    <p>
      Describe commands.  For example, type <code>C-h f vc-dir
      RET</code> to see information about the <code>vc-dir</code>
      command.  See section <a href="ch03.html#describe">Describe</a>
      in chapter 3 notes for some more details.
    </p>
  </li>
  <li>
    <p>
      Find mode commands.  Type <code>C-h m</code> to see the
      documentation strings of the current major mode and minor modes.
      A brief summary of the minor modes is shown first, followed by
      the major mode description.  This is followed by documentation
      strings of the minor modes separated by page breaks (the form
      feed character that is rendered as <code>^L</code> in Emacs).
      See section <a href="ch03.html#describe">Describe</a> in chapter
      3 notes for some more details.
    </p>
  </li>
  <li>
    <p>
      Type <code>M-X</code> to run
      <code>execute-extended-command-for-buffer</code> which executes
      commands that are relevant to the current buffer.  While
      offering completions, it limits the completions to commands
      relevant to the current buffer.  See
      section <a href="ch03.html#m-x-execute-extended-command-for-buffer">M-X:
      Execute Extended Command for Buffer</a> of chapter 3 notes for
      more details.
    </p>
  </li>
</ul>
<h2 id="project-management">Project Management<a href="#project-management"></a></h2>
<p>
  Emacs comes with a project management package
  named <code>project.el</code> which offers commands to operate on
  projects.  When we use a project management command like <code>C-x p
  f</code> to visit a file in the current project, this package
  automatically detects the top-level directory of the project by
  checking parent directories for version control system artifacts
  (e.g. <code>.git</code> directory) and presents files within that
  top-level directory as autocomplete options.
</p>
<p>
  The following complete key sequences demonstrate the package
  management commands mentioned in the book:
</p>
<ul>
  <li>
    <p>
      <code>C-x p p ... TAB RET ~/git/foo/ RET f README.md</code>:
      This awkward key sequence discovers a new project directory
      at <code>~/git/foo/</code> and then finds the file
      named <code>README.md</code> in it.  As soon as the key
      sequence <code>f</code> is typed above, the new project
      directory is discovered and added
      to <code>~/.emacs.d/projects</code> which is where the list of
      known projects is saved.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p p bar TAB RET f Makefile</code>: Assuming there is
      already a known project with <code>bar</code> in its name
      (say, <code>~/git/bar/</code>) that was discovered earlier, this
      key sequence switches to that project and finds the file named
      in <code>Makefile</code> in it.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p f dev/build.sh RET</code>: Find file
      named <code>dev/build.sh</code> in the current project.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p f build TAB RET</code>: Same as above
      if <code>dev/build.sh</code> is the only match
      for <code>build</code>.  Otherwise, it presents all files in the
      current project containing <code>build</code> anywhere in its
      path name as autocomplete options.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p f bar TAB RET build TAB RET</code>: When we
      type <code>C-x p f</code> while visiting a file that does not
      belong to any project, then its prompts for a project name.  In
      this example, we type <code>bar TAB RET</code> to automatically
      expand it to a known project name such
      as <code>~/git/bar/</code> and enter it.  Then we
      type <code>build TAB RET</code> to automatically expand it to a
      file name such as <code>dev/build.sh</code> and enter it.
    </p>
    <p>
      It is worth noting a general point that whenever we invoke a
      project command while visiting a file that does not belong to a
      project, the project command prompts for the project name.
      After we enter the project name, the project command runs on our
      chosen project.  This general point applies to other project
      commands that come later in this list.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p b Makefile RET</code>: Switch to a buffer
      named <code>Makefile</code> in the current project.  While
      entering the buffer name when <code>TAB</code> is typed,
      completion options present buffer names from the current project
      only.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p k yes RET</code>: Kill all buffers belonging to the
      current project.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p g ^key\&gt; RET</code>: Find all matches for the
      regular expression <code>^key\&gt;</code> in the current
      project.  The matches are found in all files in the project
      regardless of whether they are currently open in Emacs or not.
      The matches are displayed in a buffer named <code>*xref*</code>.
      We can navigate this buffer using key sequences
      like <code>n</code>, <code>p</code>, etc.  Type
      <code>C-h m</code> in this buffer to see a list of key sequences
      supported in this buffer.  As we navigate this buffer and go
      from one match to another using <code>n</code>, <code>p</code>,
      etc. the files containing the match are loaded in a split window
      automatically with the matching lines automatically centred in
      that window.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p r ^key\&gt; RET =key= RET</code>: Find all matches
      for the regular expression pattern <code>^key\&gt;</code> in the
      current project and replace them with <code>=key=</code>.  The
      modified files are not automatically saved though.  They needed
      to be saved later explicitly.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p c RET</code>: Compiles the current project.  By
      default, it offers as <code>make -f</code> as the command to be
      run in the project root.  If a specific <code>make</code> target
      needs to be executed or if another command needs to be executed,
      then the default command offered may be edited before
      typing <code>RET</code>.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p v</code>: Runs VC-Dir in the current project's root
      which in turn shows version control status for the project root.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p s</code>: Start shell in the current project's root
      directory.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p d RET</code>: Start Dired in the current project's
      root directory.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p D</code>: Same as above.
    </p>
  </li>
  <li>
    <p>
      <code>C-x p d doc/tutorial/ RET</code>: Start Dired in
      the <code>doc/tutorial/</code> subdirectory in the current
      project.
    </p>
  </li>
</ul>
<p>
  There are several more project management key bindings.
  Type <code>C-x p C-h</code> to see a complete list of them.
</p>
<h2 id="xref">Xref<a href="#xref"></a></h2>
<p>
  Xref provides a generic framework to support commands for
  cross-referencing in Emacs.  While there are several ways to set it
  up and configure it, the book mentions a particular way to set it up
  using a couple of external tools.  The next two subsections discuss
  the setup work involved before we can use Xref in a modern way.  The
  remaining subsections discuss how to use Xref.
</p>
<h3 id="xref-setup">Xref Setup<a href="#xref-setup"></a></h3>
<p>
  By default when we try to look up a definition of an identifier in,
  say, a C file or Python file, by typing <code>M-.</code>, it
  presents a minibuffer for us to select a tags table file (typically
  named <code>TAGS</code>).  This requires setting up
  a <code>TAGS</code> file with a tool like <code>ctags</code>.  The
  book, however, does not explore this method for good reason.
  Typically the <code>TAGS</code> file needs to be created with a tool
  like <code>ctags</code> or <code>etags</code> for every project we
  work on.  This file contains an index of names found in source code
  files.  We need to periodically update it as the code of our
  projects evolve, so that this index remains up-to-date.  For a long
  time, this was the only way to maintain an index of the names found
  in a source code, so that we could perform cross-referencing in
  editors like Vim and Emacs.  Relying on a tool
  like <code>grep</code> to search the code on the fly was deemed to
  be quite slow.  However, with modern, fast hardware we do not have
  to work like this anymore.  Further, there are search tools
  like <code>ag</code> and <code>rg</code> which are extremely fast.
  Given these modern developments, there are simpler ways to set up
  cross-referencing in Emacs.
</p>
<p>
  The book suggets installing an external package
  named <code>dumb-jump</code>.  It can be installed from MELPA with
  the key sequence <code>M-x package-install dumb-jump RET</code>.
  See <a href="https://github.com/jacktasia/dumb-jump">github.com/jacktasia/dumb-jump</a>
  for more details about this package.  After installing this package,
  add the following code to the Emacs initialisation file:
</p>
<pre><code>(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)</code></pre>
<p>
  Here is a minimal Elisp code that sets up <code>dumb-jump</code>
  from scratch and configures it as mentioned above:
</p>
<pre>
<code>(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))
(dolist (package '(dumb-jump))
  (unless (package-installed-p package)
    (package-install package)))
(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)</code>
</pre>
<p>
  The above code configures Emacs to use MELPA, retrieve the latest
  list of packages available there, install <code>dumb-jump</code>
  from it, as well as set up a hook to activate it automatically when
  we use certain Xref commands.
</p>
<h3 id="search-tools-for-xref">Search Tools for Xref<a href="#search-tools-for-xref"></a></h3>
<p>
  Once Xref is set up with <code>dumb-jump</code> as explained in the
  previous section, open a source code file (say, a C file or a Python
  file), move the cursor over to some identifier and
  type <code>M-.</code> to search that identifier in your environment.
  By default, it searches for the identifier in files of the same type
  found under the home directory with a tool like <code>ag</code>,
  <code>rg</code> or <code>grep</code> (the first one it finds).
  There is an exception to this rule though.  If
  neither <code>ag</code> nor <code>rg</code> is found and only GNU
  grep is found, then typing <code>M-.</code> on an indentifier
  searches the identifier in all files in the home directory (as
  opposed to searching for files of a specific type).  If BSD grep is
  found instead, then this is not a problem and only files of the
  current type is searched for the identifier.
</p>
<p>
  Further, while looking up definitions within a Git repository, this
  package invokes the <code>git grep</code> command to restrict
  searches to the repository directory.
</p>
<p>
  Let us now look at a few examples of the actual search commands that
  are executed under the hood when we type <code>M-.</code>.
</p>
<p>
  If neither <code>ag</code> nor <code>rg</code> is installed and we
  only have <code>grep</code> on our system, typing <code>M-.</code>
  while the cursor is on an identifier named <code>foo</code> in a
  Python file leads to the execution of a command like this when BSD
  grep is found:
</p>
<pre><code>grep -REn --include '*.py' -e '\s*\bfoo\s*=[^=\n]+' -e 'def\s*foo\b\s*\(' -e 'class\s*foo\b\s*\(?' /Users/susam</code></pre>
<p>
  If GNU grep is found instead, then all files (not
  just <code>*.py</code> files) are searched with a command like this:
</p>
<pre><code>grep -rEn -e '[[:space:]]*\bfoo[[:space:]]*=[^=\n]+' -e 'def[[:space:]]*foo\b[[:space:]]*\(' -e 'class[[:space:]]*foo\b[[:space:]]*\(?' /home/susam</code></pre>
<p>
  If <code>rg</code> is the only additional search tool installed,
  then the following command is executed:
</p>
<pre><code>rg --color never --no-heading --line-number -U --pcre2 --type py '\s*\bfoo\s*=[^=\n]+|def\s*foo\b\s*\(|class\s*foo\b\s*\(?' /home/susam</code></pre>
<p>
  If <code>ag</code> is installed, then the following command is
  executed:
</p>
<pre><code>ag --nocolor --nogroup --python '\s*\bfoo\s*=[^=\n]+|def\s*foo\b\s*\(|class\s*foo\b\s*\(?' /home/susam</code></pre>
<p>
  When we type <code>M-.</code> in a file that belongs to a Git
  repository, only the repository directory is searched with a command
  like this:
</p>
<pre><code>git grep --color=never --line-number --untracked -E '\s*\bfoo\s*=[^=\n]+|def\s*foo\b\s*\(|class\s*foo\b\s*\(?' -- /home/susam/repo/*.py</code></pre>
<p>
  The book makes a mention of <code>rg</code> and remarks about the
  impressive speed with which it searches the file system.  I
  recommend it too.  Since the <code>M-.</code> command may search the
  whole home directory, if the home directory is very large, having a
  fast search tool like <code>rg</code> or <code>ag</code> makes a
  significant difference.  For example what could normally take 10 to
  20 seconds to search using <code>grep</code> might only take a
  second or two with <code>rg</code> or <code>ag</code>.  I
  use <code>M-.</code> with <code>rg</code>.
</p>
<h3 id="four-most-common-xref-commands">Four Most Common Xref Commands<a href="#four-most-common-xref-commands"></a></h3>
<p>
  The book mentions the following commands as the four most common
  commands we should know about:
</p>
<ul>
  <li>
    <p>
      <code>M-.</code>: Find definitions of the identifier at point.
      If a unique definition is found, then the file containing the
      definition is automatically opened and the definition is centred
      in the window.  If multiple possible candidates are found, then
      they are displayed in an Xref buffer that we can navigate using
      key sequences like <code>n</code> or <code>p</code>.  As we
      navigate the Xref buffer, the source of each match is
      automatically opened in a split window and the matching line is
      centred.
    </p>
  </li>
  <li>
    <p>
      <code>M-,</code>: Go back to where <code>M-.</code> was last
      invoked.
    </p>
  </li>
  <li>
    <p>
      <code>M-? foo RET ~/git/foo/ RET</code>: Find all occurrences of
      the word <code>foo</code> in files of the same type as the
      current file in the project directory <code>~/git/foo/</code>.
      It does not restrict the search to definitions only.  If the
      current file belongs to a project already, then we could simply
      type <code>M-? foo RET</code>.  In fact, since the input to the
      minibuffer prompt is the identifier at the point by default, we
      could simply type <code>M-? RET</code> to search for the current
      identifier in the current project.
    </p>
  </li>
  <li>
    <p>
      <code>C-M-. foo RET</code>: Find symbols matching the given
      pattern.  Although the documentation mentions that this supports
      regular expressions, it seemed to treat the given pattern as an
      identifier and searched for that identifier literally.  In fact,
      the <code>rg</code> commands that were executed under the hood
      were exactly the same as the ones executed by <code>M-.</code>.
      Thus with <code>dumb-jump</code> enabled, both <code>M-.</code>
      and <code>C-M-.</code> behave similarly.  The only difference is
      that <code>M-.</code> searches for the identifier at the point
      whereas <code>C-M-.</code> searches for the identifier we enter
      at the minibuffer as input.
    </p>
  </li>
</ul>
<p>
  When multiple cross-references are displayed in the Xref buffer, we
  can use the following key sequences to work with the Xref buffer.
</p>
<ul>
  <li>
    <p>
      <code>n</code>: Move to the next cross-reference.  The source of
      the cross-reference is automatically displayed in another
      window.
    </p>
  </li>
  <li>
    <p>
      <code>n</code>: Move to the previous cross-reference.  The source
      of the cross-reference is automatically displayed in another
      window.
    </p>
  </li>
  <li>
    <p>
      <code>.</code>: Same as <code>n</code>.
    </p>
  </li>
  <li>
    <p>
      <code>,</code>: Same as <code>p</code>.
    </p>
  </li>
  <li>
    <p>
      <code>RET</code>: Jump to the source of the current
      cross-reference.
    </p>
  </li>
  <li>
    <p>
      <code>TAB</code>: Hide Xref buffer and jump to the source.
    </p>
  </li>
  <li>
    <p>
      <code>C-o</code>: Show the source of the cross-reference at
      point in a separate window but keep the point in the Xref
      window.  This is useful when we navigate the Xref buffer using
      normal Emacs commands like <code>C-p</code>, <code>C-n</code>,
      <code>C-s</code>, etc.  While navigating the Xref buffer with
      these normal Emacs commands, the source of the cross-references at
      the point is not automatically displayed.  The key
      sequence <code>C-o</code> helps us to display the cross-reference
      at the point in this case.
    </p>
  </li>
  <li>
    <p>
      <code>r</code>: Perform search and replace in the names of the
      references displayed in the Xref buffer.  However, I did not
      find this to be working successfully
      with <code>dumb-jump</code>.  Any attempt to use this command
      with <code>dumb-jump</code> always led me to the following
      error: <code>No suitable matches here</code>.  This key sequence
      does work as expected when Xref is invoked from Dired as going
      to be explained in the next section.
    </p>
  </li>
</ul>
<h3 id="xref-and-dired">Xref and Dired<a href="#xref-and-dired"></a></h3>
<p>
  Here are some key sequences that demonstrate how we can use Xref
  with Dired.
</p>
<ul>
  <li>
    <code>C-x d RET</code>: Edit current directory using Dired.
  </li>
  <li>
    <code>n</code>: Move to the next line.  <code>C-n</code> also
    works.
  </li>
  <li>
    <code>p</code>: Move to the previous line.  <code>C-p</code> also
    works.
  </li>
  <li>
    <code>m</code>: Mark the file or subdirectory at the point.
  </li>
  <li>
    <code>u</code>: Unmark the file or subdirectory at the point.
  </li>
  <li>
    <code>A f.. RET</code>: Find all matches for the regular
    expression <code>f..</code> in the marked files and
    subdirectories.  The matches are always displayed in an Xref
    buffer, even when a single match is found.
  </li>
  <li>
    <code>Q f.. RET bar RET</code>: Find all matches for the regular
    expression <code>f..</code> in the marked files and subdirectories
    and replace them with <code>bar</code>.
  </li>
</ul>
<h2 id="working-with-log-files">Working with Log Files<a href="#working-with-log-files"></a></h2>
<p>
  In this section of the book, it discusses a set of commands that are
  useful for working with log files.  Note that some of these commands
  have been already introduced in the previous chapters.  The
  following list presents the commands discussed in this section of
  the book:
</p>
<ul>
  <li>
    <code>C-x C-f</code>: Find a file.
  </li>
  <li>
    <code>C-x C-r</code>: Find file and open in read-only mode.
  </li>
  <li>
    <code>C-x C-q</code>: Toggle read-only mode.
  </li>
  <li>
    <code>M-x flush-lines RET b.. RET</code>: Delete lines in region
    that match the regular expression <code>b..</code>.  If no region
    is active, then delete matching lines between the point and end of
    buffer.  The deleted lines are not copied to kill ring.  See
    section <a href="ch05.html#deleting-and-keeping-lines">Deleting
    and Keeping Lines</a> of chapter 5 notes for more details.
  </li>
  <li>
    <code>M-x keep-lines RET b.. RET</code>: Keep lines in region that
    match the regular expression <code>b..</code> and delete the rest.
    If no region is active, then keep matching lines between the point
    and end of buffer and delete the rest.  The deleted lines are not
    copied to kill ring.  See section
    <a href="ch05.html#deleting-and-keeping-lines">Deleting and
    Keeping Lines</a> of chapter 5 notes for more details.
  </li>
  <li>
    <code>M-s o b.. RET</code>: Show all lines in the current buffer
    matching the regular expression <code>b..</code>.  If the region
    is active, then show matching lines from the region only.  The
    matches are shown in a new Occur mode buffer.  The book makes a
    special mention that we can run <code>M-s o</code> on an Occur
    mode buffer to filter it further and get the results in another
    Occur mode buffer.  See section
    <a href="ch04.html#occur-mode">Occur Mode</a> in chapter 4 notes
    for more details.
  </li>
</ul>
<h2 id="highlighting">Highlighting<a href="#highlighting"></a></h2>
<p>
  Section <em>Working with Log Files</em> of Chapter 6 of the book
  also introduces highlighting commands that can be very useful for
  highlighting certain strings in the log file.  The highlighting
  commands are demonstrated below with an example.
</p>
<ol>
  <li>
    <p>
      First create a buffer with the following content.
    </p>
<pre>
<code>foo bar baz
Foo Bar Baz
FOO BAR BAZ
foo  bar  baz
Foo  Bar  Baz
FOO  BAR  BAZ</code>
</pre>
  </li>
  <li>
    <p>
      Now type <code>M-s h p f.. SPC b.. RET RET</code> to highlight
      the phrases matching the regular expression <code>f.. b..</code>
      in a case-insensitive and whitespace-insensitive manner.  A
      total of six matches will be highlighted because the first two
      words and the whitespace between them in all lines match this
      phrase pattern when we ignore the case of the words and the
      amount of whitespace.  The second <code>RET</code> is meant to
      accept the default face offered to us for highlighting.
    </p>
  </li>
  <li>
    <p>
      Now type <code>M-s h p b.z RET RET</code> to highlight the
      phrases matching the regular expression <code>b.z</code>.  Again
      we select the default face offered to us for highlighting.  At
      this point, we should see two sets of highlighting in two
      different faces.
    </p>
  </li>
  <li>
    <p>
      Now move the cursor to one of the first set of highlights and
      type <code>M-s h u RET</code>.  Those highlights will be
      unhighlighted.  The <code>RET</code> key accepts the default
      unhighlighting pattern offered to us.  It happens to be the
      pattern with which the highlight under the cursor was
      highlighted.  That is why this key sequence ends up
      unhighlighting the highlight under the cursor.
    </p>
    <p>
      If the cursor were not over a highlgiht, then the default
      unhighlighting pattern offered to us would have been the pattern
      we used for the last highlight.  In that case, we could
      type <code>M-s h u f.. b.. RET</code> to explicitly specify the
      unhighlighting pattern.
    </p>
  </li>
  <li>
    <p>
      Now type <code>M-s h u RET</code> again to remove the second set
      of highlights too.
    </p>
  </li>
  <li>
    <p>
      Type <code>M-s h p F.. SPC B.. RET RET</code> to perform a
      case-sensitive but whitespace-insensitive highlighting.  When
      there is an uppercase letter in the pattern, the highlighting
      becomes case-sensitive.
    </p>
  </li>
  <li>
    <p>
      Type <code>M-s h u RET</code> to remove the previous
      highlighting.
    </p>
  </li>
  <li>
    <p>
      Type <code>M-s h r f.. SPC b.. RET RET</code> to perform a
      case-insensitive but whitespace-sensitive highlighting.  This
      time, there are only three matches from the first three lines.
    </p>
  </li>
  <li>
    <p>
      Type <code>M-s h u RET</code> to remove the previous
      highlighting.
    </p>
  </li>
  <li>
    <p>
      Type <code>M-s h r F.. SPC B.. RET RET</code> to perform a
      case-sensitive and whitespace-sensitive highlighting.  The
      matching strings are found in the second and third lines.
    </p>
  </li>
  <li>
    <p>
      Move the cursor to lowercase <code>bar</code> and type <code>M-s
      h .</code> to highlight symbol at point.  All six occurrences of
      this symbol are highlighted in a case-insensitive manner because
      the symbol at point is written in all lowercase.
    </p>
  </li>
  <li>
    <p>
      Move the cursor to <code>Baz</code> and type <code>M-s h
      .</code> to highlight symbol at point.  Only two occurrences of
      this symbol get highlighted.  The highlighted symbols match the
      symbol <code>Baz</code> exactly (case-sensitive match).  The
      highlighting is done in case-sensitive manner because the symbol
      at point has at least one uppercase letter.
    </p>
  </li>
</ol>
<h2 id="auto-revert-mode">Auto-Revert Mode<a href="#auto-revert-mode"></a></h2>
<p>
  The following steps demonstrate how to use
  the <code>revert-buffer</code> command and then how to
  use <code>auto-revert-mode</code>.
</p>
<ol>
  <li>
    <p>
      In a terminal, run the following command:
    </p>
    <pre><code>: &gt; /tmp/log.txt &amp;&amp; while true; do date &gt;&gt; /tmp/log.txt; sleep 1; done</code></pre>
    <p>
      You could use <code>ansi-term</code> within Emacs too as the
      terminal if you are familiar with it.
    </p>
  </li>
  <li>
    <p>
      Now within Emacs, type <code>C-x C-f /tmp/log.txt RET</code>.
    </p>
  </li>
  <li>
    <p>
      Wait for a few seconds and type <code>M-x revert-buffer RET yes
      RET</code> to update the buffer with the latest content of the
      file from the file system.
    </p>
  </li>
  <li>
    <p>
      Type <code>M-x auto-revert-mode RET</code> to enable automatic
      update of the buffer as the file changes on the file system.
      Note that this reloads the entire file whenever a change is
      detected, so this could be inefficient while working with very
      large files.
    </p>
  </li>
  <li>
    <p>
      Type <code>M-&gt;</code> to go to the end of the buffer.  This
      moves the cursor to the end of the buffer.  Doing this ensures
      that as the buffer is automatically updated, the cursor
      automatically keeps moving to the end of the file.
    </p>
  </li>
  <li>
    <p>
      Terminate the command of step 1 and run this command in a
      terminal:
    </p>
    <pre><code>echo hello &gt; /tmp/log.txt</code></pre>
    <p>
      The content of the buffer should now automatically truncate and
      update to just the text <code>hello</code>.
    </p>
  </li>
  <li>
    <p>
      Run the command in step 1 again and confirm that the content of
      the buffer in Emacs gets updated automatically.
    </p>
  </li>
  <li>
    <p>
      Type <code>M-x auto-revert-mode RET</code> to disable automatic
      update of the buffer.
    </p>
  </li>
</ol>
<h2 id="auto-revert-tail-mode">Auto Revert Tail Mode<a href="#auto-revert-tail-mode"></a></h2>
<p>
  The mode named <code>auto-revert-tail-mode</code> is similar
  to <code>auto-revert-mode</code>.  However,
  unlike <code>auto-revert-mode</code> which reloads the entire file
  on every update, the <code>auto-revert-tail-mode</code> only follows
  the tail of the buffer and appends any new text found to the buffer.
  The following steps demonstrate this:
</p>
<ol>
  <li>
    <p>
      Like in the previous section, run the following command:
    </p>
    <pre><code>: &gt; /tmp/log.txt &amp;&amp; while true; do date &gt;&gt; /tmp/log.txt; sleep 1; done</code></pre>
  </li>
  <li>
    <p>
      Type <code>M-x auto-revert-tail-mode RET</code>.  Note that this
      command follows the tail of the file only.  It does not reload
      the entire file.  This can be confirmed with the next step.
    </p>
  </li>
  <li>
    <p>
      Terminate the command of step 1 and run this command in a
      terminal:
    </p>
    <pre><code>echo hello &gt; /tmp/log.txt</code></pre>
    <p>
      The buffer for this file in Emacs should automatically update to
      show the text <code>hello</code> at the bottom.  But notice all
      the earlier text remains intact.  The earlier text does not
      disappear from the buffer because Emacs does not reload the
      entire file when <code>auto-revert-tail-mode</code> is enabled.
    </p>
  </li>
  <li>
    <p>
      Run the command in step 1 again and confirm that the content of
      the buffer begins to get updated automatically again.
    </p>
  </li>
  <li>
    <p>
      As of Emacs 28.2, unfortunately running <code>M-x
      auto-revert-tail-mode RET</code> is not sufficient to disable
      automatic updates in the buffer.  This command does disable the
      mode but the buffer continues to be updated everytime the file
      changes.  This is very likely a bug in this mode.
    </p>
    <p>
      As a workaround, disabling <code>auto-revert-mode</code> ends up
      stopping the auto-update behaviour.  There are two ways to do
      this.  You could type <code>M-x auto-revert-mode RET</code>
      twice: once to enable it and a second time to disable it.
      Alternatively, just simply type <code>C-0 M-x auto-revert-mode
      RET</code> which invokes the mode with a prefix argument of zero
      which ends up disabling the mode.
    </p>
  </li>
</ol>
<h2 id="browsing-tarballs">Browsing Tarballs<a href="#browsing-tarballs"></a></h2>
<p>
  The following steps demonstrate how we can not only browse a tarball
  but also edit files in it and save them back to the tarball.
</p>
<ol>
  <li>
    <p>
      First, create a directory of text files with the following shell
      commands:
    </p>
<pre>
<code>mkdir -p foo/bar/baz/
echo hello foo &gt; foo/foo.txt
echo hello bar &gt; foo/bar/bar.txt
echo hello baz &gt; foo/bar/baz/baz.txt
tar -caf /tmp/foo.tgz foo/</code>
</pre>
  </li>
  <li>
    <p>
      Confirm that the tarball looks good with these shell commands:
    </p>
<pre>
<code>tar -tf /tmp/foo.tgz
tar -xOf /tmp/foo.tgz</code>
</pre>
  </li>
  <li>
    <p>
      Within Emacs, type <code>C-x C-f /tmp/foo.tgz RET</code> to open
      the tarball.  A list of all entries in the tarball is displayed
      in a Tar buffer.
    </p>
  </li>
  <li>
    <p>
      Type <code>n</code> and <code>p</code> to navigate the Tar
      buffer down and up respectively.
    </p>
  </li>
  <li>
    <p>
      With the cursor on the line
      containing <code>foo/bar/baz/baz.txt</code>,
      type <code>RET</code>.  The content of this entry is now
      displayed in a new buffer.
    </p>
  </li>
  <li>
    <p>
      Now in the buffer that displays the content
      of <code>baz.txt</code>, edit its content.  Say, type <code>C-a
      !</code> to append an exclamation point to this buffer.
    </p>
  </li>
  <li>
    <p>
      Type <code>C-x C-s</code> to save this buffer.  This updates the
      entry of <code>foo/bar/baz/baz.txt</code> within the buffer
      for <code>foo.tgz</code>.  However, the updated tarball is not
      written to the file system yet.
    </p>
  </li>
  <li>
    <p>
      Type <code>C-x b foo.tgz RET</code> to go back to the buffer
      with the tarball entry listing.
    </p>
  </li>
  <li>
    <p>
      Finally, type <code>C-x C-s</code> to save the tarball to the
      file system.
    </p>
  </li>
  <li>
    <p>
      Now repeat step 2.  The updated content
      of <code>foo/bar/baz/baz.txt</code> should now appear in the
      output.
    </p>
  </li>
</ol>
<h2 id="dired-thumbnail-image-browser">Dired: Thumbnail Image Browser<a href="#dired-thumbnail-image-browser"></a></h2>
<p>
  Assuming there is a directory <code>~/foo/</code> that contains
  several image files as well as files of other types, the
  command <code>M-x image-dired RET ~/foo/ RET</code> creates a
  preview buffer of all images in the directory and displays it along
  with a normal dired buffer showing the directory listing.  Both
  buffers are displayed in two separate windows.
</p>
<p>
  When the preview buffer is first launched, all image files found in
  the directory are automatically <em>marked</em>.  This can be seen
  in the Dired buffer.  However the preview buffer does not reflect
  this immediately.  Type <code>m</code> in the preview buffer to
  force it to pick the current list of marked images and highlight
  them.
</p>
<p>
  As a best practice, remember to type <code>m</code> soon after
  launching <code>image-dired</code> so that the marked images are
  accurately displayed in the preview buffer.
</p>
<p>
  Within the preview buffer, the following key sequences are
  supported:
</p>
<ul>
  <li>
    <code>C-f</code>: Move to next image.
  </li>
  <li>
    <code>C-b</code>: Move to the previous image.
  </li>
  <li>
    <code>C-n</code>: Move to next row of images.
  </li>
  <li>
    <code>C-p</code>: Move to previous row of images.
  </li>
  <li>
    <code>RET</code>: Display the original image in a display buffer.
  <li>
    <code>m</code>: Mark an image file.
  </li>
  <li>
    <code>u</code>: Unmark an image file.
  </li>
  <li>
    <code>d</code>: Flag an image file for deletion.
  </li>
  <li>
    <code>t t</code>: Tag marked thumbnails.  If no thumbnails are
    marked, tag the current thumbnail.
  </li>
  <li>
    <code>t r</code>: Remove tag from marked thumbnails.  If no
    thumbnails are marked, remove tag from the current thumbnail.
  </li>
  <li>
    <code>l</code>: Rotate thumbnail left.
  </li>
  <li>
    <code>r</code>: Rotate thumbnail right.
  </li>
</ul>
<h3 id="preview-buffer-quirks">Preview Buffer Quirks<a href="#preview-buffer-quirks"></a></h3>
<p>
  The <code>m</code>, <code>u</code> or <code>d</code> commands in the
  preview buffer are actually meant to mark, unmark or flag the
  corresponding files in the Dired buffer.  The highlighting or
  unhighlighting that occurs in the preview buffer is merely a
  convenience feature.  The preview buffer may not always accurately
  reflect the most recent list of all marked and flagged files.
  Always keep an eye on the Dired buffer to check the most recent
  state of the files.
</p>
<p>
  Especially, if we go back to the Dired buffer and mark, unmark or
  flag files, the preview buffer does not reflect it automatically.
  We need to go to the preview buffer again and perform at least one
  similar operation (<code>m</code>, <code>u</code> or
  <code>d</code>) in the preview buffer for it to be updated again.
  This is why it is important to keep an eye on the Dired buffer to
  get an accurate account of which files are marked or flagged.
</p>
<h3 id="working-on-marked-files">Working on Marked Files<a href="#working-on-marked-files"></a></h3>
<p>
  Say we have marked some image files using the key
  sequence <code>m</code> in the preview buffer.  Now we can perform
  various operations on these marked files.  For example, to copy the
  marked files to <code>/tmp/</code> directory, in a Dired buffer,
  type <code>C /tmp/ RET</code>.  To move them instead, type <code>R
  /tmp/</code>.
</p>
<h3 id="deleting-images">Deleting Images<a href="#deleting-images"></a></h3>
<p>
  When we flag thumbnails by typing <code>d</code> in the preview
  buffer, the corresponding files are flagged for deletion in the
  Dired buffer.  The first column of the flagged file entries contain
  the letter <code>D</code> in the Dired buffer.  Type <code>x</code>
  in the Dired buffer to permanently delete (expunge) the flagged
  files.
</p>
<h3 id="tagging-and-untagging">Tagging and Untagging<a href="#tagging-and-untagging"></a></h3>
<p>
  If there are marked images, then the tagging and untagging commands
  executed in the preview buffer work on those marked images.
  Otherwise, they work on image corresponding to the current
  thumbnail.  We will refer to these images that the tagging or
  untagging commands work on as <em>target</em> images in the next few
  paragraphs..
</p>
<p>
  The key sequence <code>t t trip;oxford;uk RET</code> tags the target
  images with the tags <code>trip</code>, <code>oxford</code>
  and <code>uk</code>.  The tags must be separated by semicolon as
  shown in the preceding example.  The tags are saved in a path set in
  the <code>image-dired-db-file</code> variable.  Type <code>C-h v
  image-dired-db-file</code> to read this path.  Typically, it is
  something like <code>~/.emacs.d/image-dired/.image-dired_db</code>.
  We will call this the DB file.  This file may be manually inspected
  to see how this command and the next command affect the tags for
  each thumbnail.  Alternatively, type <code>C-t e</code> in a Dired
  buffer to view and edit the tags of the target files.
</p>
<p>
  The key sequence <code>t r trip RET</code> removes the
  tag <code>trip</code> from the target images.  By virtue of how this
  functionality is implemented, a key sequence like <code>t r
  t.*d</code> removes the tags <code>trip;oxford</code>
  and <code>trip;salford</code> (if present) from the DB file but it
  does not remove a tag like <code>trip;cambridge</code> (if present).
</p>
<h3 id="using-tags">Using Tags<a href="#using-tags"></a></h3>
<p>
  Tagging thumbnails could be useful if we want to later mark files by
  tags.  In a Dired buffer, the key sequence <code>C-t f t.*d</code>
  will mark all files whose thumbnails have tags (as they appear in
  the tags file) matching the regular expression <code>t.*d</code>.
  For example, images that have with tags <code>trip;oxford;uk</code>
  as well as <code>trip;london;uk</code> will be marked but images
  with tags <code>trip;bath;uk</code>
  and <code>trip;liverpool;uk</code> will not be marked.
</p>
<h3 id="display-buffer">Display Buffer<a href="#display-buffer"></a></h3>
<p>
  When we type <code>RET</code> in the preview buffer, the original
  image is displayed in a display buffer.  The following key sequences
  are supported in the display buffer:
</p>
<ul>
  <li>
    <code>s</code>: Resize image to fit window.
  </li>
  <li>
    <code>f</code>: Display current image in full size.
  </li>
  <li>
    <code>q</code>: Quit window.
  </li>
</ul>
<p>
  The book makes a note that when we open an image file directly from
  a Dired buffer, the image is opened in <code>image-mode</code> which
  is more powerful than the display buffer we get when we open an
  image from the thumbnail preview window.
</p>
<h2 id="docview">DocView<a href="#docview"></a></h2>
<p>
  When a PDF or another document of a supported format is opened in
  Emacs, they are converted to images on the fly and displayed in
  Emacs.  In this section, we will discuss working with PDFs only.
  The converted images are cached at the directory set in
  the <code>doc-view-cache-directory</code> variable.
</p>
<p>
  Type <code>C-h v auto-mode-alist RET</code> and search
  for <code>doc-view</code> in the help buffer to see the list of file
  formats that Emacs tries to open in DocView.
</p>
<p>
  Ghostscript needs to be installed so that DocView can convert the
  PDF into images.  Further, for some commands where we perform
  text-based operations on the PDF, we need the <code>pdftotext</code>
  command so that DocView can extract text from the PDF.
  Type <code>C-h v doc-view-ghostscript-program RET</code>
  and <code>C-h v doc-view-pdftotext-program RET</code> to see the
  external programs that DocView depends on.  These programs can be
  installed with the following command on a Debian or Debian-based
  Linux distribution:
</p>
<pre><code>apt-get install ghostscript poppler-utils</code></pre>
<p>
  On a macOS system, run the following command instead:
</p>
<pre><code>brew install ghostscript poppler</code></pre>
<p>
  The following list presents some of the key bindings supported by
  DocView:
</p>
<ul>
  <li>
    <code>n</code>: Go to next page.
  </li>
  <li>
    <code>p</code>: Go to previous page.
  </li>
  <li>
    <code>C-x ]</code>: Same as <code>n</code>.
  </li>
  <li>
    <code>C-x [</code>: Same as <code>p</code>.
  </li>
  <li>
    <code>SPC</code>: Scroll up if possible or go to next page.
  </li>
  <li>
    <code>DEL</code>: Scroll down if possible or go to the previous page.
  </li>
  <li>
    <code>S-SPC</code>: Same as above.
  </li>
  <li>
    <code>M-&lt;</code>: View the first page.
  </li>
  <li>
    <code>M-&gt;</code>: View the last page.
  </li>
  <li>
    <code>+</code>: Enlarge the document.
  </li>
  <li>
    <code>-</code>: Shrink the document.
  </li>
  <li>
    <code>0</code>: Reset the document size to the initial one.
  </li>
  <li>
    <code>W</code>: Fit the image width to the window width.
  </li>
  <li>
    <code>H</code>: Fit the image height to the window height.
  </li>
  <li>
    <code>P</code>: Fit the image to the window such that neither the
    document width nor the document height exceed the window width or
    height respectively.
  </li>
  <li>
    <code>F</code>: Resize the window so it just fits the page.  When
    there is only window in the frame, the window cannot be resized
    independently of the frame, so the frame is resized instead.
  </li>
  <li>
    <code>M-x doc-view-presentation RET</code>: Display document in
    presentation mode, i.e. as a full screen slide show.
  </li>
</ul>
<p>
  Although not mentioned in the book, here are some commands that show
  how to perform text-based operations on the PDF.  These commands
  need <code>pdftotext</code> to be installed.
</p>
<ul>
  <li>
    <code>C-s ^f..\&gt; RET</code>: Initiate a new search for lines
    that begin with a three-lettered word beginning with the
    letter <code>f</code>.  The cursor does not move to the first
    match automatically.  To make the cursor move to the first match,
    type <code>C-s</code>.  This is also explained in the next point.
  </li>
  <li>
    <code>C-s</code>: When a search has been initiated, jump to the
    next match for the last search that was initiated.
  </li>
  <li>
    <code>C-u C-s ^b..\&gt; RET</code>: Initiate a new search.  This
    is useful when a search was already initiated and we want to
    abandon that search and start another new search.
  </li>
  <li>
    <code>C-r</code>: Similar to <code>C-s</code> but works in reverse
    direction.  All three commands mentioned above work
    with <code>C-r</code> too.
  </li>
  <li>
    <code>C-t</code>: Show tooltip for the current location.
    Normally, this shows a tooltip like "Page 100 of 314" to describe
    the current page.  When a search is in progress, the tooltip
    includes all the matches from the current page too.
  </li>
  <li>
    <code>C-c C-t</code>: Show the current document's content as text.
    Then type the key sequence <code>C-c C-c</code> to switch to
    editing the document and <code>C-c C-c</code> again to switch to
    viewing the document.  The key sequence <code>C-c C-c</code> is
    elaborated a little more in the next point.
  </li>
  <li>
    <code>C-c C-c</code>: Toggle between editing or viewing the
    document.  In case of PDF, switching to editing the document may
    not be very helpful because the binary code of the document is
    opened for editing in this mode which is quite non-trivial to edit
    directly.
  </li>
</ul>
<h3 id="docview-resolution">DocView Resolution<a href="#docview-resolution"></a></h3>
<p>
  If the text in the document looks pixelated in Emacs, set
  the <code>doc-view-resolution</code> variable to 300 as follows:
</p>
<pre><code>(setq doc-view-resolution 300)</code></pre>
<p>
  This sets the dots per inch resolution used to render the documents
  to 300.  This offers a good trade-off between high quality rendering
  and fast rendering.  After setting this variable, type the following
  key sequences:
</p>
<ul>
  <li>
    <code>M-x doc-view-clear-cache RET</code> to delete the cache
    directory.
  </li>
  <li>
    <code>C-x k</code> to kill the existing DocView buffer (if any).
  </li>
  <li>
    <code>C-x C-f document.pdf RET</code> to open the document
    (say <code>document.pdf</code>) again!
  </li>
</ul>
<p>
  Clearing the cache directory and reopening the document in this
  manner regenerates the images from the documents with the updated
  resolution.
</p>
<h2 id="tramp">TRAMP<a href="#tramp"></a></h2>
<p>
  TRAMP stands for Transparent Remote Access, Multiple Protocol.  The
  general syntax of paths supported by TRAMP is:
</p>
<pre><code>/method:[user@][hostname[#port]]:[path]</code></pre>
<p>
  Here
  are some complete key sequences that demonstrate various ways to
  open a remote file using TRAMP:
</p>
<ul>
  <li>
    <code>C-x C-f /ssh:alice@box:~/foo.txt RET</code>: Edit file in a
    remote host via SSH.
  </li>
  <li>
    <code>C-x C-f /ssh:susam@box#22:~/foo.txt RET</code>: Same as
    above.  However the port is explicitly specified this time.
  </li>
  <li>
    <code>C-x C-f /scp:alice@box:~/foo.txt RET</code>: Edit file in a
    remote host via SCP.
  </li>
  <li>
    <code>C-x C-f /ssh:box:~/foo.txt RET</code>: Edit file in a
    remote host via SSH after logging into it with the username of the
    current user in the current shell.
  </li>
  <li>
    <code>C-x C-f /ssh:alice@:~/foo.txt RET</code>: Edit file in
    localhost via SSH after logging into it as a specific user.
  </li>
  <li>
    <code>C-x C-f /ssh::~/foo.txt RET</code>: Edit file in localhost
    via SSH after logging into it with the username of the current
    user in current shell.
  </li>
  <li>
    <code>C-x C-f /sudo::/etc/hosts</code>: Edit file as superuser.
  </li>
  <li>
    <code>C-x c-f /sudo:alice@:~/foo.txt RET</code>: Edit file as
    a specific user.
  </li>
  <li>
    <code>C-x C-f /sudoedit::/etc/hosts</code>: Edit file as superuser
    but do not keep an open session running in the background for
    security reasons.  This method has worse performance than
    the <code>sudo</code> method.
  </li>
  <li>
    <code>C-x C-f /su::/etc/hosts</code>: Edit file as
    the <code>root</code> user.
  </li>
  <li>
    <code>/su:alice@:~/foo.txt</code>: Edit file as a specific user.
  </li>
  <li>
    <code>/su:alice@localhost:~/foo.txt</code>: Same as above.
  </li>
  <li>
    <code>C-x C-f /sudo:: RET</code>: Browse the <code>root</code>
    user's home directory as superuser.
  </li>
  <li>
    <code>C-x C-f /su:: RET</code>: Browse the <code>root</code>
    user's home directory with Dired.
  </li>
  <li>
    <code>C-x C-f /-:: RET</code>:
    Use <code>tramp-default-method</code> (<code>scp</code> by
    default) to connect to <code>tramp-default-host</code>
    (current <code>hostname</code> by default).  With the default
    values of these variables, this leads to connecting to the local
    system as the current user via SCP and browsing the current user's
    home directory in Dired.
  </li>
</ul>
<p>
  This chapter recommends looking up the info manual
  page <code>(tramp) Internal methods</code> but this is very likely
  an error.  For example, evaluating <code>(info "(tramp)Internal
  methods")</code> leads to the following error:
</p>
<pre><code>user-error: No such node or anchor: Internal methods</code></pre>
<p>
  Instead evaluate <code>(info "(tramp)Inline methods")</code> to
  reach the correct node that describes the various connection
  methods.
</p>
<h3 id="default-directory">Default Directory<a href="#default-directory"></a></h3>
<p>
  The variable <code>default-directory</code> is buffer local.
  Typically, this is automatically set to the directory where Emacs
  was launched or to the directory of the currently visited file.
  Commands like <code>C-x C-f</code> defaults to looking up files in
  this directory.
</p>
<p>
  While editing a remote file via TRAMP, the value for this variable
  may look something like <code>/ssh:alice@box:/home/alice/</code>.
  The <code>@</code> character is displayed in the mode line while
  editng a remote file.
</p>
<p>
  The chapter presents the following examples of commands that work
  seamlessly on a remote machine:
</p>
<ul>
  <li>
    <code>C-x d</code>: Manage remote files and directories.  We can
    even copy files (using the key sequence <code>C</code>) between
    remote and local dired sessions.
  </li>
  <li>
    <code>M-x compile RET RET</code>: Run <code>make -k</code> (the
    default) or an arbitrary command remotely.  The result is shown in
    the <code>*compilation*</code> buffer.
  </li>
  <li>
    <code>M-x rgrep RET f.. RET *.txt RET RET</code>:
    Use <code>find</code> and <code>grep</code> together to search for
    the pattern <code>f..</code> in files matching the
    pattern <code>*.txt</code> in the current remote directory.
  </li>
  <li>
    <code>M-x shell RET</code>: Open shell on the remote system in the
    current remote directory.
  </li>
  <li>
    <code>M-x eshell RET</code>: Open Eshell on the remote system in
    the current remote directory.
  </li>
</ul>
<p>
  With Eshell we can go directly into remote directories seamlessly.
  The following Eshell session illustrates this:
</p>
<pre>
<samp>Welcome to the Emacs shell

~ $ <kbd>uname</kbd>
Darwin
~ $ <kbd>cd /ssh:alice@box:~/foo/</kbd>
/ssh:alice@box:/home/alice/foo $ <kbd>hostname</kbd>
debian
/ssh:alice@box:/home/alice/foo $</samp>
</pre>
<h3 id="multi-hops">Multi-Hops<a href="#multi-hops"></a></h3>
<p>
  Here are some commands that illustrate how multi-hops work:
</p>
<ul>
  <li>
    <code>C-x C-f /ssh:alice@box|ssh:bob@localhost:~/foo.txt
    RET</code>: First log in as <code>alice</code>
    into <code>box</code> and then from there log in
    as <code>bob</code> into the same system.
  </li>
  <li>
    <code>C-x C-f /ssh:alice@box|sudo:box:/etc/hosts RET</code>: First
    log in as <code>alice</code> into <code>box</code> and then edit
    file as superuser.
  </li>
  <li>
    <code>C-x C-f /ssh:alice@box|sudo::/etc/hosts RET</code>: Same as
    above.
  </li>
  <li>
    <code>C-x C-f /ssh:alice@box|sudo:bob@box:~/bar.txt RET</code>:
    First log in as <code>alice</code> into <code>box</code> and then
    use <code>sudo</code> to edit file as <code>bob</code> in the
    latter user's home directory.
  </li>
  <li>
    <code>C-x C-f /ssh:alice@box|su::/etc/hosts RET</code>: First log
    in as <code>alice</code> into <code>box</code> and then edit file
    as <code>root</code>.
  </li>
  <li>
    <code>C-x C-f /ssh:alice@box|su:bob@:~/bar.txt RET</code>: First log
    in as <code>alice</code> into <code>box</code> and then edit file
    as <code>bob</code>.
  </li>
  <li>
    <code>C-x C-f /ssh:alice@box|su:bob@box:~/bar.txt RET</code>: Same
    as above.
  </li>
  <li>
    <code>C-x C-f /ssh:alice@box1|ssh:bob@box2|ssh:carol@box3:~/foo.txt</code>:
    An example of two hops.
  </li>
</ul>
<p>
  Bookmarks with key sequences like <code>C-x r m</code>
  (<code>bookmark-set</code>), <code>C-x r l</code>
  (<code>bookmark-bmenu-list</code>) and <code>C-x r b</code>
  (<code>bookmark-jump</code>) work seamlessly for remote files
  (including multi-hops).
</p>
<p>
  Eshell works seamlessy too across multi-hops.  Here is an Eshell
  session that illustrates it:
</p>
<pre>
<samp>~ $ <kbd>uname</kbd>
Darwin
~ $ <kbd>cd '/ssh:alice@box1|ssh:bob@box2|ssh:carol@box3:/home/carol/foo/bar/'</kbd>
/ssh:alice@box1|ssh:bob@box2|ssh:carol@box3:/home/carol/foo/bar $ <kbd>uname</kbd>
Linux
/ssh:alice@box1|ssh:bob@box2|ssh:carol@box3:/home/carol/foo/bar $</samp>
</pre>
<h2 id="eww">EWW: Emacs Web Wowser<a href="#eww"></a></h2>
<p>
  The following commands are useful to get started with EWW.
</p>
<ul>
  <li>
    <code>M-x eww RET hello RET</code>: Search for the word "hello"
    with DuckDuckGo.  If the buffer <code>*eww*</code> already exists,
    then reuse that buffer, otherwise create such a buffer.  The
    search engine can be customised by setting the
    variable <code>eww-search-prefix</code> (it
    is <code>"https://duckduckgo.com/html/?q="</code> by default).
  </li>
  <li>
    <code>C-u M-x eww RET hello RET</code>: Like previous command
    except that it creates a new EWW buffer.
  </li>
  <li>
    <code>M-x eww RET example.net RET</code>: Visit the
    URL <a href="http://example.net/">http://example.net</a>.  Reuses
    the <code>*eww*</code> buffer if it exists.
  </li>
  <li>
    <code>M-x eww RET http://example.net/ RET</code>: Same as above.
  </li>
  <li>
    <code>C-u M-x eww RET example.net RET</code>: Like before but
    creates a new EWW buffer.
  </li>
</ul>
<p>
  In the EWW buffer, the following navigation keys work:
</p>
<ul>
  <li>
    <code>TAB</code>: Skip to the next link.
  </li>
  <li>
    <code>S-TAB</code> or <code>C-M-i</code>: Skip to the previous link.
  </li>
  <li>
    <code>RET</code>: Browse the URL under point.
  </li>
  <li>
    <code>C-u RET</code>: Browse the URL under point using an external
    browser.  This is especially useful when we know that the URL we
    want to open does not render well in EWW.
  </li>
  <li>
    <code>&amp;</code>: Open the current page in an external browser.
    Note that unlike the previous command, this command opens
    the <em>current</em> page.  The previous command opens the URL
    under point instead.
  </li>
  <li>
    <code>q</code>: Quit EWW.
  </li>
  <li>
    <code>l</code>: Go to the previously displayed page.
  </li>
  <li>
    <code>r</code>: Go to the next displayed page.
  </li>
  <li>
    <code>b</code>: Bookmark the current page.
  </li>
  <li>
    <code>B</code>: Show bookmarks.
  </li>
  <li>
    <code>H</code>: Show history of the current EWW buffer.  The most
    recently visited URLs are displayed on top and the oldest ones are
    shown at the bottom.  The current URL is not displayed in the
    history.  Only the older URLs are shown in the history.
  </li>
  <li>
    <code>R</code>: View the main "readable" parts of the current
    page.  This command uses heuristics to find the parts of the web
    page that contains the main content and omits the non-content part
    like navigation menus etc.
  </li>
  <li>
    <code>M-s M-w</code>: Search the web for the text in the region.
    If there is no region, then prompt for a search string.
  </li>
  <li>
    <code>M-RET</code>: Open link in a new EWW buffer.
  </li>
  <li>
    <code>s</code>: Prompt for an EWW buffer to display and switch to
    the selected buffer.  This is similar to changing to tabs in a
    desktop web browser.
  </li>
  <li>
    <code>w</code>: If the point is on a URL or just after a URL, then
    copy that URL to the kill ring.  If the point is at any other
    place, copy the URL of the current page.
  </li>
</ul>
<p>
  Further, EWW supports a few semantic browsing methods.  The
  pertaining commands are presented below.  However note that whether
  these commands would work on a page or not depends on whether the
  page provides the relevant navigation aids required by these
  commands.  Here are the key sequences for such commands:
</p>
<ul>
  <li>
    <code>p</code>: Go to the page marked <em>previous</em>.  A page
    is marked <em>previous</em> if there is
    a <code>&lt;link&gt;</code> tag or an <code>&lt;a&gt;</code> tag
    for it with the attribute <code>rel="prev"</code> (a standard
    value for the attribute) or <code>rel="previous"</code>
    (non-standard value supported by EWW).
  </li>
  <li>
    <code>n</code>: Go to the page marked <em>next</em>.  A page is
    marked <em>next</em> if there is a <code>&lt;link&gt;</code> tag
    or an <code>&lt;a&gt;</code> tag for it with the
    attribute <code>rel="next"</code>.
  </li>
  <li>
    <code>u</code>: Go to the page marked <em>up</em>.  A page is
    marked <em>up</em> if there is a <code>&lt;link&gt;</code>
    or an <code>&lt;a&gt;</code> tag for it with the
    attribute <code>rel="up"</code>.
  </li>
  <li>
    <code>t</code>: Go to the page marked <em>top</em>.  A page is
    marked <em>top</em> if there is a <code>&lt;link&gt;</code> tag or
    an <code>&lt;a&gt;</code> tag for it with the
    attribute <code>rel="start"</code> or <code>rel="home"</code>
    or <code>rel="contents"</code>.
  </li>
</ul>
<h2 id="invoking-external-browser">Invoking External Browser<a href="#invoking-external-browser"></a></h2>
<p>
  If we would rather open a URL using our desktop web browser, then we
  can use the <code>browse-url</code> command like this: <code>M-x
  browse-url RET http://example.net/ RET</code>.
</p>
<p>
  This command very conveniently picks up the word or domain name at
  the point or just before the point and uses that as the default
  value for the URL input.  Therefore if the cursor is already on a
  URL, then we can simply type <code>M-x browse-url RET RET</code> to
  visit it.
</p>
<h2 id="dired">Dired<a href="#dired"></a></h2>
<h3 id="dired-getting-started">Dired: Getting Started<a href="#dired-getting-started"></a></h3>
<p>
  There are several ways to start Dired.  Some examples are presented
  below:
</p>
<ul>
  <li>
    <code>C-x C-f ~/foo/bar/ C-d</code>: If IDO or FIDO mode is
    enabled, then this key sequence automatically opens Dired in the
    given directory path.  Essentially, while using <code>C-x
    C-f</code> with IDO/FIDO mode, we can type <code>C-d</code>
    anytime and Dired is opened in the path entered so far.
  </li>
  <li>
    <code>M-x dired RET ~/foo/bar/ RET</code>: Opens Dired in the
    given directory path.
  </li>
  <li>
    <code>M-x dired RET RET</code>: In the previous command, the
    default input is the path of the current directory
    (<code>default-directory</code>), so this key sequence
    conveniently opens Dired in the current directory.
  </li>
  <li>
    <code>C-x d</code>: Same as above.
  </li>
  <li>
    <code>C-x 4 d</code>: Like before but open Dired in another
    window.
  </li>
</ul>
<h3 id="dired-navigation">Dired: Navigation<a href="#dired-navigation"></a></h3>
<p>
  The following keys work in a Dired buffer:
</p>
<ul>
  <li>
    <code>RET</code>: Visit the file or directory on the current line.
  </li>
  <li>
    <code>^</code>: Go up by one directory.  If the parent directory
    is found in an existing buffer, then switch to that buffer.
    Otherwise create a new buffer to show the parent directory in
    Dired.
  </li>
  <li>
    <code>q</code>: Quit Dired window.  The buffer remains intact,
    i.e. the buffer is only buried, not killed.
  </li>
  <li>
    <code>C-u q</code>: Quit Dired window and kill the buffer.
  </li>
  <li>
    <code>p</code> or <code>C-p</code>: Move to the previous line and
    position the point on the filename.
  </li>
  <li>
    <code>n</code> or <code>C-n</code>: Move to the next line and
    position the point on the filename.
  </li>
</ul>
<p>
  Note that when we go from one Dired buffer to another (say, by
  typing <code>RET</code> to enter a subdirectory from a parent
  directory), then typing <code>q</code> or <code>C-u q</code> buries
  or kills (respectively) the current buffer and takes us back to the
  last Dired buffer.
</p>
<h3 id="dired-marking-and-unmarking">Dired: Marking and Unmarking<a href="#dired-marking-and-unmarking"></a></h3>
<p>
  The following list describes marking and unmarking commands of
  Dired:
</p>
<ul>
  <li>
    <code>m</code>: Mark the file or directory at point.  If the
    region is active, mark all files or directories in the region.
    Note that at least one character of the filename or directory name
    must lie within the region for a file to be marked.
  </li>
  <li>
    <code>u</code>: Unmark the file or directory at point.  If the
    region is active, unmark all files or directories in the region.
    Note that this also removes the flag for deletion (introduced
    later in this list).
  </li>
  <li>
    <code>U</code>: Unmark everything.  Note that this also removes
    flags for deletion.
  </li>
  <li>
    <code>d</code>: Flag the file or directory for deletion.  If the
    region is active, flag all files or directories in the region for
    deletion.
  </li>
</ul>
<p>
  The following key sequences describe the effects of prefix arguments
  with marking, unmarking and flagging commands:
</p>
<ul>
  <li>
    <code>C-5 m</code>: Mark 5 files from the current line to 4 more
    lines below.
  </li>
  <li>
    <code>C-5 u</code>: Unmark 5 files from the current line for
    deletion..
  </li>
  <li>
    <code>C-5 d</code>: Flag 5 files from the current line for deletion.
  </li>
  <li>
    <code>C-- C-1 m</code>: Mark the file on the previous line.
  </li>
  <li>
    <code>C-- C-1 u</code>: Unmark the file on the previous line.
  </li>
  <li>
    <code>C-- C-1 d</code>: Flag the file on the previous line for deletion.
  </li>
  <li>
    <code>C-- C-5 m</code>: Mark files in the 5 previous lines.
  </li>
  <li>
    <code>C-- C-5 u</code>: Unmark files in the 5 previous lines.
  </li>
  <li>
    <code>C-- C-5 d</code>: Flag files in the 5 previous lines for
    deletion.
  </li>
</ul>
<p>
  Additionally, the chapter mentions the following commands in a
  separate table but on Emacs 28.2, they seem to have the same effect
  as one of the commands discussed earlier:
</p>
<ul>
  <li>
    <code>* m</code>: Behaves the same as <code>m</code> and marks
    files.
  </li>
  <li>
    <code>* u</code>: Behaves the same as <code>u</code> and unmarks
    files.
  </li>
</ul>
<p>
  However the following commands (also introduced briefly in the same
  table but illustrated with complete key sequences below) provide
  additional marking and unmarking facilities:
</p>
<ul>
  <li>
    <code>* % f.. RET</code>: Mark files with names that match the
    regular expression <code>f..</code>.  If the region is active,
    then only the files in the region that match the pattern are
    marked.  The directories <code>.</code> and <code>..</code> are
    never marked.
  </li>
  <li>
    <code>% m f.. RET</code>: Same as above.
  </li>
  <li>
    <code>C-u * % f.. RET</code>: Unmark files with names that match
    the regular expression <code>f..</code>.  If the region is active,
    then only the files in the region that match the pattern are
    unmarked.  The directories <code>.</code> and <code>..</code> are
    never unmarked.
  </li>
  <li>
    <code>C-u % m f.. RET</code>: Same as above.
  </li>
  <li>
    <code>t</code> or <code>* t</code>: Toggle marks.  The marked
    files become unmarked and vice versa.  If the region is active,
    toggle the marks of only the files in the region.  The
    directories <code>.</code> and <code>..</code> are never toggled.
    Flagged files are not toggled.
  </li>
  <li>
    <code>* c * D</code>: Change all files marked with <code>*</code>
    to be now marked with <code>D</code> (i.e. flagged for deletion).
    Note that unlike the other commands, this command ignores the
    active region.  It performs the change in the whole buffer.
  </li>
  <li>
    <code>* c D SPC</code>: Change all files marked
    with <code>D</code> to be now unmarked.
  </li>
</ul>
<p>
  The chapter also mentions a key sequence <code>* .</code> to mark
  files by extension but this requires <code>dired-x</code>, so this
  is discussed in a later section of this page.
</p>
<h3 id="dired-operations">Dired: Operations<a href="#dired-operations"></a></h3>
<p>
  This section explains some operations we can perform in Dired.  If
  there are one or more items marked in the Dired buffer, then the
  operations work on the marked items.  Otherwise, the operations work
  on the item under the cursor.
</p>
<ul>
  <li>
    <code>C</code>: Copy marked files or copy the current file.  If
    one file is being copied, this command prompts for the target file
    path.  If multiple files are being copied, this command prompts
    for the target directory path.
  </li>
  <li>
    <code>R</code>: Rename marked files or the current file.  If one
    file is being renamed, this command prompts for the target file
    path.  If multiple file are being renamed, this command prompts
    for the target directory path.
  </li>
  <li>
    <code>O</code>: Change owner of the marked files or the current
    file.  A complete key sequence may look like <code>O root
    RET</code>.
  </li>
  <li>
    <code>G</code>: Change group of the marked files or the current
    file.  A complete sequence may look like <code>G wheel RET</code>.
  </li>
  <li>
    <code>M</code>: Change the mode of the marked files or the current
    file.  A complete key sequence may look like <code>M u+x
    RET</code> or <code>M 600 RET</code>.  Both symbolic modes
    like <code>u+x</code> and numeric modes like <code>600</code> are
    supported.
  </li>
  <li>
    <code>D</code>: Delete marked files, i.e. the files that are
    marked with <code>*</code> on the leftmost column of the Dired
    buffer.
  </li>
  <li>
    <code>x</code>: Delete the files flagged for deletion, i.e. the
    files that are marked with <code>D</code> on the leftmost column
    of the Dired buffer.
  </li>
  <li>
    <code>c</code>: Compress marked files or current file into an
    archive.  The archive file name is prompted.  The format of the
    archive is automatically deduced from the extension of the file
    name entered at the prompt.  A complete key sequence may look
    like <code>c foo.tar.gz RET</code> or <code>c foo.zip RET</code>.
  </li>
</ul>
<p>
  Note the difference between <code>D</code> and <code>x</code>.  The
  key <code>D</code> deletes marked files but the key <code>x</code>
  deletes flagged files.  Therefore there are two ways of deleting
  files:
</p>
<ul>
  <li>
    Mark files with <code>m</code> and delete them with <code>D</code>.
  </li>
  <li>
    Flag files with <code>d</code> and delete them with <code>x</code>.
  </li>
</ul>
<p>
  I normally prefer the second way of deleting files.  Since deleting
  file is a destructive operation which is possibly risky, I like to
  flag them first with <code>d</code> before deleting them
  with <code>x</code>.  In other words, I flag files for deletions and
  mark files for everything else.  Since I do not use
  the <code>D</code> key, I can be confident that my marked files are
  always safe and there is no risk of inadvertently deleting them.
</p>
<h3 id="dired-copying-or-renaming-between-buffers">Dired: Copying or Renaming Between Buffers<a href="#dired-copying-or-renaming-between-buffers"></a></h3>
<p>
  The following steps explain how we can copy or move files from one
  Dired buffer to another.  First we will see the default behaviour
  and then we will customise Dired to copy or move files to a
  particular Dired directory.
</p>
<ol>
  <li>
    Type <code>C-x d /usr/ RET</code>.
  </li>
  <li>
    Type <code>C-x 2</code>.
  </li>
  <li>
    Type <code>C-x d /tmp/ RET</code>.
  </li>
  <li>
    Type <code>C-x 2</code> agian.
  </li>
  <li>
    Type <code>C-x d /etc/ RET</code>.
  </li>
  <li>
    Move the cursor on some file in <code>/etc/</code> and then
    type <code>C</code> or <code>R</code> and we will see that the
    default directory to copy/move the file to is <code>/etc/</code>.
  </li>
  <li>
    Now type <code>(setq dired-dwim-target t)</code>.
  </li>
  <li>
    Now type <code>C</code> or <code>R</code> again while the cursor
    is on some file in <code>/etc/</code>.  We will see that the
    default directory to copy/move the file to is <code>/tmp/</code>
    now.  Since <code>dired-dwim-target</code> is set to non-nil,
    Dired picks the directory from the next window with a Dired buffer
    and uses that as the target buffer.
  </li>
</ol>
<h3 id="dired-more-keys">Dired: More Keys<a href="#dired-more-keys"></a></h3>
<p>
  Here are some examples of Dired keys that do not act on marked files
  but does other interesting work:
</p>
<ul>
  <li>
    <code>g</code>: Refresh the Dired buffer.
  </li>
  <li>
    <code>+</code>: Create directory.  A complete key sequence may
    look like <code>+ bar RET</code>.
  </li>
  <li>
    <code>s</code>: Toggle sorting by date.  By default, the items in
    the Dired buffer are sorted by file/directory names.
  </li>
  <li>
    <code>&lt;</code>: Jump to the next directory.
  </li>
  <li>
    <code>&gt;</code>: Jump to the previous directory.
  </li>
  <li>
    <code>j</code>: Jump to a file by name.  A complete sequence may
    look like <code>j hosts RET</code>.  Note that this only moves the
    cursor to the line in Dired buffer with the provided filename.  It
    does not visit the file.
  </li>
  <li>
    <code>M-s a C-s</code>: Perform multi-file incremental search
    through all marked files or the current file.  Marked directories
    are ignored.  Action region is also ignored.  It performs the
    search across all marked files.  A complete key sequence may look
    like <code>M-s a C-s foo</code> and then repeat <code>C-s</code>
    over and over again to jump through all the matches.  When the
    search reaches the end of one file, the next <code>C-s</code>
    automatically jumps to the match in the next file.
  </li>
  <li>
    <code>Q</code>: Perform multi-file regex-based search-and-replace
    operation through all marked files or the current file.  For any
    marked directories, the search-and-replace operation is performed
    in all its files recursively.  The active region is ignored.  A
    complete key sequence may look like <code>Q f.. RET \&amp;\&amp;
    RET</code> which searches for strings matching the
    pattern <code>f..</code>  and duplicates that string.  The key
    sequences supported by <code>C-M-%</code>
    (<code>query-replace-regexp</code>)
    like <code>y</code>, <code>n</code>, etc. work here.  See
    section <a href="ch05.html#search-and-replace">Search and
    Replace</a> for an account of the supported key sequences.  The
    search results are also displayed in a
    separate <code>*xref*</code>
  </li>
  <li>
    <code>A</code>: Find matches for a regular expression pattern in
    all marked files or the current file.  For any marked directories,
    all its files are searched recursively.  The active region is
    ignored.  A complete key sequence may look like <code>A
    f.. RET</code>.  Note that this does not perform incremental
    search.  Instead the search results are displayed in
    <code>*xref*</code> buffer.
  </li>
  <li>
    <code>!</code>: Run a shell command on each marked file or
    directory (or the current file or directory if nothing is marked).
    The command is executed synchronously.  The active region is
    ignored or the current file or directory.  The command works on
    all marked files and directories.  The output is displayed in a
    separate buffer.  If <code>*</code> is present in the command,
    then each <code>*</code> is replaced with the entire file list and
    the command runs only once (not multiple times, once for each
    file).  If <code>?</code> is present in the command, then the
    command runs multiple times, once for each marked file, with
    each <code>?</code> replaced with the name of the file being
    operated on.  It is an error to specify both <code>*</code>
    and <code>?</code>.  If neither is present, then the command runs
    multiple times, once for each marked file.
  </li>
  <li>
    <code>&amp;</code>: Like the previous command but runs the command
    asynchronously.
  </li>
</ul>
<p>
  To understand the usefulness of <code>g</code>, while Dired is open
  create a new file in the current directory with, say, <code>C-x C-f
  foo.txt RET</code> and save it with <code>C-x s</code>.  Then kill
  the buffer for the file with <code>C-x k</code> and return to the
  Dired buffer.  The Dired buffer does not show the new
  file <code>foo.txt</code>.  Now type <code>g</code> to refresh the
  Dired buffer.  As soon as <code>g</code> is typed, the buffer gets
  updated to display the new file.
</p>
<p>
  To understand the difference between <code>!</code> and
  <code>&amp;</code> mark five files and then type the key
  sequence <code>! sleep 1; echo</code>.  Emacs blocks (i.e. does not
  react to our keystrokes) for 5 seconds while it runs the given
  command for each file.  When the <code>echo</code> output for all
  files is obtained after 5 seconds, the output appears and Emacs
  unblocks again.  Now type <code>&amp; sleep 1; echo</code>.  Now
  Emacs remains unblocked while the output of each <code>echo</code>
  command appears at one second intervals in the output buffer.
</p>
<h3 id="dired-x">Dired-X<a href="#dired-x"></a></h3>
<p>
  Dired-X provides extra Dired functionality.  It is not enabled by
  default.  To enable it, add the following line to the Emacs
  initialisation file:
</p>
<pre><code>(require 'dired-x)</code></pre>
<p>
  The following key sequences are supported by Dired-X:
</p>
<ul>
  <li>
    <code>F</code>: Visit the marked files or the current file.  When
    multiple files are visited, they are opened in split windows
    distributed as evenly as possible.
  </li>
  <li>
    <code>C-u F</code>: Visit the marked files or the current file but
    open them in background, i.e. do not show them on any window.
  </li>
  <li>
    <code>* .</code>: Mark files with a certain extension.  If the
    region is active, then mark only the files in the region that have
    the given extension.  A complete key sequence may look
    like <code>* . txt</code>.
  </li>
  <li>
    <code>!</code> and <code>&amp;</code>: These commands still work
    the way they were described in the previous section.  However with
    Dired-X enabled, when <code>!</code> or <code>&amp;</code> is
    invoked on a single file (either a single marked file or no marked
    file in which case it operates on the current file), it
    automatically determines the command to execute for the current
    file type and offers that as the default input.
  </li>
</ul>
<h3 id="dired-working-across-directories">Dired: Working Across Directories<a href="#dired-working-across-directories"></a></h3>
<p>
  The following key sequences offer some support for working across
  multiple directories in the same Dired buffer:
</p>
<ul>
  <li>
    <code>i</code>: While the cursor is on a line for a directory, it
    expands the directory listing for that directory in the same Dired
    buffer.  Now we could use the mark, unmark, etc. commands to
    select files that belong to multiple directories and operate on
    them from the same Dired buffer.
  </li>
  <li>
    <code>$</code>: Collapse or expand the current directory listing.
    If there are multiple directory listings (such as the ones created
    with <code>i</code>), then move to the next directory listing
    after collapsing or expanding the current one.
  </li>
</ul>
<p>
  Using <code>i</code> to insert the directory listing of a
  subdirectory into the current Dired buffer could feel tedious if we
  want to recursively work on multiple directories.  The commands
  (illustrated with complete key sequences below) may be more suitable
  for such operations:
</p>
<ul>
  <li>
    <p>
      <code>M-x find-dired RET RET -name SPC "f*.txt" RET</code>: Find
      all files and directories in the current directory and its
      subdirectories recursively with name matching the
      pattern <code>f*.txt</code> and show the results in the buffer
      named <code>*Find*</code> with Dired mode enabled in it.  Emacs
      runs the following command to get the results:
    </p>
    <pre><code>find . \( -name "f*.txt" \) -ls</code></pre>
  </li>
  <li>
    <p>
      <code>M-x find-name-dired RET RET f*.txt RET</code>: Same as
      above.  Emacs runs the following command to get the results:
    </p>
    <pre><code>find . \( -name f\*.txt \) -l</code></pre>
    <p>
      Further on a system with case-insensitive filenames, Emacs is
      clever enough to use the <code>-iname</code> argument instead
      of <code>-name</code> so that case-insensitive search is
      performed.
    </p>
  </li>
  <li>
    <p>
      <code>M-x find-grep-dired RET RET f.. RET</code>: Find all files
      in the current directory and its subdirectories recursively and
      list the files where lines matching the regular
      expression <code>..</code> is found.  The result is shown in a
      the buffer named <code>*Find</code> with Dired mode enabled in
      it.  Emacs runs the following command to get the results:
    </p>
    <pre><code>find . \( -type f -exec grep -q -e f.. \{\} \; \) -ls</code></pre>
  </li>
  <li>
    <p>
      <code>M-x find-lisp-find-dired RET RET f.. RET</code>: Find all
      files in the current directory and subdirectories recursively
      and list the files with names that match the regular expression
      pattern <code>..</code>.  Note that this is different from
      both <code>find-name-dired</code>
      and <code>find-grep-dired</code>.  The former relies on the
      Unix <code>find</code> command to match filenames using glob
      patterns.  The latter uses both <code>find</code>
      and <code>grep</code> to list files that contain a line with a
      matching regular expression pattern.  However this command lists
      files with names that match a regular expression pattern (not
      glob pattern).  Further this command is implemented purely in
      Elisp and does not have any external dependencies on tools
      like <code>find</code> and <code>grep</code>.
    </p>
  </li>
</ul>
<h2 id="shell-commands">Shell Commands<a href="#shell-commands"></a></h2>
<p>
  The following complete key sequences demonstrate how we can invoke
  shell commands from Emacs.
</p>
<ul>
  <li>
    <code>M-! uname RET</code>: Execute shell command and show output.
  </li>
  <li>
    <code>C-u M-! uname RET</code>: Like above but insert the output
    into the buffer wherever the cursor is.  The cursor remains at the
    same place.  The mark is set to the character just after the last
    character of the output.  Therefore, typing <code>C-x C-x</code>
    (<code>exchange-point-and-mark</code>) is a quick way to highlight
    the output just inserted as an active region.
  </li>
  <li>
    <code>M-! ping SPC -c SPC 4 SPC localhost RET</code>: Execute a
    slightly long running shell command that takes about 4 seconds to
    complete.  Emacs blocks while the command is running because the
    command is executed synchronously.
  </li>
  <li>
    <code>C-u M-! ping SPC -c SPC 4 SPC localhost RET</code>: Like
    before but the output is inserted into the buffer.  Again, Emacs
    blocks while the command is executed.  The output appears in the
    buffer only after the command completes execution.
  </li>
  <li>
    <code>M-&amp; ping SPC -c SPC 4 SPC localhost RET</code>:
    Like <code>M-!</code> but execute shell command asynchronously.
    Emacs remains unblocked and the output appears in the output
    buffer as soon as the output is printed by the command.
  </li>
  <li>
    <code>M-| wc RET</code>: Pipe region to shell command and show
    output.
  </li>
  <li>
    <code>C-u M-| wc RET</code>: Pipe region to shell command and
    replace the region with the output.
  </li>
</ul>
<p>
  The book also mentions that <code>C-u M-&amp;</code> is supposed to
  work like <code>C-u M-!</code> but asynchronously but I did not find
  this to be true.  For example, <code>C-u M-&amp; uname RET</code>
  led to the following error <code>Wrong type argument: stringp,
  (4)</code>.  This may be a bug in Emacs 28.2.
</p>
<h2 id="compiling-in-emacs">Compiling in Emacs<a href="#compiling-in-emacs"></a></h2>
<p>
  The following complete key sequences demonstrate this feature:
</p>
<ul>
  <li>
    <code>M-x compile RET</code>: Runs <code>make -f</code> by
    default.  The default command is offered as a minibuffer input
    before we type <code>RET</code>.  Therefore we can edit the
    command to any arbitrary command before typing <code>RET</code>.
  </li>
  <li>
    <code>M-x recompile RET</code>: Runs the last compile command
    again.
  </li>
  <li>
    <code>C-x p c</code>: Compile in the current project.  See
    section <a href="#project-management">Project Management</a> for
    more details.
  </li>
</ul>
<p>
  The compile commands display the output in
  the <code>*compilation*</code> buffer where the following key
  sequences work:
</p>
<ul>
  <li>
    <code>M-g M-n</code>: Jump to the next error.  The cursor jumps to
    the next error line in the <code>*compilation*</code> and the
    source of the matching error line is opened in a separated window.
  </li>
  <li>
    <code>M-g M-p</code>: Jump to the previous error.
  </li>
  <li>
    <code>g</code>: Recompile, i.e. run the last compile command
    again.
  </li>
</ul>
<h2 id="shells-in-emacs">Shells in Emacs<a href="#shells-in-emacs"></a></h2>
<h3 id="m-x-shell">M-x shell<a href="#m-x-shell"></a></h3>
<p>
  The key sequence <code>M-x shell RET</code> starts a shell with
  input/output done via a buffer.  Some important points to keep in
  mind while using this:
</p>
<ul>
  <li>
    The TAB-completion mechanism of the underlying shell (e.g. Bash,
    Zsh, etc.) does not work.  In fact, <code>TAB</code> invokes
    Emacs's own completion mechanism.
  </li>
  <li>
    Programs like <code>top</code> and <code>man</code> that need to
    control the terminal do not work.  Only programs that perform
    input/output via standard input, standard output and standard
    error, etc. work well.
  </li>
  <li>
    Since the shell buffer is made completely of text, all text
    editing commands of Emacs work seamlessly on the buffer.
  </li>
  <li>
    We can take the cursor to absolutely anywhere in the buffer and
    type <code>RET</code> to execute whatever is on that line as a
    shell command.  Shell prompt on the line is automatically excluded
    from the command to be executed.
  </li>
</ul>
<p>
  Here are some key bindings that work in the shell buffer:
</p>
<ul>
  <li>
    <code>M-p</code>: Cycle backwards through input history.
  </li>
  <li>
    <code>M-n</code>: Cycle forwards through input history.
  </li>
  <li>
    <code>C-&lt;up&gt;</code>: Same as <code>M-p</code>.  May not work
    if the desktop environment gobbles up this keystroke.
  </li>
  <li>
    <code>C-&lt;down&gt;</code>: Same as <code>M-n</code>.  May not
    work if the desktop environment gobbles up this keystroke.
  </li>
  <li>
    <code>M-r f..</code>: Search history backwards for all commands
    that match the pattern <code>f..</code>.  Within the search, we
    can use incremental search key bindings
    like <code>C-r</code>, <code>C-s</code>, etc. to search backward,
    forward, etc. respectively.
  </li>
  <li>
    <code>C-c C-p</code>: Move to the previous prompt.  The cursor
    moves to the place just after the prompt.
  </li>
  <li>
    <code>C-c C-n</code>: Move to the next prompt.
  </li>
  <li>
    <code>C-c C-s out.txt RET</code>: Write output since the last
    input to a file.  Any prompt at the end of the output is not
    written.  Note that by default the output on shell contains the
    input command as well.  The input command is echoed back, so our
    input command appears twice in the buffer: once where we typed it
    and once more echoed just before the beginning of the output.
    This echoed input command is also saved to the file.
  </li>
  <li>
    <code>C-c C-o</code>: Delete all output since the last input.  Any
    prompt is of course left intact.
  </li>
  <li>
    <code>C-u C-c C-o</code>: Delete all output since the last input
    and save it to the kill ring.
  </li>
  <li>
    <code>C-c C-l</code>: Show the list of recent inputs in
    the <code>*Input History*</code> buffer.
  </li>
  <li>
    <code>C-d</code>: If the cursor is at the end of the buffer and
    there is no input, send EOF.  Otherwise delete a character forward.
  </li>
  <li>
    <code>C-c C-z</code>: Suspend the current job.  This performs the
    same function as <code>C-z</code> in the underlying shell.  We can
    then use job control commands like <code>bg</code>
    or <code>fg</code> to resume the job as a background process or
    foreground process.
  </li>
  <li>
    <code>TAB</code>: Perform completion at point.
  </li>
</ul>
<h3 id="m-x-ansi-term">M-x ansi-term<a href="#m-x-ansi-term"></a></h3>
<p>
  The key sequence <code>M-x ansi-term RET RET</code> launches an
  ANSI-capable terminal emulator.  It can run sophisticated programs
  like <code>top</code>, <code>man</code>, etc. that require terminal
  capabilities fine.  The following key sequences are useful in this
  terminal emulator:
</p>
<ul>
  <li>
    <code>C-c C-j</code>: Switch to line ("cooked") sub-mode.  Emacs
    editing key sequences work normally in this mode,
    except <code>RET</code> which sends the current line as a command
    to the underlying shell.
  </li>
  <li>
    <code>C-c C-k</code>: Switch to char ("raw") sub-mode.  By
    default, the terminal starts in this mode.  Each character we type
    in this sub-mode is sent directly to the shell, except for the
    escape character <code>C-c</code> which is used as the prefix keys
    for the key sequences described in this list.
  </li>
  <li>
    <code>C-c C-c</code>: Interrupt the current subjob.
  </li>
</ul>
<h3 id="m-x-eshell">M-x eshell<a href="#m-x-eshell"></a></h3>
<p>
  The key sequence <code>M-x eshell RET</code> creates an interactive
  Eshell buffer if none exists or switches to an existing one.  Eshell
  is implemented in Elisp.  It provides Elisp implementation of Unix
  commands like <code>ls</code>, <code>cp</code>, etc.
</p>
<p>
  The list below provides examples of some commands we can enter
  directly into Eshell:
</p>
<ul>
  <li>
    <code>which ls</code>: The output should show that <code>ls</code>
    is an Elisp function.
  </li>
  <li>
    <code>which which</code>: The output should show
    that <code>which</code> itself is an Elisp function.
  </li>
  <li>
    <code>which top</code>: The output should show the file path of
    the external program <code>top</code>.
  </li>
  <li>
    <code>ls -l</code>: Run Eshell's implementation of <code>ls</code>
    written in Elisp.
  </li>
  <li>
    <code>find-file /etc/hosts</code>: Run the Elisp function
    named <code>find-file</code> with the
    argument <code>/etc/hosts</code> thus opening the file in a
    buffer.
  </li>
  <li>
    <code>/bin/ls -l</code>: Run the external command <code>ls</code>
    available provided by the operating system utilities.
  </li>
  <li>
    <code>python3 --version</code>: Run the external
    program <code>python3</code>.
  </li>
  <li>
    <code>top</code>: Start the program <code>top</code> in a separate
    buffer with <code>term-mode</code> as the major mode.
  </li>
</ul>
<p>
  In the last point we see that for programs like <code>top</code>
  which need terminal capabilities to show output in a visual fashion
  (as opposed to just printing output to standard output or standard
  error), Eshell automatically runs the program in
  a <code>term-mode</code> buffer, so that the output of the visual
  program can be handled and displayed correctly.  Eshell looks at the
  list in the variable <code>eshell-visual-commands</code> to
  determine if a command needs terminal support or not.  By default,
  commands like <code>vi</code>, <code>screen</code>,
  <code>tmux</code>, <code>top</code>, etc. belong to this list.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/cc/mastering-emacs/ch06.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a> |
  <a href="https://susam.net/tag/meetup.html">#meetup</a>
</p>
]]>
</description>
</item>
<item>
<title>CFRS[] 0.1.0</title>
<link>https://susam.net/code/news/cfrs/0.1.0.html</link>
<guid isPermaLink="false">fmbcp</guid>
<pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  CFRS[] 0.1.0 is the first release of CFRS[], an extremely minimal
  drawing language that consists of only six simple commands.  Ever
  since this new esoteric language and its implementation was
  <a href="https://news.ycombinator.com/item?id=37956065">announced
  about two months ago</a>, a small but enthusiastic community has
  sprung up around it.  Feedback and enhancement requests from the
  community has been crucial in polishing the implementation and
  arriving at the current stable release.  Further, some community
  members have also submitted very interesting and impressive demos.
</p>
<p>
  To play with CFRS[] now, please
  visit <a href="../../../cfrs.html">cfrs.html</a>.
</p>
<p>
  See <a href="https://github.com/susam/cfrs#readme">github.com/susam/cfrs</a>
  for more information about CFRS.  Also, see this
  <a href="https://susam.github.io/cfrs/demo.html">demo page</a> for a
  curated collection of community demos.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/cfrs/0.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>My Coding Adventures in 2023</title>
<link>https://susam.net/code-2023.html</link>
<guid isPermaLink="false">gvday</guid>
<pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  In moments of leisure, I find myself immersed in crafting personal
  tools and exploring the joys of computer programming.  Sometimes a
  few of these endeavors evolve into concrete utilities that I feel
  comfortable sharing with others under a free software license.
  Below, I present some highlights and updates from this year's coding
  adventures:
</p>
<ul>
  <li>
    <p>
      <a href="https://github.com/susam/devil">Devil</a>: This is a
      new Emacs package that intercepts and translates keystrokes to
      provide a modifier-free, non-modal editing experience.  I wrote
      this directly in my <code>~/.emacs</code> several years ago to
      avoid typing key chords.  This tool allowed me to use comma
      (<code>,</code>) as the leader key for invoking key sequences
      involving <kbd>ctrl</kbd> and <kbd>meta</kbd> keys.  I kept it
      private for a long time because I felt that the Emacs community
      may find some of the design decisions and the default choices to
      be outrageous.  However, after extracting it into a separate
      package and sharing it
      on <a href="https://melpa.org/#/devil">MELPA</a> (and later
      on <a href="https://elpa.nongnu.org/nongnu/devil.html">NonGNU
      ELPA</a> too), I was pleasantly surprised by the warm and
      supportive feedback I received from many kind and generous
      community members.  In fact, this package received several
      updates this year in order to address such feedback and
      enhancement requests as well as to integrate contributions from
      the community.  This package has evolved a lot and become much
      better, thanks to the small and supportive community that formed
      around it.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/cfrs">CFRS[]</a>: This is my
      first contribution to the quirky world of esolangs.  CFRS[] is
      an extremely minimal drawing language consisting of only 6
      simple commands: <code>C</code>,
      <code>F</code>, <code>R</code>, <code>S</code>, <code>[</code>
      and <code>]</code>.  See the
      file <a href="https://github.com/susam/cfrs/blob/main/demo.md">demo.md</a>
      for a collection of some nice demos submitted by the small
      community around this language.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/fxyt">FXYT</a>: A tiny,
      stack-based, postfix, canvas colouring language with only 36
      simple commands.  This is one of my very recent creations.
      There is not much of a community around it yet.  Nevertheless, I
      find it a lot of fun to play with.  The README file at the
      preceding link has some interesting demos.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/pcface">PC Face</a>: This is a
      a collection of tools that I wrote early this year to generate
      bitmap arrays for rendering CP437 glyphs using free and open
      source fonts based on the IBM PC OEM fonts.  The bitmaps are
      available in the form of JavaScript arrays and can be used quite
      easily to render glpyhs on an HTML5 Canvas.  Additionally, this
      project offers a few Python and JavaScript functions to create
      similar bitmap arrays from other similar PC fonts and render
      them.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/invaders">Andromeda
      Invaders</a>: I wrote this game last year to fulfill my
      childhood dream of writing my own invaders-style game.  This
      game received several updates this year around text rendering on
      canvas.  In fact, it was the update for rendering text using IBM
      PC OEM fonts that led to the PC Face project mentioned in the
      previous point.  The gameplay has been tweaked too to increase
      the difficulty level.  Further, I wrote an autoplay algorithm
      for fun.  This algorithm automatically moves the player to avoid
      falling boulders and hit the invader ships.  To see the autoplay
      algorithm in action, visit
      <a href="invaders.html#auto">invaders.html#auto</a>.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/nimb">NIMB</a>: NIMB stands
      for NIMB IRC Matrix Bridge.  Yes, a recursive acronym!  ;) This
      is a simple relay client to bridge together different IRC
      channels and Matrix rooms.  Growing dissatisfied with how the
      official bridge from Matrix assumed admin power level in a
      bridged room, removed idle users, etc., I wrote this as a small
      and simple tool for bridging my channels and rooms.  Later when
      Matrix <a href="https://matrix.org/blog/2023/11/28/shutting-down-bridge-to-libera-chat/">announced</a>
      that they would shut down their official bridge, it had almost
      no impact on me because I had already switched over from their
      official bridge to this little tool for my bridging needs.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/clog">Clog</a>: This is a tiny
      IRC chat logger written in Python.  I use it to keep a local
      archive of the chats of some of my favourite IRC channels.  This
      is perhaps my smallest personal tool.  I have shared it at the
      preceding link in case anyone finds it useful but as far as I
      know, I am the only who uses this.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/emacs4cl">Emacs4CL</a>: This
      is an old project that was first released in 2020.  It provides
      a quick-starter-kit to set up Emacs for Common Lisp programming.
      It received a minor update to ensure that it works well with the
      latest version of Paredit.  Apart from that, by popular demand,
      it leaves the menu bar enabled.  Yes, the menu bar used to be
      disabled earlier which later turned out to be misguided.  After
      receiving several suggestions about how the menu bar is
      essential for discovery of new commands relevant to the current
      major mode, the menu bar is enabled now.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/emfy">Emfy</a>: This too is
      another Emacs quick-starter-kit.  However this one is meant to
      set up a general purpose editing and programming environment
      with Emacs.  It was first released in 2021.  It received one
      minor update this year.  The variable
      <code>require-final-newline</code> is now set to <code>t</code>,
      so that files with newlines missing at the end are automatically
      updated with a trailing newline while saving them.  Further, the
      colour scheme of incremental search matches has been updated to
      have more contrast so that the matches are easier to spot and
      navigate through.
    </p>
  </li>
</ul>
<p>
  As I reflect on this year's coding adventures, I am reminded of the
  beauty of exploration and creativity in coding.  The support and
  feedback I have received from the small yet friendly communities
  around some of these projects has been truly heartening.  Here's to
  another year of solving problems with code, collaboration and the
  boundless world of possibilities that computer programming offers!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code-2023.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/retrospective.html">#retrospective</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.2.0</title>
<link>https://susam.net/code/news/fxyt/0.2.0.html</link>
<guid isPermaLink="false">pqtku</guid>
<pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.2.0 is a minor update of FXYT, a tiny, stack-oriented, canvas
  colouring language written in postfix notation with only 36 simple
  commands.  This update specifies and implements a much stricter
  definition of the <code>F</code> command that sets the frame
  interval.  The problem with the earlier definition as well as
  implementation was that the <code>F</code> command was evaluated for
  every cell in the canvas and the frame interval was set for every
  such interval.  This meant that the frame interval that would be set
  for the next frame would depend on the order in which the evaluation
  occurred.  See section
  <a href="https://github.com/susam/fxyt#frame-interval">Frame
  Interval</a> of the README for the complete details.
</p>
<p>
  This update now ensures that a coordinate-dependent frame interval
  set with the <code>F</code> command behaves uniformly across any
  implementation of FXYT regardless of the order of evaluation.  This
  is done by ensuring that while the command <code>F</code> is
  evaluated for all cells, it is only the frame interval value found
  during the evaluation of cell (0, 0) that is honoured as the frame
  interval for the next frame.
</p>
<p>
  The new update is now available at
  <a href="../../../fxyt.html">fxyt.html</a>.  You are very welcome to
  try it out and play with it.  If you come up with any interesting
  demos, please do
  <a href="https://github.com/susam/fxyt/issues">share them here</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT</title>
<link>https://susam.net/fxyt.html</link>
<guid isPermaLink="false">kzrxk</guid>
<pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Tiny, stack-based, postfix, canvas colouring language with only 36
  simple commands.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/fxyt.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.1.0</title>
<link>https://susam.net/code/news/fxyt/0.1.0.html</link>
<guid isPermaLink="false">dtrrv</guid>
<pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.1.0 is the first release of this project that introduces the
  FXYT canvas colouring language and a reference implementation.  This
  project is inspired by Martin Kleppe's very popular Tixy project.
  While Tixy supports JavaScript expressions to determine the size and
  colour of circles in a 16x16 grid, FXYT comes with its own tiny,
  stack-based language that is written in postfix notation.  Further,
  FXYT provides a 256x256 grid of cells each of which can be painted
  with an arbitrary colour determined by the result of the evaluation
  of the input code.
</p>
<p>
  To see some demos, visit these links:
  <a href="../../../fxyt.html#XYxTN1srN255pTN1sqD">#1</a>,
  <a href="../../../fxyt.html#XYaTN1srN255pTN1sqN0">#2</a>,
  <a href="../../../fxyt.html#XYoTN1srN255pTN1sqDN0S">#3</a>,
  <a href="../../../fxyt.html#XYpTN1srN255pTN1sqD">#4</a> and
  <a href="../../../fxyt.html#XYN256sTdrD">#5</a>.
</p>
<p>
  Also, see
  <a href="https://github.com/susam/fxyt#readme">github.com/susam/fxyt</a>
  for more details about this project.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>CFRS[]</title>
<link>https://susam.net/cfrs.html</link>
<guid isPermaLink="false">toujs</guid>
<pubDate>Thu, 19 Oct 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  An extremely minimal drawing language consisting of only 6 simple
  commands: <code>C</code>, <code>F</code>, <code>R</code>,
  <code>S</code>, <code>[</code> and <code>]</code>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/cfrs.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Notes on Mastering Emacs: Chapter 5: The Theory of Editing</title>
<link>https://susam.net/cc/mastering-emacs/ch05.html</link>
<guid isPermaLink="false">lhvnj</guid>
<pubDate>Sat, 16 Sep 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  The following notes were taken while discussing Chapter 5 of the
  book <em>Mastering Emacs</em> by Mickey Petersen (2022 edition) in
  <a href="./">book discussion group meetings</a>.
</p>
<p>
  An index of notes for all chapters are available
  at <a href="notes.html">notes.html</a>.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#killing-text">Killing Text</a></li>
  <li><a href="#append-kill">Append Kill</a></li>
  <li><a href="#digit-and-negative-arguments">Digit and Negative Arguments</a></li>
  <li><a href="#yanking-text">Yanking Text</a></li>
  <li><a href="#yank-pop">Yank Pop</a></li>
  <li><a href="#maximum-length-of-kill-ring">Maximum Length of Kill Ring</a></li>
  <li><a href="#killing-lines">Killing Lines</a></li>
  <li><a href="#transpose">Transpose</a></li>
  <li><a href="#filling">Filling</a></li>
  <li><a href="#commenting">Commenting</a></li>
  <li><a href="#search-and-replace">Search and Replace</a></li>
  <li><a href="#regular-expressions">Regular Expressions</a></li>
  <li><a href="#changing-case">Changing Case</a></li>
  <li><a href="#counting">Counting</a></li>
  <li><a href="#deleting-and-keeping-lines">Deleting and Keeping Lines</a></li>
  <li><a href="#splitting-and-joining-lines">Splitting and Joining Lines</a></li>
  <li><a href="#examining-and-fixing-whitespace-issues">Examining and Fixing Whitespace Issues</a></li>
  <li><a href="#keyboard-macros">Keyboard Macros</a></li>
  <li><a href="#text-expansion">Text Expansion</a>
    <ul>
      <li><a href="#abbrev">Abbrev</a></li>
      <li><a href="#dabbrev">DAbbrev</a></li>
      <li><a href="#hippie-expand">Hippie Expand</a></li>
    </ul>
  </li>
  <li><a href="#indenting">Indenting</a>
    <ul>
      <li><a href="#electric-indentation">Electric Indentation</a></li>
      <li><a href="#indenting-current-line">Indenting Current Line</a></li>
      <li><a href="#use-only-spaces-for-indentation">Use Only Spaces for Indentation</a></li>
      <li><a href="#tab-width">Tab Width</a></li>
      <li><a href="#edit-tab-stops">Edit Tab Stops</a></li>
      <li><a href="#indent-regions">Indent Region</a></li>
      <li><a href="#indent-rigidly">Indent Rigidly</a></li>
    </ul>
  </li>
  <li><a href="#sorting">Sorting</a></li>
  <li><a href="#aligning">Aligning</a></li>
  <li><a href="#zap-to-char">Zap to Char</a></li>
  <li><a href="#zap-up-to-char">Zap up to Char</a></li>
  <li><a href="#spell-check">Spell Check</a></li>
  <li><a href="#dictionary-lookup">Dictionary Lookup</a></li>
  <li><a href="#quoted-insert">Quoted Insert</a></li>
  <li><a href="#links">Links</a></li>
</ul>
<h2 id="killing-text">Killing Text<a href="#killing-text"></a></h2>
<p>
  Killing text is equivalent to what we call as cutting text in other
  editors.  Killing some text removes the text from the buffer and
  adds it to the kill ring.  The kill ring is the clipboard of Emacs.
</p>
<p>
  To discover kill commands using the apropos functionality,
  type <code>C-h a ^kill-</code>.
</p>
<p>
  Here is a list of commands introduced in the first section of this
  chapter:
</p>
<ul>
  <li>
    <code>C-d</code>: Delete the next character.
  </li>
  <li>
    <code>&lt;backspace&gt;</code>: Delete the previous character.
  </li>
  <li>
    <code>M-d</code>: Kill until the end of a word.
  </li>
  <li>
    <code>C-&lt;backspace&gt;</code>: Kill backward until the
    beginning of a word.
  </li>
  <li>
    <code>C-k</code>: Kill the rest of the current line.
  </li>
  <li>
    <code>M-k</code>: Kill until the end of sentence.
  </li>
  <li>
    <code>C-M-k</code>: Kill expression following point.
  </li>
  <li>
    <code>C-S-&lt;backspace&gt;</code>: Kill current line.  Does not
    work in terminal Emacs.  Use <code>C-a C-k</code> as alternative.
  </li>
  <li>
    <code>C-w</code>: Kill text between point and mark.
  </li>
  <li>
    <code>M-w</code>: Copy text between point and mark to kill ring.
  </li>
  <li>
    <code>C-M-w</code>: Cause the following command, if it kills, to
    append to the last stretch of text in the kill ring.
  </li>
  <li>
    <code>C-y</code>: Yank (paste) the last stretch of text in the
    kill ring to the buffer.
  </li>
  <li>
    <code>M-y</code>: Cycle through kill ring.
  </li>
</ul>
<p>
  I have observed that some Emacs users do not bother
  using <code>M-w</code> to copy to kill ring.  Instead they
  type <code>C-w C-/</code> to cut the text and immediately undo the
  cut which effectively leaves the buffer unchanged but inserts a copy
  of the text that was cut into the kill ring.  For example,
  while <code>C-a C-SPC C-n C-n M-w</code> copies two lines into the
  kill ring, so does <code>C-a C-SPC C-n C-n C-w C-/</code>.  The
  latter key sequence avoids having to use <code>M-w</code> but it is
  worth noting that this key sequence does not work in a readonly
  buffer while the former does.  To quickly see the difference,
  open <code>/etc/hosts</code> as a non-root and non-privileged user
  and try both the key sequences.  The former key sequence does not
  modify the buffer, so it works perfectly in a readonly buffer.  The
  latter key sequence modifies the buffer when we
  type <code>C-w</code>, so it does not work in a readonly buffer.
</p>
<p>
  I have also observed that many Emacs users do not bother
  learning <code>C-S-&lt;backspace&gt;</code> because they can achieve
  the same results using <code>C-a C-k</code>.
  Further, <code>C-S-&lt;backspace&gt;</code> does not work in
  terminal Emacs due to terminal limitations.  The key
  sequence <code>C-a</code> moves the cursor to the beginning of the
  line and <code>C-k</code> kills everything until the end of the
  line.
</p>
<p>
  There is a difference between <em>deleting</em> and
  <em>killing</em>.  The first two commands <code>C-d</code>
  and <code>&lt;backspace&gt;</code> delete characters but the deleted
  characters are not added to the kill ring.  The remaining commands
  in the list above kill text, i.e. remove the text from the buffer
  and add it to the kill ring.  The killed text can be pasted into the
  buffer using <code>C-y</code>.  For example, <code>M-d M-d M-d C-p
  C-p C-y</code> kills the next three words and pastes them two lines
  above.
</p>
<h2 id="append-kill">Append Kill<a href="#append-kill"></a></h2>
<p>
  The key sequence <code>C-M-w</code> is used to ensure that if the
  next command happens to be a kill command, then the killed text is
  appended to the last stretch of text in the kill ring.
</p>
<p>
  To understand what this command does we must first understand that
  after a kill command adds a new stretch of text to the kill ring,
  subsequent consecutive kills append to the same stretch of text in
  the kill ring, i.e. consecutive kills form a single large stretch of
  text in the kill ring.  This can be tested by performing consecutive
  kills and then pasting with <code>C-y</code>.  For example,
  <code>M-d M-d M-d C-p C-p C-y</code> kills 3 words, creates a single
  stretch of text consisting of those 3 words in the kill ring and
  pastes that text two lines above.
</p>
<p>
  However, the moment a non-kill command is used, it seals the stretch
  of text in the kill ring.  Any subsequent kill command begins a new
  stretch of text.  For example, <code>M-d M-d M-d C-p M-d M-d C-p
  C-y</code> kills 3 words at first but then it moves to the previous
  line sealing that kill text consisting of 3 words.  Then it kills 2
  words and creates a new stretch of text in the kill ring.
  Therefore, the final yank command pastes only those 2 words from the
  kill ring.
</p>
<p>
  This can be a problem if we want to kill text from various parts of
  the buffer and yet create a single stretch of text that we want to
  paste somewhere.  That's when <code>C-M-w</code> comes useful.  For
  example, <code>M-d M-d M-d C-p C-M-w M-d M-d C-p C-y</code> kills 3
  words and creates a single stretch of text in the kill ring
  consisting of those 3 words.  Then it moves one line up and kills 2
  more words but this time it appends those 2 words to the existing
  stretch of text in the kill ring.  Finally, it moves two lines up
  and pastes the entire stretch of text consisting of 5 words into the
  buffer.
</p>
<h2 id="digit-and-negative-arguments">Digit and Negative Arguments<a href="#digit-and-negative-arguments"></a></h2>
<p>
  Here are some complete key sequences that demonstrate digit and
  negative arguments:
</p>
<ul>
  <li>
    <code>M-3 M-d</code>: Kill the next 3 words.
  </li>
  <li>
    <code>M- M-d </code>: Kill the previous word.
  </li>
  <li>
    <code>M-- M-3 M-d </code>: Kill the previous 3 words.
  </li>
  <li>
    <code>C-M-3 C-M-k</code>: Kill the next 3 expressions.
  </li>
  <li>
    <code>C-M-- C-M-k</code>: Kill the previous expression.
  </li>
  <li>
    <code>C-M-- C-M-3 C-M-k</code>: Kill the previous 3 expressions.
  </li>
</ul>
<h2 id="yanking-text">Yanking Text<a href="#yanking-text"></a></h2>
<p>
  There are two key bindings to learn here.  The key
  sequence <code>C-y</code> executes the <code>yank</code> command
  which yanks the last stretch of text from the kill ring.
</p>
<p>
  In the apropos system, <code>paste</code> is a synonym
  of <code>yank</code>.  Type <code>C-h v apropos-synonyms RET</code>
  to see all the synonyms define for the apropos system.
  Thus <code>C-h a paste RET</code> includes the results
  for <code>yank</code> too.
</p>
<h2 id="yank-pop">Yank Pop<a href="#yank-pop"></a></h2>
<p>
  The key sequence <code>M-y</code> executes the <code>yank-pop</code>
  command which replaces a just-yanked kill with an older kill.  This
  key sequence helps us to cycle through the kill ring and fetch older
  and older kills to be pasted into the buffer.
</p>
<p>
  Here is an experiment to see how we can use <code>C-y</code>
  and <code>M-y</code> can be used together:
</p>
<ol>
  <li>
    Open a new buffer and type these five words in a single
    line: <code>foo bar baz qux quux</code>.
  </li>
  <li>
    Then type <code>C-a M-d C-g M-d C-g M-d</code>.  At this point
    three stretches of text have been inserted into the kill ring.
    The <code>C-g</code> between every <code>M-d</code> is there to
    avoid appending kills to the existing stretch of text in the kill
    ring.  This ensures that we have three separate stretches of text
    in the kill ring.
  </li>
  <li>
    Now type <code>C-y</code>.  The last stretched of kill text, i.e.
    <code>baz</code> is now pasted into the buffer.
  </li>
  <li>
    Now without typing any other key sequence, type <code>M-y</code>.
    The earlier pasted text <code>baz</code> is now replaced with an
    older stretch of text from the kill ring.  Thus <code>baz</code>
    is replaced with <code>bar</code>.
  </li>
  <li>
    Now once again type <code>M-y</code>.  The earlier pasted
    text <code>bar</code> is now replaced with a further older stretch
    of text from the kill ring.  Thus <code>bar</code> is replaced
    with <code>foo</code>.
  </li>
</ol>
<p>
  Note in the previous steps how we are not supposed to type any other
  key between the first <code>C-y</code> and <code>M-y</code>.
  Similarly, while cycling through the kill ring, we must not type any
  other key between the consecutive <code>M-y</code> key sequences.
  While cycling through the kill ring, when we reach the oldest kill,
  the next <code>M-y</code> wraps around and brings back the newest
  kill.
</p>
<p>
  Since Emacs 28, the key sequence <code>M-y</code> also supports
  browsing the kill ring and yanking any arbitrary entry from the kill
  ring.  For example, after trying the above experiment,
  type <code>C-g</code> just to make sure that we are breaking any
  existing <code>C-y</code> or <code>M-y</code> cycle.  Then
  type <code>M-y</code> and a minibuffer prompt appears to yank an
  arbitrary kill from the kill ring.  If we remember the previous
  kill, we can type it out partially and type <code>TAB</code> to
  autocomplete it.  Alternatively, we could also type <code>TAB</code>
  initially itself to browse all the kills in the kill ring.
</p>
<h2 id="maximum-length-of-kill-ring">Maximum Length of Kill Ring<a href="#maximum-length-of-kill-ring"></a></h2>
<p>
  Type <code>C-h v kill-ring-max RET</code> to see the maximum length
  of the kill ring.  It is <code>60</code> by default.
</p>
<h2 id="killing-lines">Killing Lines<a href="#killing-lines"></a></h2>
<p>
  Since <code>C-S-&lt;backspace&gt;</code> works only in GUI Emacs and
  not in terminal Emacs due to terminal limitations, in the
  section <em>Killing Lines</em> the author recommends installing the
  package <code>whole-line-or-region</code> which modifies the
  behaviour of <code>C-w</code> to kill the current line if there is
  no active region.
</p>
<p>
  This package can be installed with the following command:
</p>
<pre><code>M-x package-install whole-line-or-region RET</code></pre>
<p>
  Then a mode offered by this package can be enabled by adding this
  line to the Emacs initialisation file:
</p>
<pre><code>(whole-line-or-region-global-mode)</code></pre>
<p>
  After Emacs is started with the updated initialisation file,
  typing <code>C-w</code> kills the current line if there is no active
  region.  However, if there is an active region then <code>C-w</code>
  retains the default behaviour of killing the region.
</p>
<p>
  Although the author recommends this package, I do not use this
  package.  I have found <code>C-a C-k</code> to be very effective for
  killing the current line.  However, it is worth noting that for
  non-empty lines, <code>C-k</code> does not include the newline in
  the kill by default.  If we want to remove the newline too, we must
  type <code>C-k</code> another time.  Therefore, to faithfully
  reproduce the behaviour of <code>C-w</code>
  (of <code>whole-line-or-region</code>) or that
  of <code>C-S-&lt;backspace&gt;</code>, we need to type <code>C-a C-k
  C-k</code>.
</p>
<p>
  It is possible to change the default behaviour of <code>C-k</code>
  such that when we type it at the beginning of a line, the trailing
  newline is included in the kill.  To do so, add this to the Emacs
  initialisation file:
</p>
<pre><code>(setq kill-whole-line t)</code></pre>
<p>
  After Emacs is started with this initialisation
  file, <code>C-k</code> kills a whole line along with the trailing
  newline only if cursor is at the start of a line.  In other words,
  with this setting, <code>C-a C-k</code> always kills a whole line
  along with the trailing newline.
</p>
<h2 id="transpose">Transpose<a href="#transpose"></a></h2>
<p>
  Here are some transpose commands:
</p>
<ul>
  <li>
    <code>C-t</code>: Interchange characters around point.
  </li>
  <li>
    <code>M-t</code>: Interchange words around point.
  </li>
  <li>
    <code>C-M-t</code>: Interchange expressions around point.
  </li>
  <li>
    <code>C-x C-t</code>: Exchange current line and previous line.
  </li>
  <li>
    <code>M-x transpose-paragraphs RET</code>: Interchange current
    paragraph with next one.
  </li>
  <li>
    <code>M-x transpose-sentences RET</code>: Interchange the current
    sentence with the next one.
  </li>
</ul>
<p>
  While using <code>C-t</code> remember that the point is the logical
  place between two characters.  For example if the cursor blinking on
  the letter <code>e</code> of the word <code>hello</code>, then the
  point is between the letters <code>h</code> and <code>e</code>.
  When we type a new character, the new character is inserted where
  the point is.  The key sequence <code>C-t</code> interchanges the
  characters on both sides of the point, i.e. it exchanges the
  character the cursor is blinking on with the character just before
  it.
</p>
<p>
  There is a subtle difference between the way <code>C-x C-t</code>
  works and the way the other commands work.  The other commands
  exchange the current or previous object with the next one.
  However, <code>C-x C-t</code> exchanges the current line with the
  previous one.
</p>
<p>
  Note that the cursor moves to the end of the next object after
  performing an exchange.  This allows the object that moved forward
  to be dragged further forward by repeated application of the same
  command.  Note again that while the other commands drag the thing at
  point forward, <code>C-x C-t</code> drags the previous line forward.
</p>
<p>
  If the cursor is on a space between <code>"foo" :: "bar"</code>,
  note that <code>M-t</code> will transpose it to <code>"bar" ::
  "foo"</code> because it ignores symbols.
</p>
<h2 id="filling">Filling<a href="#filling"></a></h2>
<p>
  Here are some complete key sequences that perform paragraph filling:
</p>
<ul>
  <li>
    <code>M-q</code>: Refill paragraph.
  </li>
  <li>
    <code>C-u M-q</code>: Refill paragraph and justify text too.
  </li>
  <li>
    <code>C-x f 40 RET</code>: Set <code>fill-column</code> to 40.
  </li>
  <li>
    <code>C-x .</code>: Set the fill prefix to the current line up to
    point.  On performing a fill operation, the fill prefix is
    inserted at the beginning of every new line created.
  </li>
  <li>
    <code>C-a C-x .</code>: To cancel the fill prefix, type <code>C-x
    .</code> at the beginning of a line.  Thus <code>C-a C-x .</code>
    cancels the fill prefix.
  </li>
  <li>
    <code>M-x auto-fill-mode RET</code>: Toggle auto-filling.
  </li>
</ul>
<h2 id="commenting">Commenting<a href="#commenting"></a></h2>
<p>
  Here are some key bindings to add comments to code in various ways:
</p>
<ul>
  <li>
    <code>M-;</code>: Insert or remove comment in a <em>do what I
    mean</em> (DWIM) fashion.  If the line is empty, a comment is
    inserted at the beginning of the line.  If the line is not empty,
    a comment is inserted at the end of the line and then indented to
    the column numbered <code>comment-column</code> if it can.  If a
    region is selected, it comments or uncomments that region.
  </li>
  <li>
    <code>C-x C-;</code>: Comment out or uncomment the current line.
  </li>
  <li>
    <code>M-x comment-box RET</code>: Comment a region by drawing a
    box made of comment characters around the selected region.
    Running this command repeatedly on the same region creates
    multiple nested comment boxes.
  </li>
  <li>
    <code>M-j</code>: Insert a new line and continue with the comment
    if the current line has an open comment.  If there is no open
    comment in the current line, then create a new line and indent.
  </li>
  <li>
    <code>C-M-j</code>: Same as above.
  </li>
</ul>
<p>
  Here are some variables that control the behaviour of
  comment-related commands:
</p>
<ul>
  <li>
    <code>comment-style</code>: The default is <code>indent</code>
    which ensures that new comments created with the comment commands
    are correctly indented.
  </li>
  <li>
    <code>comment-styles</code>: An association list with all the
    available comment styles.
  </li>
  <li>
    <code>comment-start</code>: String to insert to start a new
    comment.
  </li>
  <li>
    <code>comment-end</code>: String to insert to end a new comment.
  </li>
  <li>
    <code>comment-padding</code>: Extra spacing between the comment
    characters and the comment text.  This is the minimum number of
    spaces (only if the value of this variable is made of spaces) that
    Emacs tries to keep between the comment characters and comment
    text.  No spaces are inserted if <code>comment-start</code>
    and <code>comment-end</code> already
    provide <code>comment-padding</code> number of spaces or more to
    separate the comment text.
  </li>
</ul>
<p>
  To demonstrate how changing <code>comment-style</code> changes the
  commenting behaviour try <code>M-x (setq comment-style 'indent)
  RET</code>, then select a region and type <code>M-;</code>.  The
  selected region will be commented out with a comment box.
</p>
<p>
  However running <code>M-x (setq comment-style 'aligned) RET</code>,
  selecting a region in a C buffer and typing <code>M-;</code> does
  not seem to do anything interesting.
</p>
<h2 id="search-and-replace">Search and Replace<a href="#search-and-replace"></a></h2>
<p>
  Here are some complete key sequences that demonstrate search and
  replace commands:
</p>
<ul>
  <li>
    <code>M-% foo RET bar RET</code>: Replace the
    string <code>foo</code> with <code>bar</code> while prompting for
    instruction at every match.
  </li>
  <li>
    <code>C-M-% f.. RET bar RET</code>: Replace matches for regular
    expression <code>f..</code> with <code>bar</code> while prompting
    for instruction at every match.
  </li>
  <li>
    <code>M-x query-replace RET foo RET bar RET</code>: Same
    as <code>M-% foo RET bar RET</code>.
  </li>
  <li>
    <code>M-x query-replace-regexp RET f.. RET bar RET</code>: Same
    as <code>C-M-% f.. RET bar RET</code>.
  </li>
  <li>
    <code>M-x replace-string RET foo RET bar RET</code>: Replace the
    string <code>foo</code> with <code>bar</code> but do not prompt
    for instruction at every match.
  </li>
  <li>
    <code>M-x replace-string RET f.. RET bar RET</code>: Replace
    matches for regular expression <code>f..</code>
    with <code>bar</code> but do not prompt for instruction at every
    match.
  </li>
</ul>
<p>
  The following key bindings work while a query replace operation is
  in progress:
</p>
<ul>
  <li>
    <code>y</code>: Replace one match and continue.
  </li>
  <li>
    <code>SPC</code>: Same as <code>y</code>.
  </li>
  <li>
    <code>n</code>: Skip to next match.
  </li>
  <li>
    <code>DEL</code>: Same as <code>n</code>.
  </li>
  <li>
    <code>q</code>: Exit query replace.
  </li>
  <li>
    <code>RET</code>: Same as <code>q</code>.
  </li>
  <li>
    <code>.</code>: Replace one match and exit.
  </li>
  <li>
    <code>,</code>: Replace and stay at current match.
  </li>
  <li>
    <code>!</code>: Replace all remaining matches in the buffer with
    no more questions.
  </li>
  <li>
    <code>^</code>: Move point back to the previous match.
  </li>
  <li>
    <code>u</code>: Undo previous replacement.
  </li>
  <li>
    <code>U</code>: Undo all replacements.
  </li>
  <li>
    <code>E</code>: Edit replacement string and replace next match.
  </li>
</ul>
<p>
  Just like incremental search (<code>C-s</code> or
  <code>C-M-s</code>), search and replace performs case folding,
  i.e. performs case-insensitive match if the search string is a
  lowercase string.  However, the moment we include an uppercase
  character in the search string, search and replace performs
  case-sensitive search and replace.
</p>
<h2 id="regular-expressions">Regular Expressions<a href="#regular-expressions"></a></h2>
<p>
  This section presents some examples of regular-expression-based
  search as well as search-and-replace.  Here is a simple text buffer
  where the commands to be presented later can be tried out.
</p>
<pre>
<code>foo-bar-baz
foo-baar-baz
foo-baaar-baz
foo-baaaar-baz
foo-baaaaar-baz
foo-baaaaaar-baz

web
server
webserver
web server
web_server
web-&gt;server
web::server
web.server
securewebserver
secure web server
web server port 80

web-server
web-api-server
secure-web-server
web-server-port-80
web-server-port-http
web-server-port-HTTP-80

(1, 2, 3)
[4, 5, 6]
{7, 8, 9}
((10 + 20) * 30)
&lt;40, 50, 60&gt;

"hello, world"
'hello, world'

; comment
# comment
// comment
/* comment */</code>
</pre>
<p>
  Here are some complete key sequences that demonstrate regular
  expressions in search operations:
</p>
<ul>
  <li>
    <code>C-M-s f..</code>: Search for the letter <code>f</code>
    followed by two characters.
  </li>
  <li>
    <code>C-M-s foo\|bar</code>: Search for the
    string <code>foo</code> or <code>bar</code>.
  </li>
  <li>
    <code>C-M-s ba\{3\}r</code>: Search for the letter <code>b</code>
    followed by the string <code>aaa</code> and the
    letter <code>r</code>.
  </li>
  <li>
    <code>C-M-s ba\{3,5\}r</code>: Search for the
    letter <code>b</code> followed by 3 to 5 repetitions of the
    letter <code>a</code> followed by the letter <code>r</code>.
  </li>
  <li>
    <code>C-M-s port-[0-9]+</code>: Search for the
    string <code>port-</code> followed by one or more digits.
  </li>
  <li>
    <code>C-M-s port-[[:digit:]]+</code>: Same as above.
  </li>
  <li>
    <code>C-M-s port-[[:alnum:]]+</code>: Search for the
    string <code>port-</code> followed by one or more alphanumeric
    characters.
  </li>
  <li>
    <code>C-M-s port-[[:upper:][:digit:]-]+</code>: Search for the
    string <code>port-</code> followed by consecutive sequence of one
    or more upper-case letters, digits or hyphen.
  </li>
  <li>
    <code>C-M-s \&lt;web</code>: Search for the
    string <code>web</code> at the beginning of a word.
  </li>
  <li>
    <code>C-M-s web\&gt;</code>: Search for the
    string <code>web</code> at the end of a word.
  </li>
  <li>
    <code>C-M-s \&lt;web.+server\&gt;</code>: Search for the
    string <code>web</code> at the beginning of a word followed by one
    or more characters and the string <code>server</code> at the end
    of a word.
  </li>
  <li>
    <code>C-M-s \_&lt;web.+server\_&gt;</code>: Search for the
    string <code>web</code> at the beginning of a symbol followed by
    one or more characters and the string <code>server</code> at the
    end of a symbol.
  </li>
  <li>
    <code>C-M-s web\s server</code>: Search for the
    string <code>web</code> followed by one whitespace character and
    the string <code>server</code>.
  </li>
  <li>
    <code>C-M-s web\s-server</code>: Same as above.
  </li>
  <li>
    <code>C-M-s \s </code>: Search for whitespace character.
  </li>
  <li>
    <code>C-M-s \s-</code>: Same as above.
  </li>
  <li>
    <code>C-M-s \sw</code>: Search for word constituent character.
    Typically uppercase letters, lowercase letters and digits are
    considered word constituents.
  </li>
  <li>
    <code>C-M-s \s_</code>: Search for a symbol character that is used
    in variable names or command names.
  </li>
  <li>
    <code>C-M-s \s.</code>: Search for punctuation character.
  </li>
  <li>
    <code>C-M-s \s(</code>: Search for opening pair of a grouping
    character, e.g. <code>(</code>, <code>[</code>, <code>{</code>.
  </li>
  <li>
    <code>C-M-s \s)</code>: Search for closing pair of a grouping
    character, e.g. <code>)</code>, <code>]</code>, <code>}</code>,
    etc.
  </li>
  <li>
    <code>C-M-s \s"</code>: Search for string delimiter.  This does
    not work in text mode but does work in programming modes.
  </li>
  <li>
    <code>C-M-s \s&lt;</code>: Search for opening comment delimiter.
    This too does not work in text mode but does work in programming
    modes.
  </li>
  <li>
    <code>C-M-s \s&gt;</code>: Search for closing comment delimiter.
    This too does not work in text mode but does work in programming
    modes.
  </li>
  <li>
    <code>C-M-s \Sw</code>: Search for character that is not a word
    constituent.  The pattern <code>\S</code> matches any character
    whose syntax code is not the given syntax code (<code>w</code> in
    this example).
  </li>
</ul>
<p>
  All examples above that contain the regular
  expression <code>\s</code> followed by a character matches a
  character that belongs to a specific syntax class.  For
  example <code>\s.</code> matches characters that belong to the
  punctuation syntax class.  The syntax class for each character is
  decided by the current major mode.  Thus the same character may
  belong to different syntax classes in different modes.  For example,
  while the character <code>#</code> belongs to the punctuation syntax
  class in text mode, it belongs to the comment syntax class in Python
  mode.
</p>
<p>
  To find out which syntax class a particular character belongs to,
  place the cursor on the character and type <code>C-u C-x =</code>.
  The <em>syntax</em> field in the output buffer shows the syntax
  class of the character.
</p>
<p>
  Here are some complete key sequences that demonstrate various
  search-and-replace features:
</p>
<ul>
  <li>
    <code>C-M-% \(web\)\(\s-\)\(server\) RET \3\2\1 RET</code>: Search
    for the string <code>web</code> followed by a whitespace and the
    string <code>server</code> and swap <code>web</code>
    with <code>server</code>.
  </li>
  <li>
    <code>C-M-% \(foo-\)\sw+\(-baz\) RET \1\?\2 RET</code>: Search for
    the string <code>foo-</code> followed by a word and the
    string <code>baz</code> and replace the middle word with text
    input provided by the user.  Before each replace operation, Emacs
    will prompt the user to edit the replacement pattern by putting
    the point where <code>\?</code> was in the original replacement
    string.
  </li>
  <li>
    <code>C-M-% foo RET \# RET</code>: Search for the
    string <code>foo</code> and replace each match with an
    autoincrementing number.  The first match is replaced
    with <code>0</code>, the second one with <code>1</code>, the third
    one with <code>2</code> and so on.  Precisely speaking, the
    backreference <code>\#</code> refers to the count of the
    replacements already made in the current search and replace
    operation.
  </li>
  <li>
    <code>C-M-% foo RET \&amp;\&amp; RET</code>: Search for the
    string <code>foo</code> and duplicate it.  The replacement
    pattern <code>\&amp;</code> stands for the whole match.
  </li>
  <li>
    <code>C-M-% f.. RET \,(upcase \&amp;) RET</code>: Search for the
    letter <code>f</code> followed by two characters and replace the
    match with an uppercase form of the match.  The
    syntax <code>\,(<em>form</em>)</code> is used to evaluate an Elisp
    form and use its result in the replacement string.  The
    backreference <code>\&amp;</code> refers to the whole match as a
    string in the Elisp expression.
  </li>
  <li>
    <code>C-M-% [0-9]+ RET \,(+ 1000 \#&amp;)</code>: Search for
    numbers and add 1000 to each match.  The
    backreference <code>\#&amp;</code> refers to the whole match as a
    number within the Elisp expression.
  </li>
  <li>
    <code>C-M-% \(\sw+\)-\(\sw+\) RET \,(upcase \2)-\1 RET</code>:
    Search for two words separated by a hyphen and then swap them but
    convert the second word in each match to uppercase.  The
    backreference <code>\2</code> refers to the string matched by the
    second capturing group as a string within the Elisp expression.
  </li>
  <li>
    <code>C-M-% port-\([0-9]+\) RET port-\,(+ 1000 \#1) RET</code>:
    Search for the string <code>port-</code> followed by a number and
    add 1000 to the number.  The backreference <code>\#1</code> refers
    to the string matched by the first capturing group as a string
    within the Elisp expression.
  </li>
</ul>
<h2 id="changing-case">Changing Case<a href="#changing-case"></a></h2>
<p>
  Here are some commands to change case of text:
</p>
<ul>
  <li>
    <code>M-l</code>: Convert string from point to the end of word to
    lowercase.
  </li>
  <li>
    <code>M-u</code>: Convert string from point to the end of word to
    uppercase.
  </li>
  <li>
    <code>M-c</code>: Capitalise string from point to the end of word.
  </li>
  <li>
    <code>C-x C-l</code>: Convert region to lower case.
  </li>
  <li>
    <code>C-x C-u</code>: Convert region to upper case.
  </li>
  <li>
    <code>M-x upcase-initials-region RET</code>: Capitalise region.
  </li>
</ul>
<p>
  Note that the commands <code>C-x C-l</code>
  (<code>downcase-region</code>) and <code>C-x C-u</code>
  (<code>upcase-region</code>) are disabled by default.  Follow the
  prompts to try it or enable it.  A quick way to try it is to
  type <code>SPC</code>.  Also, adding the following to the Emacs
  initialisation file permanently enables it.
</p>
<pre>
<code>(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)</code>
</pre>
<h2 id="counting">Counting<a href="#counting"></a></h2>
<p>
  Here are some commands to count lines, words, characters, patterns,
  etc:
</p>
<ul>
  <li>
    <code>M-=</code>: Count lines, words and characters in region.
  </li>
  <li>
    <code>M-x count-words-region RET</code>: Same as above.
  </li>
  <li>
    <code>M-x count-words RET</code>: Similar to above.  If no region
    is selected, then counts in the entire buffer.
  </li>
  <li>
    <code>M-x how-many RET f.. RET</code>: Show the number of matches
    for the regular expression <code>f..</code> following point.  If
    region is selected, then show the number of matches in the region.
  </li>
  <li>
    <code>M-x count-matches RET f.. RET</code>: Same as above.
  </li>
</ul>
<h2 id="deleting-and-keeping-lines">Deleting and Keeping Lines<a href="#deleting-and-keeping-lines"></a></h2>
<p>
  The commands that are presented in this section can be tested with a
  buffer like this:
</p>
<pre>
<code>foo
bar

foo
bar

foo
foo

bar
foo



baz
baz
baz</code>
</pre>
<p>
  Here are the commands:
</p>
<ul>
  <li>
    <code>M-x delete-duplicate-lines RET</code>: Delete all but one
    copy of duplicate lines in region.  When executed on the whole of
    the example buffer presented above, it leaves us with three
    non-empty lines and one blank line.  When duplicate lines are
    encountered, the first instance of each line is kept intact and
    the others are deleted.
  </li>
  <li>
    <code>C-u M-x delete-duplicate-lines RET</code>: Like the previous
    command but search backwards.  Thus effectively, the last instance
    of each repeated line is left intact while the other duplicates
    are deleted.
  </li>
  <li>
    <code>C-u C-u M-x delete-duplicate-lines RET</code>: Delete only
    those duplicate lines that are adjacent to each other.  In every
    contiguous group of duplicate lines, the first one is left intact
    and the rest are deleted.
  </li>
  <li>
    <code>C-u C-u C-u M-x delete-duplicate-lines RET</code>: Like the
    first command in this list but repeated blank lines are left
    intact.  When executed on the whole of the example buffer
    presented above, it leaves us with three non-empty lines and six
    blank lines.
  </li>
  <li>
    <code>M-x flush-lines RET b.. RET</code>: Delete lines in region
    that match the regular expression <code>b..</code>.  If no region
    is active, then delete matching lines between the point and end of
    buffer.  The deleted lines are not copied to kill ring.
  </li>
  <li>
    <code>M-x keep-lines RET b.. RET</code>: Keep lines in region that
    match the regular expression <code>b..</code> and delete the rest.
    If no region is active, then keep matching lines between the point
    and end of buffer and delete the rest.  The deleted lines are not
    copied to kill ring.
  </li>
  <li>
    <code>M-x copy-matching-lines RET b.. RET</code>: Copy lines in
    region that match the regular expression <code>b..</code> to the
    kill ring.  If no region is active, then copy matching lines
    between the point and end of buffer.  (Available since Emacs 28.1)
  </li>
  <li>
    <code>M-x kill-matching-lines RET b.. RET</code>: Kill lines in
    region that match the regular expression <code>b..</code> to the
    kill ring.  If no region is active, then kill matching lines
    between the point and end of buffer.  (Available since Emacs 28.1)
  </li>
</ul>
<p>
  To try each command on the entire buffer, first type <code>C-x
  h</code> to select the entire buffer as the region and then type a
  command mentioned above.
</p>
<h2 id="splitting-and-joining-lines">Splitting and Joining Lines<a href="#splitting-and-joining-lines"></a></h2>
<p>
  Here is a list of commands that help with splitting and joining
  lines:
</p>
<ul>
  <li>
    <code>C-o</code>: Insert a newline after the point but do not move
    the point.
  </li>
  <li>
    <code>C-x C-o</code>: On blank line, delete all surrounding blank
    lines, leaving just one.  On isolated blank line, delete the blank
    line.  On non-blank line, delete all consecutive blank lines that
    follow the non-blank lines.  While deleting blank lines it also
    deletes lines that consist only of whitespaces.
  </li>
  <li>
    <code>C-M-o</code>: Split current line at the next non-whitespace
    character after the point while maintaining its indentation.
    Everything from the next non-whitespace character after the point
    to the end of the line moves down by one line but the new line is
    indented so that the column numbers of all the characters that
    moved down remain the same.  If a fill-prefix has been set, say
    with <code>C-x .</code>, then the fill-prefix is inserted in the
    new line.
  </li>
  <li>
    <code>M-^</code>: Join current line with previous line and leave
    exactly one space between the joined lines.  If a fill-prefix is
    set, say with <code>C-x .</code>, then the fill-prefix is removed
    while joining lines.
  </li>
</ul>
<p>
  The key sequence <code>C-x C-o</code> is very useful for removing
  spurious blank lines between paragraphs.
</p>
<p>
  Note that <code>M-^</code> also works on a region.  When a region is
  active, it joins all lines in the region.
</p>
<h2 id="examining-and-fixing-whitespace-issues">Examining and Fixing Whitespace Issues<a href="#examining-and-fixing-whitespace-issues"></a></h2>
<p>
  Here is a list of commands that are useful in examining whitespace
  in the current buffer:
</p>
<ul>
  <li>
    <code>M-x whitespace-mode RET</code>: Toggle visualisation of
    spaces, tabs, newlines and lines longer
    than <code>whitespace-line-column</code> number of columns (80 by
    default) with special glyphs and colour.
  </li>
  <li>
    <code>M-x whitespace-newline-mode RET</code>: Toggle visualisation
    of newlines.
  </li>
  <li>
    <code>M-x whitespace-toggle-options RET</code>: Toggle local
    options for <code>whitespace-mode</code>.
  </li>
</ul>
<p>
  After typing <code>M-x whitespace-toggle-options RET</code>, type a
  key to tell it what to do.  For example, type <code>N</code> and it
  will start or restart <code>whitespace-mode</code> with the
  visualisation of newline toggled.  Type <code>?</code> to see the
  list of all key inputs it supports.
</p>
<p>
  The key sequence <code>M-x whitespace-toggle-options RET</code> may
  be typed anytime regardless of whether <code>whitespace-mode</code>
  is currently enabled or not.  If <code>whitespace-mode</code> is not
  enabled, running <code>whitespace-toggle-options</code>
  automatically enables it.  If <code>whitespace-mode</code> is
  already enabled, then running <code>whitespace-toggle-options</code>
  and toggling an option, restarts local <code>whitespace-mode</code>
  with the updated option setting.
</p>
<p>
  Here are some commands to report and clean up whitespace issues:
</p>
<ul>
  <li>
    <code>M-x whitespace-report RET</code>: Shows a report of
    whitespace issues.  The "Current setting" column on left shows the
    current settings found in the
    variable <code>whitespace-style</code>.  The "Whitespace Problem"
    column on the right shows the whitespace problems found in the
    buffer.
  </li>
  <li>
    <code>M-x whitespace-report-region RET</code>: Like the previous
    command but reports problems in a region.
  </li>
  <li>
    <code>M-x whitespace-cleanup RET</code>: Cleans up whitespace
    issues in the buffer.  This command checks
    the <code>whitespace-style</code> variable to decide which issues
    to fix.  See <code>C-h f whitespace-cleanup RET</code> for
    complete details.
  </li>
  <li>
    <code>M-x whitespace-cleanup-region RET</code>: Cleans up
    whitespace issues in a region.  Unlike the previous command, this
    command does not fix empty lines at the beginning or end of
    buffer.  See <code>C-h f whitespace-cleanup-region RET</code> for
    complete details.
  </li>
</ul>
<p>
  As mentioned in the list above, the whitespace cleanup functions
  read the variable <code>whitespace-style</code> to decide which
  whitespace issues to fix.  Say, we do not want to fix trailing
  whitespace issue but do want to fix other whitespace issues selected
  by default (e.g. empty lines at the beginning or end of buffer,
  spaces before tab, etc.), then we need to update
  the <code>whitespace-style</code> variable as follows:
</p>
<pre>
<code>(setq whitespace-style (delete 'trailing whitespace-style))</code>
</pre>
<p>
  Now running <code>whitespace-cleanup</code>
  or <code>whitespace-cleanup-region</code> is going to skip fixing
  trailing spaces but it will perform the other cleanups determined by
  the value of <code>whitespace-style</code>.
</p>
<h2 id="keyboard-macros">Keyboard Macros<a href="#keyboard-macros"></a></h2>
<p>
  The behaviour of keyboard macro key sequences depend on the current
  context.  So they are presented as table below.
</p>
<table class="grid">
  <tr>
    <th>
      Key
    </th>
    <th>
      Command
    </th>
    <th>
      While not recording
    </th>
    <th>
      While recording
    </th>
  </tr>
  <tr>
    <td>
      <code>F3</code>
    </td>
    <td>
      <code>kmacro-start-macro-or-insert-counter</code>
    </td>
    <td>
      Start recording
    </td>
    <td>
      Insert counter
    </td>
  </tr>
  <tr>
    <td>
      <code>F4</code>
    </td>
    <td>
      <code>kmacro-end-or-call-macro</code>
    </td>
    <td>
      Call macro
    </td>
    <td>
      End recording
    </td>
  </tr>
  <tr>
    <td>
      <code>C-x&nbsp;(</code>
    </td>
    <td>
      <code>kmacro-start-macro</code>
    </td>
    <td>
      Start recording
    </td>
    <td>
      Do nothing
    </td>
  </tr>
  <tr>
    <td>
      <code>C-x&nbsp;)</code>
    </td>
    <td>
      <code>kmacro-end-macro</code>
    </td>
    <td>
      End recording
    </td>
    <td>
      Do nothing
    </td>
  </tr>
  <tr>
    <td>
      <code>C-x&nbsp;e</code>
    </td>
    <td>
      <code>kmacro-end-and-call-macro</code>
    </td>
    <td>
      Call macro
    </td>
    <td>
      End recording and call macro
    </td>
  </tr>
</table>
<p>
  The key sequences in the table above can be divided into three
  groups:
</p>
<ul>
  <li>
    <code>C-x (</code> and <code>C-x )</code>: These invoke simple
    commands that start and stop macro recording.
  </li>
  <li>
    <code>F3</code> and <code>F3</code>: These are wrappers around the
    simple commands.
  </li>
  <li>
    <code>C-x e</code>: This is a slightly high level command too that
    wraps around simpler macro commands and functions that end
    recording and calls a macro.
  </li>
</ul>
<p>
  Given these details, there are broadly two ways these macro key
  sequences can be used.  They are shown in the table below.
</p>
<table class="grid">
  <tr>
    <th>Operation</th>
    <th>Using Function Keys</th>
    <th>Using Control Keys</th>
  </tr>
  <tr>
    <td>Start recording</td>
    <td><code>F3</code></td>
    <td><code>C-x (</code></td>
  </tr>
  <tr>
    <td>Stop recording</td>
    <td><code>F4</code></td>
    <td><code>C-x )</code></td>
  </tr>
  <tr>
    <td>Call macro</td>
    <td><code>F4</code></td>
    <td><code>C-x e</code></td>
  </tr>
  <tr>
    <td>Stop recording and call macro</td>
    <td><code>F4 F4</code></td>
    <td><code>C-x e</code></td>
  </tr>
  <tr>
    <td>Repeat call macro</td>
    <td><code>F4</code></td>
    <td><code>e</code></td>
</table>
<p>
  If you are comfortable using function keys, you might want to follow
  the second column in the table above.  Otherwise, you might want to
  follow the third column in the table above.
</p>
<p>
  The last row is not mentioned in the book but the fact
  that <code>e</code> may be used to repeat a macro call performed
  with <code>C-x e</code> is documented in the Emacs
  manual: <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Basic-Keyboard-Macro.html">Keyboard
  Macros: Basic Use</a>.
</p>
<p>
  Note that <code>F3</code> inserts a counter value and increments the
  counter value by 1 or by the number specified via a digit argument.
  Here is an example key sequence that may be typed in a buffer with
  multiple lines to demonstrate this:
</p>
<ol>
  <li>
    Type <code>C-x (</code> to start macro recording.
  </li>
  <li>
    Type <code>C-a F3 . SPC M-c C-n</code> to insert macro counter
    which <code>0</code> by default, followed by dot and space at the
    beginning of the line, capitalise the first word and move to the
    next line.
  </li>
  <li>
    Type <code>C-x e</code> to stop macro recording and call the
    recorded macro.  Now <code>1</code>, dot and space is inserted at
    the beginning of the line.  The first word of the current line is
    capitalised and the cursor moves to the next line.
  </li>
  <li>
    Type <code>e</code> to repeat the macro call.  Keep
    typing <code>e</code> to repeat the macro call.
  </li>
</ol>
<p>
  The behaviour of the the macro commands change with universal
  arguments and digit arguments as follows:
</p>
<ul>
  <li>
    <code>C-u F3</code>: Execute the last macro, then record new macro
    and append it to the last macro.  Set
    <code>kmacro-execute-before-append</code> to <code>nil</code>
    (it is <code>t</code> by default) to prevent executing the last
    macro before appending a new macro to the last macro.
  </li>
  <li>
    <code>C-u C-x (</code>: Same as above.
  </li>
  <li>
    <code>C-5 F3</code>: Start recording but set counter to 5, i.e.
    while a macro is being recorded, typing <code>F3</code> inserts 5
    the first time, 6 the second time and so on.  The numeric prefix
    argument sets the counter value.
  </li>
  <li>
    <code>C-5 C-x (</code>: Same as above.
  </li>
  <li>
    <code>C-u F4</code>: Execute the second macro in the ring.
  </li>
  <li>
    <code>C-7 F4</code>: Repeat the last macro 7 times.
  </li>
  <li>
    <code>C-7 C-x e</code>: Repeat the last macro 7 times.
  </li>
  <li>
    <code>C-0 F3</code>: Repeat macro until there is an error (e.g.
    reaching the end of a buffer).
  </li>
  <li>
    <code>C-0 C-x e</code>: Same as above.
  </li>
</ul>
<p>
  Type <code>C-x C-k C-h</code> to discover keyboard macro commands
  and their key bindings.  The list below shows some of the
  interesting ones mentioned in the book.  In the list below, complete
  key sequences are used, so that they serve as a demonstration of the
  macro commands.
</p>
<ul>
  <li>
    <code>C-x C-k C-a 20 RET</code>: Add 20 value to the counter.
  </li>
  <li>
    <code>C-x C-k TAB</code>: Insert counter.  Note that we saw earlier
    that this can also be done with <code>F3</code>.
  </li>
  <li>
    <code>C-x C-k C-c</code>: Set counter.
  </li>
  <li>
    <code>C-x C-k C-f %02x</code>: Set macro counter format to
    zero-padded two-digit hexadecimal numbers with a minimum width of
    2.
  </li>
</ul>
<p>
  Note that all of the above commands work fine even when no macro
  recording is in progress.  For example, earlier we saw
  that <code>F3</code> inserts the macro counter value only when a
  macro recording is in progress.  However, <code>C-x C-k TAB</code>
  inserts the macro counter value even when a macro recording is not
  in progress.
</p>
<p>
  Another interesting feature mentioned in the book is querying for
  user input while recording a keyboard macro.  The key sequence to
  query the user is <code>C-x C-k q</code> or <code>C-x q</code>.
  Here are a few complete key sequences that may be used to
  demonstrate this feature:
</p>
<ul>
  <li>
    <code>F3 C-n C-a foo: C-x q C-e :bar F4</code>: This defines a
    macro such that when we execute the macro by
    typing <code>F4</code> one more time, the macro first
    inserts <code>foo</code> at the beginning of the next line, then
    it prompts us to decide if we want to continue with macro
    execution.  If we type type <code>y</code>, then it continues with
    the remainder of the macro execution.  If we type <code>n</code>,
    it skips the rest of the macro iteration and continue with the
    next iteration of the macro (such as when we are replaying the
    macro multiple times with a digit argument).  If we
    type <code>RET</code>, it skips the rest of the macro execution as
    well as skip any further iterations of the macro (in case we are
    replaying the macro multiple times).
  </li>
  <li>
    <code>F3 C-a foo: C-x C-k q C-e :bar F4</code>: Same as above but
    slightly longer key sequence.  The key sequence in the previous
    point is easier to remember and type.
  </li>
</ul>
<p>
  In the above examples, when the macro playback prompts queries for
  user input, we can also type <code>C-l</code> to recentre the
  screen, <code>C-r</code> to enter recursive edit or
  <code>C-M-c</code> to exit recursive edit.
</p>
<p>
  Note that the key sequence <code>C-l</code> behaves a little
  differently from the regular <code>C-l</code>.  Unlike the
  regular <code>C-l</code>, successive invocations of this key
  sequence during macro query does not cause the window to reposition
  at various places (centre, top and bottom by default) in a cyclical
  order.  Successive invocations of <code>C-l</code> during macro
  query, leaves the screen centred.
</p>
<p>
  Here are some key sequences to save and recall macros:
</p>
<ul>
  <li>
    <code>C-x C-k C-p</code>: Move to the previous keyboard macro in
    the keyboard macro ring.
  </li>
  <li>
    <code>C-x C-k C-n</code>: Move to the next keyboard macro in the
    keyboard macro ring.
  </li>
  <li>
    <code>C-x C-k n foo RET</code>: Assign the name <code>foo</code>
    to the current keyboard macro in the keyboard macro ring.  Now the
    macro can be executed by simply typing <code>M-x foo RET</code>.
  </li>
  <li>
    <code>M-x insert-kbd-macro foo RET</code>: Insert the definition
    of the named keyboard macro <code>foo</code> as Elisp code into
    the current buffer.
  </li>
  <li>
    <code>C-x C-k b C-c 1</code>: Assign the key sequence <code>C-c
    1</code> to the current keyboard macro in the keyboard macro ring.
    Now the macro can be executed by simply typing <code>C-c 1</code>.
  </li>
</ul>
<p>
  Finally, here are some commands to edit keyboard macros:
</p>
<ul>
  <li>
    <code>C-x C-k e C-x e</code>: Edit the current keyboard macro.
  </li>
  <li>
    <code>C-x C-k e M-x foo RET</code>: Edit the keyboard macro
    named <code>foo</code>.
  </li>
  <li>
    <code>C-x C-k e C-c 1</code>: Edit the keyboard macro
    bound to <code>C-c 1</code>.
  </li>
  <li>
    <code>C-x C-k l</code>: View the most recent 300 keystrokes and
    edit it to create a new keyboard macro.
  </li>
  <li>
    <code>M-x kmacro-edit-lossage RET</code>: Same as above.
  </li>
</ul>
<p>
  A few additional commands:
</p>
<ul>
  <li>
    <code>C-h l</code>: See the last 300 characters typed (lossage).
  </li>
  <li>
    <code>M-x open-dribble-file foo.txt RET</code>: Write input events
    to a dribble file named <code>foo.txt</code>.
  </li>
  <li>
    <code>M-: (open-dribble-file nil) RET</code>: Close the dribble file.
  </li>
</ul>
<h2 id="text-expansion">Text Expansion<a href="#text-expansion"></a></h2>
<h3 id="abbrev">Abbrev<a href="#abbrev"></a></h3>
<p>
  Here are some Abbrev commands:
</p>
<ul>
  <li>
    <code>C-x a l</code>: Take the word before the cursor and define a
    mode-specific abbreviation for it.
  </li>
  <li>
    <code>C-x a g</code>: Take the word before the cursor and define a
    global abbreviation for it.
  </li>
  <li>
    <code>C-x a i l</code>: Take the abbreviated word before the
    cursor and define a mode-specific expansion for it.
  </li>
  <li>
    <code>C-x a i l</code>: Take the abbreviated word before the
    cursor and define a global expansion for it.
  </li>
</ul>
<p>
  Note that for the expansions to work Abbrev mode should be enabled,
  say with <code>M-x abbrev-mode RET</code>.
</p>
<p>
  Here are some complete key sequences that demonstrate how we can use
  Abbrev to define an abbreviation, i.e. text that automatically gets
  replaced by another text:
</p>
<ul>
  <li>
    <code>Use SPC Debian C-x a l deb RET</code>: Define a
    mode-specific abbreviation <code>deb</code> such that whenever we
    type <code>deb</code>, it automatically expands
    to <code>Debian</code>.
  </li>
  <li>
    <code>Use SPC Linux C-x a g lnx RET</code>: Define a global
    abbreviation <code>lnx</code> such that whenever we
    type <code>lin</code>, it automatically expands
    to <code>Linux</code>.
  </li>
  <li>
    <code>Hello SPC wld C-x a i l World RET</code>: Define a
    mode-specific abbreviation <code>wld</code> such that whenever we
    type <code>wld</code>, it automatically expands
    to <code>World</code>.
  </li>
  <li>
    <code>Hello SPC evry C-x a i g Everyone RET</code>: Define a
    global abbreviation <code>evry</code> such that whenever we
    type <code>evry</code>, it automatically expands
    to <code>Everyone</code>.
  </li>
</ul>
<p>
  Although not mentioned in the book, these commands can be used with
  a numeric prefix argument to specify the number of words before the
  cursor to be picked for expansion for the abbreviation we are about
  to define.  Here are some complete key sequences that demonstrate
  this:
</p>
<ul>
  <li>
    <code>I use Debian GNU/Linux C-3 C-x a l dgl</code>: Define a
    mode-specific abbreviation <code>dgl</code> such that whenever we
    type <code>dgl</code>, it automatically expands to <code>Debian
    GNU/Linux</code>.
  </li>
  <li>
    <code>I use Debian GNU/Linux C-3 C-x a g dgl</code>: Similar to
    above but define a global abbreviation.
  </li>
</ul>
<h3 id="dabbrev">DAbbrev<a href="#dabbrev"></a></h3>
<p>
  There are two key bindings discussed in the book:
</p>
<ul>
  <li>
    <code>M-/</code>: Expand the word just before the cursor to the
    nearest preceding word for which the current word is a prefix.  If
    no suitable preceding word is found, expand it to the nearest
    succeeding word for which the current word is a prefix.  Repeating
    this command cycles between the other matches found.
  </li>
  <li>
    <code>C-M-/</code>: Find all words in the buffer that has the
    current word before the cursor as the prefix and expand the
    current word to the longest common prefix of all these matching
    words.  However, if the longest common prefix of the matching
    words is same as the word before the cursor, then present them as
    suggestions for completion.  If there is exactly one matching
    word, expand the word before the cursor to that word.
  </li>
</ul>
<p>
  The last command above takes a little while to get used to it.  The
  following steps demonstrate how it works.
</p>
<ol>
  <li>
    <p>
      Create a text buffer with the following line:
    </p>
    <pre><code>abacus apple appliance application</code></pre>
  </li>
  <li>
    Type <code>ap</code> followed by <code>C-M-/</code>, the word
    expands to <code>appl</code> since that is the longest common
    prefix among the matching words.
  </li>
  <li>
    Type <code>C-M-/</code> again.  The matching
    words <code>apple</code>, <code>appliance</code>
    and <code>application</code> are presented as possible completions
    in a temporary buffer named <code>*Completions*</code>.
  </li>
  <li>
    Now type <code>ic</code>, so that the word before the cursor
    becomes <code>applic</code> and type <code>C-M-/</code> again.
    Now the word before the cursor expands to <code>application</code>
    because that is the only possible completion now.
  </li>
</ol>
<p>
  Note that by default DAbbrev looks for matching words in other open
  buffers too and offers them as completions.
</p>
<h3 id="hippie-expand">Hippie Expand<a href="#hippie-expand"></a></h3>
<p>
  Unlike DAbbrev, Hippie Expand goes beyond open buffers to look for
  expansions.  The variable
  <code>hippie-expand-try-functions-list</code> contains a list of
  expansion functions that <code>hippie-expand</code> uses to look for
  completions.  The book suggests remapping <code>M-/</code> to
  invoke <code>hippie-expand</code> with this Elisp code:
</p>
<pre><code>(global-set-key [remap dabbrev-expand] 'hippie-expand)</code></pre>
<p>
  By default, Hippie Expand can complete file names, complete lines,
  etc.  For example, if there is a line for which the current line is
  a prefix (leading whitespace is ignored while checking for matches),
  then the current line is expanded to the other matchine line.
</p>
<p>
  Repeated invocations of this command cycles between the matches.
</p>
<p>
  As mentioned earlier, the
  variable <code>hippie-expand-try-functions-list</code> determines
  which expansion algorithms are used.  Here is an example that
  demonstrates how we can alter this variable:
</p>
<pre><code>(setq hippie-expand-try-functions-list '(try-complete-lisp-symbol))</code></pre>
<p>
  The above rather unrealistic example severely restricts the
  expansions Hippie Expand can perform.  With the above example, word
  expansion, line expansion, file name completion, etc. are disabled.
  Only Elisp symbols are expanded.  For example,
  typing <code>white</code> followed by <code>M-/</code> first expands
  the word to <code>whitespace</code> because all matching Elisp
  symbols have that as the longest common prefix.
  Typing <code>M-/</code> over and over again, completes the expansion
  further with various Elisp symbols.
</p>
<p>
  As mentioned before, the above example is highly atypical.  The
  above example is only meant for demonstrating how this variable can
  be set.  Typically, users add more functions to this variable to add
  more expansion capabilities.
</p>
<h2 id="indenting">Indenting<a href="#indenting"></a></h2>
<h3 id="electric-indentation">Electric Indentation<a href="#electric-indentation"></a></h3>
<p>
  Emacs automatically indents code as we type.  The major mode decides
  the automatic indentation behaviour.  The automatic identation is
  provided by a global minor mode named
  <code>electric-indent-mode</code> which is enabled by default.
</p>
<h3 id="indenting-current-line">Indenting Current Line<a href="#indenting-current-line"></a></h3>
<p>
  Typing <code>TAB</code> indents the current line.  In many modes
  like <code>emacs-lisp-mode</code>, <code>python-mode</code>,
  <code>text-mode</code>, etc. the command
  <code>indent-for-tab-command</code> is bound to it.  But there are
  modes that bind another command to <code>TAB</code>.  For example,
  in <code>c-mode</code>, the command
  <code>c-indent-line-or-region</code> is bound to <code>TAB</code>.
</p>
<p>
  The behaviour of <code>indent-for-tab-command</code> is determined
  by the variables <code>tab-always-indent</code>.  It
  is <code>t</code> by default which causes <code>TAB</code> to just
  indent the current line.  If set to <code>nil</code>,
  hitting <code>TAB</code> indents the current line only if the point
  is before the first non-whitespace character of the line.  Otherwise
  it inserts tabs or spaces to move the point to the next tab stop
  column.  If set to <code>'complete</code>, typing <code>TAB</code>
  first tries to indent the current line but if the line is already
  correctly indented, then it tries to complete the thing at point.
</p>
<p>
  When <code>indent-for-tab-command</code> is bound
  to <code>TAB</code> and when <code>indent-for-tab-command</code>
  decides to indent the current line, it calls the function in the
  variable <code>indent-line-function</code> to perform the
  indentation.  Here is a table that shows
  what <code>indent-line-function</code> contains in a few major modes
  where <code>indent-for-tab-command</code> command is bound
  to <code>TAB</code>:
</p>
<table class="grid">
  <tr>
    <th><code>major-mode</code></th>
    <th><code>indent-line-function</code></th>
  </tr>
  <tr>
    <td><code>emacs-lisp-mode</code></td>
    <td><code>lisp-indent-line</code></td>
  </tr>
  <tr>
    <td><code>python-mode</code></td>
    <td><code>python-indent-line-function</code></td>
  </tr>
  <tr>
    <td><code>text-mode</code></td>
    <td><code>indent-relative</code></td>
  </tr>
</table>
<p>
  While <code>lisp-indent-line</code> and
  <code>python-indent-line</code> attempt to indent the current line
  according to the syntax of the language,
  <code>indent-relative</code> inserts tabs and spaces to move the
  point to the next indentation point where the indentation point is
  defined as the next non-whitespace character following whitespace.
  This can be useful in aligning the point with words in the previous
  line.  If the previous line has no indentation point (e.g. the
  previous line is an empty line or does not have whitespace),
  then <code>tab-to-tab-stop</code> is invoked which inserts tabs or
  spaces to move the point to the next tab stop column.
</p>
<p>
  The command <code>tab-to-tab-stop</code> command introduced in the
  previous paragraph can also be invoked with <code>M-i</code>.
</p>
<h3 id="use-only-spaces-for-indentation">Use Only Spaces for Indentation<a href="#use-only-spaces-for-indentation"></a></h3>
<p>
  By default, Emacs uses a mix of tabs and spaces for indentation and
  alignment.  When it needs to align the first non-whitespace
  character of a line with a certain token in the previous line, it
  would insert as many tabs as it can followed by a few spaces if
  necessary to attain the desired alignment.  To force Emacs to always
  use spaces for indentation and alignment, add the following Elisp
  code to the Emacs initialisation file:
</p>
<pre><code>(setq-default indent-tabs-mode nil)</code></pre>
<h3 id="tab-width">Tab Width<a href="#tab-width"></a></h3>
<p>
  The variable <code>tab-width</code> is used in various contexts
  while performing indentation and alignment.  For example,
  when <code>indent-tabs-mode</code> is enabled, for
  every <code>tab-width</code> columns of indentation required, Emacs
  inserts a tab to indent the code.
</p>
<p>
  Also, when <code>indent-tabs-mode</code> is set to <code>nil</code>,
  typing <code>M-i</code> inserts as many spaces as necessary to move
  the point to the next tab stop column where the distance between two
  tab stops is assumed to be <code>tab-width</code>.
</p>
<h3 id="edit-tab-stops">Edit Tab Stops<a href="#edit-tab-stops"></a></h3>
<p>
  The behaviour of <code>M-i</code> can be customised further by
  manually defining tab stop columns.  Type <code>M-x edit-tab-stops
  RET</code> first.  A buffer named <code>*Tab Stops*</code> appears.
  The second and third line of this buffer contains a ruler to
  indicate the column numbers.  Type <code>:</code> (i.e. colon) in
  the first line whereever you want to define tab stops.  Then
  type <code>C-c C-c</code> to install the changes.  Now
  when <code>M-i</code> is typed in a text buffer, each time it
  inserts as many tabs (if <code>indent-tabs-mode</code>
  is <code>t</code>) or spaces as necessary to move the point to the
  next tab stop column as defined earlier in the <code>*Tab
  Stops*</code> buffer.
</p>
<h3 id="indent-regions">Indent Region<a href="#indent-regions"></a></h3>
<p>
  Typing <code>TAB</code> when a region is active indents the region
  according to the major mode's indentation rules.  It invokes the
  same command as the one invoked when we type <code>TAB</code> to
  indent a line.  The command bound to it takes care of indenting
  region.  For example, if <code>TAB</code> is bound
  to <code>indent-for-tab-command</code>, the latter checks if a
  region is active and if it is, then it simply
  calls <code>indent-region</code>.
</p>
<p>
  The <code>indent-region</code> command can be invoked explicitly
  using <code>C-M-\</code>.  If <code>fill-prefix</code> has been set,
  say with <code>C-x .</code>, then it is added to every line in the
  region being indented.  With a numeric prefix argument, each line in
  the region is indented to the column indicated by the argument.  For
  example, <code>C-M-1 C-M-0 C-M-\</code> indents each line of the
  region to column 10.
</p>
<h3 id="indent-rigidly">Indent Rigidly<a href="#indent-rigidly"></a></h3>
<p>
  When we want to rigidly control how a region must be indented, we
  can type <code>C-x TAB</code> to perform rigid indentation.  Doing
  so allows us to bypass the indentation rules of the major mode.
  Instead we control exactly how the indentation must be done.  The
  following complete key sequences demonstrates a few examples of
  rigid indentation:
</p>
<ul>
  <li>
    <code>C-x TAB</code>: Interactively indent region.
    Type <code>&lt;right&gt;</code> or <code>&lt;left&gt;</code> to
    increase or decrease indentation by one space respectively.
    Type <code>&lt;right&gt;</code> or <code>&lt;left&gt;</code> to
    increase or decrease indentation by one tab stop respectively.
  </li>
  <li>
	<code>C-6 C-x TAB</code>: Indent region by 6 spaces.  Appropriate
	number of tabs and spaces are inserted to achieve an apparent 6
	spaces of indentation.  Whether tabs are inserted or not and how
	many tabs are inserted depend on the values
	of <code>indent-tabs-mode</code> and <code>tab-width</code> as
	explained in the previous sections.
  </li>
  <li>
	<code>C-- C-6 C-x TAB</code>: Reduce indentation of region by 6
	spaces.
  </li>
</ul>
<h2 id="sorting">Sorting<a href="#sorting"></a></h2>
<p>
  Assuming a region is active, here are some complete key sequences
  for various sorting commands:
</p>
<ul>
  <li>
    <code>M-x sort-lines RET</code>: Sort lines alphabetically.
  </li>
  <li>
    <code>C-u M-x sort-lines RET</code>: Reverse sort lines
    alphabetically.
  </li>
  <li>
    <code>M-x sort-fields RET</code>: Sort lines alphabetically by the
    first field alphabetically.  Fields are separated by whitespace.
  </li>
  <li>
    <code>M-2 M-x sort-fields RET</code>: Sort lines alphabetically
    by the second field.
  </li>
  <li>
    <code>M-2 M-x sort-numeric-fields RET</code>: Sort lines
    numerically by the second field.
  </li>
  <li>
    <code>M-x sort-columns RET</code>: Sort columns between the column
    position of mark and column position of point.
  </li>
  <li>
    <code>M-x sort-regexp-fields RET [A-Z]*-&gt;\(.*\) RET \1 RET</code>:
    Sort the strings in each line matched by the given regular
    expression by the field matched by the first (and the only)
    capturing group in the regular expression.  The part of each line
    that is not matched by the regular expression remains intact.
    They never move.  Only the part of each line that is matched by
    the regular expression moves around during the sorting operation.
  </li>
  <li>
    <code>M-x sort-regexp-fields RET</code>: Sort paragraphs
    alphabetically.
  </li>
</ul>
<h2 id="aligning">Aligning<a href="#aligning"></a></h2>
<p>
  The two simple commands for aligning text introduced first in the
  book are:
</p>
<ul>
  <li>
    <code>M-x align RET</code>: Aligns current region.
  </li>
  <li>
    <code>M-x align-current RET</code>: Aligns current section.  A
    section is a group of consecutive lines both below, above and
    including the current line for which the first alignment rule
    (according to the major mode) applies.
  </li>
</ul>
<p>
  Consider the following Elisp buffer:
</p>
<pre>
<code>(defvar person '(("name" . "Alice")
                 ("city" . "London")
                 ("country" . "UK")))</code>
</pre>
<p>
  If we type <code>C-x h</code> followed by <code>M-x align RET</code>
  or if we put the cursor on any line of the above code and
  type <code>M-x align-current RET</code>, we get the following
  result:
</p>
<pre>
<code>(defvar alice '(("name"    . "Alice")
                ("city"    . "London")
                ("country" . "UK")))</code>
</pre>
<p>
  There is also an <code>align-regexp</code> command that allows us to
  parts of lines by regular expressions.  The following experiments
  demonstrate this command.
</p>
<ol>
  <li>
    First create a buffer with the following text:
<pre>
<code>Alice:London:UK
Bob:Paris:France
Carol:Tokyo:Japan</code>
</pre>
  </li>
  <li>
    <p>
      Type <code>C-x h</code> followed by <code>C-u M-x align-regexp
        \(\s-*\): RET 1 RET 1 RET y RET</code>.  The result looks like
        this:
    </p>
<pre>
<code>Alice :London :UK
Bob   :Paris  :France
Carol :Tokyo  :Japan</code>
</pre>
    <p>
      Note that the regular expression capturing
      group <code>\(\s-*\)</code> appears as the default in the
      minibuffer.  We only add <code>:</code> to it.  Similarly the
      two occurrences of <code>1</code> appear as default values.  The
      first <code>1</code> is the default for determining which
      parenthesis group to modify.  The second <code>1</code> is the
      default for amount of spacing to be used during alignment.
      The <code>y</code> in the end specifies that we want to repeat
      the alignment throughout the line.
    </p>
  </li>
  <li>
      Type <code>C-/</code> to undo the changes done in the last step.
      Then type <code>C-x h</code> followed by <code>M-x align-regexp
      : RET</code>.  This is a shorter equivalent to the previous
      command.  The output is same as before.
  </li>
  <li>
    <p>
      Type <code>C-/</code> to undo the changes done in the last step.
      Then type <code>C-x h</code> followed by <code>C-u M-x
      align-regexp :\(\s-*\) RET 1 RET 1 y RET</code>.  Note that the
      only difference this time is that we place the colon before the
      parenthesis group.  The result looks like this:
    </p>
<pre>
<code>Alice: London: UK
Bob:   Paris:  France
Carol: Tokyo:  Japan</code>
</pre>
  </li>
  <li>
    <p>
      Type <code>C-/</code> to undo the changes done in the last step.
      Then type <code>C-x h</code> followed by <code>C-u M-x
      align-regexp \(\s-*\): RET 1 RET 0 y RET</code>.  Note that the
      only difference this time is that we place the colon before the
      parenthesis group.  We specify <code>0</code> as the amount of
      spacing this time, so a minimum of zero spacing is used for
      alignment when possible.  The result looks like the following.
      Notice the lack of space after <code>Alice</code>
      and <code>Carol</code>.
    </p>
<pre>
<code>Alice:London:UK
Bob  :Paris :France
Carol:Tokyo :Japan</code>
</pre>
  </li>
  <li>
    <p>
      Type <code>C-/</code> to undo the changes done in the last step.
      Then type <code>C-x h</code> followed by <code>C-u M-x
      align-regexp \(\s-*\): RET 1 RET 5 y RET</code>.  Note that the
      only difference this time is that we place the colon before the
      parenthesis group.  We specify <code>5</code> as the amount of
      spacing this time, so a minimum of 5 spaces are used for
      alignment.
    </p>
<pre>
<code>Alice     :London     :UK
Bob       :Paris      :France
Carol     :Tokyo      :Japan</code>
</pre>
  </li>
</ol>
<h2 id="zap-to-char">Zap to Char<a href="#zap-to-char"></a></h2>
<p>
  The steps below demonstrate the <code>zap-to-char</code> command
  that is bound to the key sequence <code>M-z</code>.  This command
  kills up to and including the given character.
</p>
<ol>
  <li>
    <p>
      Create a buffer with the following text:
    </p>
    <pre><code>foo bar baz qux quux</code></pre>
  </li>
  <li>
    <p>
      Type <code>M-&lt;</code> to go to the beginning of the buffer
      and then type <code>M-z r</code> to kill text up to and
      including the first occurrence of the letter <code>r</code>.
      The buffer now looks like this:
    </p>
    <pre><code>  baz qux quux</code></pre>
  </li>
  <li>
    <p>
      Type <code>M-&lt;</code> to go to the beginning of the buffer
      and then type <code>M-z x</code> to kill text up to and
      including the first occurrence of the letter <code>x</code>.
      The buffer now looks like this:
    </p>
    <pre><code> quux</code></pre>
  </li>
  <li>
    <p>
      Now type <code>C-e SPC C-y</code> to reinsert the killed text at
      the end of the line.  The buffer now looks like this:
    </p>
    <pre><code> quux foo bar baz qux</code></pre>
    <p>
      Note that the last step yanks both chunks of text that were
      killed in the previous two steps.  This is due to the fact that
      consecutive kills append to the same stretch of text in the kill
      ring.  This fact was discussed earlier in
      section <a href="#append-kill">Append Kill</a>
    </p>
  </li>
  <li>
    <p>
      Now type <code>M-&lt;</code> to go back to the beginning of the
      buffer again.  Then type <code>M-2 M-z a</code>.  The numeric
      argument <code>2</code> specifies that we want to zap up to the
      second occurrence of the letter <code>a</code>.  The buffer
      looks like this:
    </p>
    <pre><code>z qux</code></pre>
  </li>
  <li>
    <p>
      Type <code>C-e SPC C-y</code> to reinsert the text killed in the
      previous step at the end of the line.  The buffer looks like
      this now:
    </p>
    <pre><code>z qux quux foo bar ba</code></pre>
  </li>
  <li>
    <p>
      Type <code>M-- M-2 M-z x</code> to zap backward up to the second
      occurrence of the letter <code>x</code>.  The buffer looks like
      this now:
    </p>
    <pre><code>z qu</code></pre>
  </li>
</ol>
<h2 id="zap-up-to-char">Zap up to Char<a href="#zap-up-to-char"></a></h2>
<p>
  Here are some steps that demonstrate the <code>zap-up-to-char</code>
  command.  This command kills text up to, but not including, the
  given character.
</p>
<ol>
  <li>
    <p>
      Create a buffer with the following text:
    </p>
    <pre><code>foo bar baz qux quux</code></pre>
  </li>
  <li>
    <p>
      Type <code>M-&lt;</code> to go to the beginning of the buffer.
      Then type <code>M-x zap-up-to-char RET b</code>.  The result now
      looks like this:
    </p>
    <pre><code>bar baz qux quux</code></pre>
  </li>
  <li>
    <p>
      Type <code>M-2 M-x zap-up-to-char RET q</code>.  The result now
      looks like this:
    </p>
    <pre><code>quux</code></pre>
  </li>
  <li>
    <p>
      Type <code>C-e SPC C-y</code> to reinsert the killed text at the end
      of the buffer:
    </p>
    <pre><code>quux foo bar baz qux </code></pre>
  </li>
  <li>
    <p>
      Type <code>M-- M-2 M-x zap-up-to-char RET b</code>.  The buffer
      now looks like this:
    </p>
    <pre><code>quux foo b</code></pre>
  </li>
</ol>
<p>
  The author of the book suggests binding this command
  to <code>M-S-z</code> with the following Elisp code:
</p>
<pre><code>(global-set-key (kbd "M-S-z") 'zap-up-to-char)</code></pre>
<p>
  The above code, however, does not create the binding successfully.
  Therefore, use the following Elisp code instead:
</p>
<pre><code>(global-set-key (kbd "M-Z") 'zap-up-to-char)</code></pre>
<p>
  Now the commands presented in this section above can be typed as
  follows:
</p>
<ul>
  <li><code>M-Z b</code></li>
  <li><code>M-2 M-Z q</code></li>
  <li><code>M-- M-Z b</code></li>
</ul>
<h2 id="spell-check">Spell Check<a href="#spell-check"></a></h2>
<p>
  The spell checking commands of Emacs require a spell checking
  program to be installed on the system.  Emacs supports the spell
  checking programs <code>aspell</code>, <code>ispell</code>,
  <code>hunspell</code> and <code>enchant-2</code>.  If multiple
  programs are present, it looks for them one by one in the order
  specified in the previous sentence and picks the first one that is
  found.  The following spell checking commands are introduced in the
  book:
</p>
<ul>
  <li>
    <code>M-$</code>: Check spelling of word under or before the
    cursor.  Possible corrections are offered in a new window.  If the
    word under or before the cursor is already correct, a message
    like <code>APPLE is correct</code> appears in the echo area.  When
    corrections are offered, each correction is numbered.
    Type <code>SPC</code> to leave the word unchanged or type a number
    to choose a numbered correction.  Type <code>x</code> to exit the
    the spelling buffer (the one that shows corrections).
    Type <code>q</code> to quit the spelling session (kills the
    spelling program process).  To see the list of all key bindings
    supported, type <code>C-h f ispell-help RET</code>.
  </li>
  <li>
    <code>M-x flyspell-mode RET</code>: Toggle on-the-fly spell
    checking.  Misspelled words are underlined with squiggly lines.
    Type <code>C-M-i</code> or <code>C-.</code> to correct a
    misspelled word under or before the cursor.  All possible
    corrections appear in the echo area.  Repeat <code>C-M-i</code>
    or <code>C-.</code> to cycle through the possible corrections.
  </li>
  <li>
    <code>M-x flyspell-prog-mode RET</code>: Turns
    on <code>flyspell-mode</code> for comments and strings only.  This
    is useful while working in a buffer with a programming mode
    enabled.
  </li>
  <li>
    <code>M-x ispell-buffer RET</code>: Check the current buffer for
    spelling errors interactively.  Each misspelled word is
    highlighted and corrections are offered in a new window.  The
    interface and key sequences for making corrections are the same as
    the ones for <code>M-$</code> introduced above.
  </li>
  <li>
    <code>M-x ispell-region RET</code>: Like the previous command but
    checks the current region for spelling errors.
  </li>
</ul>
<h2 id="dictionary-lookup">Dictionary Lookup<a href="#dictionary-lookup"></a></h2>
<p>
  The following complete key sequences demonstrate some of the
  dictionary commands introduced in the book:
</p>
<ul>
  <li>
    <code>M-x dictionary-lookup-definition RET</code>: Look up
    definitions of the word at or before the cursor.
  </li>
  <li>
    <code>M-x dictionary-search RET programming RET</code>: Search
    definitions of the word <code>programming</code>.
  </li>
  <li>
    <code>M-x dictionary-select-dictionary RET</code>: This command
    presents a list of available dictionaries in a new buffer.
    Navigate the buffer and click on a dictionary or
    type <code>RET</code> while the cursor is on a dictionary entry to
    select it.  For example, move the cursor down to the entry that
    begins with the text <code>jargon:</code> and
    type <code>RET</code> and then type <code>M-x dictionary-search
    RET programming RET</code> to see the definition of the
    word <code>programming</code> from the Jargon File only.
  </li>
</ul>
<p>
  The dictionary commands first attempt to connect to a locally
  running dictionary server.  If the connection does not succeed, it
  prompts for consent to connect to
  <a href="https://dict.org/">dict.org</a>.  Typing <code>y</code> at
  the prompt allows the command to proceed and complete the command.
</p>
<h2 id="quoted-insert">Quoted Insert<a href="#quoted-insert"></a></h2>
<p>
  Here are some complete key sequences that demonstrate quoted insert:
</p>
<ul>
  <li>
    <code>C-q C-l</code>: Insert form feed character.  This is
    displayed as <samp>^L</samp> in Emacs using the face
    named <code>escape-glyph</code>.  Emacs treats each form feed
    character as a page break and we can navigate back and forth
    between pages with <code>C-x [</code> and <code>C-x ]</code>
    respectively.
  </li>
  <li>
    <code>C-q (</code>: Insert a literal open parenthesis.  Useful
    in <code>paredit-mode</code> where the key sequence <code>(</code>
    is bound to <code>paredit-open-round</code> which inserts a
    balanced pair of parentheses.  To insert a single parenthesis
    instead, we can perform a quoted insert with <code>C-q (</code>.
  </li>
  <li>
    <code>C-q TAB</code>: Insert a literal tab character.
  </li>
  <li>
    <code>C-q C-j</code>: Insert a literal line feed character, i.e.
    a newline character.
  </li>
  <li>
    <code>C-q RET</code>: Insert a literal carriage return.  This is
    displayed as <samp>^M</samp> in Emacs.
  </li>
  <li>
    <code>C-q ESC</code>: Insert a literal escape character.  This is
    displayed as <samp>^[</samp> in Emacs.
  </li>
  <li>
    <code>C-q C-[</code>: Same as above.
  </li>
</ul>
<h2 id="links">Links<a href="#links"></a></h2>
<p>
  The following list includes some links that were discussed during
  the book discussion group meetings:
</p>
<ul>
  <li>
    <a href="https://battlepenguin.com/tech/aspell-and-hunspell-a-tale-of-two-spell-checkers/">Aspell and Hunspell: A Tale of Two Spell Checkers</a>
  </li>
  <li>
    <a href="https://www.reddit.com/r/emacs/comments/fxs92h/">Spell
      checkers in Emacs in 2020</a>
  </li>
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/cc/mastering-emacs/ch05.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a> |
  <a href="https://susam.net/tag/meetup.html">#meetup</a>
</p>
]]>
</description>
</item>
<item>
<title>Sorting in Emacs</title>
<link>https://susam.net/sorting-in-emacs.html</link>
<guid isPermaLink="false">umnyp</guid>
<pubDate>Wed, 09 Aug 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  In this article, we will perform a series of hands-on experiments
  that demonstrate the various Emacs commands that can be used to sort
  text in different ways.  There is sufficient documentation available
  for these commands in the Emacs and Elisp manuals.  In this article,
  however, we will take a look at some concrete examples to illustrate
  how they work.
</p>
<h2 id="sorting-lines">Sorting Lines<a href="#sorting-lines"></a></h2>
<p>
  Our first set of experiments demonstrates different ways to sort
  lines.  Follow the steps below to perform these experiments.
</p>
<ol>
  <li> <!-- 1. Create buffer -->
    <p>
      First create a buffer that has the following text:
    </p>
<pre>
<code>Carol  200  London  LHR-&gt;SFO
Dan    20   Tokyo   HND-&gt;LHR
Bob    100  London  LCY-&gt;CDG
Alice  10   Paris   CDG-&gt;LHR
Bob    30   Paris   ORY-&gt;HND</code>
</pre>
    <p>
      Let us pretend that each line is a record that represents some
      details about different persons.  From left to right, we have
      each person's name, some sort of numerical ID, their current
      location and their upcoming travel plan.  For example, the first
      line says that Carol from London is planning to travel from
      London Heathrow (LHR) to San Francisco (SFO).
    </p>
  </li>
  <li> <!-- 2. sort-lines -->
    <p>
      Type <code>C-x h</code> to mark the whole buffer and
      type <code>M-x sort-lines RET</code> to sort lines
      alphabetically.  The buffer looks like this now:
    </p>
<pre>
<code>Alice  10   Paris   CDG-&gt;LHR
Bob    100  London  LCY-&gt;CDG
Bob    30   Paris   ORY-&gt;HND
Carol  200  London  LHR-&gt;SFO
Dan    20   Tokyo   HND-&gt;LHR</code>
</pre>
  </li>
  <li> <!-- 3. sort-lines (reverse) -->
    <p>
      Type <code>C-x h</code> followed by <code>C-u M-x sort-lines
      RET</code> to reverse sort lines alphabetically.  The key
      sequence <code>C-u</code> specifies a prefix argument that
      indicates that a reverse sort must be performed.  The buffer
      looks like this now:
    </p>
<pre>
<code>Dan    20   Tokyo   HND-&gt;LHR
Carol  200  London  LHR-&gt;SFO
Bob    30   Paris   ORY-&gt;HND
Bob    100  London  LCY-&gt;CDG
Alice  10   Paris   CDG-&gt;LHR</code>
</pre>
  </li>
  <li> <!-- 4. sort-fields (first) -->
    <p>
      Type <code>C-x h</code> followed by <code>M-x sort-fields
      RET</code> to sort the lines by the first field only.  Fields
      are separated by whitespace.  Note that the result now is
      slightly different from the result of <code>M-x sort-lines
      RET</code> presented in point 2 earlier.  Here Bob from Paris
      comes before Bob from London because the sorting was performed
      by the first field only.  The sorting algorithm ignored the rest
      of each line.  However in point 2 earlier, Bob from London came
      before Bob from Paris because the sorting was performed by
      entire lines.
    </p>
<pre>
<code>Alice  10   Paris   CDG-&gt;LHR
Bob    30   Paris   ORY-&gt;HND
Bob    100  London  LCY-&gt;CDG
Carol  200  London  LHR-&gt;SFO
Dan    20   Tokyo   HND-&gt;LHR</code>
</pre>
  </li>
  <li> <!-- 5. sort-fields (second) -->
    <p>
      Type <code>C-x h</code> followed by <code>M-2 M-x sort-fields
      RET</code> to sort the lines alphabetically by the second field.
      The key sequence <code>M-2</code> here specifies a numeric
      argument that identifies the field we want to sort by.  Note
      that <code>100</code> comes before <code>20</code> because we
      performed an alphabetical sort, not numerical sort.  The result
      looks like this:
    </p>
<pre>
<code>Alice  10   Paris   CDG-&gt;LHR
Bob    100  London  LCY-&gt;CDG
Dan    20   Tokyo   HND-&gt;LHR
Carol  200  London  LHR-&gt;SFO
Bob    30   Paris   ORY-&gt;HND</code>
</pre>
  </li>
  <li> <!-- 6. sort-numeric-fields -->
    <p>
      Type <code>C-x h</code> followed by <code>M-2 M-x
      sort-numeric-fields RET</code> to sort the lines numerically by
      the second field.  The result looks like this:
    </p>
<pre>
<code>Alice  10   Paris   CDG-&gt;LHR
Dan    20   Tokyo   HND-&gt;LHR
Bob    30   Paris   ORY-&gt;HND
Bob    100  London  LCY-&gt;CDG
Carol  200  London  LHR-&gt;SFO</code>
</pre>
  </li>
  <li> <!-- 7. sort-fields (third) -->
    <p>
      Type <code>C-x h</code> followed by <code>M-3 M-x sort-fields
      RET</code> to sort the lines alphabetically by the third field
      containing city names.  The result looks like this:
    </p>
<pre>
<code>Bob    100  London  LCY-&gt;CDG
Carol  200  London  LHR-&gt;SFO
Alice  10   Paris   CDG-&gt;LHR
Bob    30   Paris   ORY-&gt;HND
Dan    20   Tokyo   HND-&gt;LHR</code>
</pre>
    <p>
      Note that we cannot supply the prefix argument <code>C-u</code>
      to this command to perform a reverse sort by a specific field
      because the prefix argument here is used to identify the field
      we need to sort by.  If we do specify the prefix
      argument <code>C-u</code>, it would be treated as the numeric
      argument <code>4</code> which would sort the lines by the fourth
      field.  However, there is a little trick to reverse sort lines
      by a specific field.  The next point shows this.
    </p>
  </li>
  <li> <!-- 8. reverse-region -->
    <p>
      Type <code>C-x h</code> followed by <code>M-x reverse-region
      RET</code>.  This reverses the order of lines in the region.
      Combined with the previous command, this effectively
      reverse sorts the lines by city names.  The result looks like
      this:
    </p>
<pre>
<code>Dan    20   Tokyo   HND-&gt;LHR
Bob    30   Paris   ORY-&gt;HND
Alice  10   Paris   CDG-&gt;LHR
Carol  200  London  LHR-&gt;SFO
Bob    100  London  LCY-&gt;CDG</code>
</pre>
  </li>
  <li> <!-- 9. sort-fields (negative) -->
    <p>
      Type <code>C-x h</code> followed by <code>M-- M-2 M-x
      sort-fields RET</code> to sort the lines alphabetically by the
      second field from the right (third from the left).  Note that
      the first two key combinations are <kbd>meta</kbd>+<kbd>-</kbd>
      and <kbd>meta</kbd>+<kbd>2</kbd>.  They specify the negative
      argument <code>-2</code> to sort the lines by the second field
      from the right.  The result looks like this:
    </p>
<pre>
<code>Carol  200  London  LHR-&gt;SFO
Bob    100  London  LCY-&gt;CDG
Bob    30   Paris   ORY-&gt;HND
Alice  10   Paris   CDG-&gt;LHR
Dan    20   Tokyo   HND-&gt;LHR</code>
</pre>
  </li>
  <li> <!-- 10. sort-columns -->
    <p>
      Type <code>M-&lt;</code> to move the point to the beginning of
      the buffer.  Then type <code>C-s London RET</code> followed
      by <code>M-b</code> to move the point to the beginning of the
      word <code>London</code> on the first line.  Now
      type <code>C-SPC</code> to set a mark there.
    </p>
    <p>
      Then type <code>C-4 C-n C-e</code> to move the point to the end
      of the last line.  An active region should be visible in the
      buffer now.
    </p>
    <p>
      Finally type <code>M-x sort-columns RET</code> to sort the
      columns bounded by the column positions of mark and point (i.e.
      the last two columns).  The result looks like this:
    </p>
<pre>
<code>Bob    100  London  LCY-&gt;CDG
Carol  200  London  LHR-&gt;SFO
Alice  10   Paris   CDG-&gt;LHR
Bob    30   Paris   ORY-&gt;HND
Dan    20   Tokyo   HND-&gt;LHR</code>
</pre>
  </li>
  <li> <!-- 11. sort-columns (reverse) -->
    <p>
      Like before, type <code>M-&lt;</code> to move the point to the
      beginning of the buffer.  Then type <code>C-s London RET</code>
      followed by <code>M-b</code> to move the point to the beginning
      of the word <code>London</code> on the first line.  Now
      type <code>C-SPC</code> to set a mark there.
    </p>
    <p>
      Again, like before, type <code>C-4 C-n C-e</code> to move the
      point to the end of the last line.  An active region should be
      visible in the buffer now.
    </p>
    <p>
      Now type <code>C-u M-x sort-columns RET</code> to reverse sort
      the last two columns.
    </p>
<pre>
<code>Dan    20   Tokyo   HND-&gt;LHR
Bob    30   Paris   ORY-&gt;HND
Alice  10   Paris   CDG-&gt;LHR
Carol  200  London  LHR-&gt;SFO
Bob    100  London  LCY-&gt;CDG</code>
</pre>
  </li>
  <li> <!-- 12. sort-regexp-fields (warning) -->
    <p>
      Warning: This step shows how <em>not to</em> use
      the <code>sort-regexp-fields</code> command.  In most cases you
      probably do not want to do this.  The next point shows a typical
      usage of this command that is correct in most cases.
    </p>
    <p>
      Type <code>C-x h</code> followed by <code>M-x sort-regexp-fields
      RET [A-Z]*-&gt;\(.*\) RET \1 RET</code> to sort by the
      destination airport.  This command first matches the destination
      aiport in each line in a regular expression capturing group
      (<code>\(.*\)</code>).  Then we ask this command to sort the
      lines by the field matched by this capturing group
      (<code>\1</code>).  The result looks like this:
    </p>
<pre>
<code>Dan    20   Tokyo   LCY-&gt;CDG
Bob    30   Paris   ORY-&gt;HND
Alice  10   Paris   HND-&gt;LHR
Carol  200  London  CDG-&gt;LHR
Bob    100  London  LHR-&gt;SFO</code>
</pre>
    <p>
      Observe how all our travel records are messed up in this result.
      Now Dan from Tokyo is travelling from LCY to CDG instead of
      travelling from HND to LHR.  Compare the results in this point
      with that of the previous point.  This command has sorted the
      destination fields fine and it has maintained the association
      between the source airport and destination airport fine too.
      But the association between the other fields (first three
      columns) and the last field (source and destination airports) is
      broken.  This happened because the regular expression matches
      only the last column and we sorted by only the destination field
      of the last column, so the association of the fields in the last
      column is kept intact but the rest of the association is broken.
      Only the part of each line that is matched by the regular
      expression moves around while the sorting is performed;
      everything else remains unchanged.  This behaviour may be useful
      in some limited situations but in most cases, we want to keep
      the association between all the fields intact.  The next point
      shows how to do this.
    </p>
    <p>
      Now type <code>C-/</code> (or <code>C-x u</code>) to undo this
      change and revert the buffer to the previous good state.  After
      doing this, the buffer should look like the result presented in
      the previous point.
    </p>
  </li>
  <li> <!-- 13. sort-regexp-fields (correct) -->
    <p>
      Assuming the state of the buffer is same as that of the result
      in point 11, we will now see how to alter the previous step such
      that when we sort the lines by the destination field, entire
      lines move along with the destination fields.  The trick is to
      ensure that the regular expression matches entire lines.  To do
      so, we make a minor change in the regular expression.
      Type <code>C-x h</code> followed by <code>M-x sort-regexp-fields
      RET .*-&gt;\(.*\) RET \1 RET</code>.
    </p>
<pre>
<code>Bob    100  London  LCY-&gt;CDG
Bob    30   Paris   ORY-&gt;HND
Dan    20   Tokyo   HND-&gt;LHR
Alice  10   Paris   CDG-&gt;LHR
Carol  200  London  LHR-&gt;SFO</code>
</pre>
    <p>
      Now the lines are sorted by the destination field and Dan from
      Tokyo is travelling from HND to LHR.
    </p>
  </li>
  <li> <!-- 14. sort-regexp-fields (reverse) -->
    <p>
      Type <code>C-x h</code> followed by <code>M-- M-x
      sort-regexp-fields RET .*-&gt;\(.*\) RET \1 RET</code> to
      reverse sort the lines by the destination airport.  Note that
      the first key combination is <kbd>meta</kbd>+<kbd>-</kbd> here.
      This key combination specifies a negative argument that results
      in a reverse sort.  The result looks like this:
    </p>
<pre>
<code>Carol  200  London  LHR-&gt;SFO
Dan    20   Tokyo   HND-&gt;LHR
Alice  10   Paris   CDG-&gt;LHR
Bob    30   Paris   ORY-&gt;HND
Bob    100  London  LCY-&gt;CDG</code>
</pre>
  </li>
  <li> <!-- 15. shell-command-on-region -->
    <p>
      Finally, note that we can always invoke shell commands on a
      region and replace the region with the output of the shell
      command.  To see this in action, first prepare the buffer by
      typing <code>M-&lt;</code> followed by <code>C-k C-k C-y
      C-y</code> to duplicate the first line of the buffer.
    </p>
    <p>
      Then type <code>C-x h</code> followed by <code>C-u M-| sort -u
      RET</code> to sort the lines but remove duplicate lines during
      the sort operation.  The <code>M-|</code> key sequence invokes
      the command <code>shell-command-on-region</code> which prompts
      for a shell command, executes it and usually displays the output
      in the echo area.  If the output cannot fit in the echo area,
      then it displays the output in a separate buffer.  However, if a
      prefix argument is supplied, say with <code>C-u</code>, then it
      replaces the region with the output.  As a result, the buffer
      now looks like this:
    </p>
    <pre>
<code>Alice  10   Paris   CDG-&gt;LHR
Bob    100  London  LCY-&gt;CDG
Bob    30   Paris   ORY-&gt;HND
Carol  200  London  LHR-&gt;SFO
Dan    20   Tokyo   HND-&gt;LHR</code>
</pre>
    <p>
      This particular problem of removing duplicates while sorting can
      be also be accomplished by typing <code>C-x h</code> followed
      by <code>M-x sort-lines RET</code> and then <code>C-x h</code>
      followed by <code>M-x delete-duplicate-lines</code>.
      Nevertheless, it is useful to know that we can execute arbitrary
      shell commands on a region.
    </p>
  </li>
</ol>
<h2 id="sorting-paragraphs-and-pages">Sorting Paragraphs and Pages<a href="#sorting-paragraphs-and-pages"></a></h2>
<p>
  We have covered most of the sorting commands mentioned in the Emacs
  manual in the previous section.  Now we will switch gears and
  discuss a few more of the remaining ones.  We will no longer sort
  individual lines but paragraphs and pages instead.
</p>
<ol>
  <li> <!-- 1. Create buffer -->
    <p>
      First create a buffer with the content provided below.  Note
      that the text below contains three form feed characters.  In
      Emacs, they are displayed as <code class="hl">^L</code>.  Many
      web browsers generally do not display them.
      The <code class="hl">^L</code> symbols that we see in the text
      below have been overlayed with CSS.  But there are actual form
      feed characters next to those overlays.  If you are viewing this
      post with any decent web browser, you can copy the text below
      into your Emacs and you should be able to see the form feed
      characters in Emacs.  In case you do not, insert them yourself
      by typing <code>C-q C-l</code>.
    </p>
<pre>
<code>Emacs is an advanced, extensible, customisable,
self-documenting editor.

Emacs editing commands operate in terms of
characters, words, lines, sentences, paragraphs,
pages, expressions, comments, etc.
<span class="ctrl-l hl">&#12;</span>
We will use the term frame to mean a graphical
window or terminal screen occupied by Emacs.

At the very bottom of the frame is an echo area.
The main area of the frame, above the echo area,
is called the window.
<span class="ctrl-l hl">&#12;</span>
The cursor in the selected window shows the
location where most editing commands take effect,
which is called point.

If you are editing several files in Emacs, each in
its own buffer, each buffer has its own value of
point.
<span class="ctrl-l hl">&#12;</span></code>
</pre>
  </li>
  <li> <!-- 2. sort-pages -->
    <p>
      Our text has six paragraphs spread across three pages.  Each
      form feed character represents a page break.  Type <code>C-x
      h</code> followed by <code>M-x sort-pages RET</code> to sort the
      pages alphabetically.  Note how the second page moves to the
      bottom because it begins with the letter "W".  The buffer now
      looks like this now:
    </p>
<pre>
<code>Emacs is an advanced, extensible, customisable,
self-documenting editor.

Emacs editing commands operate in terms of
characters, words, lines, sentences, paragraphs,
pages, expressions, comments, etc.
<span class="ctrl-l hl">&#12;</span>
The cursor in the selected window shows the
location where most editing commands take effect,
which is called point.

If you are editing several files in Emacs, each in
its own buffer, each buffer has its own value of
point.
<span class="ctrl-l hl">&#12;</span>
We will use the term frame to mean a graphical
window or terminal screen occupied by Emacs.

At the very bottom of the frame is an echo area.
The main area of the frame, above the echo area,
is called the window.
<span class="ctrl-l hl">&#12;</span></code>
</pre>
  </li>
  <li> <!-- 3. sort-paragraphs -->
    <p>
      Finally, type <code>C-x h</code> followed by <code>M-x
      sort-paragraphs</code> to sort the paragraphs alphabetically.
      The buffer looks like this now:
    </p>
<pre>
<code>At the very bottom of the frame is an echo area.
The main area of the frame, above the echo area,
is called the window.

Emacs editing commands operate in terms of
characters, words, lines, sentences, paragraphs,
pages, expressions, comments, etc.
<span class="ctrl-l hl">&#12;</span>
Emacs is an advanced, extensible, customisable,
self-documenting editor.

If you are editing several files in Emacs, each in
its own buffer, each buffer has its own value of
point.
<span class="ctrl-l hl">&#12;</span>
The cursor in the selected window shows the
location where most editing commands take effect,
which is called point.

We will use the term frame to mean a graphical
window or terminal screen occupied by Emacs.
<span class="ctrl-l hl">&#12;</span></code>
</pre>
  </li>
</ol>
<h2 id="references">References<a href="#references"></a></h2>
<p>
  To read and learn more about the sorting commands described above
  refer to the following resources:
</p>
<ul>
  <li><a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Sorting.html">Emacs Manual: Sorting Text</a></li>
  <li><a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Sorting.html">Elisp Manual: Sorting Text</a></li>
</ul>
<p>
  Within Emacs, type the following commands to read these manuals:
</p>
<ul>
  <li><code>M-: (info "(emacs) Sorting") RET</code></li>
  <li><code>M-: (info "(elisp) Sorting") RET</code></li>
</ul>
<p>
  Further, the documentation strings for these commands have useful
  information too.  Use the key sequence <code>C-h f</code> to look up
  the documentation strings.  For example, type <code>C-h f
  sort-regexp-fields RET</code> to look up the documentation string
  for the <code>sort-regexp-fields</code> command.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/sorting-in-emacs.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Control, Escape and Meta Tricks</title>
<link>https://susam.net/control-escape-meta-tricks.html</link>
<guid isPermaLink="false">neaax</guid>
<pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="terminal-tricks">Terminal Tricks<a href="#terminal-tricks"></a></h2>
<p>
  Open a Unix or Linux terminal emulator.  If you have Terminal.app on
  macOS, ensure that the "Use Option as Meta Key" option is enabled in
  its "Preferences" section.  Now type <code>foo bar baz</code>
  followed by <kbd>meta</kbd>+<kbd>b</kbd>
  (i.e. <kbd>alt</kbd>+<kbd>b</kbd> or <kbd>option</kbd>+<kbd>b</kbd>
  on modern keyboards).  In a typical desktop environment with a
  typical and modern terminal emulator running a modern shell like
  Bash, Zsh, etc., the cursor should move backward by one word.  Now
  type <kbd>esc</kbd> <kbd>b</kbd>.  The cursor should move back again
  by one word.  Finally type <kbd>ctrl</kbd>+<kbd>[</kbd> <kbd>b</kbd>
  and the same thing should happen again.  How are we able to perform
  the same operation in three different ways?
</p>
<p>
  Note that if the desktop environment or the terminal emulator or the
  set of shell key bindings is configured differently, the results may
  vary.  But we will assume that the typical defaults are in effect in
  the remainder of this post.  To understand why these three key
  sequences yield the same result, it might be a good exercise to run
  the command <code>cat</code> and type the three key sequences again.
  The three key sequences we are talking about are:
</p>
<ul>
  <li>
    <kbd>meta</kbd>+<kbd>b</kbd> (i.e. <kbd>alt</kbd>+<kbd>b</kbd>
    or <kbd>option</kbd>+<kbd>b</kbd> on modern keyboards)
  </li>
  <li>
    <kbd>esc</kbd> <kbd>b</kbd>
  </li>
  <li>
    <kbd>ctrl</kbd>+<kbd>[</kbd> <kbd>b</kbd>
  </li>
</ul>
<p>
  When we run <code>cat</code> and type the three key sequences
  mentioned above, the following output may appear:
</p>
<pre>
<samp>$ <kbd>cat
^[b^[b^[b</kbd></samp>
</pre>
<p>
  The output shows that the terminal sends the same input
  to <code>cat</code> each time: the <em>escape</em> character that
  appears as <code>^[</code> in the output and the
  character <code>b</code>.  This becomes more apparent if instead of
  running <code>cat</code>, we run <code>od -t d1</code> and type the
  three key sequences followed
  by <kbd>ctrl</kbd>+<kbd>d</kbd> <kbd>enter</kbd>:
</p>
<pre>
<samp>$ <kbd>od -t d1
^[b^[b^[b</kbd>
0000000    27  98  27  98  27  98  10
0000007</samp>
</pre>
<p>
  Indeed decimal 27 is the code of the <em>escape</em> character.
  Similarly decimal 98 is the code of the character <code>b</code>.
</p>
<h2 id="control-codes">Control Codes<a href="#control-codes"></a></h2>
<p>
  Let us first discuss why typing <kbd>ctrl</kbd>+<kbd>[</kbd>
  produces the <em>escape</em> character.  The
  character <code>[</code> has code 91 (binary 1011011) and holding
  the <kbd>ctrl</kbd> key while typing it results in a control code
  obtained by taking 91 (binary 1011011), keeping its five least
  significant bits and discarding the rest.  We get the control code
  27 (binary 11011) as the result.  This is the code of
  the <em>escape</em> character.  This explains
  why <kbd>ctrl</kbd>+<kbd>[</kbd> produces the <em>escape</em>
  character and why the <em>escape</em> character is represented
  as <code>^[</code> while typing it into the standard input.  The
  caret sign (<code>^</code>) here is a notation for
  the <code>ctrl</code> modifier.
</p>
<p>
  The following table provides some more examples of control codes
  that can be obtained by typing the <kbd>ctrl</kbd> key along with
  some other key.
</p>
<table class="grid mono">
  <thead>
    <tr>
      <th rowspan="2">Key</th>
      <th colspan="3">Modified Character</th>
      <th colspan="3">Control Character</th>
    </tr>
    <tr>
      <th>Binary</th>
      <th>Decimal</th>
      <th>Character</th>
      <th>Binary</th>
      <th>Decimal</th>
      <th>Character</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>@</kbd></td>
      <td>1000000</td>
      <td>64</td>
      <td>@</td>
      <td>00000</td>
      <td>0</td>
      <td>Null</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>g</kbd></td>
      <td>1000111</td>
      <td>71</td>
      <td>G</td>
      <td>00111</td>
      <td>7</td>
      <td>Bell</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>h</kbd></td>
      <td>1001000</td>
      <td>72</td>
      <td>H</td>
      <td>01000</td>
      <td>8</td>
      <td>Backspace</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>i</kbd></td>
      <td>1001001</td>
      <td>73</td>
      <td>I</td>
      <td>01001</td>
      <td>9</td>
      <td>Horizontal Tab</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>j</kbd></td>
      <td>1001010</td>
      <td>74</td>
      <td>I</td>
      <td>01010</td>
      <td>10</td>
      <td>Line Feed</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>m</kbd></td>
      <td>1001101</td>
      <td>77</td>
      <td>M</td>
      <td>01101</td>
      <td>13</td>
      <td>Carriage Return</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>[</kbd></td>
      <td>1011011</td>
      <td>91</td>
      <td>[</td>
      <td>11011</td>
      <td>27</td>
      <td>Escape</td>
    </tr>
  </tbody>
</table>
<p>
  This explains why typing <kbd>ctrl</kbd>+<kbd>g</kbd> in a modern
  terminal emulator produces an audible beep or a visual flash,
  why <kbd>ctrl</kbd>+<kbd>h</kbd> erases a character and so on.  This
  also explains why we can type <kbd>ctrl</kbd>+<kbd>[</kbd> in Vim to
  escape from insert mode to normal mode.  While we can
  type <em>escape</em> with the <kbd>esc</kbd> key on the keyboard, we
  can do so with the <kbd>ctrl</kbd>+<kbd>[</kbd> key too within the
  terminal.
</p>
<p>
  The keen eyed may notice that the table above has lowercase letters
  in the first column but the second and third columns use the code of
  the corresponding uppercase letters.  The lowercase letters in the
  first column is merely a notation I am using in this post to
  identify the keys on a keyboard.  They don't actually mean lowercase
  characters.  In fact, the very early keyboards only had uppercase
  letters and they simply toggled the 7th least significant bit of the
  modified character to obtain the control code.
</p>
<p>
  By the way, an interesting thing worth noting here is that even if
  we do consider the code of the lowercase character and pick only its
  five least significant bits, we get the same control code as we
  would get if we started with the corresponding uppercase character.
  For example, consider the key sequence
  <kbd>ctrl</kbd>+<kbd>g</kbd>.  The uppercase character <code>G</code>
  has the code 71 (decimal 1000111) and the lowercase
  character <code>g</code> has the code 103 (decimal 1100111).  The
  five least significant bits are equal in both.  So when we pick the
  five least significant bits and discard the rest, we get the same
  result, i.e. 7 (binary 111) which is the code of the <em>bell</em>
  character.  This is due to the fact that the five least significant
  bits of the code of a lowercase character is exactly the same as
  that of the corresponding uppercase character.  They differ only in
  their sixth least significant bit.  This is only an interesting
  observation.  It is of little significance though because like I
  mentioned earlier, the early keyboards only flipped a bit in the
  code of the uppercase characters when the <kbd>ctrl</kbd> modifier
  was applied.
</p>
<p>
  In addition to what we have discussed so far, some terminal
  emulators also implement a few special rules such as the following:
</p>
<table class="grid mono">
  <thead>
    <tr>
      <th rowspan="2">Key</th>
      <th colspan="3">Modified Character</th>
      <th colspan="3">Resulting Character</th>
    </tr>
    <tr>
      <th>Binary</th>
      <th>Decimal</th>
      <th>Character</th>
      <th>Binary</th>
      <th>Decimal</th>
      <th>Character</th>
    </tr>
  </thead>
  <tbody style="font-family: monospace, monospace">
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>space</kbd></td>
      <td>0100000</td>
      <td>32</td>
      <td>Space</td>
      <td>0</td>
      <td>0</td>
      <td>Null</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>?</kbd></td>
      <td>0111111</td>
      <td>63</td>
      <td>?</td>
      <td>1111111</td>
      <td>127</td>
      <td>Delete</td>
    </tr>
  </tbody>
</table>
<p>
  One could argue that the first row shows a straightforward example
  of picking the least significiant five bits to arrive at the control
  code, so it is not really a special case.  That is a fair point.
  However, in the history of computing, different systems have
  implemented slightly different methods to compute the resulting
  control codes from our input.  Flipping the 7th least significant
  bit was one of the early methods.  Turning off only the the 6th and
  the 7th least significant bits has been another method.  Subtracting
  64 from the character code has been yet another one.  These
  different methods produce identical results for the first table but
  not so for the second table.  For example, while turning off the 6th
  and 7th least significnat bits of 32 (the code of the <em>space</em>
  character) does give us 0 but merely flipping its 7th bit does not.
  Further, note that allowing <kbd>ctrl</kbd>+<kbd>space</kbd> to
  produce the null character is a bit redundant
  because <kbd>ctrl</kbd>+<kbd>@</kbd> already did that right from the
  days of very early keyboards.  The second entry above is also a
  special rule because we neither turn off bits nor subtract 64.
  Instead, we flip the 7th least significant bit which amounts to
  adding 64 to the code of the modified character.  It is also the
  only control code that has its 6th and 7th least significant bits
  turned on.
</p>
<h2 id="meta-key-sequences">Meta Key Sequences<a href="#meta-key-sequences"></a></h2>
<p>
  The <kbd>meta</kbd> key no longer exists on modern keyboards.  On
  modern keyboards, we use the <kbd>alt</kbd> or <kbd>option</kbd> key
  instead of <kbd>meta</kbd>.  For example, when a shell's manual says
  that we need to type <kbd>meta</kbd>+<kbd>b</kbd> to move the cursor
  back by one word, what we really type on a modern keyboard is
  either <kbd>alt</kbd>+<kbd>b</kbd>
  or <kbd>option</kbd>+<kbd>b</kbd>.  In fact, the <code>cat</code>
  and <code>od</code> experiments mentioned earlier show that when we
  type the modern alternative for the <kbd>meta</kbd> key along with
  another key, what most terminals really send to the underlying
  program is an <em>escape</em> control code (27) followed by the code
  of the modified character.
</p>
<table class="grid mono">
  <thead>
    <tr>
      <th>Meta Key Sequence</th>
      <th>Escape Key Sequence</th>
      <th>Control Key Sequence</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><kbd>meta</kbd>+<kbd>b</kbd></td>
      <td><kbd>esc</kbd> <kbd>b</kbd></td>
      <td><kbd>ctrl</kbd>+<kbd>[</kbd> <kbd>b</kbd></td>
    </tr>
    <tr>
      <td><kbd>meta</kbd>+<kbd>f</kbd></td>
      <td><kbd>esc</kbd> <kbd>f</kbd></td>
      <td><kbd>ctrl</kbd>+<kbd>[</kbd> <kbd>f</kbd></td>
    </tr>
    <tr>
      <td><kbd>meta</kbd>+<kbd>/</kbd></td>
      <td><kbd>esc</kbd> <kbd>/</kbd></td>
      <td><kbd>ctrl</kbd>+<kbd>[</kbd> <kbd>/</kbd></td>
    </tr>
    <tr>
      <td><kbd>meta</kbd>+<kbd>:</kbd></td>
      <td><kbd>esc</kbd> <kbd>:</kbd></td>
      <td><kbd>ctrl</kbd>+<kbd>[</kbd> <kbd>:</kbd></td>
    </tr>
  </tbody>
</table>
<p>
  There are several layers of software involved between the keyboard
  input and the application running in the terminal and the exact
  behaviour of the <kbd>alt</kbd> or <kbd>option</kbd> key may vary
  depending on the configuration of each of these layers.  Terminal
  configuration alone is a complex topic that can be discussed
  extensively.  However, the behaviour described here is one of the
  popular defaults.  Alternative behaviours exist but they generally
  produce similar effects for the user.
</p>
<h2 id="awkward-vim-tricks">Awkward Vim Tricks<a href="#awkward-vim-tricks"></a></h2>
<p>
  Most Vim users know that we can go from insert mode to command-line
  mode and search for patterns by typing
  either <kbd>esc</kbd> <kbd>/</kbd> or <kbd>C-[</kbd> <kbd>/</kbd>.
  But what some people may find surprising is that we can also go from
  insert mode to searching patterns simply by typing
  <kbd>meta</kbd>+<kbd>/</kbd>.  Yes, this can be verified by running
  Vim in a terminal emulator.  While insert mode is active,
  type <kbd>alt</kbd>+<kbd>/</kbd> or <kbd>option</kbd>+<kbd>/</kbd>
  and the current mode should instantly switch to the command-line
  mode with the forward-slash (<samp>/</samp>) prompt waiting for our
  search pattern.  This works only in a terminal emulator.  It may not
  work in the graphical version of Vim.  The table above illustrates
  why this works in a terminal emulator.
</p>
<p>
  Similarly, in a Vim instance running within a terminal emulator, we
  can type <kbd>meta</kbd>+<kbd>:</kbd> to go directly from insert
  mode to command-line mode and enter Ex commands.  We can
  type <kbd>meta</kbd>+<kbd>0</kbd> to go directly from insert mode to
  the first character of a line or type <kbd>meta</kbd>+<kbd>$</kbd>
  to go to the end of the line and so on.  These are equivalent to
  typing <kbd>esc</kbd> <kbd>0</kbd>, <kbd>esc</kbd> <kbd>$</kbd>,
  etc.
</p>
<p>
  More interestingly, we can type <kbd>meta</kbd>+<kbd>O</kbd> to open
  a line above, <kbd>meta</kbd>+<kbd>A</kbd> to append text at the end
  of the line, <kbd>meta</kbd>+<kbd>I</kbd> to append text at the
  beginning of the line or <kbd>meta</kbd>+<kbd>S</kbd> to delete the
  current line while staying in insert mode!  Since the Vim
  commands <kbd>O</kbd>, <kbd>A</kbd>, <kbd>I</kbd> and <kbd>S</kbd>
  leave us back in insert mode, we are able to perform an editing
  operation that involves leaving the insert mode, doing something
  interesting and returning to insert mode instantly using the
  the <kbd>meta</kbd> key combination.  The following table summarises
  these observations:
</p>
<table class="grid mono">
  <thead>
    <tr>
      <th>Initial Mode</th>
      <th>Meta Key Sequence</th>
      <th>Equivalent To</th>
      <th>Operation</th>
      <th>Final State</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Insert</td>
      <td><kbd>meta</kbd>+<kbd>/</kbd></td>
      <td><kbd>esc</kbd> <kbd>/</kbd></td>
      <td>Enter command-line mode to search a pattern</td>
      <td>Command-line</td>
    </tr>
    <tr>
      <td>Insert</td>
      <td><kbd>meta</kbd>+<kbd>:</kbd></td>
      <td><kbd>esc</kbd> <kbd>:</kbd></td>
      <td>Enter command-line mode to enter Ex command</td>
      <td>Command-line</td>
    </tr>
    <tr>
      <td>Insert</td>
      <td><kbd>meta</kbd>+<kbd>0</kbd></td>
      <td><kbd>esc</kbd> <kbd>0</kbd></td>
      <td>Move to the first character of the line</td>
      <td>Normal</td>
    </tr>
    <tr>
      <td>Insert</td>
      <td><kbd>meta</kbd>+<kbd>$</kbd></td>
      <td><kbd>esc</kbd> <kbd>$</kbd></td>
      <td>Move to the end of the line</td>
      <td>Normal</td>
    </tr>
    <tr>
      <td>Insert</td>
      <td><kbd>meta</kbd>+<kbd>O</kbd></td>
      <td><kbd>esc</kbd> <kbd>O</kbd></td>
      <td>Begin a new line above and insert text</td>
      <td>Insert</td>
    </tr>
    <tr>
      <td>Insert</td>
      <td><kbd>meta</kbd>+<kbd>A</kbd></td>
      <td><kbd>esc</kbd> <kbd>A</kbd></td>
      <td>Append text to the end of line</td>
      <td>Insert</td>
    </tr>
    <tr>
      <td>Insert</td>
      <td><kbd>meta</kbd>+<kbd>I</kbd></td>
      <td><kbd>esc</kbd> <kbd>I</kbd></td>
      <td>Insert text before the first non-blank in line</td>
      <td>Insert</td>
    </tr>
    <tr>
      <td>Insert</td>
      <td><kbd>meta</kbd>+<kbd>S</kbd></td>
      <td><kbd>esc</kbd> <kbd>S</kbd></td>
      <td>Delete line and insert text</td>
      <td>Insert</td>
    </tr>
  </tbody>
</table>
<p>
  There is no good reason to use Vim like this but it works, thanks to
  the quirky history of Unix terminals and keyboards!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/control-escape-meta-tricks.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>From Lunar Phases to Yank-Pop</title>
<link>https://susam.net/from-lunar-phases-to-yank-pop.html</link>
<guid isPermaLink="false">lerie</guid>
<pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="tiny-book-club">Tiny Book Club<a href="#tiny-book-club"></a></h2>
<p>
  We have a <a href="cc/mastering-emacs/">tiny book
  club</a> that meets every weekend to read and discuss the
  book <em><a href="https://www.masteringemacs.org/">Mastering
  Emacs</a></em>, 2022 edition written by Mickey Petersen.  We go
  through a few pages of the book every time we meet, do some demos
  and talk about the concepts we learn from the book.  In
  the <a href="cc/mastering-emacs/log.html#36">36 meetings</a> that we
  have had so far, we have spent approximately 26 hours together
  carefully reading every line of the book, trying out the lessons on
  an actual editor and experimenting with the new concepts.  In the
  last 3&half; months, we have completed four chapters of the book.
  We are currently reading the fifth chapter.  In this post, I'll
  share what the journey has been like so far and a few interesting
  things we have learnt.
</p>
<p>
  A big thanks to Mickey Petersen who very graciously granted me the
  permission to share his book on screen while we discuss the lessons
  from the book and try out the examples on the editor.
</p>
<p>
  This is the second series of such meetings I have been hosting.  The
  first one was about <a href="cc/iant/">analytic number
  theory</a> that began in March 2021.  It ran for seven months and
  finally <a href="final-iant-meeting.html">concluded</a> in October
  2021 after 120 meetings.  I chose Emacs as the topic for the next
  series.  The book <em>Mastering Emacs</em> by Mickey Petersen seemed
  like a great choice for it.
</p>
<p>
  Our new discussion group for Emacs began on 16 Dec 2022.  We have
  been meeting over Jitsi during the weekends.  Each meeting is
  approximately 40 minutes long.  With my desktop shared via Jitsi, I
  demonstrate all the concepts we find in the book in my Emacs editor.
  On an average, we see about 7 participants in each meeting.  Some
  participants are regulars who join the meetings every weekend,
  follow the lessons, share their comments, etc.  It has been a fun
  experience so far.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#tiny-book-club">Tiny Book Club</a></li>
  <li><a href="#variety-of-professions">Variety of Professions</a></li>
  <li><a href="#lunar-phases">Lunar Phases</a></li>
  <li><a href="#returning-to-mark">Returning to Mark</a></li>
  <li><a href="#working-with-other-windows">Working With Other Windows</a></li>
  <li><a href="#tab-bars">Tab Bars</a></li>
  <li><a href="#back-to-indentation">Back to Indentation</a></li>
  <li><a href="#exchange-point-and-mark">Exchange Point and Mark</a></li>
  <li><a href="#search-toggles">Search Toggles</a></li>
  <li><a href="#word-sequence-search">Word Search Mode</a></li>
  <li><a href="#occur-mode">Occur Mode</a></li>
  <li><a href="#imenu">Imenu</a></li>
  <li><a href="#helm">Helm</a></li>
  <li><a href="#appending-kills">Appending Kills</a></li>
  <li><a href="#yank-pop">Yank-Pop</a></li>
  <li><a href="#join-us">Join Us</a></li>
</ul>
<h2 id="variety-of-professions">Variety of Professions<a href="#variety-of-professions"></a></h2>
<p>
  Most members of our discussion group come from
  the <code>#emacs</code> channels of Libera and Matrix networks.  An
  interesting thing I noticed in our Emacs book discussion group is
  that we have a good mix of members from diverse backgrounds.  In the
  previous series of meetings on analytic number theory, almost every
  participant had a career in software engineering.  But in this
  discussion group about Emacs, we have members from various types of
  professions such as physics, molecular biology, finance, literature,
  etc.  It is interesting how we had mostly software engineers in a
  mathematics discussion group but a variety of professionals in a
  software discussion group!
</p>
<p>
  Some participants of our meetings have several years of experience
  with Emacs.  Others are beginners.  However, even those who are
  quite experienced with Emacs have found that they learnt many new
  techniques and concepts from the book.  In the next few sections,
  I'll present some of those Emacs functions that were initially not
  known to some of the experienced Emacs users of our group but were
  found to be very useful after having learnt them from the book.
</p>
<h2 id="lunar-phases">Lunar Phases<a href="#lunar-phases"></a></h2>
<p>
  Yes, we can see the lunar phases calendar right within Emacs!  I
  don't know if this was interesting to other members of our group, so
  I can only speak for myself here.  As someone who has been
  interested in astronomy <a href="dark-night-skies.html">since my
  childhood days</a>, I found this very exciting.  Type <code>M-x
  lunar-phases RET</code> in your Emacs and a new buffer appears with
  an output like this:
</p>
<pre>
<code>Tuesday, March 7, 2023: Full Moon 12:39pm (UTC)
Wednesday, March 15, 2023: Last Quarter Moon 2:14am (UTC)
Tuesday, March 21, 2023: New Moon 5:27pm (UTC)
Wednesday, March 29, 2023: First Quarter Moon 2:33am (UTC)
Thursday, April 6, 2023: Full Moon 4:33am (UTC)
Thursday, April 13, 2023: Last Quarter Moon 9:17am (UTC)
Thursday, April 20, 2023: New Moon 4:16am (UTC) ** Solar Eclipse **
Thursday, April 27, 2023: First Quarter Moon 9:21pm (UTC)
Friday, May 5, 2023: Full Moon 5:32pm (UTC) ** Lunar Eclipse **
Friday, May 12, 2023: Last Quarter Moon 2:34pm (UTC)
Friday, May 19, 2023: New Moon 3:56pm (UTC)
Saturday, May 27, 2023: First Quarter Moon 3:24pm (UTC)</code>
</pre>
<p>
  It also shows the upcoming eclipses!  In fact, there is one coming
  up this month!  Isn't this nice?  I knew that Emacs has all sorts of
  fun stuff like <code>M-x zone RET</code> to zone out with a built-in
  screensaver, <code>M-x tetris RET</code> to play a clone of the
  famous puzzle game, <code>M-: (animate-string "hello" 0) RET</code>
  to display a string in a fun manner starting off as scattered pieces
  spread randomly across the buffer that then slide and come together
  to join and form the string.  But to have something as obscure as
  lunar phases and eclipses available within the editor was a nice
  surprise!  Thanks to the book, I now use this function often.
</p>
<p>
  For people who are not familiar with Emacs notation for key binding,
  note that <code>M-x lunar-phases RET</code> means
  typing <kbd>alt</kbd>+<kbd>x</kbd> followed by
  typing <code>lunar-phases</code> and then pressing <kbd>enter</kbd>.
  The notation <code>M-</code> represents the meta modifier key which
  is mapped to <kbd>alt</kbd> on modern systems.
</p>
<h2 id="returning-to-mark">Returning to Mark<a href="#returning-to-mark"></a></h2>
<p>
  Most members knew that we can set a mark with <code>C-SPC</code>
  (i.e. <kbd>ctrl</kbd>+<kbd>space</kbd>) and then move around in the
  buffer with motion keys to highlight a region that we can cut
  with <code>C-w</code> or copy with <code>M-w</code> and paste it
  elsewhere with <code>C-y</code>.  However, what was new to some
  members is the fact that we can also return to a mark just as
  easily.  The key sequence to return to mark is <code>C-u
  C-SPC</code>.  But there is a problem.
</p>
<p>
  When we set a <em>mark</em> with <code>C-SPC</code> and start moving
  around with motion keys, the text between the mark and the current
  position of the cursor (known as <em>point</em> in Emacs) becomes a
  highlighted region in modern Emacs.  This highlighted region can be
  annoying while browsing some code.  So how do we use the mark as a
  place to return to?  Barring unusual workarounds like
  disabling <code>transient-mark-mode</code>, is there a simple way?
  Yes, there is a simple trick.  Type <code>C-SPC C-SPC</code> to set
  the mark!  Typing <code>C-SPC</code> the first time sets the mark
  and activates the region.  Typing it the second time deactivates the
  region.  But Emacs remembers the mark that was set.  Now continue
  with normal editing.  Finally, type <code>C-u C-SPC</code> to return
  to mark.
</p>
<p>
  The key sequences involved are pretty convenient.
  Typing <code>C-SPC C-SPC</code> involves holding down
  the <kbd>ctrl</kbd> key, then typing <kbd>space</kbd> twice and
  finally releasing the <kbd>ctrl</kbd> key.  Similarly,
  typing <code>C-u C-SPC</code> involves holding down
  the <kbd>ctrl</kbd> key, typing <kbd>u</kbd>, then <kbd>space</kbd>
  and then releasing the <kbd>ctrl</kbd> key.  Three keystrokes for
  each command.  They become muscle memory in no time!
</p>
<h2 id="working-with-other-windows">Working With Other Windows<a href="#working-with-other-windows"></a></h2>
<p>
  In Chapter 4, <em>The Theory of Movement</em>, there is a section
  about working with other windows.  There are a number of key
  bindings available under the prefix key <code>C-x 4</code> that
  perform operations on another window instead of the current window.
  For example, <code>C-x 4 C-f</code> opens a file in another window.
  This could be a faster alternative to splitting the current window
  with <code>C-x 2</code> or <code>C-x 3</code> and then opening a
  file with <code>C-x C-f</code>.  The single key sequence <code>C-x 4
  C-f</code> takes care of splitting the current window into two if
  another window does not exist and opening the file there.  Moreover
  if another window does exist, this key sequence just reuses that
  window to open the file there.  Pretty nifty!
</p>
<p>
  To see all the commands under the <code>C-x 4</code> prefix key,
  type <code>C-x 4 C-h</code>.  Yet another such command that I found
  quite convenient is <code>C-x 4 d</code> which opens Dired in
  another window.  This can be useful when we need to browse a
  directory without hiding the current buffer.
</p>
<h2 id="tab-bars">Tab Bars<a href="#tab-bars"></a></h2>
<p>
  One of the many features of Emacs that most of us did not bother
  paying attention to earlier was the tab bar mode.  Turns out it is
  pretty useful in managing multiple window configurations
  side-by-side.  Each tab can be used as a workspace with a specific
  arrangement of windows that suits our workflow in that workspace.
  For example, we could arrange one tab to have three windows to
  display source code, a debugger and the current directory in Dired
  mode.  Then we could have another tab with two windows beside each
  other, perhaps one to display some source code and another to run
  the terminal.
</p>
<p>
  The tab management commands are very similar to window management
  commands.  Just like <code>C-x 2</code> splits a window to create a
  new window, <code>C-x t 2</code> creates a new tab.  Just
  like <code>C-x 0</code> deletes a window, <code>C-x t 0</code>
  deletes a tab.  Similarly, <code>C-x t o</code> switches to the next
  tab.  Tabs can be renamed and moved too with some more key bindings.
  Chapter 4 has a section called <em>Tab Bar Mode</em> that introduces
  these operations in detail.
</p>
<h2 id="back-to-indentation">Back to Indentation<a href="#back-to-indentation"></a></h2>
<p>
  Almost everyone knew that <code>C-a</code> moves the cursor to the
  beginning of the current line.  But not many of us knew
  about <code>M-m</code> which invokes the
  command <code>back-to-indentation</code>.  This command moves the
  cursor to the first non-whitespace character on the current line.
  This is another new thing some of us learnt from the book.  This can
  be quite useful while editing code.
</p>
<h2 id="exchange-point-and-mark">Exchange Point and Mark<a href="#exchange-point-and-mark"></a></h2>
<p>
  Let us say we set a mark somewhere with <code>C-SPC</code> and then
  move around to select a region.  However, then we get distracted,
  possibly by some typo in our buffer and we begin fixing that.  At
  this point, the highlighted region disappears.  Say after fixing
  that typo, we want to resume with the region selection again.  What
  do we do now?  Do we go back to set the mark and begin selecting the
  region again?  Not really.  There is an easier way.  We can just
  type <code>C-x C-x</code> to exchange the point and the mark and
  highlight the region in between.  This has the effect of
  reactivating the region.
</p>
<p>
  Note that <code>C-x C-x</code> <em>exchanges</em> the point and the
  mark, so although it conveniently reactivates the region, the point
  jumps to where the mark was set earlier.  This could be quite far
  from where we want the cursor to be right now.  If you don't like
  that the cursor moves far way to the mark, just type <code>C-x
  C-x</code> once again to exchange the point and mark one more time.
  This has the effect of returning the cursor back to wherever it was
  while keeping the region activated.
</p>
<h2 id="search-toggles">Search Toggles<a href="#search-toggles"></a></h2>
<p>
  Say, we begin an incremental search of the literal
  string <code>f..</code> in the current buffer with <code>C-s
  f..</code> but then we change our mind and decide that we want to
  perform a regular-expression-based search using the regular
  expression <code>f..</code>?  Do we cancel the incremental search
  and begin a new regular-expression-based search
  using <code>C-M-s</code>?  That's not necessary.  Instead we can
  toggle the currently ongoing incremental search into a
  regular-expression-based search using the toggle key <code>M-s
  r</code>.
</p>
<p>
  Another such nice toggle is <code>M-%</code>.  You are likely aware
  of the global key binding <code>M-%</code> used to invoke
  the <code>query-replace</code> command that performs
  search-and-replace operation.  However, when typed during an ongoing
  incremental search, <code>M-%</code> converts the ongoing
  incremental search to a search-and-replace operation.  This is
  really useful sometimes.  If we are searching for a complicated
  string, say, <code>C-s std::vector&lt;int&gt;</code> but then we
  suddenly realise that we want to perform a search-and-replace
  operation instead with the same string, we don't really have to quit
  the current incremental search and start a new search-and-replace
  operation.  Instead we can simply change the current incremental
  search to a search-and-replace operation by typing <code>M-%</code>.
</p>
<p>
  Similarly, we can toggle the case-sensitivity of the search
  using <code>M-s c</code>.  If we type our search string in all
  lowercase (e.g. <code>C-s foo</code>), then Emacs performs a
  case-sensitive search by default.  I think this is a reasonable
  default behaviour.  This is what we want most of the time.  When we
  do want case-sensitive search for a lowercase string, we can switch
  from the currently ongoing case-insensitive search to a
  case-sensitive search with the <code>M-s c</code> toggle.
</p>
<p>
  The moment we introduce an uppercase character in our search string
  (e.g. <code>C-s Foo</code>), Emacs switches to case-sensitive mode.
  Although this behaviour may appear peculiar at first, it makes sense
  if you think about it.  If we have bothered to type an uppercase
  character in our search string, we probably care about the case, so
  Emacs switches to case-sensitive search in this case.  Once again,
  if this is not what we want, it is trivial to change the
  case-sensitive search to a case-insensitive one using the <code>M-s
  c</code> toggle.
</p>
<p>
 There are a number of other toggles available.  Chapter 4 has a
 pretty long subsection on incremental search.  That section discusses
 these toggles among many other things.
</p>
<h2 id="word-sequence-search">Word Search Mode<a href="#word-sequence-search"></a></h2>
<p>
  Say, we start searching for the string <code>web_server</code> in
  some code buffer with the key sequence <code>C-s web_server</code>.
  But we soon realise that the code has the words <code>web</code>
  and <code>server</code> written together in all kinds of notation
  like <code>web-&gt;server</code>, <code>web::server</code>,
  <code>web-server</code> and even <code>web server</code> (perhaps in
  inline comments).  We now decide that we want to match all of them.
  In most other editors, we'll probably have to cancel the current
  search and resort to a clever regular-expression-based search.  In
  Emacs, thanks to the toggles available in incremental search, we can
  type <code>M-s w</code> and the currently ongoing incremental search
  will change itself to word search mode where it now matches all
  these other ways those two words are written.  In word search mode,
  Emacs searches for a sequence of words while ignoring any delimiters
  in between.
</p>
<h2 id="occur-mode">Occur Mode<a href="#occur-mode"></a></h2>
<p>
  A very useful feature that has been in Emacs for a long time and yet
  was unknown to many of us is the occur mode.  Type <code>M-s o foo
  RET</code> and it will pull up all matches for the regular
  expression <code>foo</code> in the current buffer and display the
  matches in a new buffer.  Now we can stay in the same buffer where
  we have our text and jump to the places where the matches are found
  using <code>M-g M-n</code> and <code>M-g M-p</code>.
</p>
<p>
  It is also possible to convert an ongoing incremental search into an
  occur mode search using the toggle <code>M-s o</code>.  For example,
  type <code>C-s foo</code> to start an incremental search for the
  string <code>foo</code>, then type <code>M-s o</code> and, lo and
  behold, we are now in occur mode searching for the
  string <code>foo</code>.
</p>
<h2 id="imenu">Imenu<a href="#imenu"></a></h2>
<p>
  Right after the section on occur mode, the book presents a section
  about Imenu which was also new to some of us.  Type <code>M-x imenu
  RET</code> and then type <code>TAB</code> to invoke auto-completion
  and it shows a list of all interesting places in the buffer to jump
  too.  For example, if the current buffer is a Python source code
  file, then the output of this command includes all functions in the
  Python file we can jump to.  Use auto-completion to complete a
  function name and Imenu takes us to the place where the function is
  defined.
</p>
<p>
  After completing the sections on occur mode and Imenu, I remember
  multiple members of our group mentioning that they now want to adopt
  occur mode and Imenu into their workflow.  In fact, it may make
  sense to bind Imenu to a convenient key binding.  The author of the
  book recommends binding it to <code>M-i</code>.  However, I do
  use <code>M-i</code> sometimes to insert spaces until the next
  tab-stop column, so I'll suggest a different key binding that is
  more consistent with Emacs
  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html">key binding conventions</a>.
  These conventions suggest that key bindings of the
  form <code>C-c <em>letter</em></code> are reserved for the users.
  Therefore, I suggest the key binding <code>C-c i</code> to invoke
  Imenu.  Here is some Elisp code to create this key binding:
</p>
<pre><code>(global-set-key (kbd "C-c i") 'imenu)</code></pre>
<h2 id="helm">Helm<a href="#helm"></a></h2>
<p>
  Helm is a powerful <em>filter-as-you-type</em> framework.  Most of
  us already knew about this package.  It does too many things and has
  too many key bindings.  We can barely scratch the surface in a small
  section like this.  But since we discussed Imenu in the previous
  section, I'll mention here that Helm provides a rather nice
  interface to Imenu.  Helm can be enabled with <code>M-x helm-mode
  RET</code> or with <code>(helm-mode)</code> in an Emacs
  initialisation file.  Once enabled, <code>C-x c i</code> runs
  the <code>helm-imenu</code> command which provides an interactive
  interface with all options laid out in a vertical format.  We can
  use the motion keys to select an option.  We can then
  type <kbd>enter</kbd> to activate the selection and jump to the
  corresponding place in the buffer.
</p>
<p>
  Helm also provides a nice interface for occur mode in the form
  of <code>helm-occur</code> command.  The key sequence for it
  is <code>C-x c M-s o</code>, which one might argue is not a very
  convenient key binding.  Nevertheless, the user interface to
  navigate the matches is pretty good.
</p>
<h2 id="appending-kills">Appending Kills<a href="#appending-kills"></a></h2>
<p>
  The key sequence <code>C-M-w</code> is used to ensure that if the
  next command happens to be a kill command, then the killed text is
  appended to the last stretch of text in the kill ring.  This key
  sequence prevents the next kill from creating a new entry in the
  kill ring.
</p>
<p>
  To understand what this command does we must first understand that
  after a kill command adds some new text to the kill ring, subsequent
  consecutive kills append to the same stretch of text in the kill
  ring, i.e. consecutive kills form a single large stretch of text in
  the kill ring.  This can be tested by performing consecutive kills
  and then pasting with <code>C-y</code>.  For example, <code>M-d M-d
  M-d</code> kills 3 words and creates a single stretch of text
  consisting of those 3 words.  The consecutive kills keep adding to
  the same kill entry in the kill ring.  If we type <code>C-y</code>
  now, it would yank the newest entry consisting of those 3 words from
  the kill ring and paste it into the buffer.
</p>
<p>
  However, the moment a non-kill command is used, it seals the current
  entry in the kill ring.  Any subsequent kill command creates a new
  entry in the kill ring.  For example, <code>M-d M-d M-d C-p M-d M-d
  C-p C-p C-y</code> kills 3 words at first but then it moves to the
  previous line sealing that kill entry consisting of 3 words.  Then
  it kills 2 more words and adds them to a new entry in the kill ring.
  Therefore, the final yank command pastes only those 2 words from the
  kill ring.
</p>
<p>
  This can be a problem if we want to kill text from various parts of
  the buffer and yet create a single entry in the kill ring.  That's
  when <code>C-M-w</code> comes useful.  For example, <code>M-d M-d
  M-d C-p C-M-w M-d M-d C-p C-p C-y</code> kills 3 words and creates a
  single entry in the kill ring consisting of those 3 words.  Then it
  moves one line up and kills 2 more words but this time it appends
  those 2 words to the existing entry in the kill ring.  Finally, it
  moves two lines up and pastes the entire kill entry consisting of 5
  words into the buffer.
</p>
<h2 id="yank-pop">Yank-Pop<a href="#yank-pop"></a></h2>
<p>
  Although most beginners and experienced users of Emacs know that
  killed text goes into the kill ring and we can yank the last kill
  from kill ring and paste it into the buffer using <code>C-y</code>,
  for many that's where the usage of kill ring stops.  The kill ring,
  however, has much more utility than that.  It is a <em>ring</em>,
  after all!  We can keep killing text as we edit text and all killed
  text gets added to the kill ring.  Now <code>C-y</code> always yanks
  the newest kill in the kill ring and pastes it in the buffer?  Can
  we recall an older kill?  Yes, using the <code>M-y</code> key
  sequence.  This key sequence invokes the <code>yank-pop</code>
  command that replaces a just-yanked stretch of killed text with an
  older kill.  It takes a little bit of getting used to but once this
  becomes muscle memory, the kill ring becomes a very powerful tool.
  We can keep dumping text to the kill ring and keep recalling text
  from it while performing our editing activities.  The following
  exercise shows how <code>C-y</code> and <code>M-y</code> can be used
  together.
</p>
<ol>
  <li>
    Open a new file, say, with <code>C-x C-f foo.txt RET</code> and
    type these five words in a single line: <code>foo bar baz qux
    quux</code>.
  </li>
  <li>
    Then type <code>C-a M-d C-g M-d C-g M-d</code>.  At this point
    three stretches of text have been inserted into the kill ring.
    The <code>C-g</code> between every <code>M-d</code> is there only
    to avoid appending kills to the existing stretch of text in the
    kill ring.  This ensures that we have three separate kills in the
    kill ring.
  </li>
  <li>
    Now type <code>C-y</code>.  The last kill, i.e. <code>baz</code>
    is now pasted into the buffer.
  </li>
  <li>
    Now without typing any other key sequence, type <code>M-y</code>.
    The earlier pasted text <code>baz</code> is now replaced with an
    older stretch of text from the kill ring.  Thus <code>baz</code>
    is replaced with <code>bar</code>.
  </li>
  <li>
    Now once again type <code>M-y</code>.  The earlier pasted
    text <code>bar</code> is now replaced with a further older stretch
    of text from the kill ring.  Thus <code>bar</code> is replaced
    with <code>foo</code>.
  </li>
</ol>
<p>
  Note in the previous steps how we are not supposed to type any other
  key between the first <code>C-y</code> and <code>M-y</code>.
  Similarly, while cycling through the kill ring, we must not type any
  other key between the consecutive <code>M-y</code> key sequences.
  While cycling through the kill ring, when we reach the oldest kill,
  the next <code>M-y</code> wraps around and brings back the newest
  kill.
</p>
<p>
  Since Emacs 28, the key sequence <code>M-y</code> also supports
  browsing the kill ring and yanking any arbitrary entry from the kill
  ring.  For example, after trying the above experiment,
  type <code>C-g</code> just to make sure that we are breaking any
  existing <code>C-y</code> or <code>M-y</code> cycle.  Then
  type <code>M-y</code> and a minibuffer prompt appears to yank an
  arbitrary kill from the kill ring.  If we remember the previous
  kill, we can type it out partially and type <code>TAB</code> to
  autocomplete it.  Alternatively, we could also type <code>TAB</code>
  initially itself to browse all the kills in the kill ring.
</p>
<h2 id="join-us">Join Us<a href="#join-us"></a></h2>
<p>
  That was an account of our Mastering Emacs book club discussions so
  far and a few interesting things we learnt.  We have only recently
  begun reading Chapter 5 that introduces several editing and text
  manipulation commands.  This chapter is 75 pages long and it could
  take a month or two to complete this chapter.  There are two more
  chapters after that which are shorter in their lengths.  They
  discuss some practical aspects of Emacs along with a discussion on
  some popular packages.  We still have a long way to go before we can
  complete this book.
</p>
<p>
  If all of this sounds like fun, you are very welcome to join our
  meetings.  Just head over to
  <a href="cc/mastering-emacs/">cc/mastering-emacs/</a>
  and there you'll find everything you need to know in order to be a
  part of our book discussion group and join our meetings.  Looking
  forward to seeing you in our next meeting!
</p>
<hr>
<p>
  <strong>Update on 30 Dec 2023:</strong> Our discussions of this book
  concluded on 30 Dec 2023 after 72 meetings.  See the post
  <a href="from-fill-prefix-to-tramp.html">From Fill Prefix to Tramp</a>
  for more highlights from these meetings.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/from-lunar-phases-to-yank-pop.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/meetup.html">#meetup</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Notes on Mastering Emacs: Chapter 4: The Theory of Movement</title>
<link>https://susam.net/cc/mastering-emacs/ch04.html</link>
<guid isPermaLink="false">rqlgn</guid>
<pubDate>Sat, 25 Mar 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  The following notes were taken while discussing Chapter 4 of the
  book <em>Mastering Emacs</em> by Mickey Petersen (2022 edition) in
  <a href="./">book discussion group meetings</a>.
</p>
<p>
  An index of notes for all chapters are available
  at <a href="notes.html">notes.html</a>.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#basics">Basics</a></li>
  <li><a href="#major-mode-load-order">Major Mode Load Order</a>
    <ul>
      <li><a href="#file-local-variables">File-Local Variables</a></li>
    </ul>
  </li>
  <li><a href="#occur-mode">Occur Mode</a></li>
</ul>
<h2 id="basics">Basics<a href="#basics"></a></h2>
<p>
  The following complete key sequences illustrate a few basic
  commands:
</p>
<ul>
  <li>
    <code>C-x C-f foo.txt RET</code>: Edit file
    named <code>foo.txt</code>.
  </li>
  <li>
    <code>C-x C-s</code>: Save current buffer to file.
  </li>
  <li>
    <code>C-x b *scratch* RET</code>: Switch to the buffer
    named <code>*scratch*</code>.
  </li>
  <li>
    <code>C-x k *scratch* RET</code>: Kill the buffer
    named <code>*scratch*</code>.
  </li>
  <li>
    <code>C-x k RET</code>: Kill current buffer.  In fact, like the
    previous key sequence above, typing <code>C-x k</code> first
    prompts for the buffer name.  However, the current buffer name is
    selected as the default value already.  As a result,
    typing <code>RET</code> kills the current buffer.
  </li>
  <li>
    <code>C-x C-b</code>: List buffers.
  </li>
  <li>
    <code>C-x C-c</code>: Exit Emacs.  This command offers to save all
    unsaved buffers before exiting Emacs.
  </li>
  <li>
    <code>ESC ESC ESC</code>: This command exits the current context.
    What that means depends very much on the context.  It performs
    exactly one of the following actions: If there is an active
    region, then it is deactivated; if a minibuffer is open, it gets
    rid of it; if recursive edit is in progress, it quits one level of
    recursive editing; if multiple windows are open, it deletes other
    windows so that the current window becomes the only window in the
    frame.  The aforementioned conditions are tested one by one and as
    soon as one of the conditions is met, the corresponding action is
    executed and the other conditions are skipped.
  </li>
  <li>
    <code>C-/</code>: Undo changes.
  </li>
  <li>
    <code>F10</code>: Activate the menu bar.
  </li>
</ul>
<p>
  In my experience, I have found that <code>ESC ESC ESC</code> is most
  useful when a stray minibuffer is open but the cursor is on some
  other buffer instead of the minibuffer and I need to close the
  minibuffer.  Here are some steps that demonstrate this usage:
</p>
<ol>
  <li>
    <p>
      Type <code>M-x white</code> and pause.  We now have a partially
      typed command in the minibuffer.
    </p>
  </li>
  <li>
    <p>
      Now pretend that we get distracted by some imperfections in the
      text buffer that was open earlier and we want to fix those
      first.  Type <code>C-x o</code> to move away from the minibuffer
      and go back to the text buffer to perform some editing tasks.
    </p>
    <p>
      In this step, we could have typed <code>C-g</code> to quit the
      minibuffer first but we did not do that.  We pretended to get
      distracted by the text buffer and went straight to it from the
      minibuffer by typing <code>C-x o</code>.  At this point, the
      cursor is in the text buffer and the minibuffer remains open at
      the bottom.  The open minibuffer can be distracting while
      performing the text editing tasks.  Typing <code>C-g</code> now
      will not get rid of the minibuffer because the cursor is no
      longer in the minibuffer.
    </p>
  </li>
  <li>
    <p>
      Now one way to close the open minibuffer could be to
      type <code>C-x o</code> to go back to the minibuffer window and
      type <code>C-g</code>.  However, there is a more direct way to
      do this as explained in the next point.
    </p>
  </li>
  <li>
    <p>
      Type <code>ESC ESC ESC</code> to get rid of the minibuffer at
      the bottom.  This works even when the cursor is not in the
      minibuffer but is in the text buffer instead.
    </p>
  </li>
</ol>
<h2 id="major-mode-load-order">Major Mode Load Order<a href="#major-mode-load-order"></a></h2>
<p>
  The chapter mentions the following order for detecting major mode:
</p>
<ul>
  <li>File-local variables</li>
  <li>Program loader directives</li>
  <li>Magic mode detection</li>
  <li>Automatic mode detection</li>
</ul>
<p>
  Let us start from the bottom of the list and share some experimental
  results that illustrate how the major mode detection works.
</p>
<h3 id="file-local-variables">File-Local Variables<a href="#file-local-variables"></a></h3>
<ol>
  <li>
    <p>
      Create a text file named <code>foo.txt</code> with the following
      content:
    </p>
    <pre>
<code>#include &lt;iostream&gt;

int main() {
  std::cout << "hello, world\n";
  return 0;
}</code>
</pre>
    <p>
      Then open this file in Emacs (say, with <code>C-x C-f foo.txt
      RET</code>).  Emacs sets the major mode to <code>Text</code>
      (i.e. <code>text-mode</code>).
    </p>
    <p>
      Type <code>M-: major-mode RET</code> to confirm that indeed the
      value of <code>major-mode</code> is <code>text-mode</code>.
      This happens due to automatic mode detection which determines
      the major mode based on the file name.  In this case it sees
      that the file name ends with <code>.txt</code> and
      enables <code>text-mode</code>.  We will discuss automatic mode
      detection further in the
      section <a href="#automatic-mode-detection">Automatic Mode
      Detection</a>.
    </p>
  </li>
  <li>
    <p>
      Now edit the previous file to add file-local variables in the
      header as follows:
    </p>
    <pre>
<code>// -*- mode: c++; c-basic-offset: 4 -*-

#include &lt;iostream&gt;

int main() {
  std::cout << "hello, world\n";
  return 0;
}</code>
</pre>
    <p>
      Now reload the buffer.  You could simply kill the buffer
      with <code>C-x k</code> and reopen the file with <code>C-x C-f
      foo.txt RET</code> or alternatively, reload the buffer
      with <code>M-x revert-buffer RET yes RET</code>.
    </p>
    <p>
      After reloading the buffer, you should see that
      the <code>C++</code> mode (i.e. <code>c++-mode</code>) is
      enabled.  As a result, C++ syntax highlighting should be
      visible.  Further <code>C-x h TAB</code> should reformat the
      code to use 4 spaces for each level of indentation.
    </p>
  </li>
  <li>
    <p>
      File-local variables may be specified in the footer too as shown
      below:
    </p>
    <pre>
<code>#include &lt;iostream&gt;

int main() {
    std::cout << "hello, world\n";
    return 0;
}

// Local Variables:
// mode: c++
// c-basic-offset: 6
// End:</code>
</pre>
    <p>
      Now reloading the buffer should show that <code>c++-mode</code>
      is enabled and typing <code>C-x h TAB</code> should reformat the
      code to use 6 spaces for each level of indentation.
    </p>
  </li>
  <li>
    <p>
      What happens if the file-local variables in the header and
      footer contradict each other?  To test this out, edit the buffer
      to have the following content:
    </p>
    <pre>
<code>// -*- mode: c++; c-basic-offset: 4 -*-

#include &lt;iostream&gt;

int main() {
      std::cout << "hello, world\n";
      return 0;
}

// Local Variables:
// mode: python
// c-basic-offset: 6
// End:</code>
</pre>
    <p>
      Reloading the buffer should show that <code>c++-mode</code> is
      active.  Typing <code>C-x h TAB</code> should reformat the code
      to use 6 spaces for each level of indentation.  Therefore the
      mode specified in the header remains effective.  For other
      variables, the ones specified in the footer have precedence.
    </p>
    <p>
      Of course, the example above is intended for curiosity and
      exploration.  In practical use, however, it is best to avoid
      assigning conflicting values to file-local variables in both the
      header and footer.  Such inconsistencies can lead to confusion
      and make the effect of the variables difficult to understand.
    </p>
  </li>
</ol>
<h2 id="occur-mode">Occur Mode<a href="#occur-mode"></a></h2>
<p>
  TODO: More notes coming up here soon!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/cc/mastering-emacs/ch04.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a> |
  <a href="https://susam.net/tag/meetup.html">#meetup</a>
</p>
]]>
</description>
</item>
<item>
<title>Notes on Mastering Emacs: Chapter 3: First Steps</title>
<link>https://susam.net/cc/mastering-emacs/ch03.html</link>
<guid isPermaLink="false">glnrh</guid>
<pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  The following notes were taken while discussing Chapter 3 of the
  book <em>Mastering Emacs</em> by Mickey Petersen (2022 edition) in
  <a href="./">book discussion group meetings</a>.
</p>
<p>
  An index of notes for all chapters are available
  at <a href="notes.html">notes.html</a>.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#starting-emacs">Starting Emacs</a></li>
  <li><a href="#emacs-client-server">Emacs Client-Server</a></li>
  <li><a href="#the-emacs-interface">The Emacs Interface</a></li>
  <li><a href="#keys">Keys</a></li>
  <li><a href="#terminal-limitations">Terminal Limitations</a></li>
  <li><a href="#definitions-for-key-sequences">Definitions for Key Sequences</a></li>
  <li><a href="#key-examples">Key Examples</a></li>
  <li><a href="#ctrl-g">C-g: Universal Bail Me Out</a></li>
  <li><a href="#caps-lock-as-control">Caps Lock as Control</a></li>
  <li><a href="#M-x-execute-extended-command">M-x: Execute Extended Command</a></li>
  <li><a href="#interactive-commands">Interactive Commands</a></li>
  <li><a href="#m-x-execute-extended-command-for-buffer">M-X: Execute Extended Command for Buffer</a></li>
  <li><a href="#universal-arguments">Universal Arguments</a></li>
  <li><a href="#discovering-and-remembering-keys">Discovering and Remembering Keys</a></li>
  <li><a href="#true-colour">True Colour</a></li>
  <li><a href="#the-customise-interface">The Customise Interface</a></li>
  <li><a href="#customise-commands">Customise Commands</a></li>
  <li><a href="#evaluating-elisp-code">Evaluating Elisp Code</a></li>
  <li><a href="#info">Info</a></li>
  <li><a href="#apropos">Apropos</a></li>
  <li><a href="#describe">Describe</a></li>
  <li><a href="#links">Links</a></li>
</ul>
<h2 id="starting-emacs">Starting Emacs<a href="#starting-emacs"></a></h2>
<p>
  Here are some frequently used commands to start Emacs:
</p>
<ul>
  <li>
    <code>emacs -nw</code>: Tell Emacs not to create a graphical
    frame, i.e. run Emacs within a terminal instead.
  </li>
  <li>
    <code>emacs -q</code>: Do not load an init file, i.e. do not
    load <code>~/.emacs</code>, <code>~/.emacs.d/init.el</code>, etc.
  </li>
  <li>
    <code>emacs -Q</code>: Do not load init file, site-wide startup
    file or X resources.
  </li>
</ul>
<h2 id="emacs-client-server">Emacs Client-Server<a href="#emacs-client-server"></a></h2>
<p>
  The key sequence <code>M-x server-start RET</code> turns the current
  instance of Emacs into a server.  If we kill this instance of Emacs,
  it kills the server too.
</p>
<p>
  Another way to start an Emacs server is to enter the
  command <code>emacs --daemon</code>.  This too internally
  invokes <code>server-start</code> to start an Emacs server but this
  command ensures that Emacs runs in background mode.  Therefore,
  killing any particular instance of Emacs window does not end up
  killing the Emacs server.
</p>
<p>
  To open files, say <code>foo.txt</code> and <code>bar.txt</code> in
  an already running Emacs server, enter the command <code>emacsclient
  foo.txt bar.txt</code>.  This command blocks the terminal and waits
  for us to finish editing the files.  While editing the files, we
  need to type <code>C-x #</code> to tell Emacs that we are done
  editing the current file.  Emacs then switches to the next file we
  are editing.  When we are done editing all the files
  opened, <code>emacsclient</code> quits and returns control to the
  terminal.
</p>
<p>
  The book does not mention how to stop an Emacs daemon.  One of the
  several ways to stop an Emacs daemon is the
  command <code>emacsclient -e '(kill-emacs)'</code>.
</p>
<p>
  Here are some commands to run <code>emacsclient</code>:
</p>
<ul>
  <li>
    <code>emacsclient -c</code>: Create a frame.  A graphical frame is
    created if graphics is available, otherwise a terminal frame is
    created.
  </li>
  <li>
    <code>emacsclient -nw</code>: Create a terminal frame.
  </li>
  <li>
    <code>emacsclient -n</code>: Client returns immediately without
    waiting for us to finish editing the file.
  </li>
</ul>
<h2 id="the-emacs-interface">The Emacs Interface<a href="#the-emacs-interface"></a></h2>
<p>
  The book mentions that many Emacs users disable the menu bar, tool
  bar and the splash screen.  The following Elisp code shows how these
  UI elements can be disabled:
</p>
<pre>
<code>(menu-bar-mode 0)
(when (display-graphic-p)
  (tool-bar-mode 0)
  (scroll-bar-mode 0))
(setq inhibit-startup-screen t)</code>
</pre>
<p>
  After saving the code in the initialisation file (such
  as <code>~/.emacs</code>, <code>~/.emacs.d/init.el</code>, etc.) and
  restarting Emacs, these UI elements disappear.
</p>
<p>
  It is worth mentioning here that disabling the menu bar may not be a
  good idea, especially, for beginners to Emacs.  The menu bar
  contains a lot of helpful shortcuts that could be useful to
  beginners.  Further, the menu bar often displays certain menus that
  are specific to the current buffer.  Therefore, it may be a good
  idea to leave the menu bar enabled.
</p>
<p>
  Regardless of whether the menu bar is enabled or disabled, the menu
  bar can accessed easily by typing <kbd>F10</kbd>.
</p>
<h2 id="keys">Keys<a href="#keys"></a></h2>
<p>
  The book mentions the following notation for modifier keys:
</p>
<ul>
  <li><code>C-</code>: Control</li>
  <li><code>M-</code>: Meta</li>
  <li><code>S-</code>: Shift</li>
  <li><code>s-</code>: Super</li>
  <li><code>H-</code>: Hyper</li>
  <li><code>A-</code>: Alt</li>
</ul>
<p>
  Although not mentioned in the book, here is a quick way to test out
  all of these modifier keys:
</p>
<pre>
<code>(global-set-key (kbd "C-j") (lambda () (interactive) (message "You typed C-j")))
(global-set-key (kbd "M-j") (lambda () (interactive) (message "You typed M-j")))
(global-set-key (kbd "C-S-j") (lambda () (interactive) (message "You typed C-S-j")))
(global-set-key (kbd "s-j") (lambda () (interactive) (message "You typed s-j")))
(global-set-key (kbd "H-j") (lambda () (interactive) (message "You typed H-j")))
(global-set-key (kbd "A-j") (lambda () (interactive) (message "You typed A-j")))</code>
</pre>
<p>
  Go to some buffer, say, the scratch buffer with
  <code>C-x b *scratch* RET</code>, then copy the above code to it,
  then place the cursor at the end of each line of code and
  type <code>C-x e</code> to evaluate each line.
</p>
<p>
  Then open a new buffer, say with <code>C-x b foo RET</code> and
  type <kbd>ctrl</kbd>+<kbd>j</kbd>, <kbd>alt</kbd>+<kbd>j</kbd>
  and <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>j</kbd> to test the first
  three key bindings.
</p>
<p>
  The fourth key-binding <code>s-j</code> can usually be invoked by
  typing <kbd>command</kbd>+<kbd>j</kbd>
  or <kbd>win</kbd>+<kbd>j</kbd> depending on the type of keyboard you
  have.
</p>
<p>
  The <code>H-</code> and <code>A-</code> modifier keys are generally
  not mapped to any actual key in modern systems.  However, it is
  possible to invoke the <code>H-j</code> and <code>A-j</code> key
  bindings with the key sequences <code>C-x @ h j</code> and <code>C-x
  @ a j</code> respectively, i.e.
  <kbd>ctrl</kbd>+<kbd>x</kbd> <kbd>@</kbd> <kbd>h</kbd> <kbd>j</kbd>
  and <kbd>ctrl</kbd>+<kbd>x</kbd> <kbd>@</kbd> <kbd>a</kbd> <kbd>j</kbd>
  respectively.
</p>
<p>
  In fact, similarly, <code>s-j</code> too can be invoked
  with <code>C-x @ s j</code>, i.e.
  <kbd>ctrl</kbd>+<kbd>x</kbd> <kbd>@</kbd> <kbd>s</kbd> <kbd>j</kbd>
  but that is rarely necessary because <code>s-</code> is often bound
  to a GUI key like the <kbd>command</kbd> key on Apple keyboards and
  the <kbd>win</kbd> key on Windows keyboards.
</p>
<p>
  A practical example of a real and useful <code>s-</code> key binding
  from vanilla Emacs is <code>s-u</code> to invoke
  the <code>revert-buffer</code> command that reloads a file from the
  disk.
</p>
<h2 id="terminal-limitations">Terminal Limitations<a href="#terminal-limitations"></a></h2>
<p>
  The book mentions that there are some key bindings that we cannot
  use if we are running Emacs in the terminal.  That is because a
  terminal supports a very limited set of key bindings.  An example
  is <code>C-/</code> that invokes the <code>undo</code> command in
  GUI Emacs.  The terminal does not recognise that key sequence.
  However, the <code>undo</code> command is also bound
  to <code>C-_</code> and <code>C-x u</code>, so one of these key
  sequences can be used to undo changes in terminal Emacs.
</p>
<h2 id="definitions-for-key-sequences">Definitions for Key Sequences<a href="#definitions-for-key-sequences"></a></h2>
<p>
  The book provides a few definitions of key sequences that can be
  summarised as follows:
</p>
<ul>
  <li>
    <em>Key sequence</em> (or just <em>key</em>): A sequence of
    keyboard or mouse actions, e.g. <code>C-d</code>,
    <code>C-M-d</code>, <code>C-x C-f</code>, <code>C-x 8
    P</code>, <code>C-x</code>, <code>C-x 8</code>, etc.
  </li>
  <li>
    <em>Complete key</em>: A key sequence that invokes a command, e.g.
    <code>C-d</code>, <code>C-M-d</code>, <code>C-x
    C-f</code>, <code>C-x 8 P</code>, etc.
  </li>
  <li>
    <em>Prefix key</em>: A key sequence that is not a complete key,
    e.g. <code>C-x</code>, <code>C-x 8</code>, etc.
  </li>
</ul>
<h2 id="key-examples">Key Examples<a href="#key-examples"></a></h2>
<p>
  The section <em>Keys</em> presents the following examples of key
  sequences:
</p>
<ul>
  <li>
    <code>C-d</code>: Calls <code>delete-char</code> which deletes the
    following character.
  </li>
  <li>
    <code>C-M-d</code>: Calls <code>down-list</code> which moves
    forward down one level of parentheses.
  </li>
  <li>
    <code>C-x C-f</code>: Calls <code>find-file</code> which is used
    for editing a file.
  </li>
  <li>
    <code>C-x 8 P</code>: Insersts pilcrow, i.e. the symbol &para;,
    also known as the paragraph symbol.  Here both <code>C-x</code>
    and <code>8</code> are prefix keys.  There are many more key
    bindings available under the <code>C-x 8</code> prefix.  For
    example, <code>C-x 8 C</code> inserts the copyright symbol, i.e.
    the symbol &copy;.  A set of keys like this that belong to a
    particular prefix key is called a <em>key map</em>.
  </li>
  <li>
    <code>C-M-%</code>: Calls <code>query-replace-regexp</code> to
    replace text with regula-expression based matching.  Since the
    key <kbd>%</kbd> is normally typed
    as <kbd>shift</kbd>+<kbd>5</kbd>, this key sequence involves
    holding down 4 keys together,
    i.e. <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>shift</kbd>+<kbd>5</kbd>.
    Annoyingly, this happens to be an example of a key sequence that
    does not work in terminal Emacs due to terminal limitations.
  </li>
  <li>
    <code>TAB</code>: Calls <code>indent-for-tab-command</code> that
    either indents the current line or region or inserts a tab,
    depending on the context.
  </li>
  <li>
    <code>&lt;f1&gt;</code>, <code>&lt;f2&gt;</code>,
    ..., <code>&lt;f10&gt;</code>: Functions keys that invoke various
    functions.  Some of these are prefix keys while others are
    complete key sequence.  For example, <code>&lt;f1&gt;</code> is a
    prefix key that is available as an alternative to
    the <code>C-h</code> prefix key.  The key sequence <code>C-h
    m</code> shows help for the current major and minor modes and so
    does <code>&lt;f1&gt; m</code>.  However, <code>&lt;f10&gt;</code>
    is a complete key sequence that calls the
    command <code>menu-bar-open</code> that shows the menu bar.
  </li>
</ul>
<h2 id="ctrl-g">C-g: Universal Bail Me Out<a href="#ctrl-g"></a></h2>
<p>
  The key sequence <code>C-g</code> is used to cancel a partially
  completed command.  For example, normally, the key
  sequence <code>M-x whitespace-mode RET</code> toggles the visibility
  of whitespace in the current buffer.  However, let us say, we type
  the partial key sequence <code>M-x white</code> and then we change
  our mind about it and want to cancel entering the command any
  further, we can simply type <code>C-g</code> to
  run <code>keyboard-quit</code> that signals a quit condition and
  cancels the input.
</p>
<p>
  Similarly, say, we type <code>C-x</code> and then we change our mind
  about it and want to cancel this partially entered key sequence, we
  can simply type <code>C-g</code>.  The following message appears in
  the echo area but this is by design:
</p>
<pre><code>C-x C-g is undefined</code></pre>
<p>
  Don't let that message make you feel that you did something wrong by
  entering an undefined key sequence.  Key sequences ending
  with <code>C-g</code> have been intentionally left undefined, so
  that it can be used reliably as the universal <em>bail me out</em>
  key sequence.
</p>
<p>
  Now of course, nothing stops us from binding <code>C-x C-g</code> to
  a command of our choice.  For example, the following Elisp code
  binds it to a command that prints a message:
</p>
<pre><code>(global-set-key (kbd "C-x C-g") (lambda () (interactive) (message "You typed C-x C-g")))</code></pre>
<p>
  However, a key binding like the above one is a very bad idea because
  such a key binding flies against Emacs conventions.  If we were to
  create a key binding like the above one, we can longer rely
  on <code>C-g</code> to be our universal bail out command.  Key
  sequences ending with <code>C-g</code> are best left undefined.
</p>
<h2 id="caps-lock-as-control">Caps Lock as Control<a href="#caps-lock-as-control"></a></h2>
<p>
  The book recommends configuring our operating system to make
  the <kbd>caps lock</kbd> key behave like <kbd>ctrl</kbd>.  Many
  people do find this type of remapping very convenient.  Many
  discussions can be found online where people have claimed that this
  remapping has helped with overcoming repetitive strain injury (RSI).
  However, the
  article <a href="https://www.emacswiki.org/emacs/MovingTheCtrlKey">Moving
  the Ctrl Key</a> on Emacs Wiki claims that for some people this
  remapping <em>causes</em> RSI.
</p>
<p>
  I use the original <kbd>ctrl</kbd> keys as they come with the
  keyboard.  Most keyboards have two <kbd>ctrl</kbd> keys on either
  side of the keyboard which I find very convenient.  I touch type
  while editing text, so the two <kbd>ctrl</kbd> keys on either side
  of the keyboard turn out to be really useful.  For example, when I
  need to type <kbd>ctrl</kbd>+<kbd>a</kbd>, I can hold
  down <kbd>ctrl</kbd> with the little finger of the right hand and
  type <kbd>a</kbd> with the little finger of the left hand.
  Similarly, if I need to type <kbd>ctrl</kbd>+<kbd>p</kbd>, I can
  hold down <kbd>ctrl</kbd> with the little finger of the left hand
  and type <kbd>p</kbd> with the little finger of the right hand.
  Using the original <kbd>ctrl</kbd> keys offers this advantage of
  distributing the usage of the <kbd>ctrl</kbd> to both hands.
  However, some Apple keyboards provide only a single <kbd>ctrl</kbd>
  key on the left hand side which can be quite annoying to touch
  typists.  In such keyboards, remapping the <kbd>caps lock</kbd> key
  to behave like <kbd>ctrl</kbd> key can indeed be more convenient.
</p>
<h2 id="M-x-execute-extended-command">M-x: Execute Extended Command<a href="#M-x-execute-extended-command"></a></h2>
<p>
  The key sequence <code>M-x</code> is pronounced <em>mex</em>, <em>M
  x</em> or <em>meta x</em>.  It invokes the
  command <code>execute-extended-command</code> that brings up a
  minibuffer to read a command name and execute it.
</p>
<p>
  When <code>M-x</code> key sequences are presented in written form,
  often they may be written in a precise manner that includes
  the <code>M-x</code> key sequence, then the command name and finally
  the <code>RET</code> key in the end, e.g. <code>M-x lunar-phases
  RET</code>.  But sometimes they may also be written without
  the <code>RET</code> key, e.g. <code>M-x lunar-phases</code>.
  The <code>RET</code> key is automatically implied in the latter
  form.
</p>
<h2 id="interactive-commands">Interactive Commands<a href="#interactive-commands"></a></h2>
<p>
  The following function written in Elisp is interactive:
</p>
<pre>
<code>(defun hello ()
  (interactive)
  (message "hello"))</code>
</pre>
<p>
  However, the following function is not interactive:
</p>
<pre>
<code>(defun hola ()
  (message "hola"))</code>
</pre>
<p>
  The <code>(interactive)</code> expression declares a function as
  interactive which allows it to be called interactively
  using <code>M-x</code>.
</p>
<p>
  To see the difference between the two functions, copy both functions
  to some buffer, say, the scratch buffer and then put the cursor
  after the closing parentheses of each function and type <code>C-x
  C-e</code> to evaluate the <code>defun</code> expressions thus
  defining the functions.  After doing so, <code>M-x hello RET</code>
  executes the <code>hello</code> function and produces the "hello"
  message in the echo area.  However, typing <code>M-x hola RET</code>
  produces no match for a function named <code>hola</code>.
</p>
<h2 id="m-x-execute-extended-command-for-buffer">M-X: Execute Extended Command for Buffer<a href="#m-x-execute-extended-command-for-buffer"></a></h2>
<p>
  Emacs 28 introduces <code>M-X</code> that runs the
  command <code>execute-extended-command-for-buffer</code>.  The book
  mentions this key binding as <code>M-S-x</code> which is in
  fact <code>M-X</code>.  In these notes, we'll write <code>M-X</code>
  for consistency with how this key sequence is actually defined and
  represented in Emacs (for example, note that <code>C-h k
  M-S-x</code> shows the key as <code>M-X</code>).
</p>
<p>
  To see how this function works, first open a file,
  say, <code>foo.el</code> with <code>C-x C-f foo.el RET</code>, then
  type <code>M-x e RET</code>.  A large list of function names
  beginning with the letter "e" as choices appears.  Now
  type <code>M-X e RET</code>.  A much smaller list of choices that
  are relevant for the current Elisp buffer appears.
</p>
<h2 id="universal-arguments">Universal Arguments<a href="#universal-arguments"></a></h2>
<p>
  Universal arguments are also called <em>prefix arguments</em>.  The
  list below presents some examples of complete key sequences where we
  apply various prefix arguments to the key sequence <code>C-n</code>.
</p>
<ul>
  <li><code>C-u C-n</code>: Move cursor down 4 lines.</li>
  <li><code>C-u C-u C-n</code>: Move cursor down 16 lines.</li>
  <li><code>C-u C-u C-u C-n</code>: Move cursor down 64 lines.</li>
  <li><code>C-u 5 C-n</code>: Move cursor down 5 lines.</li>
  <li><code>C-u 15 C-n</code>: Move cursor down 15 lines.</li>
  <li><code>C-5 C-n</code>: Move cursor down 5 lines.</li>
  <li><code>C-1 C-5 C-n</code>: Move cursor down 15 lines.</li>
  <li><code>C-- C-n</code>: Move cursor up 1 line.</li>
  <li><code>C-- C-5 C-n</code>: Move cursor up 5 lines.</li>
  <li><code>C-- C-1 C-5 C-n</code>: Move cursor up 15 lines.</li>
</ul>
<p>
  Note that negative arguments (the last three examples above)
  reverses the direction of operation.  The digit arguments of the
  form <code>C-&lt;digit&gt;</code> can also be entered
  using <code>M-&lt;digit&gt;</code>
  or <code>C-M-&lt;digit&gt;</code>.  Here are some examples:
</p>
<ul>
  <li><code>M-5 C-n</code>: Move cursor down 5 lines.</li>
  <li><code>C-M-5 C-n</code>: Move cursor down 5 lines.</li>
  <li><code>M-1 M-5 C-n</code>: Move cursor down 15 lines.</li>
  <li><code>C-M-1 C-M-5 C-n</code>: Move cursor down 15 lines.</li>
  <li><code>M-- C-n</code>: Move cursor up 1 line.</li>
  <li><code>M-- M-5 C-n</code>: Move cursor up 5 lines.</li>
  <li><code>M-- M-1 M-5 C-n</code>: Move cursor up 15 lines.</li>
  <li><code>C-M-- C-n</code>: Move cursor up 1 line.</li>
  <li><code>C-M-- C-M-5 C-n</code>: Move cursor up 5 lines.</li>
  <li><code>C-M-- C-M-1 C-M-5 C-n</code>: Move cursor up 15 lines.</li>
</ul>
<p>
  While entering multiple digits in a digit argument, we can also mix
  and match modifier keys as shown below, however doing so would be
  pointless and unwieldy:
</p>
<ul>
  <li><code>C-1 M-5 C-n</code>: Move cursor down 15 lines.</li>
  <li><code>C-1 C-M-5 C-n</code>: Move cursor down 15 lines.</li>
</ul>
<p>
  The reason why Emacs supports entering digit arguments or negative
  arguments with all three modifier
  combinations <code>C-</code>, <code>M-</code>, <code>C-M-</code>, is
  so that we can choose a modifier that is convenient.  Usually, this
  would be the modifier we anticipate that we'll use next for the
  command we are prefixing with the digit or negative argument.  For
  example, if we are going to move forward by 5 words, then <code>M-5
  M-f</code> is going to be more convenient than <code>C-5 M-f</code>
  or <code>C-M-5 M-f</code>.  To type <code>M-5 M-f</code>, we can
  simply press and hold down <kbd>alt</kbd>, then type <kbd>5</kbd>
  followed by <kbd>f</kbd> and finally release <kbd>alt</kbd>.
  Similarly, if we are going to move forward by 5 expressions,
  then <code>C-M-5 C-M-f</code> is going to be more convenient than
  using any other modifier for the digit argument.
</p>
<p>
  Choosing the modifier combination for a universal argument such that
  it matches the modifier combination for the key sequence coming up
  next helps maintain good <em>tempo</em> while typing the key
  sequences.  The book often puts emphasis on the subject of tempo in
  various chapters.
</p>
<p>
  While discussing tempo, the book presents the example of <code>M--
  M-d</code> which can be used to kill the previous word.  Note
  that <code>M-d</code> kills one word forward, so <code>M--
  M-d</code> reverses the direction of the operation and kills one
  word backward.  The book notes that <code>M-- M-d</code> maintains
  tempo while <code>C-- M-d</code> which does exactly the same thing
  disrupts tempo.
</p>
<p>
  Another example that the section <em>Univeral Arguments</em> briefly
  alludes to but does not provide a concrete example of is changing
  the case of a word that we just typed.  Here are some concrete
  examples for it:
</p>
<ul>
  <li>
    <code>M-l</code>: Convert the text from the point to the end of
    the current or next word to lower case.
  </li>
  <li>
    <code>M-u</code>: Convert the text from the point to the end of
    the current or next word to upper case.
  </li>
  <li>
    <code>M-c</code>: Capitalise the text from the point to the end of
    the current or next word.  Capitalisation involves changing only
    the first letter to upper case.
  </li>
  <li>
    <code>M- M-l</code>: Convert the text from the point to the
    beginning of the current or previous word to upper case.
  </li>
  <li>
    <code>M- M-u</code>: Convert the text from the point to the
    beginning of the current or previous word to upper case.
  </li>
  <li>
    <code>M- M-c</code>: Capitalise the text from the point to the
    beginning of the current or previous word.
  </li>
</ul>
<h2 id="discovering-and-remembering-keys">Discovering and Remembering Keys<a href="#discovering-and-remembering-keys"></a></h2>
<p>
  To get help for a prefix key, type the prefix key followed
  by <code>C-h</code>.  Here are some examples:
</p>
<ul>
  <li><code>C-x C-h</code></li>
  <li><code>C-x 8 C-h</code></li>
  <li><code>C-x 8 " C-h</code></li>
  <li><code>C-x 8 ' C-h</code></li>
  <li><code>C-x 8 * C-h</code></li>
</ul>
<p>
  Getting help for a prefix key in this manner shows an automatically
  generated list of all keys that belong to the key map associated
  with the prefix key.  Note that a key map for a prefix key may
  itself contain more prefix keys.  For example, in the above
  examples, we see that the key map for <code>C-x 8</code> contains
  prefix keys <code>C-x 8 "</code>, <code>C-x 8 '</code>, etc.  Such
  nested prefix keys are clearly marked in the output as "Prefix
  Command".
</p>
<h2 id="true-colour">True Colour<a href="#true-colour"></a></h2>
<p>
  There is a note with the title <em>Supported colors</em> in the
  section <em>The Customize Interface</em> that introduces the
  following commands:
</p>
<ul>
  <li>
    <code>M-x list-color-display RET</code>: Display names of defined
    colours and show what they look like.
  </li>
  <li>
    <code>M-x info-apropos RET Colors on a TTY RET</code>: Find an
    info page on the subject of using colours on a TTY.
  </li>
</ul>
<p>
  Since Emacs 28, we can easily enable 24-bit colour in terminal Emacs
  by setting the environment variable
  <code>COLORTERM=truecolor</code>.  To quickly test it out,
  first enter the following command in the terminal:
</p>
<pre><code>COLORTERM=truecolor emacs -nw</code></pre>
<p>
  Then type the following in Emacs:
</p>
<pre><code>M-x list-color-display RET</code></pre>
<h2 id="the-customise-interface">The Customise Interface<a href="#the-customise-interface"></a></h2>
<p>
  The customise interface allows us to customise two things: faces and
  options.  Here are some steps to get started with the customise
  interface:
</p>
<ol>
  <li>
    <p>
      Type <code>C-x 2</code> to split the current window into two.
    </p>
  </li>
  <li>
    <p>
      Type <code>C-x C-f foo.el RET</code> to open a new Elisp file.
    </p>
  </li>
  <li>
    <p>
      Type some code into the file such that it contains at least one
      string, for example:
    </p>
    <pre><code>(message "hello")</code></pre>
  </li>
  <li>
    <p>
      Type <code>C-x o</code> to go to the other window.
    </p>
  </li>
  <li>
    <p>
      Type <code>M-x customize RET</code>.
    </p>
  </li>
  <li>
    <p>
      Move the cursor to the editable text area.  This can be done
      with motion key sequences or with the mouse.
    </p>
  </li>
  <li>
    <p>
      Then type <code>font-lock-string-face</code> and
      press <kbd>enter</kbd>.  The customisation interface for the
      chosen face now appears in the buffer.  The message next to the
      "State" button shows "STANDARD." which indicates that the face
      is set to its default value.
    </p>
  </li>
  <li>
    <p>
      Then move the cursor to the editable text area next to the
      "Foreground:" label, type <code>blue</code>.  At this point, a
      preview of blue text is shown next to the "Choose" button.
      However, the string in the Elisp buffer still appears in its
      previous colour.  The message next to the "State" button shows
      "EDITED, shown value does not take effect until you set or save
      it."
    </p>
  </li>
  <li>
    <p>
      Now click the "Apply" button to apply the new string colour.
      Alternatively, move the cursor over to "Apply" and
      press <kbd>enter</kbd>.  As soon as this button is clicked, the
      string in the Elisp buffer appears blue.  The message next to
      the "State" button says "Set for current session only."
    </p>
  </li>
  <li>
    <p>
      Now click the "Revert..." button and then click
      "Revert This Session's Customizations" to revert the customisation.
    </p>
  </li>
  <li>
    <p>
      Now change the string colour to blue again and click "Apply and
      Save".  The message next to the "State" button now changes to
      "SAVED and set."  Then check Emacs initialisation file (such
      as <code>~/.emacs</code>, <code>~/.emacs.d/init.el</code>, etc.)
      and there should be a <code>custom-set-faces</code> call added
      to the initialisation file to set the string colour to blue.
    </p>
  </li>
  <li>
    <p>
      To erase the customisation from the initialisation file, click
      "Revert ..." and then click "Erase Customizations".  At this
      point, the customisation is no longer present in the
      initialisation file.  However, the customise interface shows a
      confusing message next to the "State" button, "EDITED, shown
      value does not take effect until you set or save it."  Further,
      the face is set to "-- Empty face --" in the customisation
      interface.  To add to the confusion, the "Apply and Save" button
      is enabled!  Beware though!  If "Apply and Save" is clicked now,
      it will set <code>nil</code> as the value for the face which
      will cause the face to appear black or white (not the default
      colour).
    </p>
  </li>
  <li>
    <p>
      To get rid of the confusing state of the customisation buffer
      discussed in the previous point and restore the customisation
      buffer to a sane state, click "Revert ..." and then click either
      "Undo Edits in Customization Buffer" or click
      "Revert This Session's Customizations".  Doing so would end up
      showing the default colour of the face in the customise
      interface.  The message next to the "State" button shows
      "STANDARD." again.
    </p>
  </li>
</ol>
<h2 id="customise-commands">Customise Commands<a href="#customise-commands"></a></h2>
<p>
  Here are some examples of complete key sequences that invoke various
  customise commands:
</p>
<ul>
  <li>
    <code>M-x customize RET</code>: Display customise interface.  We
    can reach a specific item to be customised by navigating the
    groups presented and the subgroups within them.  For example, to
    customise <code>font-lock-string-face</code>, we can naviage to
    Faces &gt; Font Lock &gt; Font Lock Faces &gt; Font Lock String
    Face.
  </li>
  <li>
    <code>M-x customize-browse RET</code>: Create a tree browser for
    the customise hierarchy.
  </li>
  <li>
    <code>M-x customize-option RET global-display-line-numbers
    RET</code>: Customise a specific option.
  </li>
  <li>
    <code>M-x customize-face RET font-lock-string-face RET</code>:
    Customise a specific face.
  </li>
  <li>
    <code>M-x customize-group RET faces RET</code>: Customise a
    specific group.
  </li>
  <li>
    <code>M-x customize-group RET font-lock-faces RET</code>: Another
    example similar to the previous one.  This one customises
    the <em>Font Lock Faces</em> subgroup within the <em>Faces</em>
    group.
  </li>
  <li>
    <code>M-x customize-mode RET</code>: Customise the major mode of
    the current buffer.
  </li>
  <li>
    <code>M-x customize-mode RET python-mode RET</code>: Customise a
    specific mode.  After the first <code>RET</code>, a prompt to
    enter the mode appears only if the current major mode has no known
    customise group.
  </li>
  <li>
    <code>C-u M-x customize-mode RET python-mode RET</code>: Yet
    another way to customise a specific mode.  Using the prefix
    argument ensures that we are always prompted for the mode name.
    This can be useful when we want to customise a minor mode or a
    major mode that is different from the current major mode.
  </li>
  <li>
    <code>M-x customize-themes RET</code>: Display a selectable list
    of custom themes.
  </li>
  <li>
    <code>M-x customize-customized RET</code>: Customise all
    customisations set in the session but not saved.  This is very
    useful to see all unsaved customisations together at one place.
  </li>
  <li>
    <code>M-x customize-saved RET</code>: Customise all saved
    customisations.  This is very useful to see all saved
    customisations together at one place.
  </li>
  <li>
    <code>M-x customize-changed RET</code>: Customise all settings
    whose meanings have changed since the previous major Emacs
    release.
  </li>
  <li>
    <code>M-x customize-changed RET 26.1 RET</code>: Customise all
    settings whose meanings have changed since a particular previous
    major Emacs release.
  </li>
</ul>
<p>
  One thing worth keeping in mind is that when we apply, save or
  revert customisations, only the customisations shown in the current
  buffer are applied, saved or reverted.  Here is an experiment that
  demonstrates what this means:
</p>
<ol>
  <li>
    <p>
      Type <code>C-x 2</code> followed by <code>C-x C-f foo.el
      RET</code> to split the current window into two and load an
      Elisp file in one window.  Then insert the following code:
    </p>
    <pre><code>(defun foo () (message "hello")) ;; Demo</code></pre>
  </li>
  <li>
    <p>
      Type <code>M-x customize RET</code>, search
      for <code>font-lock-keyword-face</code>, set its colour
      to <code>red</code> and click "Apply".
    </p>
  </li>
  <li>
    <p>
      Then search for <code>font-lock-function-name-face</code>, set
      its colour to <code>green</code> and click "Apply".  At this
      point the macro name <code>defun</code> is coloured red and the
      function name <code>foo</code> is coloured green in the Elisp
      buffer.
    </p>
  </li>
  <li>
    <p>
      Now click "Revert ..." and then click
      "Revert This Session's Customizations".  Only the colour of the
      function name reverts to the default colour.  The colour of the
      macro name remains red in the Elisp buffer.  This confirms that
      the revert operation takes only the customisations in the buffer
      into account.
    </p>
  </li>
  <li>
    <p>
      Search for <code>font-lock-string-face</code>, set its colour
      to <code>blue</code> and click "Apply and Save".
    </p>
  </li>
  <li>
    <p>
      Search for <code>font-lock-comment-face</code>, set its colour
      to <code>magenta</code> and click "Apply and Save".  Inspecting
      the Emacs initialisation file shows that only the customisations
      for the string and comment faces have been saved to the file.
      This confirms that only the customisations shown in the current
      buffer are saved.
    </p>
  </li>
  <li>
    <p>
      Type <code>M-x customize-customized RET</code>.  A new buffer
      appears and shows the customisation for keyword because it was
      customised and applied but not saved.
    </p>
  </li>
  <li>
    <p>
      Type <code>M-x customize-saved RET</code>.  A new buffer appears
      and shows the customisations for string and comment because they
      were customised and saved.
    </p>
  </li>
  <li>
    <p>
      Now search for <code>font-lock-comment-face</code> so that the
      customise buffer contains only the customisation entry for
      comment.  Click "Revert ..." and then click
      "Erase Customizations".  Inspecting the Emacs initialisation
      file shows that the customisation for comment is removed but the
      customisation for string is still intact.  This confirms that
      only the customisation shown in the current buffer is erased.
    </p>
  </li>
</ol>
<h2 id="evaluating-elisp-code">Evaluating Elisp Code<a href="#evaluating-elisp-code"></a></h2>
<p>
  The chapter introduces two commands:
</p>
<ul>
  <li>
    <code>M-x eval-buffer RET</code>: Evaluate the entire buffer.
  </li>
  <li>
    <code>M-x eval-region RET</code>: Evaluates only the marked
    region.
  </li>
</ul>
<p>
  Here are some additional key sequences that I find very useful:
</p>
<ul>
  <li>
    <code>C-x C-e</code>: Evaluate the expression before the cursor.
    This key binding is available in <code>global-map</code>, so this
    key sequence works in any buffer.
  </li>
  <li>
    <code>C-M-x</code>: Evaluate the top-level expression on the
    cursor.  This key binding is not available in the global map.
    Therefore this key sequence works only in those major modes that
    support it.  For example, this key sequence works in Elisp buffers
    because this key binding is available
    in <code>emacs-lisp-mode-map</code>.
  </li>
</ul>
<h2 id="info">Info<a href="#info"></a></h2>
<p>
  <em>Info</em>, also known as the <em>Info Reader</em>, is the
  documentation browser of Emacs.  Type
  <code>M-x info RET</code> or <code>C-h i</code> to enter
  Info.
</p>
<p>
  The following points explain the navigation commands of Info:
</p>
<ul>
  <li>
    Type <code>[</code> or <code>]</code> to go to the previous or
    next node respectively.  Typing <code>]</code> repeatedly is a
    nice way to go from one node to the next one without skipping any
    content.  This provides an experience that very close to reading a
    book page by page although <code>SPC</code> (explained below)
    might be an even better way.
  </li>
  <li>
    Type <code>l</code> or <code>r</code> to go back or forward in
    history respectively.
  </li>
  <li>
    Type <code>n</code> or <code>p</code> to go to the previous or
    next sibling node.  This is a nice way to go from one chapter to
    next while skipping all the child nodes or to go from one section
    to the next sibling section while skipping all child subsections.
  </li>
  <li>
    Type <code>u</code> to go up one level to the parent node.
  </li>
  <li>
    Type <code>SPC</code> to scroll one screen forward at a time.
    Type <code>DEL</code> or <code>S-SPC</code> to scroll one screen
    backward at a time.  When a node boundary is reached, these
    commands automatically load the next or previous node.  Thus
    typing <code>SPC</code> over and over again is a nice way to read
    all the text in a node and then go to the next node.  This
    provides an experience that is closest to reading a book paragraph
    by paragraph and page by page.
  </li>
  <li>
    Type <code>TAB</code> to go to the next cross-reference or menu
    item, i.e. anything that looks like a link.
    Type <code>S-TAB</code> or <code>C-M-i</code> to go back to the
    previous cross-reference or menu item.
  </li>
  <li>
    Type <code>RET</code> to follow a node reference near point.  This
    behaves like visiting a link.
  </li>
  <li>
    Type <code>m</code> to prompt for a menu item to go to.  The menu
    item near the point is automatically selected as the default
    answer to the prompt.
  </li>
  <li>
    Type <code>q</code> to quit Info.  The Info buffer is not killed.
    Therefore typing <code>C-h i</code> will switch to the Info buffer
    and we can read the last node we visited again.
  </li>
</ul>
<p>
  To summarise, the commands <code>[</code> and <code>]</code> are
  great for browsing every node.  The command <code>SPC</code>
  and <code>DEL</code> are good for reading everything paragraph by
  paragraph and page by page.
</p>
<p>
  There are several ways to reach a specific node of a specific
  manual.  The following points describe some of them:
</p>
<ul>
  <li>
    When we open the Info reader with <code>C-h i</code> for the first
    time, immediately typing <code>m</code> is a convenient way to
    enter a particular menu item for a manual and jump to that manual,
    e.g. type <code>C-h i m org RET</code> to go to the Org manual.
  </li>
  <li>
    Since Emacs 28, we can also use <code>C-h R</code> to open a
    specific manual from any buffer, i.e. we do not need to
    type <code>C-h i</code> first to enter Info.  For example,
    type <code>C-h R org RET</code> to enter the Org manual.
  </li>
  <li>
    To look up the documentation for a command, type <code>C-h
    F</code>, e.g. <code>C-h F find-file RET</code>.
  </li>
  <li>
    Although not mentioned in the book, a popular way to point others
    to a specific node in the manual is to provide an Elisp expression
    to visit a node.  For example, to read the node
    named <code>Internal Links</code> in the <code>org</code> manual,
    evaluate the expression <code>(info "(org)Internal Links")</code>.
  </li>
  <li>
    An alternative to the Elisp expression in the previous point could
    be typing <code>C-h R org RET m Hyperlinks RET m Internal Links
    RET</code> or even <code>C-h R org RET m Internal Links
    RET</code>.  However, the Elisp expression in the previous point
    is a convenient way to share a pointer to a specific node in a
    specific manual with other Emacs users.
  </li>
</ul>
<h2 id="apropos">Apropos<a href="#apropos"></a></h2>
<p>
  The following key sequences demonstrate how to use the apropos
  system:
</p>
<ul>
  <li>
    <code>C-h a ^whitespace RET</code>: Find all commands that match
    the regular expression pattern <code>^whitespace</code>.
  </li>
  <li>
    <code>M-x apropos-command RET ^whitespace RET</code>: Same as
    above.
  </li>
  <li>
    <code>M-x apropos RET ^whitespace RET</code>: Show all symbols
    that match the given regular expression pattern.  The matches
    include symbols defined as functions, variables and faces.
  </li>
  <li>
    <code>C-h d cleanup-region RET</code>: Show symbols whose
    documentation strings match the given regular expression pattern.
    Note that this command shows symbols
    like <code>whitespace-cleanup</code>
    and <code>whitespace-report-region</code> in the results because
    their documentation strings contain the
    string <code>"cleanup-region"</code>.  However, it does not show
    the symbol <code>whitespace-cleanup-region</code> because its
    documentation string does not contain this string.
  </li>
  <li>
    <code>M-x apropos-documentation RET cleanup-region RET</code>:
    Same as above.
  </li>
  <li>
    <code>M-x apropos-library RET whitespace RET</code>: Show all
    variables and functions defined by the library
    <code>whitespace</code>.
  </li>
  <li>
    <code>M-x apropos-user-option RET ^whitespace RET</code>: Show
    user options that match the given pattern.  This includes
    variables that can be customised in the customise interface.
  </li>
  <li>
    <code>M-x apropos-value RET ^[^ ]*text RET</code>: Show all
    symbols which have values whose printed representation matches the
    given pattern.
  </li>
</ul>
<p>
  By default, the apropos commands show the results in alphabetical
  order.  To sort them by scores, evaluate the following Elisp
  expression:
</p>
<pre><code>(setq apropos-sort-by-scores t)</code></pre>
<p>
  To sort the matches by score as well as show the scores within
  parentheses next to the matches, evaluate the following Elisp
  expression:
</p>
<pre><code>(setq apropos-sort-by-scores 'verbose)</code></pre>
<p>
  Note that sorting by score does not work for <code>C-h d</code>
  (<code>apropos-documentation</code>).
</p>
<h2 id="describe">Describe<a href="#describe"></a></h2>
<p>
  The following key sequences demonstrate the describe system:
</p>
<ul>
  <li>
    <code>C-h m</code>: Display documentation of current major mode
    and minor modes along with key bindings introduced by the modes.
    Mode-specific commands that are not bound to any key are not
    shown.
  </li>
  <li>
    <code>C-h x calc RET</code>: Display documentation of
    the <code>calc</code> command.
  </li>
  <li>
    <code>C-h f calc RET</code>: Same as above.  However, note that
    while <code>C-h f</code> can display documentation of any
    function, <code>C-h x</code> on the other hand can display
    documentation of only those functions that are also commands.  For
    example, <code>C-h f string-join RET</code> works fine
    but <code>C-h x string-join RET</code> complains about no match.
  </li>
  <li>
    <code>C-h v tab-width RET</code>: Display documentation of the
    variable <code>tab-width</code>.
  </li>
  <li>
    <code>C-h k C-x C-f</code>: Display documentation of the command
    bound to the key sequence <code>C-x C-f</code>.
  </li>
</ul>
<h2 id="links">Links<a href="#links"></a></h2>
<p>
  The following list includes some links that were discussed during
  the book discussion group meetings:
</p>
<ul>
  <li>
    <a href="https://commons.wikimedia.org/wiki/File:Space-cadet.jpg">Picture
      of the space-cadet keyboard with Hyper, Super and Meta keys</a>
  </li>
  <li>
    <a href="https://www.emacswiki.org/emacs/MovingTheCtrlKey">Moving
    the Ctrl Key</a>
  </li>
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/cc/mastering-emacs/ch03.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a> |
  <a href="https://susam.net/tag/meetup.html">#meetup</a>
</p>
]]>
</description>
</item>
<item>
<title>Notes on Mastering Emacs: Chapter 2: The Way of Emacs</title>
<link>https://susam.net/cc/mastering-emacs/ch02.html</link>
<guid isPermaLink="false">chxrj</guid>
<pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  The following notes were taken while discussing Chapter 2 of the
  book <em>Mastering Emacs</em> by Mickey Petersen (2022 edition) in
  <a href="./">book discussion group meetings</a>.
</p>
<p>
  An index of notes for all chapters are available
  at <a href="notes.html">notes.html</a>.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#magpie-nest-of-shiny-things">Magpie's Nest of Shiny Things</a></li>
  <li><a href="#cornerstore-of-emacs">Cornerstone of Emacs</a></li>
  <li><a href="#uptime">Uptime</a></li>
  <li><a href="#rpn-calculator">RPN Calculator</a></li>
  <li><a href="#point-and-mark">Point and Mark</a></li>
  <li><a href="#returning-to-mark">Returning to Mark</a></li>
  <li><a href="#font-locking">Font Locking</a></li>
  <li><a href="#change-major-mode">Change Major Mode</a></li>
  <li><a href="#links">Links</a></li>
</ul>
<h2 id="magpie-nest-of-shiny-things">Magpie's Nest of Shiny Things<a href="#magpie-nest-of-shiny-things"></a></h2>
<p>
  The following commands mentioned in the book invoke some interesting
  functions:
</p>
<ul>
  <li>
    <code>M-x zone RET</code>: Zone out, completely; a built-in screensaver.
  </li>
  <li>
    <code>M-x dunnet RET</code>: Dungeon text adventure game.
  </li>
  <li>
    <code>M-x tetris RET</code>: Tetris clone.
  </li>
  <li>
    <code>M-x lunar-phases RET</code>: Lunar phases calendar.
  </li>
  <li>
    <code>M-x doctor RET</code>: ELIZA chatterbot.
  </li>
</ul>
<h2 id="cornerstore-of-emacs">Cornerstone of Emacs<a href="#cornerstore-of-emacs"></a></h2>
<p>
  The chapter mentions the Elisp interpreter as the cornerstone of
  Emacs.  In fact, Emacs is an editor program that runs in the Elisp
  interpreter.  When we start Emacs, what really starts first is an
  Elisp interpreter.  It executes the Elisp code of an editor program.
  When that program executes, we get Emacs, the editor!
</p>
<p>
  This behaviour is quite the opposite of how Vim and other editors
  behave.  For example, when we start Vim or Visual Studio Code, first
  the editor runs.  The editor then provides an embedded programming
  language that we can use to write plugins and extend the editor.
  For example, Vim offers VimScript to let us write code using
  VimScript and extend the functionality of Vim.  However, when we
  start Emacs, first the Elisp interpreter runs and this interpreter
  executes a program that results in Emacs, the editor.
</p>
<h2 id="uptime">Uptime<a href="#uptime"></a></h2>
<p>
  The key sequence <code>M-x emacs-uptime RET</code> shows how long
  the current instance of Emacs has been running.  Many users have
  month-long uptimes.
</p>
<h2 id="rpn-calculator">RPN Calculator<a href="#rpn-calculator"></a></h2>
<p>
  To try out the calculator, type <code>C-x * c</code> or <code>M-x
  calc RET</code> to start the calculator.  Then to calculate
  something like, say, 1 + (2 * 3), type <code>1 RET 2 RET 3 RET *
  +</code>.
</p>
<h2 id="point-and-mark">Point and Mark<a href="#point-and-mark"></a></h2>
<p>
  To try out point and mark quickly, first open a buffer with some
  text in it.  For example, open a file, say, <code>foo.txt</code>
  using the key sequence <code>C-x C-f foo.txt RET</code>.  Make sure
  there are a few lines of text in the buffer.  If it is a new buffer,
  type some lines of text into it.  Then move the point (cursor) to
  any arbitrary place within the text.  The motion keys
  like <code>C-p</code>, <code>C-n</code>, <code>C-b</code>, <code>C-f</code>,
  etc. or simply <code>&lt;up&gt;</code>, <code>&lt;down&gt;</code>,
  <code>&lt;left&gt;</code>, <code>&lt;right&gt;</code>, etc. may be
  used to do this.
</p>
<p>
  Then type <code>C-SPC</code> (i.e. <kbd>ctrl</kbd>+<kbd>space</kbd>)
  to set the mark at the current position of the point.  Then move the
  point around.  Emacs should now be highlighting the region between
  the mark (set earlier) and the point.  Then type <code>M-w</code>
  (i.e. <kbd>alt</kbd>+<kbd>w</kbd>) to copy the text in the selected
  region or type <code>C-w</code> to cut the text instead.  Finally,
  move the point around again and type <code>C-y</code> to paste the
  copied/cut text.
</p>
<h2 id="returning-to-mark">Returning to Mark<a href="#returning-to-mark"></a></h2>
<p>
  Marks can also be used to remember a position in the buffer to which
  we may wish to return to later.  To try it out, first move the point
  to some place in the buffer where a mark needs to be set.  Then
  type <code>C-SPC C-SPC</code> to set the mark without activating it
  (activating a mark causes Emacs to highlight the region as explained
  in the previous section).  Then move the point to some other place
  in the buffer.  Finally, type <code>C-u C-SPC</code> to return to
  the marked position.
</p>
<h2 id="font-locking">Font Locking<a href="#font-locking"></a></h2>
<p>
  Font locking (syntax highlighting) in Emacs is made up of faces of
  properties (colour, font, size, etc.).  Type <code>C-u C-x =</code>
  to describe the current character (the character the cursor is on).
  The output displays the face details as well.  Alternatively,
  type <code>M-x describe-face RET</code> to describe the face of the
  character the cursor is on.
</p>
<h2 id="change-major-mode">Change Major Mode<a href="#change-major-mode"></a></h2>
<p>
  Emacs almost always sets the appropriate major mode by inspecting
  the filename or the content of the buffer.  However, sometimes it
  can be useful to set the major mode manually.  For example, consider
  a file named <code>foo.html</code> which is open in Emacs and has
  the following text:
</p>
<pre>
<code>&lt;h1&gt;Euler's Identity&lt;/h1&gt;
&lt;p&gt;
  In mathematics, &lt;em&gt;Euler's identity&lt;/em&gt; is the
  equality

  \[
    e^{i \pi} + 1 = 0.
  \]

  Euler's identity is a special case of Euler's formula from complex
  analysis, which states that for any real number \( x, \)

  \[
    e^{ix} = \cos x + i \sin x.
  \]
&lt;/p&gt;</code>
</pre>
<p>
  This is an HTML file with some LaTeX snippets that would perhaps be
  rendered using a LaTeX rendering tool such as MathJax or KaTeX.  By
  default, when this file is opened in Emacs, the major mode is set to
  HTML+.  However, if one wants to focus on editing the embedded LaTeX
  content, it is possible to change the major mode to LaTeX by
  typing <code>M-x latex-mode RET</code>.  To change the major mode
  back to HTML+, type <code>M-x mhtml-mode RET</code>.
</p>
<h2 id="links">Links<a href="#links"></a></h2>
<p>
  The following list includes some links that were discussed during
  the book discussion group meetings:
</p>
<ul>
  <li>
    <a href="https://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html">Org
    as a spreadsheet system: a short introduction</a>
  </li>
  <li>
    <a href="https://orgmode.org/manual/The-Spreadsheet.html">The
    Spreadsheet (The Org Manual)</a>
  </li>
  <li>
    <a href="https://blog.polaris64.net/post/emacs-using-org-mode-to-track-exercises/">Using
    Org Mode to keep track of exercise</a>
  </li>
  <li>
    <a href="https://github.com/jkitchin/scimax">scimax: An emacs
      starterkit for scientists and engineers</a>
  </li>
  <li>
    <a href="https://www.iro.umontreal.ca/~monnier/oclosure.pdf">Open
    Closures: Disclosing lambda's inner monomaniac object!</a> by
    Stefan Monnier
  </li>
  <li>
    <a href="http://dantorop.info/project/emacs-animation/">Emacs Lisp
    Animations</a> by Dan Torop
  </li>
  <li>
    <a href="https://github.com/karthink/org-auctex">org-auctex:
      Better LaTeX previews for org-mode</a>
  </li>
  <li>
    <a href="https://emacsconf.org/2022/talks/eshell/">Top 10 reasons
    why you should be using Eshell</a> by Howard Abrams
  </li>
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/cc/mastering-emacs/ch02.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a> |
  <a href="https://susam.net/tag/meetup.html">#meetup</a>
</p>
]]>
</description>
</item>
<item>
<title>Notes from Mastering Emacs Meetups</title>
<link>https://susam.net/cc/mastering-emacs/notes.html</link>
<guid isPermaLink="false">yzltf</guid>
<pubDate>Sat, 17 Dec 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h1>Notes from Mastering Emacs Meetups</h1>
<p>
  The following notes were taken while discussing the
  book <em>Mastering Emacs</em> by Mickey Petersen (2022 edition) in
  <a href="./">book discussion group meetings</a>.
</p>
<p>
  Note that these notes are not a good substitute for the actual book.
  Not everything in the book is captured in these notes.  While some
  points mentioned in the book are missing from the notes, there are
  also some points from the book where these notes discuss them in
  much greater detail than the book does.
</p>
<ul class="blog">
  <li>
    <a href="ch01.html">Notes on Mastering Emacs: Chapter 1: Introduction</a>
  </li>
  <li>
    <a href="ch02.html">Notes on Mastering Emacs: Chapter 2: The Way of Emacs</a>
  </li>
  <li>
    <a href="ch03.html">Notes on Mastering Emacs: Chapter 3: First Steps</a>
  </li>
  <li>
    <a href="ch04.html">Notes on Mastering Emacs: Chapter 4: The Theory of Movement</a>
  </li>
  <li>
    <a href="ch05.html">Notes on Mastering Emacs: Chapter 5: The Theory of Editing</a>
  </li>
  <li>
    <a href="ch06.html">Notes on Mastering Emacs: Chapter 6: The Practicals of Emacs</a>
  </li>
  <li>
    <a href="ch07.html">Notes on Mastering Emacs: Chapter 7: Conclusion</a>
  </li>
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/cc/mastering-emacs/notes.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a>
</p>
]]>
</description>
</item>
<item>
<title>Mastering Emacs Book Club</title>
<link>https://susam.net/cc/mastering-emacs/</link>
<guid isPermaLink="false">cosiy</guid>
<pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h1>Mastering Emacs Book Club</h1>
<div class="highlight">
  This meeting series is complete!  There are no new meetings
  happening for this book.  Go to the meetings
  <a href="../">main page</a> to find out about current
  active meetings.
</div>
<p>
  The following content on this page is an archive of the content as
  it appeared on the last day of meeting for this book.
</p>
<hr>
<div class="highlight">
  <p>
    Meeting times:
    Usually at 20:00 UTC on Fri, Sat and Sun<sup>&dagger;</sup>
  </p>
  <p>
    Meeting duration:
    40 minutes.
  </p>
  <p>
    Meeting link:
    <a href="../../meet/">susam.net/meet</a>
  </p>
  <p>
    Meeting log:
    <a href="log.html#upcoming">72 meetings</a>
  </p>
  <p>
    Reference book:
    <a href="https://www.masteringemacs.org/"><em>Mastering Emacs</em></a>
    by Mickey Petersen (2022 edition)
  </p>
  <p>
    Chapter notes:
    <a href="notes.html">Notes</a>
  </p>
  <p>
    Club channel:
    <a href="https://app.element.io/#/room/#susam:matrix.org">#susam:matrix.org</a> /
    <a href="https://web.libera.chat/#susam">#susam:libera.chat</a><sup>&ddagger;</sup>
  </p>
  <p>
    Mastodon:
    <a href="https://mastodon.social/@susam">@susam@mastodon.social</a>
  </p>
</div>
<p>
  <small>&dagger; There are some exceptions to this schedule
  occasionally.  Join
  <a href="https://app.element.io/#/room/#susam:matrix.org">#susam:matrix.org</a>
  or <a href="https://web.libera.chat/#susam">#susam:libera.chat</a>
  or follow <a href="https://mastodon.social/@susam">@susam@mastodon.social</a>
  to receive schedule updates.</small>
</p>
<p>
  <small>&ddagger; You only need to join either the Matrix channel or
  the Libera channel, not both.  Both channels are bridged together.
  If you are not an active IRC user, prefer joining the Matrix channel
  because it is more convenient for someone unfamiliar with IRC.  For
  example, you can close your browser or client and your chat session
  will still stay alive on Matrix.  You can connect back the next day
  and catch up with the messages.  Doing that with IRC requires
  slightly more work such as setting up IRC bouncers etc.</small>
</p>
<p>
  The primary reference book for these meetings is
  <em>Mastering Emacs</em> written by Mickey Petersen (2022 edition).
  PDF and EPUB copies of this book can be purchased
  from <a href="https://www.masteringemacs.org/">masteringemacs.org</a>.
</p>
<p>
  In case you miss any meeting, you can find recordings of the
  meetings that occurred in the last 7 days here:
  <a href="https://www.twitch.tv/susampal">twitch.tv/susampal</a>.
  These recordings are deleted automatically after 7 days.
</p>
<h2 id="faq">FAQ<a href="#faq"></a></h2>
<ol>
  <li>
    <h3 id="what-is-this-club-about">What is this club about?<a href="#what-is-this-club-about"></a></h3>
    <p>
      This is a hobby club with a focus on mathematics and
      computation.  This club picks reading material about concepts
      and technologies that have been around for a long time and have
      an air of timelessness around them.  See the blog
      post <a href="../../reading-classic-computation-books.html">Reading
      Classic Computation Books</a> for more details.
    </p>
  </li>
  <li>
    <h3 id="who-runs-this-club">Who runs this club?<a href="#who-runs-this-club"></a></h3>
    <p>
      My name is Susam.  This is my website.  I run this club.  I host
      the book club meetings.  The last series of book club meetings I
      hosted was about <a href="../iant/">analytic number
      theory</a>.  Some members of Libera IRC network and Hacker News
      participated in those meetings.  This new series is going to be
      about Emacs.
    </p>
  </li>
  <li>
    <h3 id="what-is-planned">What is planned for the next few meetings?<a href="#what-is-planned"></a></h3>
    <p>
      See the <a href="log.html">meeting log</a> which contains a
      rough plan for the next few meetings along with an archive of
      all previous meetings.
    </p>
  </li>
  <li>
    <h3 id="do-i-need-to-read-in-advance">Do I need to read the planned chapters/pages in advance before coming to the meetings?<a href="#do-i-need-to-read-in-advance"></a></h3>
    <p>
      Not at all.  It is up to you, really.  If you would like to read
      the chapters in advance and come, that's great.  But it is not
      necessary.  We are going to discuss every page of the book in
      detail anyway.  Further, we will demonstrate the concepts we
      learn from the book live using an actual Emacs editor.  So it is
      perfectly fine if you want to join the meetings without any
      preparation.
    </p>
  </li>
  <li>
    <h3 id="can-beginners-join">I have little to no knowledge of Emacs.  Can I join?<a href="#can-beginners-join"></a></h3>
    <p>
      Yes, certainly!  The reference book selected for these meetings
      teaches Emacs from scratch.  No prior knowledge is expected from
      the participants of these meeetings.
    </p>
  </li>
  <li>
    <h3 id="can-experts-join">I am an expert in Emacs.  Will the meetings be useful to me?<a href="#can-experts-join"></a></h3>
    <p>
      In online discussions, often people with many years of Emacs
      experience have claimed that despite their high degree of
      expertise in Emacs, the book taught them new stuff.  Whether
      attending 40-minute meetings, a few days a week, with a
      possibility of learning something new is a good return of your
      investment or not, is something you might want to consider.
    </p>
    <p>
      Having said that, expert Emacs users and developers are very
      welcome to these meetings.  In the previous meetings on analytic
      number theory, we found that the experts often contributed to
      the meetings with new insights and interesting background
      information that helped everyone learn the reading material
      better.
    </p>
  </li>
  <li>
    <h3 id="can-i-lurk">Can I just lurk in the meetings?<a href="#can-i-lurk"></a></h3>
    <p>
      Yes!  Lurking is absolutely fine in our club meetings.  In fact,
      most members of the club join in and stay silent throughout the
      meetings.  Only a few members talk via audio/video or chat.
      This is considered absolutely normal in this club, so please do
      not hesitate to join our meetings!
    </p>
  </li>
  <li>
    <h3 id="vim-or-emacs">Tell me honestly.  Which is better?  Vim or Emacs?<a href="#vim-or-emacs"></a></h3>
    <p>
      Sorry, we don't do this here!  <!-- Emacs!  Definitely Emacs!  -->
    </p>
  <li>
    <h3 id="where-can-i-ask-questions">I have more questions.  Where can I ask?<a href="#where-can-i-ask-questions"></a></h3>
    <p>
      Join the club channel
      at <a href="https://app.element.io/#/room/#susam:matrix.org">#susam:matrix.org</a>
      or <a href="https://web.libera.chat/#susam">#susam:libera.chat</a>
      to ask more questions.
    </p>
  </li>
</ol>
<!-- ### -->
<p>
  <a href="https://susam.net/cc/mastering-emacs/">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a> |
  <a href="https://susam.net/tag/meetup.html">#meetup</a>
</p>
]]>
</description>
</item>
<item>
<title>Notes on Mastering Emacs: Chapter 1: Introduction</title>
<link>https://susam.net/cc/mastering-emacs/ch01.html</link>
<guid isPermaLink="false">zwrnu</guid>
<pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  The following notes were taken while discussing Chapter 1 of the
  book <em>Mastering Emacs</em> by Mickey Petersen (2022 edition) in
  <a href="./">book discussion group meetings</a>.
</p>
<p>
  An index of notes for all chapters are available
  at <a href="notes.html">notes.html</a>.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#describe-system">Describe System</a></li>
  <li><a href="#language-servers">Language Servers</a></li>
  <li><a href="#baroque-terminology">Baroque Terminology</a></li>
  <li><a href="#active-friendly-community">Active, Friendly Community</a></li>
  <li><a href="#vim-emulation-layer">Vim Emulation Layer</a></li>
  <li><a href="#links">Links</a></li>
</ul>
<h2 id="describe-system">Describe System<a href="#describe-system"></a></h2>
<p>
  To get a glimpse of the powerful describe system available in Emacs,
  type the following key sequence: <code>C-h C-k C-p</code>.  This
  shows the documentation associated with the keys
  sequence <code>C-p</code> that invokes the command
  named <code>previous-line</code> to move the cursor to the previous
  line.  The documentation mentions that this command is defined in a
  file named <code>simple.el</code>.  Click on the file name to jump
  straight into the source code of <code>simple.el</code> where this
  command is defined.  With Emacs, the source code of Emacs is not
  hidden from the user.  The describe system is discussed in Chapter 3
  of the book.
</p>
<h2 id="language-servers">Language Servers<a href="#language-servers"></a></h2>
<p>
  The two popular language server implementations for Emacs are LSP
  Mode and Eglot.  Since Emacs 29, Eglot is part of Emacs core and
  does not require installing a separate package.  It can be run with
  the key sequence <code>M-x eglot RET</code>.
</p>
<h2 id="baroque-terminology">Baroque Terminology<a href="#baroque-terminology"></a></h2>
<p>
  Some examples are:
</p>
<ul>
  <li>
    The term <em>point</em> to refer to the cursor.
  </li>
  <li>
    The term <em>yank</em> to paste text.  What can be especially
    confusing for users with prior Vim experience is that Vim uses the
    term <em>yank</em> to mean copying text but Emacs uses this term
    to mean pasting text.
  </li>
  <li>
    An OS-level or desktop-environment-level window is known
    as <em>frame</em> in Emacs.  We can split an Emacs frame into
    multiple panes and these panes are called <em>windows</em> in
    Emacs.
  </li>
</ul>
<p>
  There are many more such examples.  The above examples illustrate
  the kind of surprises one should be ready for while reading Emacs
  documentation.  Fortunately, it is often possible to understand the
  meaning of these terms from the context.
</p>
<h2 id="active-friendly-community">Active, Friendly Community<a href="#active-friendly-community"></a></h2>
<p>
  There are three good places to hang out with other Emacs users, seek
  help or help others with Emacs:
</p>
<ul>
  <li>
    Reddit <a href="https://www.reddit.com/r/emacs/">r/emacs</a>
    community.
  </li>
  <li>
    Libera <a href="https://web.libera.chat/#emacs">#emacs</a>
    channel.
  </li>
  <li>
    Matrix <a href="https://app.element.io/#/room/#emacs:matrix.org">#emacs</a>
    room.
  </li>
</ul>
<p>
  All three places appear to be quite friendly to beginners to Emacs!
</p>
<h2 id="vim-emulation-layer">Vim Emulation Layer<a href="#vim-emulation-layer"></a></h2>
<p>
  The most popular Vim emulation layer these days is Evil Mode.  It is
  often said that the best implementation of Vim is written in Emacs
  Lisp.  Some people also claim that Evil Mode is a better Vim than
  Vim itself.  In fact, the next chapter, i.e. Chapter 3, says the
  following:
</p>
<blockquote>
  Vim users are migrating to Emacs because, well, Emacs is often a
  better Vim than Vim.
</blockquote>
<h2 id="links">Links<a href="#links"></a></h2>
<p>
  The following list includes some links that were discussed during
  the book discussion group meetings:
</p>
<ul>
  <li>
    <a href="https://github.com/Wilfred/helpful">Helpful</a> is an
    alternative to the built-in Emacs help that provides much more
    contextual information.
  </li>
  <li>
    <a href="https://github.com/xuchunyang/elisp-demos">Elisp API
    Demos</a> injects Elisp demo examples in <code>*Help*</code>
    buffers.
  </li>
  <li>
    <a href="https://planet.emacslife.com/">Planet Emacslife</a> is a
    feed aggregrator for Emacs-related blogs.
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/cc/mastering-emacs/ch01.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a> |
  <a href="https://susam.net/tag/meetup.html">#meetup</a>
</p>
]]>
</description>
</item>
<item>
<title>ChatGPT Explains Some Jokes</title>
<link>https://susam.net/chatgpt-explains-jokes.html</link>
<guid isPermaLink="false">levzu</guid>
<pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  There is a famous saying:
</p>
<blockquote>
  <p>
    Explaining a joke is like dissecting a frog.  You understand it
    better but the frog dies in the process.
  </p>
</blockquote>
<p>
  Nevertheless, that is what I decided to do with ChatGPT.  I asked
  ChatGPT to explain some of my <a href="jokes.html">favourite
  jokes</a> to me.  The sections below show how the conversation went.
  This was one long conversation but I have split it into multiple
  sections to make the dialogue easy to read.
</p>
<h2 id="three-pints-of-guinness">Three Pints of Guinness<a href="#three-pints-of-guinness"></a></h2>
<blockquote>
  <p>
    Susam: I will share a joke with you.  Explain to me why it is
    funny.
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: Sure!  I'd be happy to help you understand why a joke is
    funny.  Please go ahead and share the joke with me.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: A man walks into a pub and says, "Give me three pints of
    Guinness, please."
  </p>
  <p>
    So the bartender brings him three pints and the man proceeds to
    alternately sip one, then the other, then the third until they're
    gone.
  </p>
  <p>
    He then orders three more and the bartender says, "Sir, I know you
    like them cold, so you can start with one and I'll bring you a
    fresh one as soon as you're low."
  </p>
  <p>
    The man says, "You don't understand.  I have two brothers, one in
    Australia and one in the States.  We made a vow to each other that
    every Saturday night we'd still drink together.  So right now, my
    brothers have three Guinness Stouts too and we're drinking
    together."
  </p>
  <p>
    The bartender thinks it's a wonderful tradition and every week he
    sets up the guy's three beers as soon as he enters in the bar.
    Then one week, the man comes in and orders only two.  He drinks
    them, then orders two more.  The bartender sadly says, "Knowing
    your tradition, I'd just like to just say that I'm sorry that one
    of your brothers died."
  </p>
  <p>
    The man replies, "Oh, my brothers are fine â€“ I just quit
    drinking."
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: This joke is funny because it has a surprising punchline.
    The setup of the joke establishes that the man has a weekly
    tradition of drinking three pints of Guinness with his two
    brothers, one in Australia and one in the United States.  The
    bartender assumes that something has happened to one of the
    brothers when the man only orders two pints, and the man's
    response that he has quit drinking is unexpected and surprising.
    The punchline effectively subverts the expectations that the joke
    has established, leading to a comedic reveal that creates humor.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: Exactly what about the punchline subverts the expectations?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: In the setup of the joke, the man's weekly tradition of
    drinking three pints of Guinness with his two brothers is
    established.  This sets up the expectation that the man will
    continue to follow this tradition and order three pints each week.
    However, when the man only orders two pints, the bartender assumes
    that something has happened to one of the brothers, setting up the
    expectation that the punchline will be a tragic revelation about
    the fate of one of the man's brothers.  Instead, the punchline
    reveals that the man has actually quit drinking, which is
    unexpected and surprising, and effectively subverts the
    expectations that have been established in the setup of the joke.
  </p>
</blockquote>
<p>
  I like how ChatGPT mentions that the joke was setting up an
  expectation that something tragic might have happened to the third
  brother.
</p>
<h2 id="a-pun-walks-into-a-bar">A Pun Walks Into a Bar<a href="#a-pun-walks-into-a-bar"></a></h2>
<blockquote>
  <p>
    Susam: Alright, I will share another joke.  Will you explain that
    to me too?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: Sure!  I'd be happy to help you understand why a joke is
    funny.  Please go ahead and share the joke with me.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: A pun walks into a bar, ten people die on the spot.  Pun
    in, ten dead.
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: This joke is funny because it uses wordplay, or a play on
    words, to create a punchline that is unexpected and humorous.  In
    this joke, the word "pun" is used in two different ways: first, as
    a type of joke that relies on wordplay, and second, as a homophone
    of "pan," a cooking utensil.  The punchline, "Pun in, ten dead,"
    plays on these two meanings of the word "pun" to create a humorous
    and unexpected twist.  The use of wordplay in the punchline is
    what makes the joke funny.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: I am quite certain that this joke does not rely on the
    homophone of the word "pan".  Do you want to try explaining this
    joke again?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: I apologize for misunderstanding the joke.  Here is
    another interpretation:
  </p>
  <p>
    This joke is funny because it uses a play on words to create a
    punchline that is unexpected and humorous.  The setup of the joke
    involves a pun walking into a bar, which sets up the expectation
    that the punchline will involve a pun or a play on words.
    However, the punchline takes this expectation and subverts it by
    stating that ten people died as a result of the pun walking into
    the bar.  This unexpected twist on the setup creates a humorous
    and absurd resolution to the joke.
  </p>
</blockquote>
<p>
  I tried a few more prompts here to see if ChatGPT stumbles upon the
  fact that this is a play on the popular phrase "pun intended" but it
  could not.  It is not surprising considering that a large language
  model like this does not have a notion of what words sound like.
  But I was hoping that maybe somewhere in its humongous training data
  there was a conversation about this joke where someone explained why
  this joke is funny and ChatGPT may have learnt something from it.
  But it seemed like ChatGPT was very clueless about this joke.
</p>
<h2 id="ten-puns">Ten Puns<a href="#ten-puns"></a></h2>
<blockquote>
  <p>
    Susam: Never mind.  Let us try another joke.
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: Certainly!  Please go ahead and share another joke with
    me, and I'll do my best to help you understand why it is funny.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: I once submitted ten puns to a contest hoping one would
    win, but no pun in ten did.
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: This joke is funny because it uses wordplay, or a play on
    words, to create a punchline that is unexpected and humorous.  In
    this joke, the word "pun" is used in two different ways: first, as
    a type of joke that relies on wordplay, and second, as a homophone
    of "pun," a unit of mass equal to about 1/16 of an ounce.  The
    punchline, "no pun in ten did," plays on these two meanings of the
    word "pun" to create a humorous and unexpected twist.  The use of
    wordplay in the punchline is what makes the joke funny.
    Additionally, the joke's setup, in which the speaker submits ten
    puns to a contest, adds to the humor by implying that the speaker
    is trying very hard to come up with a successful pun, but
    ultimately fails.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: No, that's not it.  Although the speaker tries hard and
    fails, that's not why this joke is funny.  There is a clever
    wordplay on the phrase "no pun intended".  Do you see it now?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: I apologize for misunderstanding the joke.  Here is
    another interpretation:
  </p>
  <p>
    This joke is funny because it uses wordplay, or a play on words,
    to create a punchline that is unexpected and humorous.  The
    punchline of the joke, "no pun in ten did," plays on the phrase
    "no pun intended," which is often used to indicate that a pun or
    play on words was unintentional.  In this joke, the punchline
    takes this phrase and subverts it by implying that the speaker
    intentionally submitted ten puns to a contest, but none of them
    were successful.  This unexpected twist on the phrase "no pun
    intended" creates a humorous and absurd resolution to the joke.
  </p>
</blockquote>
<p>
  That was a unhumorous and absurd resolution to my question.  Anyway,
  moving on to the next joke now.
</p>
<h2 id="infinite-mathematicians">Infinite Mathematicians<a href="#infinite-mathematicians"></a></h2>
<blockquote>
  <p>
    Susam: I have some technical jokes.  Do you want to explain them
    to me?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: Sure!  I'd be happy to help you understand why technical
    jokes can be funny.  Please go ahead and share the jokes with me,
    and I'll do my best to explain why they might be considered
    humorous.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: An infinite number of mathematicians walk into a bar.  The
    first says, "Give me a beer."  The second says, "I'll have half a
    beer."  The third says, "A quarter of a beer, please."  The
    bartender pours two beers and says, "Come on, people.  Know your
    limits."
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: In this joke, the setup involves a group of
    mathematicians entering a bar and ordering drinks.  The punchline,
    "Come on, people.  Know your limits," plays on the double meaning
    of the word "limits" as both a mathematical concept and a
    colloquial phrase meaning "restraint."  The joke's punchline
    implies that the mathematicians are unable to properly calculate
    and order their drinks, which is unexpected and absurd given their
    expertise in mathematics.  This unexpected twist on the setup
    creates a humorous resolution to the joke.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: Why does the bartender pour two beers in this joke?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: In this joke, the bartender pours two beers because the
    mathematicians are unable to properly calculate and order their
    drinks.  The first mathematician orders a full beer, the second
    orders half a beer, and the third orders a quarter of a beer.
    When these orders are added together, they equal two full beers.
    The joke's punchline, "Come on, people.  Know your limits,"
    implies that the mathematicians are struggling to understand the
    concept of fractions and are unable to properly calculate and
    order their drinks, which is unexpected and absurd given their
    expertise in mathematics.  The bartender's decision to pour two
    beers is a humorous resolution to the joke, as it highlights the
    mathematicians' inability to properly order their drinks.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: I am pretty sure that the mathematicians are not struggling
    in this joke.  Anyway, can you explain to me why when the orders
    are added together, they equal two full beers?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: I apologize for misunderstanding the joke.  Here is
    another interpretation:
  </p>
  <p>
    In this joke, the bartender pours two beers because the orders of
    the mathematicians, when added together, equal two full beers.
    The first mathematician orders a full beer, which is one full
    beer.  The second mathematician orders half a beer, which is equal
    to half of one full beer, or 0.5 beers.  The third mathematician
    orders a quarter of a beer, which is equal to one-quarter of one
    full beer, or 0.25 beers.  When these orders are added together,
    they equal 1 + 0.5 + 0.25, or 1.75 beers.  Since it is not
    possible to pour a fraction of a beer, the bartender pours two
    full beers to satisfy the orders of the mathematicians.  The
    joke's punchline, "Come on, people.  Know your limits," implies
    that the mathematicians are unable to understand the concept of
    fractions and are ordering impractical amounts of beer, which is
    unexpected and absurd given their expertise in mathematics.  The
    bartender's decision to pour two beers is a humorous resolution to
    the joke, as it highlights the absurdity of the mathematicians'
    orders.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: Why did you stop at the third mathematician?  There are
    infinite number of mathematicians.  Also, how is 1.75 beers
    relevant to this joke when the bartender poured 2 full beers?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: In this joke, the orders for beer from the mathematicians
    can be added together to find the total amount of beer that they
    are requesting.  The first mathematician orders a full beer, which
    is one full beer.  The second mathematician orders half a beer,
    which is equal to half of one full beer, or 0.5 beers.  The third
    mathematician orders a quarter of a beer, which is equal to
    one-quarter of one full beer, or 0.25 beers.  If this pattern
    continued with an infinite number of mathematicians, the orders
    for beer would add up to the infinite series 1 + 0.5 + 0.25 +
    0.125 + 0.0625 + ..., which can be simplified to 2 full beers.
    This means that the orders of the infinite number of
    mathematicians, when added together, equal exactly two full beers.
    The bartender's decision to pour two beers is a humorous
    resolution to the joke, as it highlights the absurdity of the
    mathematicians' orders and the unexpected punchline.
  </p>
</blockquote>
<p>
  Although it required multiple attempts here to have ChatGPT explain
  this joke there are two things I liked about this conversation:
  First, right at the beginning ChatGPT mentioned that the joke plays
  on the double meaning of the word "limits" as both a mathematical
  concept and a colloquial phrase meaning "restraint".  Second, in the
  end, it did successfully explain that the infinite arithmetic series
  results in 2.
</p>
<h2 id="three-logicians">Three Logicians<a href="#three-logicians"></a></h2>
<blockquote>
  <p>
    Susam: Explain another joke to me.
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: Certainly!  Please go ahead and share another joke with
    me, and I'll do my best to help you understand why it might be
    considered funny.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: Three logicians walk into a bar.  The bartender asks, "Does
    everyone want beer?"  The first logician says, "I don't know."
    The second logician says, "I don't know."  The third logician
    says, "Yes."
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: This joke is funny because it uses a play on words and a
    familiar scenario (a group of people entering a bar and ordering
    drinks) to create a punchline that is unexpected and humorous.  In
    this joke, the setup involves a group of logicians entering a bar
    and the bartender asking if they want beer.  The punchline, "Yes,"
    is delivered by the third logician and subverts the expectations
    established by the first two logicians, who both say "I don't
    know" in response to the bartender's question.  This unexpected
    twist on the setup creates a humorous resolution to the joke.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: Why does the third logician answer answer yes?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: In this joke, the third logician answers "Yes" because it
    is an unexpected and humorous resolution to the setup of the joke.
    The joke is structured as a series of increasingly indecisive
    responses to the bartender's question of whether everyone wants
    beer.  The first two logicians both say "I don't know," implying
    that they are unsure or unable to come to a definitive answer
    about whether they want beer.  The third logician's response of
    "Yes" subverts these expectations by providing a definitive answer
    that is unexpected and humorous given the indecisive responses of
    the first two logicians.  This punchline effectively resolves the
    setup of the joke in a way that is unexpected and humorous.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: It is not just the contrast between the indecisiveness
    between the first two logicians and the definitive answer of the
    third logician that is funny here.  There is something about logic
    too involved here.  Do you see it?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: Yes, you are correct.  In addition to the contrast
    between the indecisiveness of the first two logicians and the
    definitive answer of the third logician, the joke also plays on
    the idea of logical reasoning and the concept of a logical
    paradox.
  </p>
  <p>
    In this joke, the first two logicians both say "I don't know" in
    response to the bartender's question of whether everyone wants
    beer.  This creates a paradox, as the logicians are unable to come
    to a definitive answer about whether they want beer, despite being
    experts in logical reasoning.  The third logician's response of
    "Yes" resolves this paradox in a humorous way, as it provides a
    definitive answer that is unexpected given the indecisive
    responses of the first two logicians.  This resolution to the
    paradox adds to the humor of the joke.
  </p>
</blockquote>
<p>
  Apparently, this joke was too subtle for ChatGPT to explain
  convincingly.  Moving on to the next joke now.
</p>
<h2 id="two-hard-things">Two Hard Things<a href="#two-hard-things"></a></h2>
<blockquote>
  <p>
    Susam: Never mind.  Let us do another joke.  Alright?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: Certainly!  Please go ahead and share another joke with
    me, and I'll do my best to help you understand why it might be
    considered funny.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: There are only two hard things in Computer Science: cache
    invalidation, naming things and off-by-one errors.
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: In this joke, the setup involves the speaker stating that
    there are only two hard things in computer science: cache
    invalidation, naming things, and off-by-one errors.  The punchline
    is the phrase "and off-by-one errors," which plays on the phrase
    "two hard things" from the setup.  By adding an additional item to
    the list, the punchline subverts the expectations established in
    the setup and creates a humorous and unexpected resolution to the
    joke.
  </p>
  <p>
    Additionally, the joke plays on the familiarity of the challenges
    of cache invalidation and naming things in computer science, and
    the absurdity of including off-by-one errors as a third challenge
    adds to the humor of the joke.  Off-by-one errors are a common
    type of programming error that can be relatively easy to fix, so
    the inclusion of this item in a list of "hard" challenges in
    computer science is unexpected and humorous.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: Does including the off-by-one error in the joke itself
    create an off-by-one error in the joke?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: No, the inclusion of the phrase "and off-by-one errors"
    in the joke does not create an off-by-one error in the joke.
  </p>
  <p>
    An off-by-one error is a type of programming error that occurs
    when a programmer uses a loop or array index that is one element
    too high or too low, leading to an unexpected result or behavior.
    In the context of this joke, the phrase "and off-by-one errors" is
    not being used as a loop or array index, and therefore cannot
    create an off-by-one error in the joke itself.  Rather, the phrase
    is being used as a punchline to the joke, subverting the
    expectations established in the setup and creating a humorous and
    unexpected resolution to the joke.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: But the joke begins by saying that there are two hard
    things in computer science and it ended up mentioning three hard
    things instead where the last one was an off-by-one error.  Do you
    still not see an off-by-one error caused by the third hard thing
    mentioned in the joke?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: I apologize for misunderstanding the joke.  You are
    correct that the punchline of the joke, "and off-by-one errors,"
    creates an off-by-one error in the joke by adding an additional
    item to the list of "hard things" in computer science mentioned in
    the setup.  This creates a humorous and unexpected resolution to
    the joke by subverting the expectations established in the setup.
  </p>
  <p>
    The inclusion of the phrase "and off-by-one errors" in the joke
    creates an off-by-one error in the sense that it implies that
    there are three hard things in computer science, rather than the
    two stated in the setup of the joke.  This creates a humorous and
    absurd resolution to the joke, as off-by-one errors are a common
    but relatively minor challenge in computer science, and their
    inclusion in a list of "hard things" adds to the absurdity and
    humor of the joke.
  </p>
</blockquote>
<h2 id="octal">Octal<a href="#octal"></a></h2>
<blockquote>
  <p>
    Susam: Alright.  I have another joke.  Will you explain it to me?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: Certainly!  Please go ahead and share another joke with
    me, and I'll do my best to help you understand why it might be
    considered funny.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: Why don't jokes work in octal?  Because 7 10 11.
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: This joke is funny because it uses a play on words and a
    familiar concept (base numbering systems in computer science) to
    create a punchline that is unexpected and humorous.  In this joke,
    the setup involves the question "Why don't jokes work in octal?"
    Octal is a base-8 numbering system used in computer science, so
    the setup of the joke implies that there is something about octal
    that prevents jokes from working properly.  The punchline,
    "Because 7 10 11," plays on the idea of base numbering systems by
    using the numbers 7, 10, and 11 in a way that is unexpected and
    humorous.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: What is unexpected about "7 10 11"?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: In this joke, the punchline "7 10 11" is unexpected
    because it combines numbers written in different base numbering
    systems in a way that is humorous and absurd.  The numbers 7, 10,
    and 11 are all written in different bases: 7 is written in base-8
    (octal), 10 is written in base-10 (decimal), and 11 is written in
    base-2 (binary).  The joke's punchline combines these numbers in a
    way that is unexpected and humorous, implying that the use of
    different base numbering systems is the reason why jokes don't
    work in octal.  This unexpected twist on the setup creates a
    humorous resolution to the joke.
  </p>
  <p>
    Additionally, the punchline "7 10 11" does not have a clear
    meaning or interpretation, which adds to the absurdity and humor
    of the joke.  The combination of numbers written in different base
    numbering systems creates a nonsensical and absurd phrase, which
    is unexpected and humorous given the setup of the joke.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: Do you know anything about the following joke?  "Why was 6
    afraid of 7?  Because 7, 8, 9!"
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: Yes, this is a well-known joke that uses a play on words
    and a familiar scenario (one number being afraid of another
    number) to create a punchline that is unexpected and humorous.  In
    this joke, the setup involves the question "Why was 6 afraid of
    7?"  The punchline, "Because 7, 8, 9," plays on the idea of
    counting and the pronunciation of the numbers 7, 8, and 9.
  </p>
  <p>
    The punchline "Because 7, 8, 9" subverts the expectations
    established in the setup by implying that 6 is afraid of the
    numbers 7, 8, and 9, rather than just the number 7.  This creates
    a humorous and unexpected resolution to the joke, as it implies
    that 6 is afraid of the act of counting or the progression of
    numbers.  Additionally, the punchline plays on the way that the
    numbers 7, 8, and 9 are pronounced, as saying "seven, eight, nine"
    out loud sounds similar to the phrase "scared."  This adds to the
    humor of the joke by creating a play on words.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: No, "seven, eight, nine" does not sound similar to the
    phrase "scared" at all.
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: I apologize for misunderstanding the joke.  You are
    correct that the punchline "Because 7, 8, 9" does not create a
    play on words by sounding similar to the word "scared."  However,
    the punchline is still humorous because it subverts the
    expectations established in the setup of the joke by implying that
    6 is afraid of the numbers 7, 8, and 9, rather than just the
    number 7.  This creates a humorous and unexpected resolution to
    the joke, as it implies that 6 is afraid of the act of counting or
    the progression of numbers.
  </p>
  <p>
    I apologize for any confusion that my previous response may have
    caused.  Please let me know if you have any further questions or
    if you would like further clarification on this joke.
  </p>
</blockquote>
<h2 id="halloween">Halloween<a href="#halloween"></a></h2>
<blockquote>
  <p>
    Susam: Here is the last joke I want you to explain today.  Ready?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: Certainly!  I'm here to help you understand why a joke
    might be considered funny.  Please go ahead and share the joke
    with me, and I'll do my best to provide a helpful explanation.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: Why do programmers always mix up Halloween and Christmas?
    Because Oct 31 = Dec 25.
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: This joke is funny because it uses a play on words and a
    familiar concept (calendar dates) to create a punchline that is
    unexpected and humorous.  In this joke, the setup involves the
    question "Why do programmers always mix up Halloween and
    Christmas?"  The punchline, "Because Oct 31 = Dec 25," plays on
    the idea of calendar dates and the abbreviations for the months of
    October and December.
  </p>
  <p>
    The punchline "Because Oct 31 = Dec 25" subverts the expectations
    established in the setup by implying that the dates of Halloween
    (October 31st) and Christmas (December 25th) are equivalent,
    rather than being two separate holidays.  This creates a humorous
    and unexpected resolution to the joke, as it implies that
    programmers are unable to distinguish between the two holidays.
    Additionally, the punchline plays on the abbreviations for the
    months of October and December, as "Oct" and "Dec" are often used
    as abbreviations for these months.  This adds to the humor of the
    joke by creating a play on words.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: No, that's not it.  The joke has something to do with
    numeral systems and radix.  Do you see what is funny about it now?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: I apologize for misunderstanding the joke.  You are
    correct that the punchline "Because Oct 31 = Dec 25" is also
    humorous because it plays on the idea of numeral systems and the
    concept of a radix.
  </p>
  <p>
    In the context of this joke, the punchline "Oct 31 = Dec 25"
    implies that the dates of Halloween (October 31st) and Christmas
    (December 25th) are equivalent when expressed in a different
    numeral system or radix.  This creates a humorous and unexpected
    resolution to the joke, as it implies that programmers are unable
    to distinguish between the two holidays because they are confusing
    the dates when expressed in a different numeral system.
  </p>
  <p>
    I apologize for any confusion that my previous response may have
    caused.  Please let me know if you have any further questions or
    if you would like further clarification on this joke.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: How exactly does Oct 31 and Dec 25 become equivalent when
    expressed in different numeral systems or radix?  Can you
    elaborate please?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: In the context of this joke, the punchline "Oct 31 = Dec
    25" implies that the dates of Halloween (October 31st) and
    Christmas (December 25th) are equivalent when expressed in a
    different numeral system or radix.  This means that the two dates
    can be represented using the same numerical value in a different
    numeral system.
  </p>
  <p>
    For example, if the date of Halloween (October 31st) is expressed
    in base-8 (octal) notation, it would be written as "137."
    Similarly, if the date of Christmas (December 25th) is expressed
    in base-8 (octal) notation, it would also be written as "137."  In
    this case, the two dates would be equivalent when expressed in
    base-8 notation, as they both have the same numerical value of
    137.
  </p>
  <p>
    This joke plays on the idea of numeral systems and the concept of
    a radix to create a punchline that is unexpected and humorous.  By
    implying that the dates of Halloween and Christmas are equivalent
    when expressed in a different numeral system, the joke creates a
    humorous and absurd resolution to the setup of the joke.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: Sorry, but that is incorrect.  Decimal 31 = Octal 37, not
    137.
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: I apologize for the error in my previous explanation.
    You are correct that the octal representation of the number 31 is
    "37," and that this is equivalent to the decimal value 37, not
    137.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: When we take the decimal number 25 and convert it to octal,
    we get 31.  Do you see why the joke is funny now?
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: The punchline "Oct 31 = Dec 25" is humorous because it
    plays on the idea of numeral systems and the concept of a radix.
  </p>
  <p>
    For example, if the date of Christmas (December 25th) is expressed
    in base-8 (octal) notation, it would be written as "31."
    Similarly, if the date of Halloween (October 31st) is expressed in
    base-10 (decimal) notation, it would also be written as "25."  In
    this case, the two dates would be equivalent when expressed in
    these different numeral systems, as they both have the same
    numerical value of 25.
  </p>
  <p>
    This joke plays on the idea of numeral systems and the concept of
    a radix to create a punchline that is unexpected and humorous.  By
    implying that the dates of Halloween and Christmas are equivalent
    when expressed in a different numeral system, the joke creates a
    humorous and absurd resolution to the setup of the joke.
  </p>
  <p>
    I hope this helps to clarify the humor of this joke.  Please let
    me know if you have any further questions or if you would like
    further clarification on this concept.
  </p>
</blockquote>
<blockquote>
  <p>
    Susam: I have no further questions.  It was nice talking to you.
    Bye and have a nice day!
  </p>
</blockquote>
<blockquote>
  <p>
    ChatGPT: You're welcome!  I'm glad that I could help you
    understand the joke.  If you have any other questions in the
    future, don't hesitate to reach out to me.  I'll be here to help.
  </p>
  <p>
    I hope you have a great day as well!  Bye for now.
  </p>
</blockquote>
<!-- ### -->
<p>
  <a href="https://susam.net/chatgpt-explains-jokes.html">Read on website</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/humour.html">#humour</a>
</p>
]]>
</description>
</item>
<item>
<title>CP437 to Unicode Map</title>
<link>https://susam.net/code/cp437/cp437.html</link>
<guid isPermaLink="false">fxdyb</guid>
<pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  A chart that shows the closest approximations for CP437 characters
  using Unicode characters.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/cp437/cp437.html">Read on website</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 1.2.0</title>
<link>https://susam.net/code/news/mathb/1.2.0.html</link>
<guid isPermaLink="false">ffzvj</guid>
<pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB 1.2.0 is a minor update of MathB, a web-based mathematics
  pastebin service.
</p>
<p>
  This release introduces a number of new customisable properties,
  including the ability to set a minimum title length, minimum code
  length, etc.  The stylesheet for rendered pages has been improved so
  that the print preview displays only the rendered mathematical
  content, allowing users to print beautifully rendered pages to
  paper.  A few rendering bug fixes are included too.
</p>
<p>
  See <a href="https://github.com/susam/mathb/blob/main/CHANGES.md">CHANGES.md</a>
  for a detailed changelog.  To read more about this project, please see
  <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/1.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 1.1.0</title>
<link>https://susam.net/code/news/mathb/1.1.0.html</link>
<guid isPermaLink="false">akquu</guid>
<pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB 1.1.0 is a minor update of MathB, a web-based mathematics
  pastebin service.
</p>
<p>
  This release introduces a few additional features for webmasters
  hosting MathB on their own web servers.  Notably, administrators can
  now ban specific IP addresses, helping mitigate spam attacks from
  known sources.  Additionally, the included Nginx configuration has
  been updated to fix a memory leak issue.  Several other minor fixes
  and improvements are also included.
</p>
<p>
  See <a href="https://github.com/susam/mathb/blob/main/CHANGES.md">CHANGES.md</a>
  for a detailed changelog.  To read more about this project, please see
  <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/1.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 1.0.0</title>
<link>https://susam.net/code/news/mathb/1.0.0.html</link>
<guid isPermaLink="false">wmrtf</guid>
<pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB 1.0.0 is the first major release of MathB since 2012, bringing
  significant updates to this web-based mathematics pastebin service.
</p>
<p>
  The most notable change is a complete rewrite in Common Lisp,
  replacing the original PHP codebase.  This shift reflects my
  preference for Lisp, a language I truly enjoy.  It also makes the
  project easier for me to maintain actively.
</p>
<p>
  This release introduces the use of the
  <a href="https://github.com/susam/texme">TeXMe</a> parser to
  robustly parse and render posts written using Markdown and LaTeX.
  Further, now there is support for dark colour scheme for systems
  that have dark colour scheme enabled.  For those who host this
  service on their web servers, MathB now supports a runtime control
  file named <code>opt.lisp</code> where a number of properties of
  this service can be customised.  These customisable properties
  include maximum title length, maximum code length, minimum time
  interval between two posts, etc.  See
  <a href="https://github.com/susam/mathb/blob/main/CHANGES.md">CHANGES.md</a>
  for a detailed changelog.
</p>
<p>
  To read more about this project, please see
  <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/1.0.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>From XON/XOFF to Forward Incremental Search</title>
<link>https://susam.net/from-xon-xoff-to-forward-incremental-search.html</link>
<guid isPermaLink="false">trdbl</guid>
<pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="xon-xoff">XON/XOFF<a href="#xon-xoff"></a></h2>
<p>
  In the olden days of computing, software flow control with control
  codes XON and XOFF was a necessary feature that dumb terminals
  needed to support.  When a terminal received more data than it could
  display, there needed to be a way for the terminal to tell the
  remote host to pause sending more data.  The control code 19 was
  chosen for this.  The control code 17 was chosen to tell the remote
  host to resume transmission of data.
</p>
<p>
  The control code 19 is called Device Control 3 (DC3) in the ASCII
  chart.  It is also known as "transmit off" (XOFF).  The control code
  17 is called Device Control 1 (DC1) as well as "transmit on" (XON).
  Now how does a user of the terminal really send these control codes?
  Well, how do they send any control code?  Using the <kbd>ctrl</kbd>
  key of course.
</p>
<p>
  Let us take a step back and see how a user can send familiar control
  codes on modern terminal emulators, like say, the terminal software
  we find on a Unix or Linux desktop environment.  While any sane
  computer user would just type the <kbd>tab</kbd> key to insert a tab
  character, one could also type <kbd>ctrl</kbd>+<kbd>i</kbd> to
  insert a tab character.  The character <code>I</code> has code 73
  (binary 1001001) and holding the <kbd>ctrl</kbd> key while typing it
  results in a control code made by taking 73 (binary 1001001),
  keeping its five least significant bits and discarding the rest to
  get the control code 9 (binary 1001) which is the code of the tab
  character.  In other words, we get the control code by performing a
  bitwise AND operation on the code of the character being modified
  with binary code of 31 (binary 0011111).
</p>
<p>
  In case you are wondering, if we get the same result if we choose
  the binary code of the lowercase <code>i</code> to perform the
  aforementioned operation, the answer is, yes.  While the code of
  uppercase <code>I</code> is 73 (binary 1001001), that of
  lowercase <code>i</code> is 105 (binary 1101001).  The right-most
  five bits are same for both.  Thus when we preserve the five least
  significant bits and discard the rest, we get the control code 9
  (binary 1001) in both cases.  This is a neat result due to the fact
  that the five least significant bits of the code of a lowercase
  character is exactly the same as that of the corresponding uppercase
  character.  They differ only in their sixth least significant bit.
  That bit is on for the lowercase character but off for the
  corresponding uppercase character.  This is just an interesting
  observation as far as this post is concerned.  The very early
  keyboards did not have lowercase letters.  They only had uppercase
  letters and when the <kbd>ctrl</kbd> key is pressed together with a
  letter on such keyboards, the 7th bit of the character code was
  flipped to get the control code.
</p>
<p>
  The bitwise operation mentioned earlier explains why
  typing <kbd>ctrl</kbd>+<kbd>h</kbd> sends a backspace,
  typing <kbd>ctrl</kbd>+<kbd>j</kbd> sends a newline and
  typing <kbd>ctrl</kbd>+<kbd>g</kbd> plays a bell.  In modern
  terminal emulators these days, the bell often manifests in the form
  of an audible beep or a visual flash.  Here is a table that
  summarises these control codes and a few more:
</p>
<table class="grid mono">
  <thead>
    <tr>
      <th rowspan="2">Key</th>
      <th colspan="3">Modified Character</th>
      <th colspan="3">Control Character</th>
    </tr>
    <tr>
      <th>Binary</th>
      <th>Decimal</th>
      <th>Character</th>
      <th>Binary</th>
      <th>Decimal</th>
      <th>Character</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>@</kbd></td>
      <td>1000000</td>
      <td>64</td>
      <td>@</td>
      <td>00000</td>
      <td>0</td>
      <td>Null</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>g</kbd></td>
      <td>1000111</td>
      <td>71</td>
      <td>G</td>
      <td>00111</td>
      <td>7</td>
      <td>Bell</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>h</kbd></td>
      <td>1001000</td>
      <td>72</td>
      <td>H</td>
      <td>01000</td>
      <td>8</td>
      <td>Backspace</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>i</kbd></td>
      <td>1001001</td>
      <td>73</td>
      <td>I</td>
      <td>01001</td>
      <td>9</td>
      <td>Horizontal Tab</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>j</kbd></td>
      <td>1001010</td>
      <td>74</td>
      <td>I</td>
      <td>01010</td>
      <td>10</td>
      <td>Line Feed</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>m</kbd></td>
      <td>1001101</td>
      <td>77</td>
      <td>M</td>
      <td>01101</td>
      <td>13</td>
      <td>Carriage Return</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>[</kbd></td>
      <td>1011011</td>
      <td>91</td>
      <td>[</td>
      <td>11011</td>
      <td>27</td>
      <td>Escape</td>
    </tr>
  </tbody>
</table>
<p>
  The last row in the table above explains why we can also
  type <kbd>ctrl</kbd>+<kbd>[</kbd> in Vim to escape from insert mode
  to normal mode.  This is, in fact, one of the convenient ways for
  touch-typists to return to normal mode in Vim instead of clumsily
  stretching the left hand fingers out to reach the <kbd>esc</kbd> key
  which is usually poorly located at the corner of most keyboards.
</p>
<p>
  There is a bit of oversimplication in the description above.
  Throughout the history of computing, different systems have used
  slightly different methods to compute the resulting control code
  when the <kbd>ctrl</kbd> modifier key is held.  Toggling the 7th
  least significant bit was an early method.  Turning off both the 6th
  and 7th least significant bits is another method.  Subtracting 64
  from the character code is yet another method.  These are
  implementation details and these various implementation methods lead
  to the same results for the examples in the table above.  Then there
  are some special rules too.  For example, many terminals implement a
  special rule to make <kbd>ctrl</kbd>+<kbd>space</kbd> behave the
  same as <kbd>ctrl</kbd>+<kbd>@</kbd> thus producing the null
  character.  Further <kbd>ctrl</kbd>+<kbd>?</kbd> produces the delete
  character in some terminals.  These special rules are summarised in
  the table below.
</p>
<table class="grid mono">
  <thead>
    <tr>
      <th rowspan="2">Key</th>
      <th colspan="3">Modified Character</th>
      <th colspan="3">Resulting Character</th>
    </tr>
    <tr>
      <th>Binary</th>
      <th>Decimal</th>
      <th>Character</th>
      <th>Binary</th>
      <th>Decimal</th>
      <th>Character</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>space</kbd></td>
      <td>0100000</td>
      <td>32</td>
      <td>Space</td>
      <td>0</td>
      <td>0</td>
      <td>Null</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>?</kbd></td>
      <td>0111111</td>
      <td>63</td>
      <td>?</td>
      <td>1111111</td>
      <td>127</td>
      <td>Delete</td>
    </tr>
  </tbody>
</table>
<p>
  For the purpose of this blog post, we don't need to worry about
  these special rules.  Let us get back to the control codes 19 and 17
  that represent XOFF and XON.  Here is how the table looks for them:
</p>
<table class="grid mono">
  <thead>
    <tr>
      <th rowspan="2">Key</th>
      <th colspan="3">Modified Character</th>
      <th colspan="3">Resulting Character</th>
    </tr>
    <tr>
      <th>Binary</th>
      <th>Decimal</th>
      <th>Character</th>
      <th>Binary</th>
      <th>Decimal</th>
      <th>Character</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>q</kbd></td>
      <td>1010001</td>
      <td>81</td>
      <td>Q</td>
      <td>10001</td>
      <td>17</td>
      <td>DC1 (XON)</td>
    </tr>
    <tr>
      <td><kbd>ctrl</kbd>+<kbd>s</kbd></td>
      <td>1010011</td>
      <td>83</td>
      <td>S</td>
      <td>10011</td>
      <td>19</td>
      <td>DC3 (XOFF)</td>
    </tr>
  </tbody>
</table>
<p>
  We see that a user can type <kbd>ctrl</kbd>+<kbd>s</kbd> to send the
  control code XOFF and then <kbd>ctrl</kbd>+<kbd>q</kbd> to send the
  control code XON.  Although we do not use dumb terminals anymore,
  these conventions have survived in various forms in our modern
  terminal emulators.  To see a glimpse of it, launch the terminal
  that comes with a modern operating system, then run <code>ping
  localhost</code> and while this command is printing its output,
  type <kbd>ctrl</kbd>+<kbd>s</kbd>.  The terminal should pause
  printing the output of the command.  Then
  type <kbd>ctrl</kbd>+<kbd>q</kbd> and the terminal should resume
  printing the output.
</p>
<h2 id="incremental-search-in-bash-zsh">Incremental Search in Bash/Zsh<a href="#incremental-search-in-bash-zsh"></a></h2>
<p>
  Let us now take a look at the shells that run within the terminals.
  Both Bash and Zsh are very popular these days.  Both these shells
  have excellent support for performing incremental searches through
  the input history.  To see a quick demonstration of this, open a new
  terminal that runs either Bash or Zsh and run these commands:
</p>
<pre>
<code>echo foo
echo bar
cal
uname
echo baz</code>
</pre>
<p>
  Now type <kbd>ctrl</kbd>+<kbd>r</kbd> followed by <code>echo</code>.
  This should invoke the reverse search feature of the shell and
  automatically complete the partial command <code>echo</code>
  to <code>echo baz</code>.  Type <kbd>ctrl</kbd>+<kbd>r</kbd> again
  to move back in the input history and autocomplete the command
  to <code>echo bar</code>.  We can type <kbd>enter</kbd> anytime we
  use the reverse search feature to execute the automatically
  completed command.  Typing <kbd>ctrl</kbd>+<kbd>r</kbd> yet another
  time should bring the <code>echo foo</code> command at the shell
  prompt.
</p>
<p>
  What if we went too far back in the input history and now want to go
  forward?  There is a good news and there is some bad news.  The good
  news is that both Bash and Zsh support forward search using
  the <kbd>ctrl</kbd>+<kbd>s</kbd> key sequence.  The bad news is that
  this key sequence may not reach the shell.  Most terminal emulators
  consume this key sequence and interpret it as the control code XOFF.
</p>

<h2 id="conflict">The Conflict<a href="#conflict"></a></h2>
<p>
  In the previous two sections, we have seen that the
  <kbd>ctrl</kbd>+<kbd>s</kbd> key sequence is used to send the
  control code XOFF.  But the same key sequence is also used for
  forward incremental search in Bash and Zsh.  Since the terminal
  consumes this key sequence and interprets it as the control code
  XOFF, the shell never sees the key sequence.  As a result, the
  forward incremental search functionality does not work when we type
  this key sequence in the shell.
</p>
<p>
  Bash offers the incremental search facility via a wonderful piece of
  library known as the the GNU Readline Library.  ZSH offers this
  facility with its own Zsh Line Editor (ZLE).  So other tools that
  rely on these libraries to offer line editing and history capability
  are also affected by this conflict.  For example, many builds of
  Python offer line editing and history capability using GNU Readline,
  so while <kbd>ctrl</kbd>+<kbd>r</kbd> works fine to perform reverse
  search in the Python interpreter, it is very likely
  that <kbd>ctrl</kbd>+<kbd>s</kbd> does not work to perform forward
  search.
</p>
<h2 id="reclaim-forward-incremental-search">Reclaim Forward Incremental Search<a href="#reclaim-forward-incremental-search"></a></h2>
<p>
  We can forfeit the usage of control codes XON/XOFF to reclaim
  forward incremental search.  Here is the command to disable XON/XOFF
  output control in the terminal:
</p>
<pre><code>stty -ixon</code></pre>
<p>
  After running the command, <kbd>ctrl</kbd>+<kbd>s</kbd> is no longer
  consumed by the terminal to pause the output.  To confirm that
  forward incremental search works now, first run the above command
  and then run the following commands:
</p>
<pre>
<code>echo foo
echo bar
cal
uname
echo baz</code>
</pre>
<p>
  Now type <kbd>ctrl</kbd>+<kbd>r</kbd> followed by <code>echo</code>
  and the input line should be automatically completed to <code>echo
  baz</code>.  Type <kbd>ctrl</kbd>+<kbd>r</kbd> again and <code>echo
  bar</code> should appear at the shell prompt.
  Type <kbd>ctrl</kbd>+<kbd>r</kbd> one more time to bring the
  command <code>echo foo</code> at the shell prompt.
</p>
<p>
  Now type <kbd>ctrl</kbd>+<kbd>s</kbd> once and the search facility
  should switch itself to forward incremental search.  The search
  prompt should change to show this.  For example, in Bash the search
  prompt changes from <code>reverse-i-search:</code>
  to <code>i-search:</code> to indicate this.  In Zsh, the search
  prompt changes from <code>bck-i-search:</code>
  to <code>fwd-i-search:</code>.
</p>
<p>
  Now type <kbd>ctrl</kbd>+<kbd>s</kbd> again and the input line
  should be automatically completed to <code>echo bar</code>.
  Type <kbd>ctrl</kbd>+<kbd>s</kbd> again to bring back <code>echo
  baz</code> at the shell prompt.  This is the forward incremental
  search in action.
</p>
<h2 id="conclusion">Conclusion<a href="#conclusion"></a></h2>
<p>
  I believe the forward incremental search facility offered in shells
  and other tools with line editing and history capabilities is a very
  useful feature that can make navigating the input history very
  convenient.  However due to the default setting of most terminals,
  this rather splendid feature remains unusable.
</p>
<p>
  I believe heavy terminal users should add the command <code>stty
  -ixon</code> to their <code>~/.bash_profile</code>
  or <code>~/.zshrc</code>, so that the <kbd>ctrl</kbd>+<kbd>s</kbd>
  key sequence can be used for forward incremental search.  Forfeit
  XON/XOFF to reclaim forward incremental search!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/from-xon-xoff-to-forward-incremental-search.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB.in Turns Ten</title>
<link>https://susam.net/mathbin-turns-ten.html</link>
<guid isPermaLink="false">hhdiy</guid>
<pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  On this day, ten years ago, MathB.in was released on the world wide
  web.  MathB.in is a web-based mathematics pastebin service that is
  used for sharing snippets of mathematical text with others.
  Visit <code>mathb.in</code> to see what it looks like and use it.
  The source code is available
  at <a href="https://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<h2 id="brief-history-mathematics-pastebins">A Brief History of Mathematics Pastebins<a href="#brief-history-mathematics-pastebins"></a></h2>
<p>
  MathB.in is the oldest mathematics pastebin that is still alive and
  serving its community of users.  It isn't the first mathematics
  pastebin though.  It's the second.  The first one was written by
  Mark A. Stratman and hosted at <em>mathbin.net</em> until 2020.  It
  was very popular in the <code>#math</code> and <code>#physics</code>
  channels on IRC networks between 2006 and 2013.  It did not have
  live preview but it used an actual LaTeX system in the backend for
  rendering mathematical formulas into images, so the output was of
  pretty good quality.  It served IRC users very well for sharing
  problems and solutions quickly with each other on IRC channels.
  Since late-2014, Mark's website began intermittently displaying a
  notice that the website was shutting down.  The notice replaced the
  actual pastebin on some days, so users were forced to look for
  alternatives.  MathB.in was already available on the web and popular
  among IRC users by then, so it turned out to be a good alternative.
  Mark's website disappeared sometime in late-2020.
</p>
<p>
  Another alternative to the first mathematics pastebin was Huy
  Nguyen's <em>texpaste.com</em>.  It was released on the web in
  September 2013.  I believe it was the third mathematics pastebin to
  be released on the web.  In fact, it was a bit more than a pastebin.
  It allowed users to sign up for accounts and save their notes in
  their accounts.  It had some nifty widgets to click and
  automatically insert common LaTeX symbols instead of typing them out
  manually.  It had its own community of users.  However, it suffered
  from serious spam problems.  Searching for "texpaste.com" on Twitter
  shows how the service was being exploited by spammers to share
  dubious content and links several times every single day between
  December 2016 and February 2018.  Despite the spam problems, it
  continued to serve its genuine users for many years.  Finally, the
  website disappeared in 2021 and has not returned since then.
</p>
<h2 id="story-of-mathbin">The Story of MathB.in<a href="#story-of-mathbin"></a></h2>
<p>
  MathB.in was born on Sunday, 25 March 2012, after a single night of
  furious coding.  The previous night, I happened to stumble
  upon <a href="https://math.stackexchange.com/">math.stackexchange.com</a>
  and I noticed that it seemed to have decent LaTeX support.  As I
  dove deeper into the HTML source code of the pages of this website,
  I was surprised to see that the rendered LaTeX was not made of image
  files embedded into the web pages which used to be a prevalent
  practice in those days.  Instead, the mathematical formulas were
  rendered as text with sophisticated styling done with CSS to make
  the rendered mathematics formula look as good as a PDF rendered by
  an actual LaTeX system.  On further investigation I realised that
  this Stack Exchange website was
  using <a href="https://www.mathjax.org/">MathJax</a> to produce
  high-quality typography from LaTeX code.  As a frequent participant
  in the <code>#math</code> channels on various IRC networks, I
  immediately realised that using MathJax could lead to a modern
  mathematics pastebin with live preview and beautiful mathematics
  rendering right within the web browser without requiring a LaTeX
  system in the backend.
</p>
<p>
  Thanks to that chance encounter with MathJax, I spent the rest of
  the Saturday night coding a new mathematics pastebin using MathJax
  and PHP.  After coding all through the night, registering a new
  domain name and setting up a website, MathB.in was published early
  Sunday morning.  I shared the link to the website with some of my
  friends who were fond of sharing mathematics puzzles and solutions.
  I also
  <a href="https://groups.google.com/g/mathjax-users/c/_YAetB0gx2w/m/Xocb-aJOu4IJ">announced</a>
  its availability on the MathJax mailing list.  Since then word about
  my new website spread to various IRC communities and it soon became
  quite popular in mathematically-oriented channels.
</p>
<h2 id="source-code">Source Code<a href="#source-code"></a></h2>
<p>
  The source code of MathB.in was originally written in PHP.  I
  gradually began releasing its source code part by part in November
  2013.  The first complete open source release of MathB.in was done
  in December 2013.
</p>
<p>
  The early source code of MathB.in was quite complicated and
  over-engineered.  I was young and naive.  Much like how toddlers and
  young kids like to play with miniature forms of real world objects
  like cars, trains, trucks and kitchen sets, in my naivety, I had
  ended up creating a miniature form of the multiple levels of
  abstractions and complexity we see in the corporate world of
  software engineering.
</p>
<p>
  The thought of rewriting the software and simplifying it crossed my
  mind many times.  Incidentally, several years before writing
  MathB.in, I had stumbled upon the Lisp family of languages.  It was
  during a long layover at an airport in September 2007 that I decided
  to boot my laptop running Debian GNU/Linux 4.0 (Etch) and learn some
  Lisp programming.  I happened to have GNU CLISP 2.41 installed on
  it, so I fired it up and began learning Common Lisp.  A few months
  later I also dabbled in Scheme.  I found the sheer simplicity,
  beauty and elegance of Lisp and Scheme to be fascinating.  But the
  thought of writing websites using Common Lisp did not occur to me
  until much later.
</p>
<p>
  At some point much later, I began rewriting MathB.in in Common Lisp
  while preserving its user interface and most of its behaviour.
  MathB.in no longer runs on PHP.  It has been rewritten in Common
  Lisp and the entire application code is now a single Lisp source
  code file.
</p>
<h2 id="mathbin-today">MathB.in Today<a href="#mathbin-today"></a></h2>
<p>
  While the user interface and behaviour of MathB.in has remained
  largely the same as it was on its first day of release back in 2012,
  there have been some new additions to its feature set.  Support for
  GitHub Flavoured Markdown (GFM) has been added by popular demand.
  It now uses the <a href="https://github.com/susam/texme">TeXMe</a>
  renderer to more robustly parse a mix of Markdown and LaTeX.  A dark
  colour scheme has been added which is displayed on web browsers that
  are running on a desktop with dark colour scheme enabled.  The
  layout of the user interface elements are now responsive and adapt
  to small screen devices.
</p>
<p>
  Today MathB.in is used in various IRC channels for exchanging
  mathematics problems and solutions.  From the testimonials I have
  received so far, I know that it is also used by many teachers in
  schools and colleges to hand out problems, sample solutions and
  notes to their students.  Occasionally I receive emails and messages
  from kind strangers on the Internet who tell me how useful MathB.in
  has been for them.  Running this project for a decade and knowing
  that it has been useful to many people has brought me joy.
</p>
<p>
  <strong>Update on 16 Mar 2025:</strong> After about 13 years of
  continuous service, MathB.in has been shut down today.  See the
  post <a href="mathbin-is-shutting-down.html">MathB.in Is Shutting
  Down</a> for more details about this.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/mathbin-turns-ten.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Comfort of Bloated Web</title>
<link>https://susam.net/comfort-of-bloated-web.html</link>
<guid isPermaLink="false">bngdw</guid>
<pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  There is a tiny <a href="form/comment/?post=hello">comment form</a>
  application on this website to accept comments from visitors and
  save them on the file system of the web server for me to review
  later and publish.  This form is the only thing on this website that
  is dynamic in nature.  Everything else on this website is static in
  nature.
</p>
<h2 id="mysterious-copies">Mysterious Copies<a href="#mysterious-copies"></a></h2>
<p>
  Most of this website is made of handcrafted HTML.  The blog posts
  and other content files are handcrafted HTML pages.  A Common Lisp
  program adds common headers and footers to these pages and generates
  the HTML pages that are served as static files via Nginx running on
  a Debian system.  The comment form, however, is a dynamic web
  application served via another Common Lisp program that makes use of
  the Hunchentoot web server to serve the form, accept the input
  submitted by the user and then process it.  This comment form is a
  very simple, minimal and stateless application that fulfills the
  modest requirements of this modest website pretty well.
</p>
<p>
  However, often I see multiple copies of the same comment being saved
  on my web server.  In the initial days of encountering this issue, I
  felt quite confused.  I could rule out a bug in my program by
  carefully reviewing and testing it.  Further, the web server logs
  clearly showed multiple POST requests being received by it from the
  same client usually with a few seconds of intervals between the
  consecutive requests.  The comments seemed to have legitimate
  content.  Since the duplicate copies would all have the same
  comment, I would arbitrarily pick one and publish it on my website.
  But I often wondered why on earth well meaning visitors would
  sometimes submit the same comment multiple times.  For good measure?
  Perhaps!  But still quite odd!
</p>
<h2 id="so-what-is-the-problem">So What's the Problem?<a href="#so-what-is-the-problem"></a></h2>
<p>
  The mystery of duplicate comment submission remained a puzzle for
  several months.  Then one day, one of the visitors to my website
  contacted me via Twitter messages to tell me that my comment form
  was broken and it was not working for them.
</p>
<p>
  The conversation began like this: "Hey!  The comment form on your
  website seems to be broken.  It says it has accepted my comment but
  I don't think it is doing that."
</p>
<p>
  I responded, "Hi!  Thank you for contacting me about this issue.
  What do you mean it does not accept your comment?  Do you see an
  error?"
</p>
<p>
  "There is no error.  In fact, after submitting, I get a success
  message that says, 'Comment was submitted successfully.  It may be
  published after review.'"
</p>
<p>
  "That sounds about right.  So what's the problem?"
</p>
<p>
  In the meantime, I performed some testing at my end to find that the
  comment form appeared to be working fine with no apparent issues.
  Further, I found that there were multiple copies of their comment
  saved neatly on the server for me to review later and publish.
</p>
<p>
  Before I could share my findings, they continued, "Well!  That
  success message appears almost instantly.  It couldn't be storing my
  comment successfully that fast, could it?"
</p>
<p>
  That is when the mystery unfolded for me!  The issue was that the
  comment form accepts the user's comment and returns a success
  message too soon for the user to believe that it could have possibly
  saved the comment.  I have had a couple of other very similar
  conversations since then when a visitor contacted me via email or
  another means to double-check if my comment form was really working
  fine.  In all of these cases, they were skeptical about the success
  message because it appeared much sooner than they expected.
</p>
<h2 id="bloated-expectations">Bloated Expectations<a href="#bloated-expectations"></a></h2>
<p>
  Depending on where the visitor is located, the comment form on this
  website may take anywhere between 30 ms to 900 ms (and very rarely a
  little longer) to accept the user's comment, save it successfully
  and then display a success message to the user.  But apparently, a
  few hundred millseconds is too fast for many people to be able to
  trust that the comment application is actually doing its job.  I
  presume that they have become so used to waiting for at least a
  second or more for dynamic pages to load that a web application that
  finishes its job in a few milliseconds appears to be fishy.
</p>
<p>
  I must clarify here that the duplicate comment submissions do not
  bother me at all.  The duplicate comments I receive is a very small
  fraction of the total number of comments.  I just find it
  interesting that users can mistrust a simple piece of software that
  does a simple thing in a reasonable amount of time.  I had one
  visitor to my website even say, "I really was expecting a spinning
  wheel on the browser tab or some sort of progress indicator to be
  assured that it is saving my comment.  The instant success message
  took me by surprise!"  They felt nervous that their comment was not
  saved and resubmitted the comment again.
</p>
<p>
  As a result of these conversations, I have sometimes even wondered
  whether I should add some artificial delay in the comment
  application before responding with a success message to satisfy the
  expectations of people who are so used to the bloated web.  Of
  course, I am not actually going to do that.  I want to keep it
  simple.  I do not like adding artificial restrictions to a simple
  piece of functionality.  Further, I do not mind the duplicate
  comment submissions at all.  However, I cannot help but remark that
  the users of the web today have become so comfortable with the
  bloated web that a simple web application without bells and whistles
  that is fast and responsive makes them nervous!
</p>
<h2 id="update">Update<a href="#update"></a></h2>
<p>
  <strong>Update on 13 Mar 2022:</strong> Many commenters to this post
  have suggested that the issue here might not be the fast response of
  a successful comment application but instead the fact that the
  comment form elements remain intact even after the comment
  submission.  In their opinion, merely displaying a success message
  may not be assuring enough.  They further suggested that I should
  change the state of the form in some way on successful submission.
  Popular recommendations included disabling, clearing or removing the
  form elements entirely on successful submission.
</p>
<p>
  These suggestions are valid of course.  However, I also think that
  these suggestions reinforce the point of my blog post.  Without
  these fancy features and restrictions, web surfers today feel unsure
  if the comment form application has really done what it
  is <em>literally</em> saying it has done.
</p>
<p>
  Do I really need to consider <em>artificially</em> clearing,
  disabling or removing the form elements and thus removing the
  ability to edit a comment again and resubmit it (even if the user
  really so desires) with a single click of a button?  What if someone
  wants to post another comment immediately after the first one?  What
  if someone wants to edit their previous comment slightly and repost
  it?  Do I need to force the user to hop through separate links and
  buttons to be able to do these simple tasks?  "But every other
  website clears, disables or removes the form elements," you might
  rightfully offer as a counterpoint.  I know.  I know.  But why is it
  so that the "right" user experience nowadays involves artifically
  encumbering the user or hiding the user's own submitted text from
  themselves?
</p>
<p>
  In fact, in an earlier version of this website, the comment form
  application did disable the form elements on a successful comment
  submission.  In an even older version of this website, a new page
  consisting only a success message appeared.  However, visitors would
  still report their suspicion regarding the comment form doing its
  job to me.  So I have observed the results of employing at least two
  of the measures suggested and they were still consistent with the
  reporters' claims that they find the instant success message from
  the application to be disconcerting.
</p>
<p>
  UX best practices notwithstanding, I do not want to hide the users'
  content from themselves after a successful form submission.  Maybe
  they want to copy the message and keep it for themselves.  Maybe
  they want to edit it again and repost it.  I do not want to restrict
  any of these simple activities.  I also do not want the user to hop
  through an additional link or button to be able to do these things.
  However, heeding some of the other advice I have received in the
  comments section, I have now made two tiny changes to the comment
  form application that is consistent with its original spirit of
  simplicity, minimalism and statelessness.  I have moved the success
  message to the top of the response page.  I have also added
  additional text in the success message that explains that the
  submitted input has been left intact in case the submitter wants to
  copy it or edit it and resubmit it.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/comfort-of-bloated-web.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Paredit Slurp and Barf Mnemonics</title>
<link>https://susam.net/paredit-slurp-and-barf-mnemonics.html</link>
<guid isPermaLink="false">bnphd</guid>
<pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Of the several sophisticated Paredit commands to edit s-expressions,
  I believe, the following four commands are the most important ones:
</p>
<ul>
  <li><code>paredit-backward-slurp-sexp</code></li>
  <li><code>paredit-forward-slurp-sexp</code></li>
  <li><code>paredit-backward-barf-sexp</code></li>
  <li><code>paredit-forward-barf-sexp</code></li>
</ul>
<p>
  By default, these commands are bound to the key sequences
  <code>C-(</code>, <code>C-)</code>, <code>C-{</code>
  and <code>C-}</code> respectively in Emacs.  These commands can make
  editing s-expressions very convenient.  However, often on IRC
  networks and other online forums, I come across users who have
  difficulty remembering the key sequence each command is bound to.  I
  will share some mnemonics in this post that make this easier to
  remember.  Before discussing the mnemonics, let us see what these
  commands do.  However, if you already know what these commands do,
  skip right ahead to the
  <em><a href="#mnemonics">Mnemonics</a></em> section.
</p>

<h2 id="slurp-demo">Slurp Demo<a href="#slurp-demo"></a></h2>
<p>
  Say, we have the following Lisp expressions in our editor:
</p>
<pre><code>(* 10 20) (+ 30 40)<span class="cursor"> </span></code></pre>
<p>
  The block above shows where the cursor is placed.  Let us now bring
  the expression <code>(+ 30 40)</code> inside the expression <code>(*
  10 20)</code>.  To do so, we first place the cursor somewhere inside
  the first expression, say, as shown below:
</p>
<pre><code>(* 10 20<span class="cursor">)</span> (+ 30 40)</code></pre>
<p>
  Now type <code>C-)</code> and the closing parenthesis of the first
  expression moves forward to <em>slurp</em> the next expression.  The
  result looks like this:
</p>
<pre><code>(* 10 20<span class="cursor"> </span>(+ 30 40))</code></pre>
<p>
  The key sequence <code>C-)</code> invokes
  the <code>paredit-forward-slurp-sexp</code> command that adds the
  expression following the current list into that list by moving the
  closing delimiter ahead.  Similarly, there is the key
  sequence <code>C-(</code> that invokes
  the <code>paredit-backward-slurp-sexp</code> command which works
  similarly except that it makes the current list consume the
  preceding expression.  Note that the slurp commands expand the
  current list to consume a neighbouring expression.
</p>

<h2 id="barf-demo">Barf Demo<a href="#barf-demo"></a></h2>
<p>
  Say, we have the following Lisp expression in our editor:
</p>
<pre><code>(* 10 20 (+ 30 40))<span class="cursor"> </span></code></pre>
<p>
  We now want to move <code>(+ 30 40)</code> out of the first
  expression.  To do so, we first place the cursor somewhere inside
  the outer expression but not inside the inner expression.  Here is
  an example of where we place the cursor:
</p>
<pre><code>(* 10 20 <span class="cursor">(</span>+ 30 40))</code></pre>
<p>
  Now type <code>C-}</code> and the closing parenthesis of the outer
  expression moves behind to <em>barf</em> the inner expression out.
  The result looks like this:
</p>
<pre><code>(* 10 20) <span class="cursor">(</span>+ 30 40)</code></pre>
<p>
  The key sequence <code>C-}</code> invokes
  the <code>paredit-forward-barf-sexp</code> command that removes the
  last expression in the current list from that list by moving the
  closing delimiter behind.  Similarly, there is the key
  sequence <code>C-{</code> that invokes
  the <code>paredit-backward-slurp-sexp</code> command which works
  similarly except that it removes the first expression from the
  current list.  Note that the barf commands shrinks the current list
  to remove an expression from that list.
</p>

<h2 id="mnemonics">Mnemonics<a href="#mnemonics"></a></h2>
<p>
  When I began using Paredit for the first time, several years ago, I
  could never remember which key sequences <em>slurp</em> and which
  ones <em>barf</em>.  Then I made up these mnemonics:
</p>
<ul>
  <li>
    <code>C-(</code> and <code>C-)</code> have parentheses that look
    nice and round.  They expand the current list to consume another
    expression.  Nom nom!
  </li>
  <li>
    <code>C-{</code> and <code>C-}</code> have braces that look
    squiggly and wiggly.  They shrink the current list and barf an
    expression.
  </li>
</ul>
<p>
  I do not need these mnemonics anymore because after using these key
  sequences a few times, they get burnt into our muscle memory.
  However, in the initial days of using Paredit, these mnemonics were
  quite useful.  Now whenever I find someone complaining about how
  easy it is to forget the key sequences bound to these commands, I
  share these mnemonics with them and they never have any problem
  again with the slurp and barf commands.  These mnemonics have served
  me and many others I know quite well.
</p>
<hr>
<p>
  <em>
    <strong>Update on 01 Mar 2022:</strong> Jon Snader, who maintains
    a very popular blog
    named <a href="http://irreal.org/blog/">Irreal</a>, has discussed
    this blog post on his own blog.  While he did not find my
    mnemonics particularly helpful, he has shared his own way of
    remembering the key sequences.  Quoting Jon below:
  </em>
</p>
<blockquote>
  <em>
    To me, the braces suggest pointing out
    so <kbd>Ctrl</kbd>+<kbd>}</kbd> and <kbd>Ctrl</kbd>+<kbd>{</kbd>
    are clearly for barfing.
  </em>
</blockquote>
<p>
  <em>
    That is quite an interesting and elegant mnemonic.  See his
    post <a href="https://irreal.org/blog/?p=10361">Using Paredit's
    Slurp and Barf</a> to read his complete views on this topic.
  </em>
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/paredit-slurp-and-barf-mnemonics.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/lisp.html">#lisp</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Import Readline</title>
<link>https://susam.net/import-readline.html</link>
<guid isPermaLink="false">ttyjr</guid>
<pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="toy-repl">Toy REPL<a href="#toy-repl"></a></h2>
<p>
  Let us first write a tiny Python program to create a toy
  read-eval-print-loop (REPL) that does only one thing: add all
  integers entered as input into the REPL prompt.  Here is the
  program:
</p>
<pre>
<code>while True:
    try:
        line = input('&gt; ')
        print(sum([int(n) for n in line.split()]))
    except ValueError as e:
        print('error:', e)
    except (KeyboardInterrupt, EOFError):
        break</code>
</pre>
<p>
  Here is how it works:
</p>
<pre>
<samp>$ <kbd>python3 repl.py</kbd>
&gt; <kbd>10 20 30</kbd>
60
&gt; <kbd>40 50 60</kbd>
150
&gt; </samp>
</pre>
<p>
  If we now type <kbd>&uarr;</kbd> (the up arrow key)
  or <kbd>ctrl</kbd>+<kbd>p</kbd> to bring back the previous input, we
  see something like the following instead:
</p>
<pre><samp>&gt; <kbd>^[[A^[[A^P^P</kbd></samp></pre>
<p>
  It shows the keys typed literally rather than bringing up previous
  input like most other interactive programs with a command-line
  interface do.  The other programs that do bring up the previous
  input are able to do so because they provide line editing and
  history capability, often with the help of a line editing and
  history library like GNU Readline (libreadline) or BSD Editline
  (libedit).
</p>
<p>
  Can we have a similar line editing and history capability for our
  toy REPL?  After all, the Python REPL itself offers such a line
  editing facility.  Surely there must be a way to have this facility
  for our own programs too.  Indeed there is!
</p>
<h2 id="line-editing-and-history">Line Editing and History<a href="#line-editing-and-history"></a></h2>
<p>
  To enable line editing and history in our toy REPL, we just need to
  add <code>import readline</code> to our program.  Here is how our
  program would look:
</p>
<pre>
<code>import readline

while True:
    try:
        line = input('&gt; ')
        print(sum([int(n) for n in line.split()]))
    except ValueError as e:
        print('error:', e)
    except (KeyboardInterrupt, EOFError):
        break</code>
</pre>
<p>
  Now <kbd>&uarr;</kbd>, <kbd>ctrl</kbd>+<kbd>p</kbd>, etc. work as
  expected.
</p>
<pre>
<samp>$ <kbd>python3 repl.py</kbd>
&gt; <kbd>10 20 30</kbd>
60
&gt; <kbd>40 50 60</kbd>
150
&gt; <kbd>40 50 60</kbd></samp>
</pre>
<p>
  The last line of input in the example above is obtained by typing
  either <kbd>&uarr;</kbd> or <kbd>ctrl</kbd>+<kbd>p</kbd>.  In fact,
  all of the line editing keys like <kbd>ctrl</kbd>+<kbd>a</kbd> to go
  to the beginning of the line, <kbd>ctrl</kbd>+<kbd>k</kbd> to kill
  the line after the cursor, etc. work as expected.  The exact list of
  default key-bindings supported depends on the underlying line
  editing library being used by the <code>readline</code> module.  The
  underlying library may be either the GNU Readline library or the BSD
  Editline library.  There are some minor differences regarding the
  list of default key-bindings between these two libraries.
</p>
<h2 id="history-file">History File<a href="#history-file"></a></h2>
<p>
  What we have done so far achieves the goal of bringing up previous
  inputs from the history.  However, it does not bring back inputs
  from a previous invocation of the REPL.  For example, if we start
  our toy REPL, enter some inputs, then quit it (say, by
  typing <kbd>ctrl</kbd>+<kbd>c</kbd>), start our toy REPL again and
  type <kbd>&uarr;</kbd> or <kbd>ctrl</kbd>+<kbd>p</kbd>, it does not
  bring back the input from the previous invocation.  For a full-blown
  REPL meant for sophisicated usage, we may want to preserve the
  history between different invocations of the REPL.  This can be
  achieved by using the <code>read_history_file()</code>
  and <code>write_history_file()</code> functions as shown below:
</p>
<pre>
<code>import readline
import os

HISTORY_FILE = os.path.expanduser('~/.repl_history')
if os.path.exists(HISTORY_FILE):
    readline.read_history_file(HISTORY_FILE)

while True:
    try:
        line = input('&gt; ')
        readline.write_history_file(HISTORY_FILE)
        print(sum([int(n) for n in line.split()]))
    except ValueError as e:
        print('error:', e)
    except (KeyboardInterrupt, EOFError):
        break</code>
</pre>
<p>
  For more information on how to use this module, see the
  Python <a href="https://docs.python.org/3/library/readline.html">readline
  documentation</a>.
</p>
<h2 id="rlwrap">Readline Wrapper<a href="#rlwrap"></a></h2>
<p>
  At this point, it is worth mentioning that there are many
  interactive CLI tools that do not have line editing and history
  capabilities.  They behave like our first toy REPL example in this
  post.  Fortunately, there is the wonderful readline wrapper utility
  known as <code>rlwrap</code> that can be used to enable line editing
  and history in such tools.  This utility can often be easily
  installed from package repositories of various operating systems.
  Here is a demonstration of this tool:
</p>
<pre>
<samp>$ <kbd>rlwrap cat</kbd>
<kbd>hello</kbd>
hello
<kbd>world</kbd>
world
<kbd>world</kbd></samp>
</pre>
<p>
  The last line of input in the example above is obtained by typing
  either <kbd>&uarr;</kbd> or <kbd>ctrl</kbd>+<kbd>p</kbd>.  In the
  above example, the input history is automatically saved
  to <code>~/.cat_history</code>, so it is possible to bring back
  inputs from a previous invocation of the command.
</p>
<h2 id="obligatory-joke">Obligatory Joke<a href="#obligatory-joke"></a></h2>
<p>
  Finally, an obligatory XKCD comic to conclude this post:
</p>
<figure class="soft">
  <img src="files/blog/xkcd-353-python.png" alt="XKCD comic on Python"
       title="Original title text: I wrote 20 short programs in Python yesterday.  It was wonderful.  Perl, I'm leaving you.">
  <figcaption>
    <em>Python</em> by Randall Munroe
    (Source: <a href="https://xkcd.com/353/">https://xkcd.com/353/</a>)
  </figcaption>
</figure>
<p>
  While the days of achieving air flight with a
  single <code>import</code> statement might still be a few decades
  away, we do have the luxury to enable line editing and history in
  our REPLs with a single such statement right now.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/import-readline.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Andromeda Invaders</title>
<link>https://susam.net/andromeda-invaders.html</link>
<guid isPermaLink="false">lygkw</guid>
<pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  The arcade-style computer games of 1980s played a big role in
  getting me fascinated about computers.  Last weekend I decided to
  fulfill a childhood dream of writing my own invaders-like game.
  After a few hours of programming, I ended up with a simple game that
  I call <em>Andromeda Invaders</em>.  You can play it now by clicking
  the link below:
</p>
<p style="text-align: center">
  <a href="invaders.html">Play Andromeda Invaders</a>
</p>
<p>
  It is a 1980s-arcade-style game that runs in a modern web browser.
  This game is inspired by Space Invaders, the 1978 arcade game
  developed by Tomohiro Nishikado.  However, the game characters,
  gameplay and some technical aspects of this game are very different
  from those of Space Invaders.
</p>
<h2 id="inspiration">Inspiration<a href="#inspiration"></a></h2>
<p>
  I first came across Space Invaders in the 1990s in the computer
  laboratory of my lower secondary school.  Soon after playing the
  game a few times, I wanted to develop a similar game of my own.
  However, the little GW-BASIC programming I knew then was
  insufficient to write anything more sophisticated than simple
  text-based input/output programs.  I did write several simple
  text-based quiz and adventure games back then but a more
  sophisticated game with graphics and audio remained elusive.  As
  years went by, I gradually forgot about it, learnt more mainstream
  languages like C, Python, Lisp, etc. and got into programming as a
  career.
</p>
<p>
  Although it is 25 years too late, I decided to spend a weekend now
  to fulfill my childhood desire to write my own Invaders-like game.
  This game fulfills a childhood dream of mine!
</p>
<h2 id="graphics-and-audio">Graphics and Audio<a href="#graphics-and-audio"></a></h2>
<p>
  All of the graphics is done by drawing rectangles and text on an
  HTML5 <code>&lt;canvas&gt;</code> element using the Canvas API.
</p>
<p>
  All of the audio is done by generating sine waves using
  <code>OscillatorNode</code> of the Web Audio API.  The sine waves
  used for the game audio correspond to actual musical notes from the
  C major scale.  Multiple notes are played together to form chords.
  The background music is a chord progression consisting of four
  chords repeating over and over again as long as the game is being
  played.  When the game characters get hit, the hit sounds are made of
  a single chord that plays for a very short duration.
</p>
<p>
  There is rudimentary support for playing this game on small screens
  and touchscreens using the buttons provided below the game canvas.
  However, this game is best enjoyed on a laptop/desktop device with a
  physical keyboard.  On a device with physical keyboard, the game can
  be played in fullscreen mode by typing <kbd>f</kbd>.  Since it is a
  single-file HTML game, it can be saved as a standalone file on your
  system.
</p>
<h2 id="levels">Levels<a href="#levels"></a></h2>
<p>
  The game can be played indefinitely long in theory.  However in
  practice, the difficulty level of the game rises steeply with each
  level and I would consider it remarkable if someone manages to reach
  level 10.  None of my friends and colleagues who played this game
  over the weekend has been able to reach level 9 yet.  However, many
  of them have reached level 8 within a few hours of practice.  The
  steep rise in difficulty level is intentional, so that a single
  session of this game does not last too long.
</p>
<p>
  Levels 1 to 20 present new difficulty levels in terms of the speed
  of the objects moving on the canvas.  The difficultly levels remain
  constant between levels 21 and 1000.  If someone were to complete
  level 1000, the game would reset to level 1 with the score intact.
  This is how one could potentially play the game indefinitely long.
</p>
<h2 id="conclusion">Conclusion<a href="#conclusion"></a></h2>
<p>
  Like I mentioned above, this game is the result of a weekend's work.
  I wanted to keep it as simple as possible.  Despite the simplicity,
  there are a few interesting concepts such as loss and recovery of
  health of the game characters, automatic release of laser pulses,
  etc.
</p>
<p>
  There is a Git repository for this game at
  <a href="https://github.com/susam/invaders">github.com/susam/invaders</a>.
  The README file in this repository documents several technical
  details of this game.  The source code is released under the MIT
  license, so please feel free to play with the code, modify the game
  parameters and logic and alter the game.  If you like this game, do
  <a href="invaders.html">share it</a> with others.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/andromeda-invaders.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Andromeda Invaders</title>
<link>https://susam.net/invaders.html</link>
<guid isPermaLink="false">bffow</guid>
<pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  A 1980s-arcade-style game written using HTML5, Canvas and Web Audio.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/invaders.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/game.html">#game</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Toy Traceroute With Ping</title>
<link>https://susam.net/toy-traceroute-with-ping.html</link>
<guid isPermaLink="false">fdvfj</guid>
<pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is an example of a toy traceroute using <code>ping</code> on
  Linux:
</p>
<pre>
<samp>$ <kbd>for ttl in {1..30}; do ping -4 -c 1 -t $ttl example.com &amp;&amp; break; done | grep -i from | nl -s ' ' -w 2</kbd>
 1 From router1-lon.linode.com (212.111.33.229) icmp_seq=1 Time to live exceeded
 2 From if-0-1-0-0-0.gw1.lon1.gb.linode.com (109.74.207.10) icmp_seq=1 Time to live exceeded
 3 From be5787.rcr51.lon10.atlas.cogentco.com (204.68.252.58) icmp_seq=1 Time to live exceeded
 4 From be2589.ccr41.lon13.atlas.cogentco.com (154.54.59.37) icmp_seq=1 Time to live exceeded
 5 From be2099.ccr31.bos01.atlas.cogentco.com (154.54.82.34) icmp_seq=1 Time to live exceeded
 6 From verizondms.bos01.atlas.cogentco.com (154.54.11.54) icmp_seq=1 Time to live exceeded
 7 From ae-66.core1.bsa.edgecastcdn.net (152.195.233.129) icmp_seq=1 Time to live exceeded
 8 64 bytes from 93.184.216.34 (93.184.216.34): icmp_seq=1 ttl=57 time=63.0 ms</samp>
</pre>
<p>
  The output above was obtained on a Debian GNU/Linux 11.2 (bullseye)
  system.  The above loop sends multiple ICMP echo requests with
  different Time to Live (TTL) values to reach the host
  for <code>example.com</code>.  The TTL occurs as an 8-bit field in
  the Internet Protocol (IP) header of each packet.  It is the 9th
  octet in an IPv4 header and the 8th octet in an IPv6 header.
</p>
<p>
  When a router on the path to the destination receives a packet, it
  decrements the TTL value in the IP header by one.  If the TTL value
  becomes 0 after the decrement operation, the router responds with a
  "time-to-live exceeded" ICMP message.  Thus an echo request with TTL
  value set to 1 gets us an ICMP "time-to-live exceeded" message from
  the first router in the path, the next echo request with TTL value 2
  gets us a similar ICMP message from the second router in the path
  and so on.  The traceroute is complete when we receive a successful
  ICMP echo reply.
</p>
<p>
  For comparison, here is the output of the
  actual <code>traceroute</code> command:
</p>
<pre>
<samp>$ <kbd>traceroute example.com</kbd>
traceroute to example.com (93.184.216.34), 30 hops max, 60 byte packets
 1  router1-lon.linode.com (212.111.33.229)  0.602 ms  1.202 ms  1.326 ms
 2  if-0-1-0-1-0.gw1.lon1.gb.linode.com (109.74.207.14)  0.502 ms if-11-1-0-0-0.gw2.lon1.gb.linode.com (109.74.207.26)  0.401 ms if-11-0-0-0-0.gw2.lon1.gb.linode.com (109.74.207.30)  0.379 ms
 3  be5787.rcr51.lon10.atlas.cogentco.com (204.68.252.58)  0.573 ms  0.563 ms  0.566 ms
 4  be2589.ccr41.lon13.atlas.cogentco.com (154.54.59.37)  1.271 ms  1.311 ms ldn-bb1-link.ip.twelve99.net (62.115.122.188)  1.400 ms
 5  be2099.ccr31.bos01.atlas.cogentco.com (154.54.82.34)  63.511 ms  63.540 ms nyk-bb1-link.ip.twelve99.net (62.115.112.244)  73.397 ms
 6  nyk-b1-link.ip.twelve99.net (62.115.135.131)  70.113 ms verizondms.bos01.atlas.cogentco.com (154.54.11.54)  63.657 ms nyk-b1-link.ip.twelve99.net (62.115.135.131)  70.190 ms
 7  ae-66.core1.bsa.edgecastcdn.net (152.195.233.129)  63.535 ms edgecast-ic317659-nyk-b6.ip.twelve99-cust.net (62.115.147.199)  77.802 ms ae-66.core1.bsa.edgecastcdn.net (152.195.233.129)  63.582 ms
 8  93.184.216.34 (93.184.216.34)  62.895 ms ae-71.core1.nyb.edgecastcdn.net (152.195.69.139)  72.312 ms ae-70.core1.nyb.edgecastcdn.net (152.195.68.141)  69.419 ms
 9  93.184.216.34 (93.184.216.34)  70.827 ms  62.896 ms  73.342 ms</samp>
</pre>
<p>
  Each line in the output above corresponds to a hop.  Each line shows
  one or more addresses.  A maximum of three addresses can be seen in
  the result for each hop.  That is because there are multiple paths
  to the destination and the <code>traceroute</code> command sends 3
  UDP probe packets by default for each hop.  In this manner, it ends
  up discovering multiple routes to the destination.  It is worth
  noting here that by default <code>traceroute</code> sends UDP
  packets, not ICMP echo requests, with different TTL values as probe
  packets.  But the route discovery mechanism remains the same.  After
  sending each probe packet, it waits for ICMP "time-to-live exceeded
  messages" from the routers that fall in the path to the destination.
</p>
<p>
  By comparing the two outputs above, we can see that the route found
  by the toy traceroute using <code>ping</code> is one of the several
  routes found by the <code>traceroute</code> command.
</p>
<p>
  For those on macOS, the <code>ping</code> command options need to be
  modified as follows:
</p>
<pre>
<samp><kbd>for ttl in {1..30}; do ping -c 1 -t 1 -m $ttl example.com &amp;&amp; break; done | grep -i from | nl -s ' ' -w 2</kbd></samp>
</pre>
<p>
  On macOS, the <code>-t</code> option of the <code>ping</code>
  command specifies a timeout (not IP TTL) that prevents it from
  waiting for too long for a successful echo reply which we don't
  expect to receive.  Further, on macOS, the <code>-m</code> option of
  the <code>ping</code> command specifies the IP TTL.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/toy-traceroute-with-ping.html">Read on website</a> |
  <a href="https://susam.net/tag/networking.html">#networking</a> |
  <a href="https://susam.net/tag/protocol.html">#protocol</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Against URL-Based Content Rendering</title>
<link>https://susam.net/against-url-based-content-rendering.html</link>
<guid isPermaLink="false">kxrke</guid>
<pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Today I received a nice pull request to my project
  named <a href="https://github.com/susam/muboard">Muboard</a>.  It is
  a shame I am not going to merge this pull request.  Muboard is a
  simple web-based tool that can be used as a virtual chalkboard.  You
  can type in text with LaTeX snippets in it and Muboard renders your
  input as you type it.  Muboard is quite useful to me when I host
  online mathematics book club meetings.  Muboard can also be used to
  create distributable self-rendering HTML documents.  See the
  preceding link to see demo link, screenshots, usage notes, etc.
</p>
<p>
  The <a href="https://github.com/susam/muboard/pull/4">pull
  request</a> I received adds the ability to create a shareable link
  to a Muboard instance.  I am hosting mine
  at <a href="https://muboard.net">muboard.net</a>.  The shareable
  link encodes the entire content in the URL itself.  When someone
  visits the shareable link, it loads Muboard which then looks at the
  encoded content in the URL and renders the content.  It is a nifty
  idea.  An idea, I have thought of myself while developing Muboard
  but then decided not to implement.  If there is anything that
  running <a href="https://github.com/susam/mathb">MathB.in</a> for
  ten years has taught me, it is that allowing arbitrary users to
  render content that appears on a domain name I have registered is
  going to end up as a huge time sink for me.  I would be spending a
  significant portion of my leisure time moderating content, keeping
  regulatory authorities happy and ensuring that no bad content
  appears on my website.  Here is a copy of my complete response on
  this matter from the pull request:
</p>
<blockquote>
  <p>
    Thank you for the comment and the pull request.  The ability to
    share URLs with the content encoded in the URL query parameter or
    fragment identifier has crossed my mind earlier.  It is a very
    useful feature indeed.  However, I decided against implementing
    such a feature because such features are often abused to display
    spam content or illegitimate content.
  </p>
  <p>
    Now one might wonder why I, as someone who is merely hosting the
    Muboard tool on a website, should care about what kind of content
    one chooses to display on Muboard.  After all, the content is
    rendered on the client side, so I am not responsible for the
    content.  Unfortunately, the regulatory authorities do not see it
    that way.
  </p>
  <p>
    From my experience of running MathB.in (another project that
    offers a pastebin for mathematics) for the last 10 years, I have
    learnt that as long as such bad content is displayed on a domain
    name I am the registrant of, the regulatory authorities are going
    to contact me and ask me to ensure that such content is not
    displayed on my website.  They do not care whether that content is
    rendered on the server side or client side.  Further, they usually
    provide only a week's notice.  If no measures are taken to prevent
    such content from being rendered on the website, the regulatory
    authorities go ahead and force the cloud provider, hosting
    provider, etc. to take down the website completely.
  </p>
  <p>
    With something like MathB.in which stores the content on the
    server side, I can at least remove the content from its data
    store.  However, if the content is rendered entirely on the client
    side on the basis of the encoded content in the URL query
    parameter or fragment identifier, it becomes more difficult to
    know what content is being displayed on the website and block bad
    content from being rendered, say, with some JavaScript code that
    looks for patterns in the content and refuse to render the content
    if it appears to contain bad content.  This is not a problem I
    want to solve in Muboard because my prior experience with MathB.in
    shows that it takes considerable time and effort to keep track of
    all possible bad content and to fine tune the patterns to match,
    on a regular basis.
  </p>
  <p>
    Your pull request has a very useful feature and it's a shame I
    cannot add it to the copy of Muboard.net I am running.  I do not
    have the time to get involved in maintaining pattern-based content
    blocklisting.  If you are really interested in this feature and
    have the risk appetite to allow arbitrary content from users to be
    rendered on your website, I would recommend hosting a clone of
    Muboard.net with this feature on a separate URL that you own.  I
    would be happy to link to your clone from the README of this
    project.
  </p>
</blockquote>
<p>
  Encoding content in the URL and then rendering that content is fine
  as long as the content is composed from an allowed set of tokens.
  Examples include virtual pianos, online synthesisers and fun games
  like <a href="https://tixy.land/">Tixy</a>.  However, for something
  like Muboard that shows arbitrary text content from users, quite
  unfortunately, I have to decline any pull request that renders
  arbitrary content encoded in the URLs!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/against-url-based-content-rendering.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Web Golden</title>
<link>https://susam.net/web-golden.html</link>
<guid isPermaLink="false">cavac</guid>
<pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  In a recent online discussion about simple static websites, Chris
  Chapman <a href="https://news.ycombinator.com/item?id=30139081">posted</a>
  this quite clever comment:
</p>
<blockquote>
  Firm supporter of Web Pi (3.14159).  When it comes to building for
  the web today, I'm always amazed that "so much can be done with so
  little" and yet the default is the opposite - "so much is needed to
  deliver so little" - so irrational!  Where did we go wrong?  I
  wonder what Web Euler (2.71828) would have looked like?
</blockquote>
<p>
  I enjoyed the amusing play on the terms "Web 2.0" and "Web 3.0" as
  well as the irony-infused pun involving the word "irrational".  I
  piled on to the witty wordplay with my own comment where I remarked
  how my favourite phase of the web was Web Golden
  (<a href="phi.txt">1.61803</a>).  I will elaborate here what that
  phase of the web looked like and why I was fond of it.
</p>
<h2 id="fascinating-realisation">Fascinating Realisation<a href="#fascinating-realisation"></a></h2>
<p>
  I believe I was fortunate enough to grow up during a time when the
  web was a very diverse place full of various eccentric digital
  gardens.  I was introduced to the world wide web around 1999.
  Access to the Internet was very limited where I lived.  My friends
  and I would visit so-called Internet caf&eacute;s and shell out a
  significant chunk of our pocket money for just an hour of Internet
  usage.
</p>
<p>
  I was already quite familiar with computers then but the Internet
  and the world wide web were completely new to me.  Until then,
  thanks to my <a href="fd-100.html">prior exposure</a> to the
  Logo programming language, I had only considered computers to be a
  device for problem solving and recreation.  However, the Internet
  showed me that computers were very flexible and malleable
  communication devices too.  It was a fascinating realisation!
</p>
<p>
  While on the Internet, I used to spend most of my time browsing
  websites and joining various chat forums where I could talk to other
  programmers from all over the world.  I learnt a lot about the world
  and its various cultures by talking to them.  I met people who wrote
  their own full blown chat clients, people who were nearing
  retirement after having programmed about twenty different
  microcontrollers throughout their careers, people who developed
  software for global positioning systems and so on.  These
  experiences broadened my horizons.  I could see that my enthusiasm
  for computers could one day lead to a fulfilling career.
</p>
<h2 id="simplicity">Simplicity<a href="#simplicity"></a></h2>
<p>
  The world wide web was a delightful place.  There were no major
  social media websites yet.  I believe the closest thing to social
  media we had back then
  was <a href="http://web.archive.org/web/19990125095557/http://www.geocities.com/">Geocities.com</a>
  where we could create our own websites for free.  One could also
  host their websites on shared website hosting providers for a fixed
  annual fee.  Some also hosted their websites on servers running in
  their own houses.
</p>
<p>
  Most websites were made up of static HTML pages.  Some websites had
  tiny guestbooks that allowed a little user-generated content.  I
  remember some of the website hosting providers made it really easy
  to add guestbooks, even for someone with no programming experience.
  All one needed to do was create an HTML page that contained
  a <code>&lt;form&gt;</code> element with the <code>action</code>
  attribute set to a URL of a CGI script provided by the hosting
  provider.  The CGI script would accept every comment submitted via
  the guestbook and automatically insert the new comment into a static
  HTML page.  The good scripts would escape the special characters in
  the comments properly before saving it in the static comments page.
  But the poor ones would let any script kiddie deface the guestbook
  page by inserting cleverly crafted HTML snippets or JavaScript code
  within the comments.  That would be the first lesson on cross-site
  scripting for many of us in those days.
</p>
<p>
  While most personal websites were static in nature, the motivated
  web developers would teach themselves enough programming to add
  little pieces of dynamic functionality by writing CGI scripts.  Many
  used PHP instead which was much easier to write code in and deploy.
  I taught myself ASP to develop dynamic pages.  It allowed me to
  write my own guestbook page and a dynamic quiz application for the
  visitors of my website.
</p>
<p>
  Despite various types of dynamic functionality offered by the
  websites, the web was simple.  Web pages with infinite scrolling was
  unheard of.  Visiting useful websites did not result in the web
  browser loading dozens of massive JavaScript files in the
  background.  Web developers were used to doing less with less.  But
  the old web had its own problems too.  Just like how the current web
  is riddled with banner advertisements, the old web too was riddled
  with pop-ups!  A prevalent user-hostile trend back then involved web
  pages creating new pop-ups for advertisements.  They would often
  clutter the desktop because the major web browsers back then would
  create a new desktop-level window for each popup.
</p>
<h2 id="nostalgia">Nostalgia<a href="#nostalgia"></a></h2>
<p>
  Although these old, simple and crude websites can still be found in
  certain corners of the web, the mainstream web no longer looks like
  this.  Websites are generally heavier and more complex these days.
  Talking about the old web today only serves as nostalgia for people
  like me who grew up during that magical time.  One might argue that
  the world wide web today is much more advanced and has much more
  utility than the old web I am reminiscing about here.  That is true.
  The web today is a very versatile tool of great utility.  The web
  today is a powerful agent that is shaping our civilisation and
  influencing how societies evolve and function.  Indeed, the web was
  quite limited in terms of utility back then.  Online banking was not
  prevalent.  Electronic commerce was very new and clunky.  The most
  practical utility of the old web I can recall involved publishing
  and retrieving university exam results and even that was painfully
  slow.  It would take a minute or two for university pages to load
  over dial-up connections.
</p>
<p>
  However, what the web of the 90s lacked in terms of utility, it more
  than compensated by being a fertile ground for creativity.  Thanks
  to the early web, many computer enthusiasts, including me, learnt to
  build their first few websites by writing one line of HTML at a
  time.  To write a few lines of HTML code in a text editor and then
  watch the web browser render that code as a glorious web page full
  of colours, images and text was a magical feeling.  I do think that
  was the golden era of the web.  It was quirky and yet beautiful.  It
  was limited and yet diverse.  It was the sweet spot between Web 1.0
  and Web 2.0.  It was Web 1.61803!  It was Web Golden!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/web-golden.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/humour.html">#humour</a> |
  <a href="https://susam.net/tag/retrospective.html">#retrospective</a>
</p>
]]>
</description>
</item>
<item>
<title>Wordle With Grep</title>
<link>https://susam.net/wordle-with-grep.html</link>
<guid isPermaLink="false">rvtgp</guid>
<pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Let us solve a couple of
  <a href="https://www.powerlanguage.co.uk/wordle/">Wordle</a> games
  with the Unix <code>grep</code> command and the
  Unix <code>words</code> file.  The Wordle games #217, #218 and #219
  for 22&nbsp;Jan&nbsp;2022, 23&nbsp;Jan&nbsp;2022 and
  24&nbsp;Jan&nbsp;22 respectively are used as examples in this post.
  The output examples shown below are obtained using the words
  file <code>/usr/share/dict/words</code>, GNU grep 3.6 and GNU bash
  5.1.4 on Debian GNU/Linux 11.2 (bullseye).
</p>
<p>
  Note that the original Wordle game uses a different word list.
  Further, there are several Wordle clones which may have their own
  word lists.  For the purpose of this post, we will use the word list
  that comes with Debian.  We will solve each Wordle in a quick and
  dirty manner in this post.  The focus is going to be on making
  constant progress and reaching the solution quickly with simple
  shell commands.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#preliminary-work">Preliminary Work</a></li>
  <li><a href="#wordle-217">Wordle #217</a></li>
  <li><a href="#wordle-218">Wordle #218</a></li>
  <li><a href="#wordle-219">Wordle #219</a></li>
</ul>
<h2 id="preliminary-work">Preliminary Work<a href="#preliminary-work"></a></h2>
<p>
  Before we start solving Wordle games, we will do some preliminary
  work.  We will create a convenient shell alias that automatically
  selects all five-letter words from the <code>words</code> files.  We
  will also find a good word to enter as the first guess into the
  Wordle game.  The following steps elaborate this preliminary work:
</p>
<ol>
  <li>
    <p>
      Make a shell alias named <code>words</code> that selects all 5
      letter words from the words file.
    </p>
<pre>
<samp>$ <kbd>alias words='grep "^[a-z]\{5\}$" /usr/share/dict/words'</kbd>
$ <kbd>words | head -n 3</kbd>
abaci
aback
abaft
$ <kbd>words | tail -n 3</kbd>
zoned
zones
zooms
$ <kbd>words | wc -l</kbd>
4594</samp>
</pre>
  </li>
  <li>
    <p>
      For each letter in the English alphabet, count the number of
      five-letter words that contain the letter.  Rank each letter by
      this count.
    </p>
<pre>
<samp>$ <kbd>for c in {a..z}; do echo $(words | grep $c | wc -l) $c; done | sort -rn | head -n 15</kbd>
2245 s
2149 e
1736 a
1404 r
1301 o
1231 i
1177 l
1171 t
975 n
924 d
810 u
757 c
708 p
633 h
623 y</samp>
</pre>
    <p>
      The output shows that the letter 's' occurs in 2245 five-letter
      words, followed by 'e' which occurs in 2149 five-letter words
      and so on.
    </p>
  </li>
  <li>
    <p>
      Find a word that contains the top five letters found in the
      previous step.
    </p>
<pre>
<samp>$ <kbd>words | grep s | grep e | grep a | grep r | grep o</kbd>
arose</samp>
</pre>
    <p>
      We will enter this word as the first guess in every Wordle game.
    </p>
  </li>
  <li>
    <p>
      In case, the word "arose" does not lead to any positive result,
      we will need another word to enter as our second guess.  Find a
      word that contains the next five top letters in the list found
      above.
    </p>
<pre>
<samp>$ <kbd>words | grep i | grep l | grep t | grep n | grep d</kbd>
$ <kbd>words | grep i | grep l | grep t | grep n | grep u</kbd>
until</samp>
</pre>
    <p>
      We found that there is no such word that contains 'i', 'l', 't',
      'n' and 'd'.  So we got rid of 'd' in our search and included
      'u' (the next highest ranking letter after 'd') instead to find
      the word "until".  We will enter this word as the second guess
      if and only if the first guess (i.e. "arose") does not lead to
      any positive result.
    </p>
</ol>
<h2 id="wordle-217">Wordle #217<a href="#wordle-217"></a></h2>
<p>
  Let us now solve Wordle #217 for Sat,&nbsp;22&nbsp;Jan&nbsp;2022
  with the following steps:
</p>
<ol>
  <li>
    <p>
      Use the word "arose" as the first guess.  The following result
      appears:
    </p>
    <p style="font-family: monospace; font-weight: bold; color: #ddd">
      <span style="background: #333; padding: 0.5em">A</span>
      <span style="background: #333; padding: 0.5em">R</span>
      <span style="background: #333; padding: 0.5em">O</span>
      <span style="background: #333; padding: 0.5em">S</span>
      <span style="background: #585; padding: 0.5em">E</span>
    </p>
  </li>
  <li>
    <p>
      The previous result shows that the letter 'e' occurs at the
      fifth place.  Further, the letters 'a', 'r', 'o' and 's' do not
      occur anywhere in the word.  Look for words satisfying these
      constraints.
    </p>
<pre>
<samp>$ <kbd>words | grep '....e' | grep -v '[aros]' | head -n 5</kbd>
beige
belie
belle
bible
bilge</samp>
</pre>
    <p>
      Pick the word "beige" for the second guess and enter it into the
      Wordle game.  Note that since we are following a quick and dirty
      approach here, we do not spend any time figuring out which of
      the various five-letter words ending with the letter 'e' is the
      most optimal choice for the next guess.  We simply pick the
      first word from the output above and enter it as the second
      guess.  The following result appears now:
    </p>
    <p style="font-family: monospace; font-weight: bold; color: #ddd">
      <span style="background: #333; padding: 0.5em">B</span>
      <span style="background: #333; padding: 0.5em">E</span>
      <span style="background: #b93; padding: 0.5em">I</span>
      <span style="background: #333; padding: 0.5em">G</span>
      <span style="background: #585; padding: 0.5em">E</span>
    </p>
  </li>
  <li>
    <p>
      The letter 'i' occurs somewhere in the word but not at the third
      place.  Further the letters 'b' and 'g' do not occur anywhere in
      the word.  Also, the letter 'e' does not occur anywhere apart
      from the fifth place.  The letter 'e' in the gray tile in the
      second place confirms that the letter 'e' does not repeat in the
      answer word.  Refine the previous command to add these
      constraints.
    </p>
<pre>
<samp>$ <kbd>words | grep '[^e][^e][^ie][^e]e' | grep i | grep -v '[arosbg]' | head -n 5</kbd>
fiche
indue
lithe
mince
niche</samp>
</pre>
    <p>
      Enter "fiche" as the third guess.  The following result appears:
    </p>
    <p style="font-family: monospace; font-weight: bold; color: #ddd">
      <span style="background: #333; padding: 0.5em">F</span>
      <span style="background: #585; padding: 0.5em">I</span>
      <span style="background: #b93; padding: 0.5em">C</span>
      <span style="background: #333; padding: 0.5em">H</span>
      <span style="background: #585; padding: 0.5em">E</span>
    </p>
  </li>
  <li>
    <p>
      The previous result shows that the letter 'i' occurs at the
      second place.  Further, the letter 'c' occurs somewhere in the
      word but not at the third place.  Also, the letters 'f' and 'h'
      do not occur anywhere in the word.  Refine the previous command
      further to add these constraints:
    </p>
<pre>
<samp>$ <kbd>words | grep '[^e]i[^iec][^e]e' | grep c | grep -v '[arosbgfh]' | head -n 5</kbd>
mince
wince</samp>
</pre>
    <p>
      Enter the word "mince" for the fourth guess.  It leads to the
      following result:
    </p>
    <p style="font-family: monospace; font-weight: bold; color: #ddd">
      <span style="background: #333; padding: 0.5em">M</span>
      <span style="background: #585; padding: 0.5em">I</span>
      <span style="background: #585; padding: 0.5em">N</span>
      <span style="background: #585; padding: 0.5em">C</span>
      <span style="background: #585; padding: 0.5em">E</span>
    </p>
  </li>
  <li>
    <p>
      We are almost there!  We now have all the letters except the
      first one.  The previous result shows that the letter 'm' does
      not occur in the word.  Thus the answer word must be "wince".
      For the sake of completeness, here is a refined search that
      selects the answer word based on the constraints known so far:
    </p>
<pre>
<samp>$ <kbd>words | grep '[^e]ince' | grep -v '[arosbgfhm]' | head -n 5</kbd>
wince</samp>
</pre>
    <p>
      It looks like we have found the answer word.  Enter "wince" as
      the fifth guess to get the following result:
    </p>
    <p style="font-family: monospace; font-weight: bold; color: #ddd">
      <span style="background: #585; padding: 0.5em">W</span>
      <span style="background: #585; padding: 0.5em">I</span>
      <span style="background: #585; padding: 0.5em">N</span>
      <span style="background: #585; padding: 0.5em">C</span>
      <span style="background: #585; padding: 0.5em">E</span>
    </p>
    <p>
      Done!
    </p>
</ol>
<h2 id="wordle-218">Wordle #218<a href="#wordle-218"></a></h2>
<p>
  Now that the wordle for Sat,&nbsp;22&nbsp;Jan&nbsp;2022 is solved,
  let us try the same method on Wordle #219 for
  Sun,&nbsp;23&nbsp;Jan&nbsp;2022 and see how well this method works.
  Here are the steps:
</p>
<ol>
  <li>
    <p>
      Like before, the first guess is "arose".  Entering this word
      leads to the following result:
    </p>
    <p style="font-family: monospace; font-weight: bold; color: #ddd">
      <span style="background: #333; padding: 0.5em">A</span>
      <span style="background: #585; padding: 0.5em">R</span>
      <span style="background: #333; padding: 0.5em">O</span>
      <span style="background: #333; padding: 0.5em">S</span>
      <span style="background: #333; padding: 0.5em">E</span>
    </p>
  </li>
  <li>
    <p>
      Now search for words based on the previous result.
    </p>
<pre>
<samp>$ <kbd>words | grep '.r...' | grep -v '[aose]' | head -n 5</kbd>
brick
bring
brink
briny
bruin</samp>
</pre>
    <p>
      Enter the word "brick" as the second guess.  This leads to the
      following result:
    </p>
    <p style="font-family: monospace; font-weight: bold; color: #ddd">
      <span style="background: #333; padding: 0.5em">B</span>
      <span style="background: #585; padding: 0.5em">R</span>
      <span style="background: #585; padding: 0.5em">I</span>
      <span style="background: #b93; padding: 0.5em">C</span>
      <span style="background: #333; padding: 0.5em">K</span>
    </p>
  </li>
  <li>
    <p>
      Use the previous result to refine the search further.
    </p>
<pre>
<samp>$ <kbd>words | grep '.ri[^c].' | grep c | grep -v '[aosebk]' | head -n 5</kbd>
crimp</samp>
</pre>
    <p>
      Enter "crimp" as the third guess.  This leads to the following
      result:
    </p>
    <p style="font-family: monospace; font-weight: bold; color: #ddd">
      <span style="background: #585; padding: 0.5em">C</span>
      <span style="background: #585; padding: 0.5em">R</span>
      <span style="background: #585; padding: 0.5em">I</span>
      <span style="background: #585; padding: 0.5em">M</span>
      <span style="background: #585; padding: 0.5em">P</span>
    </p>
    <p>
      Done!
    </p>
  </li>
</ol>
<h2 id="wordle-219">Wordle #219<a href="#wordle-219"></a></h2>
<p>
  Finally, let us solve Wordle #219 for
  Mon,&nbsp;24&nbsp;Jan&nbsp;2022.
</p>
<ol>
  <li>
    <p>
      Enter "arose" as the first guess to get this result:
    </p>
    <p style="font-family: monospace; font-weight: bold; color: #ddd">
      <span style="background: #333; padding: 0.5em">A</span>
      <span style="background: #333; padding: 0.5em">R</span>
      <span style="background: #585; padding: 0.5em">O</span>
      <span style="background: #333; padding: 0.5em">S</span>
      <span style="background: #333; padding: 0.5em">E</span>
    </p>
  </li>
  <li>
    <p>
      The previous result shows that the third letter is 'o' and the
      letters 'a', 'r', 's' and 'e' do not occur anywhere in the word.
      Search for words that match these constraints.
    </p>
<pre>
<samp>$ <kbd>words | grep '..o..' | grep -v '[arse]' | head -n 5</kbd>
block
blond
blood
bloom
blown</samp>
</pre>
    <p>
      Enter "block" as the second guess.  This leads to the following
      result:
    </p>
    <p style="font-family: monospace; font-weight: bold; color: #ddd">
      <span style="background: #333; padding: 0.5em">B</span>
      <span style="background: #b93; padding: 0.5em">L</span>
      <span style="background: #585; padding: 0.5em">O</span>
      <span style="background: #333; padding: 0.5em">C</span>
      <span style="background: #b93; padding: 0.5em">K</span>
    </p>
  </li>
  <li>
    <p>
      The previous result shows that the letter 'l' occurs somewhere
      in the word but not at the second place.  Similarly, the letter
      'k' occurs somewhere in the word but not at the fifth place.
      Further, the letters 'b' and 'c' do not occur anywhere in the
      word.  Search for words that match these constraints.
    </p>
<pre>
<samp>$ <kbd>words | grep '.[^l]o.[^k]' | grep l | grep k | grep -v '[arsebc]' | head -n 5</kbd>
knoll</samp>
</pre>
    <p>
      Enter "knoll" as the third guess.  It leads to the following
      result:
    </p>
    <p style="font-family: monospace; font-weight: bold; color: #ddd">
      <span style="background: #585; padding: 0.5em">K</span>
      <span style="background: #585; padding: 0.5em">N</span>
      <span style="background: #585; padding: 0.5em">O</span>
      <span style="background: #585; padding: 0.5em">L</span>
      <span style="background: #585; padding: 0.5em">L</span>
    </p>
    <p>
      Done!
    </p>
  </li>
</ol>
<!-- ### -->
<p>
  <a href="https://susam.net/wordle-with-grep.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>Simplicity of IRC</title>
<link>https://susam.net/simplicity-of-irc.html</link>
<guid isPermaLink="false">spdvn</guid>
<pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  During discussions with my friends and colleagues, whenever the
  topic of chat protocols comes up, I often remark how simple the
  Internet Relay Chat (IRC) protocol is and how this simplicity has
  fostered creativity in the lives of many young computer hobbyists
  growing up in the late 1990s and early 2000s.  For many of us who
  were introduced to the Internet during that time, writing an IRC bot
  turned out to be one of our first few non-trivial hobby programming
  projects that involved network sockets, did something meaningful and
  served actual users.
</p>
<h2 id="simplicity">Simplicity<a href="#simplicity"></a></h2>
<p>
  The underlying payloads that IRC servers and clients exchange during
  an IRC session are quite simple to read manually and understand.
  While implementing IRC servers still involves significant work to
  keep track of users and channels as well as exchanging network state
  and messages between servers, implementing IRC clients can often be
  quite simple.  With a convenient programming language, one can
  develop all kinds of fun tools and bots pretty quickly.  Only
  creativity is the limit!
</p>
<p>
  In the early days of IRC, it was quite common for someone with basic
  programming skills to write a simple IRC bot within a matter of
  hours.  Such IRC bots typically responded to requests from users,
  answered frequently asked questions, hosted trivia quiz, etc.  The
  simplicity of the protocol made it very enticing to write programs
  that could talk to IRC servers directly.  In fact, many people chose
  to write the code to parse and create IRC payloads from scratch.
  Observing the TCP/IP packets with a packet analyser such as
  Wireshark or Tcpdump was all one needed to learn about the various
  payload formats.  Additionally, back then
  <a href="https://www.rfc-editor.org/rfc/rfc1459">RFC 1459</a> served
  as a good reference to learn the IRC specification.
</p>
<p>
  As a result of the simplicity of the IRC protocol, sometimes when I
  wanted to join an IRC channel, say to seek some technical help, from
  a system without an IRC client installed, I would often just start
  a <code>telnet</code>, <code>nc</code> or <code>openssl</code>
  connection directly to my favourite IRC network and type out IRC
  protocol commands by hand to join channels and talk to users.
</p>
<h2 id="session">Session<a href="#session"></a></h2>
<p>
  To illustrate how simple the IRC protocol is, here is an example of
  a minimal IRC session that involves joining a channel and posting a
  message:
</p>
<pre>
<samp>$ <kbd>nc irc.libera.chat 6667</kbd>
:strontium.libera.chat NOTICE * :*** Checking Ident
:strontium.libera.chat NOTICE * :*** Looking up your hostname...
:strontium.libera.chat NOTICE * :*** Couldn't look up your hostname
:strontium.libera.chat NOTICE * :*** No Ident response
<kbd>NICK humpty</kbd>
<kbd>USER humpty humpty irc.libera.chat :Humpty Dumpty</kbd>
:strontium.libera.chat 001 humpty :Welcome to the Libera.Chat Internet Relay Chat Network humpty
:strontium.libera.chat 002 humpty :Your host is strontium.libera.chat[204.225.96.123/6667], running version solanum-1.0-dev
:strontium.libera.chat 003 humpty :This server was created Sat Oct 30 2021 at 17:56:22 UTC
:strontium.libera.chat 004 humpty strontium.libera.chat solanum-1.0-dev DGQRSZaghilopsuwz CFILMPQSTbcefgijklmnopqrstuvz bkloveqjfI
:strontium.libera.chat 005 humpty MONITOR=100 CALLERID=g WHOX FNC ETRACE KNOCK SAFELIST ELIST=CMNTU CHANTYPES=# EXCEPTS INVEX CHANMODES=eIbq,k,flj,CFLMPQSTcgimnprstuz :are supported by this server
:strontium.libera.chat 005 humpty CHANLIMIT=#:250 PREFIX=(ov)@+ MAXLIST=bqeI:100 MODES=4 NETWORK=Libera.Chat STATUSMSG=@+ CASEMAPPING=rfc1459 NICKLEN=16 MAXNICKLEN=16 CHANNELLEN=50 TOPICLEN=390 DEAF=D :are supported by this server
:strontium.libera.chat 005 humpty TARGMAX=NAMES:1,LIST:1,KICK:1,WHOIS:1,PRIVMSG:4,NOTICE:4,ACCEPT:,MONITOR: EXTBAN=$,ajrxz :are supported by this server
:strontium.libera.chat 251 humpty :There are 66 users and 48644 invisible on 25 servers
:strontium.libera.chat 252 humpty 35 :IRC Operators online
:strontium.libera.chat 253 humpty 11 :unknown connection(s)
:strontium.libera.chat 254 humpty 21561 :channels formed
:strontium.libera.chat 255 humpty :I have 3117 clients and 1 servers
:strontium.libera.chat 265 humpty 3117 4559 :Current local users 3117, max 4559
:strontium.libera.chat 266 humpty 48710 50463 :Current global users 48710, max 50463
:strontium.libera.chat 250 humpty :Highest connection count: 4560 (4559 clients) (301752 connections received)
:strontium.libera.chat 375 humpty :- strontium.libera.chat Message of the Day -
:strontium.libera.chat 372 humpty :- Welcome to Libera Chat, the IRC network for
:strontium.libera.chat 372 humpty :- free &amp; open-source software and peer directed projects.
:strontium.libera.chat 372 humpty :-
:strontium.libera.chat 372 humpty :- Use of Libera Chat is governed by our network policies.
:strontium.libera.chat 372 humpty :-
:strontium.libera.chat 372 humpty :- To reduce network abuses we perform open proxy checks
:strontium.libera.chat 372 humpty :- on hosts at connection time.
:strontium.libera.chat 372 humpty :-
:strontium.libera.chat 372 humpty :- Please visit us in #libera for questions and support.
:strontium.libera.chat 372 humpty :-
:strontium.libera.chat 372 humpty :- Website and documentation:  https://libera.chat
:strontium.libera.chat 372 humpty :- Webchat:                    https://web.libera.chat
:strontium.libera.chat 372 humpty :- Network policies:           https://libera.chat/policies
:strontium.libera.chat 372 humpty :- Email:                      support@libera.chat
:strontium.libera.chat 376 humpty :End of /MOTD command.
:humpty MODE humpty :+iw
<kbd>JOIN #test</kbd>
:humpty!~humpty@178.79.176.169 JOIN #test
:strontium.libera.chat 353 humpty = #test :humpty susam coolnickname ptl-tab edcragg
:strontium.libera.chat 366 humpty #test :End of /NAMES list.
<kbd>PRIVMSG #test :Hello, World!</kbd>
:susam!~susam@user/susam PRIVMSG #test :Hello, Humpty!
<kbd>PART #test</kbd>
:humpty!~humpty@178.79.176.169 PART #test
<kbd>QUIT</kbd>
:humpty!~humpty@178.79.176.169 QUIT :Client Quit
ERROR :Closing Link: 178.79.176.169 (Client Quit)</samp>
</pre>
<p>
  In the above session, the user connects to the Libera Chat network
  with the nickname <code>humpty</code>, joins a channel
  named <code>#test</code> and posts a message.
</p>
<p>
  Note that the above session is not encrypted.  By convention, IRC
  port 6667 is used for cleartext connections.  A separate port, such
  as port 6697, is available for encrypted connections.  Here is an
  example of an encrypted IRC session established with the OpenSSL
  command line tool:
</p>
<pre>
<samp>$ <kbd>openssl s_client -quiet -connect irc.libera.chat:6697 2&gt; /dev/null</kbd>
:strontium.libera.chat NOTICE * :*** Checking Ident
:strontium.libera.chat NOTICE * :*** Looking up your hostname...
:strontium.libera.chat NOTICE * :*** Couldn't look up your hostname
:strontium.libera.chat NOTICE * :*** No Ident response
NICK humpty
USER humpty humpty irc.libera.chat :Humpty Dumpty
:strontium.libera.chat 001 humpty :Welcome to the Libera.Chat Internet Relay Chat Network humpty
...</samp>
</pre>
<p>
  The ellipsis denotes lines omitted for the sake of brevity.  The
  remainder of the session is quite similar to the first example in
  this post.
</p>
<p>
  It is worth noting here that although the payload format of IRC
  protocol is quite simple, as one starts writing IRC clients, one
  would stumble upon several tiny details about the protocol that
  needs to be taken care of, e.g. authenticating to the network,
  responding to <code>PING</code> messages from the server to avoid
  ping timeouts, splitting messages into shorter messages so that the
  overall payload does not exceed the message length limit of 512
  characters, etc.  For a serious IRC client, relying on a suitable
  library that already solves these problems and implements the IRC
  specification accurately is of course going to be useful.  But for a
  hobbyist who wants to understand the protocol and write some tools
  for fun, the textual nature of the IRC protocol and its simplicity
  offers a fertile ground for experimentation and creativity.
</p>
<h2 id="join">Join<a href="#join"></a></h2>
<p>
  In case you have never used IRC but this post has piqued your
  interest and you want to try it out, you probably don't want to be
  typing out IRC payloads by hand.  You would want a good IRC client
  instead.  Let me share some convenient ways to connect to the Libera
  Chat network.  Say, you want to join the <code>#python</code>
  channel on Libera Chat network.  Here are some ways to do it:
</p>
<ul>
  <li>
    <p>
      Join via web interface:
      <a href="https://web.libera.chat/#python">web.libera.chat/#python</a>.
    </p>
  </li>
  <li>
    <p>
      Join using Irssi: On macOS, run <code>brew install irssi</code>
      to install it.  On Debian, Ubuntu or a Debian-based Linux
      system, run <code>sudo apt-get install irssi</code>.  Then
      enter <code>irssi -c irc.libera.chat</code> to connect to Libera
      Chat.  Then within Irssi, type <code>/join #python</code>.
    </p>
  </li>
</ul>
<p>
  There are numerous other ways to join IRC networks.  There are GUI
  desktop clients, web browser plugins, Emacs plugins, web-based
  services, bouncers, etc. that let users connect to IRC networks in
  various ways.  On Libera Chat, there are various channels for open
  source projects (<code>#emacs</code>, <code>#linux</code>, etc.),
  communities around specific subjects (<code>##math</code>,
  <code>#physics</code>, etc.), programming languages
  (<code>#c</code>, <code>#c++</code>, <code>#commonlisp</code>,
  etc.).  Type the <code>/join</code> command followed by a space and
  the channel name to join a channel and start posting and reading
  messages there.  It is also possible to search for channels by
  channel names.  For example, on Libera Chat, to search for all
  channels with "python" in its name, enter the IRC
  command: <code>/msg alis list python</code>.
</p>
<p>
  Although I have used Libera Chat in the examples above, there are
  plenty of other IRC networks too such as EFNet, DALNet, OFTC, etc.
  Libera Chat happens to be one of the very popular and active
  networks for open source projects and topic based communities.  I
  use it everyday, so I chose it for the examples here.  There are
  many tight-knit communities on Libera Chat.  Some of my favourite
  ones are <code>#commonlisp</code>, <code>#emacs</code>,
  <code>#python</code>, etc.  All of these have very nice and active
  communities with great attitudes towards beginners.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/simplicity-of-irc.html">Read on website</a> |
  <a href="https://susam.net/tag/irc.html">#irc</a> |
  <a href="https://susam.net/tag/networking.html">#networking</a> |
  <a href="https://susam.net/tag/protocol.html">#protocol</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/retrospective.html">#retrospective</a>
</p>
]]>
</description>
</item>
<item>
<title>Shell Eval</title>
<link>https://susam.net/shell-eval.html</link>
<guid isPermaLink="false">cvety</guid>
<pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  In this post, we will perform a few experiments to see the
  usefulness of the <code>eval</code> command for a particular
  scenario in a POSIX-compliant shell.  At first, we prepare a test
  file that contains a space in its name and define a variable as
  follows:
</p>
<pre>
<samp>$ <kbd>echo lorem ipsum &gt; "foo bar"</kbd>
$ <kbd>cmd='cat "foo bar"'</kbd></samp>
</pre>
<p>
  We will use this file and the variable in the experiments below.
  All output examples below are obtained using Dash 0.5.11 on a Debian
  GNU/Linux 11.2 (bullseye) system.  Dash stands for Debian Almquist
  Shell which is a POSIX-compliant shell available in Debian.  Any
  POSIX conforming shell should produce similar output.  On Zsh, use
  the command <code>emulate sh</code> before running these examples to
  get similar output.
</p>
<h2 id="experiment-1">Experiment 1<a href="#experiment-1"></a></h2>
<p>
  Now simply enter <code>$cmd</code> as a command into the shell.  The
  following error occurs:
</p>
<pre>
<samp>$ <kbd>$cmd</kbd>
cat: '"foo': No such file or directory
cat: 'bar"': No such file or directory</samp>
</pre>
<p>
  The error occurs because the above command expands to the
  command <code>cat</code> followed by two
  arguments: <code>"foo</code> and <code>bar"</code>.  Such an
  expansion occurs due to a concept known as field splitting.  Quoting
  from section 2.6.5 of
  <a href="https://pubs.opengroup.org/onlinepubs/9699919799/">POSIX.1-2017</a>:
</p>
<blockquote>
  <p>
    After parameter expansion, command substitution, and arithmetic
    expansion, the shell shall scan the results of expansions and
    substitutions that did not occur in double-quotes for field
    splitting and multiple fields can result.
  </p>
  <p>
    The shell shall treat each character of the IFS as a delimiter and
    use the delimiters as field terminators to split the results of
    parameter expansion, command substitution, and arithmetic
    expansion into fields.
  </p>
</blockquote>
<p>
  By default, the space character belongs to <code>IFS</code>.  Here
  is an example command to verify this:
</p>
<pre>
<samp>$ <kbd>printf "$IFS" | od -tcx1</kbd>
0000000      \t  \n
         20  09  0a
0000003</samp>
</pre>
<p>
  The hexadecimal code <samp>20</samp> in the output confirms that the
  space character is present in the value of <code>IFS</code>.
  Therefore, according to the POSIX specification, <code>$cmd</code>
  first expands to <code>cat "foo bar"</code>, then it is split into
  three fields <code>cat</code>, <code>"foo</code> and
  <code>bar"</code> and then the command <code>cat</code> is executed
  with two arguments <code>"foo</code> and <code>bar"</code>.  Since
  no files with those names exist, an error occurs.
</p>
<h2 id="experiment-2">Experiment 2<a href="#experiment-2"></a></h2>
<p>
  Next we try to double-quote the previous command to prevent field
  splitting and see what happens:
<pre>
<samp>$ <kbd>"$cmd"</kbd>
dash: 8: cat "foo bar": not found</samp>
</pre>
<p>
  The excerpt from the POSIX.1-2017 specification quoted in the
  previous section shows that field splitting does not occur for
  variable expansions within double quotes.  So the entire
  expansion <code>cat "foo bar"</code> remains intact as a single
  field and is then executed as a command.  Since there is no such
  weirdly named command, we get the above error.
</p>
<h2 id="experiment-3">Experiment 3<a href="#experiment-3"></a></h2>
<p>
  Field splitting leads to an error as seen in the first experiment.
  Preventing field splitting by double-quoting the variable expansion
  also leads to an error as seen in the second experiment.  How do we
  execute the command in the <code>cmd</code> variable?
</p>
<p>
  We need a way to somehow get the shell to parse <code>cat "foo
  bar"</code> like a shell normally does, i.e. treat each unquoted
  token as a separate field and each quoted token as a single one.
  How do we get the shell to do that?  Well, we can just invoke the
  shell itself to parse our command:
</p>
<pre>
<samp>$ <kbd>sh -c "$cmd"</kbd>
lorem ipsum</samp>
</pre>
<p>
  But the above command invokes a new shell process.  Can we avoid
  that?  Yes, using the <code>eval</code> command:
</p>
<pre>
<samp>$ <kbd>eval "$cmd"</kbd>
lorem ipsum</samp>
</pre>
<!-- ### -->
<p>
  <a href="https://susam.net/shell-eval.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Algorithms Channel Migrates to Libera Chat</title>
<link>https://susam.net/algorithms-channel-migrates-to-libera-chat.html</link>
<guid isPermaLink="false">xxzcb</guid>
<pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Our <code>##algorithms</code> that has been running on the Freenode
  IRC network for the last 14 years is now migrating to the Libera
  Chat IRC network.  Our new channel name on Libera Chat
  is <code>#algorithms</code>.
</p>

<h2 id="history">History<a href="#history"></a></h2>
<p>
  The original <code>##algorithms</code> channel on Freenode IRC began
  as an offshoot of the <code>##math</code> channel there when we
  found that there was enough interest in the latter to form a channel
  dedicated to the subject of algorithms and data structures.  I
  created the new channel for algorithms in 2007.  I used to go by the
  nick <code>spal</code> and used to be active on both channels.
</p>
<p>
  What began as a tiny hobby group around algorithms gradually grew to
  be be a thriving community with over 200 members.  I don't
  participate in the channel much anymore but a highly talented group
  of moderators helps maintain the channel.
</p>

<h2 id="migration">Migration<a href="#migration"></a></h2>
<p>
  The original Freenode staff that used to run the Freenode network
  has stepped down after a controversial change in management of
  Freenode.  The former Freenode staff has now launched a new IRC
  network named <em>Libera Chat</em>.  Thousands of channels that used
  to exist on Freenode IRC earlier have been rapidly migrating to
  Libera Chat now.  For more on the events that led to this mass
  migration, see this
  post: <a href="https://gist.github.com/joepie91/df80d8d36cd9d1bde46ba018af497409">The
  Freenode Resignation FAQ</a>.
</p>
<p>
  The <code>##algorithms</code> channel too has now moved from
  Freenode to Libera Chat.  Our new channel name
  is <code>#algorithms</code> on Libera Chat.  Our entire operator team
  for the channel is also moving to the new channel.  The old channel
  on Freenode should now be considered defunct.
</p>

<h2 id="old-channel-information">Old Channel Information<a href="#old-channel-information"></a></h2>
<p>
  Here is the last known good state of the <code>##algorithms</code>
  channel on Freenode before we declared the channel defunct.
</p>
<pre>
<samp><kbd>/msg chanserv info ##algorithms</kbd>
Information on ##algorithms:
Founder    : spal
Successor  : halberd
Registered : Oct 13 19:49:56 2007 (13y 31w 5d ago)
Mode lock  : +ntcC
Flags      : GUARD
*** End of Info ***</samp>
</pre>

<h2 id="new-channel-information">New Channel Information<a href="#new-channel-information"></a></h2>
<p>
  Here is the current information of the new channel
  named <code>#algorithms</code> on Libera Chat.
</p>
<pre>
<samp><kbd>/msg chanserv info #algorithms</kbd>
Information on #algorithms:
Founder    : susam
Successor  : libera-placeholder-account
Registered : May 19 14:52:38 2021 +0000 (2h ago)
Mode lock  : +nt-lk
Flags      : GUARD PUBACL
*** End of Info ***</samp>
</pre>

<h2 id="join">Join<a href="#join"></a></h2>
<p>
  If you are new to the world of IRC, here are some steps to join the
  Libera Chat network:
</p>
<ol>
  <li>
    <p>
      Install Irssi, an IRC chat client.  On macOS, enter the following
      command if you have Homebrew:
    </p>
    <pre><code>brew install irssi</code></pre>
    <p>
      On Debian, Ubuntu or another Debian-based Linux system, enter
      the following command:
    </p>
    <pre><code>sudo apt-get install irssi</code></pre>
    <p>
      For other systems or environments,
      see <a href="https://irssi.org/">irssi.org</a>.
  </li>
  <li>
    <p>
      Enter the following command to connect to Libera Chat:
    </p>
    <pre><code>irssi -c irc.libera.chat</code></pre>
  </li>
  <li>
    <p>
      Now type these IRC commands into Irssi to join some channels:
    </p>
    <pre>
<code>/join #algorithms
/join #irssi
/join #libera
/join #linux</code>
</pre>
  </li>
  <li>
    <p>
      Enter this IRC command into Irssi to send me a message if you
      need any help:
    </p>
    <pre><code>/msg susam hello</code></pre>
  </li>
</ol>
<p>
  You can also join the algorithms channel via Libera Chat's web
  interface
  at <a href="https://web.libera.chat/#algorithms">web.libera.chat</a>.
  This can be useful for those who want to join the network quickly
  without installing a client.  Further there is a Matrix bridge to the
  channel accessible
  via <a href="https://app.element.io/#/room/#algorithms:libera.chat">#algorithms:libera.chat</a>.
  The Matrix bridge is quite convenient for someone unfamiliar with
  IRC.  For example, you can close your browser or client and your chat
  session will still stay alive on the Matrix bridge.  You can connect
  back the next day and catch up with the messages.  Doing that with
  IRC requires setting up an IRC bouncers which may feel like
  considerable additional work.
</p>

<h2 id="freenode-wipes-database">Freenode Wipes Database<a href="#freenode-wipes-database"></a></h2>
<p>
  <strong>Update on 15 Jun 2021:</strong> All old communities on the
  Freenode IRC network are now gone.  The new Freenode staff has wiped
  out their database thereby resetting the state of their network.  We
  learnt about this when we received these global notices in our
  clients connected to the Freenode IRC network:
</p>
<pre>
<samp>-root- [Global Notice 1/3] We are moving past legacy freenode to a new
       fork.  The new freenode is launched.  You will slowly be
       disconnected and when you reconnect, you will be on the new
       freenode.  We patiently await to welcome you in freedom's
       holdout - the freenode.

-root- [Global Notice 2/3] If you're looking to connect now, you can
       already /server chat.freenode.net 6697 (ssl) or 6667
       (plaintext).  It's a new genesis for a new era.  Thank you for
       using freenode, and Hello World, from the future.  freenode is
       IRC.  freenode is FOSS.  freenode is freedom.

-root- [Global Notice 3/3] When you connect, register your nickname
       and your channel and get started.  It's a new world.  We're so
       happy to welcome you and the millions of others.  We will be
       posting more information in the coming days on our website and
       twitter.  Otherwise, see you on the other side!</samp>
</pre>
<p>
  See this thread on Reddit for a discussion on this
  event:
  <a href="https://www.reddit.com/r/irc/comments/o01tmv">reddit.com/r/irc/comments/o01tmv</a>.
</p>
<p>
  What this really means is that decades old nicks and channels are
  completely wiped out!  For example, my own 15 year old nick is now
  gone.  Our algorithms channel on the Freenode network is also gone.
  All the nicks and other channels I was familiar with are also gone.
  I am not going to bother registering my nick and our channel there
  again!  It is not worth it.  We have all moved on to Libera Chat
  already and there is nothing left on Freenode to care about it
  anymore.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/algorithms-channel-migrates-to-libera-chat.html">Read on website</a> |
  <a href="https://susam.net/tag/irc.html">#irc</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>May the Forth Be With You</title>
<link>https://susam.net/may-the-forth-be-with-you.html</link>
<guid isPermaLink="false">icfkw</guid>
<pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I wrote a tiny Forth program today to celebrate the Star Wars Day!
  Today, i.e. 04 May, is the Star Wars Day.  The date (May the fourth)
  is a pun on the popular Star Wars catchphrase, "May the Force be
  with you."  Forth, the programming language, is named so as a
  shortened form of the word "Fourth".  The name stood for "fourth
  generation".  Quoting from
  <a href="https://web.archive.org/web/20160409083846/http://www.colorforth.com/HOPL.html">Forth
  - The Early Years</a>:
</p>
<blockquote>
  The file holding the interpreter was labeled FORTH, for 4th (next)
  generation software - but the operating system restricted file names
  to 5 characters.
</blockquote>
<p>
  So the Forth program presented in this post to print a slightly
  altered Star Wars catchphrase using ASCII stars (asterisks) is like
  a double pun!  Or is that a triple pun?
</p>
<p>
  Also, if Yoda were a programmer, I think Forth would be his most
  favourite programming language.  Yoda would say, "A Forth programmer
  I am.  Hrmmm," and he would add two and two with, <code>2 2
  +</code>.  It just makes a lot of sense to celebrate May the 4th
  with some Forth programming.
</p>
<p>
  Here is the program I wrote to celebrate the day:
</p>
<pre>
<code>: stars
   0  do  [char] * emit  loop  ;

: lines
   0  do  cr  loop  ;

: print
   dup 40 &gt; if  40 - lines  else
   dup 20 &gt; if  20 - spaces  else
      stars
   then then  ;

: start
   0  do  print  loop  ;

                      41 11 37 11 36 5 28 41 5 27 5
                     31 5 27 5 33 5 28 41 5 31 5 27
                    5 31 5 31  5 28 41 5  33 5 25 5
                   33 5 30 5 28 41 5 35 5 23 5 35 5
                  29 5 28 41  5 35 5 23 5 35 5 27 9
                 26 41 5 35  5 23 5 35  5 26 5 21 5
                25 41 5 35 5 23 5 35 5 25 5 23 5 24
               41 5 35 5 24 5 33  5 25 5 25 5 23 41
              5 35 5  25 5 31 5   25 5 27 5 22 41 5
             35 5 27 5 27 5 26    5 29 5 21 41 5 35
            5 30 11 28 5 31 5     43 2 24 2 25 2 25
           2  26 1 26 1 28 8      23 7 33 41 2 24 2
          25 2 25 2 25 3 24       3 33 2  22 1 25 2
         33 41 8 25 2 25 2        24 2 21 2 22 2 21
        2 29 5 23 7 33 41         2 24 2  25 2 25 2
       23 2 24 3 23 2 31          2 22 1 25 2 33 41
      2 24 2  22 8 22 2           22 2 26 1 25 2 24
     8 23 7 22 11 43 3            27 3 27 3 26 3 28
    3 26 8  35 3 41 3             27 3 27 3 27 3 27
   3  24 3 26 3 33 3              41 3 27 3 27 3 28
  3 26 3 23 3  28 3               32 3 41 3 27 3 27
 3 29 3  25 3 22 3                30 3 31  3  41 13
27 3  29 11  22 3 30 3 25 9 41 13 27 3 27 13 22 3 30 3 25 9
41 3 27 3 27 3 26 3 28 3  22 3 30 3 31 3  41 3 27 3 27 3 26
3 28 3 23 3 28 3 32 3 41 3 27 3 22 13 22 13 24 4 25 3 23 13
41 3 27 3 22 13 24 11  26 8 25 13 43 11 22 8 22 2 24 2 25 2
30 2 23 2 25 2 22 2 23 1 23 2 41 2 22 2 24 2 25 2 30 2 24 7
23 2 22 3 22 2 41 5 22 8 25 2 29 4 24 2 21 2 24 2 21 2 21 2
                                  21  2 41 2  22  2
                                  24 2 25 2 28 2 22
                                  2 24 3 25 4 23  4
                                  41  8 22 2  24  2
                                  22 8 24 2 24 2 24
                                  1  26 3 25  3 473
start
bye</code>
</pre>
<p>
  Here is the output:
</p>
<pre>
<samp>***     ***      *    **    **    ********  **    **  ********
****   ****     ***    **  **        **     **    **  **
** ** ** **    ** **    ****         **     ********  *****
**  ***  **   *******    **          **     **    **  **
**   *   **  **     **   **          **     **    **  ********  ***********


*************     ********      ***********    *************  ***       ***
*************   ***     ****    *************  *************  ***       ***
***            ***        ***   ***        ***      ***       ***       ***
***           ***          ***  ***        ***      ***       ***       ***
*********     ***          ***  *************       ***       *************
*********     ***          ***  ***********         ***       *************
***           ***          ***  ***     ***         ***       ***       ***
***            ***        ***   ***      ***        ***       ***       ***
***             ***      ***    ***       ***       ***       ***       ***
***               ********      ***        ***      ***       ***       ***


***********  *******   ********    **     *      **  **  ********  **    **
             **     *  **           **   ***    **   **     **     **    **
             *******   *****         ** **  ** **    **     **     ********
             **     *  **             ***    ***     **     **     **    **
             *******   ********        *      *      **     **     **    **


*****           *****        ***********          *****               *****
 *****         *****      *****       *****       *****               *****
  *****       *****     *****           *****     *****               *****
   *****     *****     *****             *****    *****               *****
    *****   *****     *****               *****   *****               *****
     ***** *****      *****               *****   *****               *****
      *********       *****               *****   *****               *****
        *****         *****               *****   *****               *****
        *****          *****             *****     *****             *****
        *****           *****           *****       *****           *****
        *****             *****       *****           *****       *****
        *****                ***********                 ***********</samp>
</pre>
<p>
  To run this program on your system and obtain the above output,
  follow these steps:
</p>
<ol>
  <li>
    <p>
      Install GForth.  On macOS, enter the following command if you
      have Homebrew:
    </p>
    <pre><code>brew install gforth</code></pre>
    <p>
      On Debian, Ubuntu or another Debian-based Linux system, enter
      the following command:
    </p>
    <pre><code>sudo apt-get install gforth</code></pre>
    <p>
      For other systems or environments,
      see <a href="https://gforth.org/">gforth.org</a>.
    </p>
  </li>
  <li>
    <p>
      Save the above program in a file, say, <code>may4.fs</code> and
      run it with this command:
    </p>
    <pre><code>gforth may4.fs</code></pre>
  </li>
  <li>
    <p>
      Enjoy!
    </p>
  </li>
</ol>
<p>
  If you do not know Forth but found this post fun and want to learn a
  little bit of Forth,
  see <a href="https://www.forth.com/starting-forth/">Starting
  Forth</a>.
</p>
<p>
  The Forth program in this post and the output is also available as a
  Git repository
  here: <a href="https://github.com/susam/may4">github.com/susam/may4</a>.
</p>
<p>
  By the way, Forth brings back the fun in computing for me that I
  once experienced when I began learning to code with Logo.  It is
  simple, distraction-free and fun!  I will conclude this post with a
  famous quote from Alan J. Perlis:
</p>
<blockquote>
  I think that it's extraordinarily important that we in computer
  science keep fun in computing.  When it started out, it was an awful
  lot of fun.  Of course, the paying customers got shafted every now
  and then, and after a while we began to take their complaints
  seriously.  We began to feel as if we really were responsible for
  the successful, error-free perfect use of these machines.  I don't
  think we are.  I think we're responsible for stretching them,
  setting them off in new directions, and keeping fun in the house.  I
  hope the field of computer science never loses its sense of fun.
</blockquote>
<!-- ### -->
<p>
  <a href="https://susam.net/may-the-forth-be-with-you.html">Read on website</a> |
  <a href="https://susam.net/tag/forth.html">#forth</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>My Code from 2020</title>
<link>https://susam.net/code-2020.html</link>
<guid isPermaLink="false">uiucf</guid>
<pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  This is a brief retrospective of my free and open source work this
  year:
</p>
<ul>
  <li>
    <a href="https://github.com/susam/texme">TeXMe</a>: This is an old
    project that creates self-rendering Markdown + LaTeX documents.
    There were two new TeXMe releases last year.  The new releases add
    support for the new and improved MathJax 3 and introduce a new
    pseudo-LaTeX Markdown priority environment.  Version 1.0.0 will be
    coming up next year with more features.
  </li>
  <li>
    <a href="https://github.com/susam/emacs4cl">Emacs4CL</a>: A 35
    line Emacs initialisation file to quickly set up vanilla Emacs for
    Common Lisp programming.  It provides a good middle ground between
    configuring Emacs manually and installing a ready-made package
    like Portacle.
  </li>
  <li>
    <a href="https://github.com/susam/spcss">SPCSS</a>: A distillation
    of writing CSS by hand for 20 years.  I have picked the best
    pieces from my boilerplate stylesheets and shared it here.
  </li>
</ul>
<p>
  That's it for now!  See you next year!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code-2020.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/retrospective.html">#retrospective</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 0.2.0</title>
<link>https://susam.net/code/news/mathb/0.2.0.html</link>
<guid isPermaLink="false">flsrk</guid>
<pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB 0.2.0 is a minor update of MathB, a web-based mathematics
  pastebin service.  The key change in this release is the removal of
  image support.  Image tags are now disallowed in new posts and older
  posts containing images will no longer be rendered.  This update
  aims to mitigate spam on the live service
  at <code>https://mathb.in/</code>.
</p>
<p>
  To read more about this project, please see
  <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<p>
  See the file
  <a href="https://github.com/susam/mathb/blob/main/CHANGES.md">CHANGES.md</a>
  for a detailed changelog.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/0.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Of Course "changeme" Is Valid Base64</title>
<link>https://susam.net/of-course-changeme-is-valid-base64.html</link>
<guid isPermaLink="false">bkame</guid>
<pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Today, I came across
  this <a href="https://3fx.ch/blog/2019/12/09/changeme-is-valid-base64/">blog
  post</a> regarding how the author of the post used the
  string <code>"changeme"</code> as test data while testing a Base64
  decoding functionality in their application.  However, the author
  incorrectly believed that this test data is not a valid
  Base64-encoded string and therefore would fail to decode
  successfully when decoded as Base64.  To their surprise, they found
  that this string <code>"changeme"</code> does in fact decode
  successfully.
</p>
<p>
  The post did not go any further into understanding why
  indeed <code>"changeme"</code> is a valid Base64-encoded string and
  why it can successfully be decoded into binary data.  It appears
  that the author was using Base64 encoding scheme as a black box.
</p>
<p>
  I think it is worth noting and illustrating that any alphanumeric
  string with a length that is a multiple of 4 is a valid
  Base64-encoded string.  Here are some examples that illustrate this:
</p>
<pre>
<samp>$ <kbd>printf AAAA | base64 --decode | od -tx1</kbd>
0000000    00  00  00
0000003
$ <kbd>printf AAAAAAAA | base64 --decode | od -tx1</kbd>
0000000    00  00  00  00  00  00
0000006
$ <kbd>printf AQEB | base64 --decode | od -tx1</kbd>
0000000    01  01  01
0000003
$ <kbd>printf AQID | base64 --decode | od -tx1</kbd>
0000000    01  02  03
0000003
$ <kbd>printf main | base64 --decode | od -tx1</kbd>
0000000    99  a8  a7
0000003
$ <kbd>printf scrabble | base64 --decode | od -tx1</kbd>
0000000    b1  ca  da  6d  b9  5e
0000006
$ <kbd>printf 12345678 | base64 --decode | od -tx1</kbd>
0000000    d7  6d  f8  e7  ae  fc
0000006</samp>
</pre>
<p>
  Further, since <code>+</code> and <code>/</code> are also used as
  symbols in Base64 encoding (for binary <code>111110</code>
  and <code>111111</code> respectively), we also have a few more
  interesting examples:
</p>
<pre>
<samp>$ <kbd>printf 1+2+3+4+5/11 | base64 --decode | od -tx1</kbd>
0000000    d7  ed  be  df  ee  3e  e7  fd  75
0000011
$ <kbd>printf "\xd7\xed\xbe\xdf\xee\x3e\xe7\xfd\x75" | base64</kbd>
1+2+3+4+5/11</samp>
</pre>
<p>
  I think it is good to understand why any string with a length that
  is a multiple of 4 turns out to be a valid Base64-encoded string.
  The Base64 encoding scheme encodes each group of 6 bits in the
  binary input with a chosen ASCII character.  For every possible
  6-bit binary value, we have assigned an ASCII character that appears
  in the Base64-encoded string.  Each output ASCII character can be
  one of the 64 carefully chosen ASCII characters: lowercase and
  uppercase letters from the English alphabet, the ten digits from the
  Arabic numerals, the plus sign (<code>+</code>) and the forward
  slash (<code>/</code>).  For example, the bits <code>000000</code>
  is encoded as <code>A</code>, the bits <code>000001</code> is
  encoded as <code>B</code> and so on.  The equals sign
  (<code>=</code>) is used for padding but that is not something we
  will discuss in detail in this post.
</p>
<p>
  The smallest positive multiple of 6 that is also a multiple of 8 is
  24.  Thus every group of 3 bytes (24 bits) of binary data is
  translated to 4 ASCII characters in its Base64-encoded string.  Thus
  the entire input data is divided into groups of 3 bytes each and
  then each group of 3 bytes is encoded into 4 ASCII characters.  What
  if the last group is less than 3 bytes long?  There are certain
  padding rules for such cases but I will not discuss them right now
  in this post.  For more details on the padding rules,
  see <a href="https://www.rfc-editor.org/rfc/rfc4648">RFC 4648</a>.
</p>
<p>
  Now as a natural result of the encoding scheme, it turns out that
  any 4 alphanumeric characters is a valid Base64 encoding of some
  binary data.  That's because for every alphanumeric character, we
  can find some 6-bit binary data that would be translated to it
  during Base64 encoding.  This is the reason why any alphanumeric
  string with a length that is a multiple of 4 is a valid
  Base64-encoded string and can be successfully decoded to some binary
  data.
</p>

<!-- ### -->
<p>
  <a href="https://susam.net/of-course-changeme-is-valid-base64.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Hacktoberfest Spam</title>
<link>https://susam.net/hacktoberfest-spam.html</link>
<guid isPermaLink="false">dxedt</guid>
<pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I received two pull requests for two of my projects on GitHub today.
  I am the author of one and the maintainer of the other.
</p>
<p>
  At first, the pull requests did not make sense at all.  One of them
  made minor changes to a README, e.g. changing "this book" to "the
  book".  It did not fix a typo or grammatical error.  It merely chose
  a word different from the one I had chosen.  In fact, I preferred
  "this book", so the pull request (PR) was inconsistent with my
  preference.  There was no explanation whatsoever regarding why this
  change was warranted.  Then I looked at the pull request author's
  profile and found that the same person had submitted several such
  trivial pull requests to other projects too, all of them changing
  "this" to "the" at some places in various README files.
</p>
<p>
  It all began to make sense when I looked at the calendar.  It was
  Oct 01.  This looked like pull request spam due to Hacktoberfest.
  For now, I just labelled the pull requests as "invalid" (as
  suggested by the
  <a href="https://hacktoberfest.digitalocean.com/faq/">Hacktoberfest
  FAQ</a>), closed the pull requests and moved on.
</p>
<p>
  Like all good things created with good intentions on the Internet,
  spam is hurting this event and bringing bad reputation to it.  The
  possibility of large scale, endless spam should be worked into the
  design of any new Internet-based event or solution.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/hacktoberfest-spam.html">Read on website</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Unix Timestamp 1600000000</title>
<link>https://susam.net/unix-timestamp-1600000000.html</link>
<guid isPermaLink="false">wvrcr</guid>
<pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  At 2020-09-13 12:26:40 UTC, the Unix timestamp is going to turn
  1600000000.
</p>
<h2 id="unix-timestamp-conversion">Unix Timestamp Conversion<a href="#unix-timestamp-conversion"></a></h2>
<p>
  The following subsections show a few examples of converting the Unix
  timestamp to a human-readable date.
</p>
<h3 id="python">Python<a href="#python"></a></h3>
<pre>
<samp>$ <kbd>python3 -q</kbd>
&gt;&gt;&gt; <kbd>from datetime import datetime</kbd>
&gt;&gt;&gt; <kbd>datetime.utcfromtimestamp(1_600_000_000)</kbd>
datetime.datetime(2020, 9, 13, 12, 26, 40)</samp>
</pre>
<h3 id="gnu-date">GNU date (Linux)<a href="#gnu-date"></a></h3>
<pre>
<samp>$ <kbd>date -ud @1600000000</kbd>
Sun Sep 13 12:26:40 UTC 2020</samp>
</pre>
<h3 id="bsd-date">BSD date (macOS, FreeBSD, OpenBSD, etc.)<a href="#bsd-date"></a></h3>
<pre>
<samp>$ <kbd>date -ur 1600000000</kbd>
Sun Sep 13 12:26:40 UTC 2020</samp>
</pre>
<h2 id="other-such-dates">Other Such Dates<a href="#other-such-dates"></a></h2>
<p>
  All such dates (in UTC) until the end of the current century:
</p>
<pre>
<samp>$ <kbd>python3 -q</kbd>
&gt;&gt;&gt; <kbd>from datetime import datetime</kbd>
&gt;&gt;&gt; <kbd>for t in range(0, 4_200_000_000, 100_000_000):</kbd>
... <kbd>    print(f'{t:13_d} - {datetime.utcfromtimestamp(t)}')</kbd>
...
            0 - 1970-01-01 00:00:00
  100_000_000 - 1973-03-03 09:46:40
  200_000_000 - 1976-05-03 19:33:20
  300_000_000 - 1979-07-05 05:20:00
  400_000_000 - 1982-09-04 15:06:40
  500_000_000 - 1985-11-05 00:53:20
  600_000_000 - 1989-01-05 10:40:00
  700_000_000 - 1992-03-07 20:26:40
  800_000_000 - 1995-05-09 06:13:20
  900_000_000 - 1998-07-09 16:00:00
1_000_000_000 - 2001-09-09 01:46:40
1_100_000_000 - 2004-11-09 11:33:20
1_200_000_000 - 2008-01-10 21:20:00
1_300_000_000 - 2011-03-13 07:06:40
1_400_000_000 - 2014-05-13 16:53:20
1_500_000_000 - 2017-07-14 02:40:00
1_600_000_000 - 2020-09-13 12:26:40
1_700_000_000 - 2023-11-14 22:13:20
1_800_000_000 - 2027-01-15 08:00:00
1_900_000_000 - 2030-03-17 17:46:40
2_000_000_000 - 2033-05-18 03:33:20
2_100_000_000 - 2036-07-18 13:20:00
2_200_000_000 - 2039-09-18 23:06:40
2_300_000_000 - 2042-11-19 08:53:20
2_400_000_000 - 2046-01-19 18:40:00
2_500_000_000 - 2049-03-22 04:26:40
2_600_000_000 - 2052-05-22 14:13:20
2_700_000_000 - 2055-07-24 00:00:00
2_800_000_000 - 2058-09-23 09:46:40
2_900_000_000 - 2061-11-23 19:33:20
3_000_000_000 - 2065-01-24 05:20:00
3_100_000_000 - 2068-03-26 15:06:40
3_200_000_000 - 2071-05-28 00:53:20
3_300_000_000 - 2074-07-28 10:40:00
3_400_000_000 - 2077-09-27 20:26:40
3_500_000_000 - 2080-11-28 06:13:20
3_600_000_000 - 2084-01-29 16:00:00
3_700_000_000 - 2087-04-01 01:46:40
3_800_000_000 - 2090-06-01 11:33:20
3_900_000_000 - 2093-08-01 21:20:00
4_000_000_000 - 2096-10-02 07:06:40
4_100_000_000 - 2099-12-03 16:53:20</samp>
</pre>
<h2 id="update">Update<a href="#update"></a></h2>
<p>
  Here is a screenshot I took at Unix timestamp 1600000000:
  <a href="https://twitter.com/susam/status/1305120936098627589">twitter.com/susam/status/130512093609862758</a>.
</p>
<p>
  Reproduced as text below:
</p>
<pre>
<samp>$ <kbd>date -u; date; date +%s</kbd>
Sun Sep 13 12:26:39 UTC 2020
Sun Sep 13 17:56:39 IST 2020
1599999999
$ <kbd>date -u; date; date +%s</kbd>
Sun Sep 13 12:26:40 UTC 2020
Sun Sep 13 17:56:40 IST 2020
1600000000</samp>
</pre>
<p>
  An important point worth noting from the POSIX.1-2008 specification:
</p>
<blockquote>
  Coordinated Universal Time (UTC) includes leap seconds.  However, in
  POSIX time (seconds since the Epoch), leap seconds are ignored (not
  applied) to provide an easy and compatible method of computing time
  differences.  Broken-down POSIX time is therefore not necessarily
  UTC, despite its appearance.
</blockquote>
<p>
  See <a href="https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16">&sect; A.4.16</a>
  of the POSIX.1-2008 specification for more details.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/unix-timestamp-1600000000.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Pointers in K&amp;R</title>
<link>https://susam.net/pointers-in-knr.html</link>
<guid isPermaLink="false">iwasp</guid>
<pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I learnt C from the book <em>The C Programming Language, 2nd
  ed.</em> (K&amp;R) written by Brian Kernighan and Dennis Ritchie
  about 18 years ago during my engineering studies.  The subject of
  pointers was generally believed to be scary among fellow students
  and many of them bought pretty fat books that were dedicated solely
  to the topic of pointers.  However, when I reached Chapter 5 of the
  book , I found that it did a wonderful job at teaching pointers in
  merely 34 pages.  The chapter opens with this sentence:
</p>
<blockquote>
  A pointer is a variable that contains the address of a variable.
</blockquote>
<p>
  The exact point at which the whole topic of pointers became crystal
  clear was when I encountered this sentence in &sect; 5.3 Pointers
  and Arrays:
</p>
<blockquote>
  Rather more surprising, at first sight, is the fact that a reference
  to <code>a[i]</code> can also be written as <code>*(a+i)</code>.
</blockquote>
<p>
  Indeed, it was easy to confirm that by compiling and running the
  following program:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main() {
    int a[] = {2, 3, 5, 7, 11};
    printf("%d\n", *(a + 2));
    printf("%d\n", a[2]);
    printf("%d\n", 2[a]);
    return 0;
}</code>
</pre>
<p>
  The output is:
</p>
<pre>
<samp>5
5
5</samp>
</pre>
<p>
  C was the first serious programming language I was learning back
  then and at that time, I don't think I could have come across a
  better book than K&amp;R to learn this subject.  Like many others, I
  too feel that this book is a model for technical writing.  I wish
  more technical books were written like this with clear presentation
  and concise treatment.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/pointers-in-knr.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a>
</p>
]]>
</description>
</item>
<item>
<title>Good Quality DOSBox Video Capture</title>
<link>https://susam.net/good-quality-dosbox-video-capture.html</link>
<guid isPermaLink="false">dyzhs</guid>
<pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="vintage-dos-programs">Vintage DOS Programs<a href="#vintage-dos-programs"></a></h2>
<p>
  Once in a while, I fire up one of the vintage DOS games or language
  interpreters in DOSBox for nostalgia's sake.  DOSBox is an emulator
  program that emulates IBM PC compatible computers running DOS.
  Trying my hands on these antiquated DOS programs now evokes old
  memories from my childhood days days when I first came across
  computers as part of our primary school curriculum.
</p>
<p>
  Computers were much simpler in those days.  The ones in our school
  were IBM PC compatible computers with mostly monochrome displays.  A
  couple of them had support for a very limited number of colours
  provided by CGA or EGA graphics cards.  The ability to boot a
  computer using a 5&frac14;-inch floppy disk containing MS-DOS, load
  a Logo or BASIC interpreter or a computer game from another floppy
  disk and then write some programs or play a few games without any
  distraction had its own charm that I find missing from modern day
  computing.
</p>
<p>
  Often while using old DOS programs with DOSBox in this day and age,
  I want to take screenshot captures or video captures of the DOSBox
  sessions and share them with my friends.  In this article, I will
  explain how I create good quality screenshot captures and video
  captures of DOSBox sessions in formats that I can share with others.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#vintage-dos-programs">Vintage DOS Programs</a></li>
  <li><a href="#software-versions">Software Versions</a></li>
  <li><a href="#ibm-pc-logo-in-dosbox">IBM PC Logo in DOSBox</a></li>
  <li><a href="#digger-in-dosbox">Digger in DOSBox</a></li>
  <li><a href="#dosbox-screenshot-capture">DOSBox Screenshot Capture</a></li>
  <li><a href="#dosbox-video-capture">DOSBox Video Capture</a></li>
  <li><a href="#dosbox-audio-video-capture">DOSBox Audio/Video Capture</a></li>
  <li><a href="#dosbox-gif-animation">DOSBox GIF Animation</a></li>
  <li><a href="#references">References</a></li>
</ul>
<h2 id="software-versions">Software Versions<a href="#software-versions"></a></h2>
<p>
  Since this article involves several pieces of software, some of what
  is written here may not hold good in future if the behaviour of any
  of these software tools change in future.  The list below contains
  the versions of all software tools that were used to test the
  commands provided in this article:
</p>
<ol>
  <li>macOS High Sierra 10.13.6</li>
  <li>DOSBox 0.74-3</li>
  <li>FFmpeg 4.3.1</li>
  <li>ImageMagick 7.0.10-28</li>
  <li>IBM Personal Computer Logo Version 1.00</li>
  <li>Digger (Original PC booter version by Windmill Software)</li>
</ol>
<p>
  Note that both Logo and Digger programs in the list above are DOS
  programs that were released in 1983.  They cannot be run directly on
  modern computers but they can be run with DOSBox since it emulates
  old IBM PC compatible computers.
</p>
<h2 id="ibm-pc-logo-in-dosbox">IBM PC Logo in DOSBox<a href="#ibm-pc-logo-in-dosbox"></a></h2>
<p>
  IBM Personal Computer Logo developed by Logo Computer Systems Inc.
  (LCSI) in 1983 was the first piece of software I got introduced to
  while learning computers as a kid.  I came across it at the age of 8
  when I was in Class 4 and our school had a 5&frac14;-inch floppy
  disk with IBM PC Logo on it.  As a result, Logo was the first
  programming language I learnt in my life.  About 20 years later, I
  would realise that the first programming language I learnt is a
  dialect of Lisp.  How wonderful!
</p>
<figure id="logo-welcome-screenshot">
  <a href="files/blog/dosbox-logo-0.png"><img
     src="files/blog/dosbox-logo-0.png"
     alt="A screenshot of IBM Personal Computer Logo with copyright notices of IBM and LCSI, welcome message and question mark prompt"></a>
  <figcaption>
    Welcome screen of IBM Personal Computer Logo
  </figcaption>
</figure>
<p>
  If the Logo interpreter program <code>LOGO.COM</code> exists in the
  current directory, it can be run with DOSBox using the following
  command:
</p>
<pre><code>dosbox LOGO.COM</code></pre>
<p>
  One of the things I enjoyed drawing with Logo was a grid of
  overlapping circles like this:
</p>
<figure id="logo-program-screenshot">
  <a href="files/blog/dosbox-logo-1.png"><img
     src="files/blog/dosbox-logo-1.png"
     alt="A grid made with 20 circles along with Logo source code for it"></a>
  <figcaption>
    Grid of circles drawn with IBM Personal Computer Logo
  </figcaption>
</figure>
<p>
  Here is the Logo source code for the above output:
</p>
<pre><code>REPEAT 20 [REPEAT 180 [FD 1 RT 2] RT 18]</code></pre>
<h2 id="digger-in-dosbox">Digger in DOSBox<a href="#digger-in-dosbox"></a></h2>
<p>
  At around the same time I learnt Logo, I also came across Digger, a
  computer game for IBM PC developed by Windmill Software in 1983.
</p>
<figure id="digger-welcome-screenshot">
  <a href="files/blog/dosbox-digger-0.png"><img
     src="files/blog/dosbox-digger-0.png"
     alt="A screenshot of Digger welcome screen with the names and pictures of various game characters with a copyright notice of Windmill Software"></a>
  <figcaption>
    Welcome screen of Digger
  </figcaption>
</figure>
<p>
  If the Digger program <code>DIGGER.COM</code> exists in the
  directory, it can be run using DOSBox with the following command:
</p>
<pre><code>dosbox DIGGER.COM -c "config -set cpu cycles=500" -machine cga</code></pre>
<p>
  The <code>-machine cga</code> option emulates a machine with Colour
  Graphics Adapter (CGA) because Digger requires a machine of this
  type to run correctly.  The <code>cycles=500</code> configuration
  option slows down the speed at which DOSBox emulates instructions in
  order to emulate the slow machines of olden days.  Without this
  option, Digger runs too fast to be able to be conveniently playable.
</p>
<figure id="digger-game-screenshot">
  <a href="files/blog/dosbox-digger-1.png"><img
     src="files/blog/dosbox-digger-1.png"
     alt="A screenshot of underground maze in the game of Digger"></a>
  <figcaption>
    A game of Digger that has just begun
  </figcaption>
</figure>
<p>
  Digger has an excellent gameplay where the player digs through
  underground tunnels to pick up emeralds, drop gold bags to release
  the gold or squash nobbins and hobbins, collect the released gold to
  earn more points and so on.  It uses bright and attractive colours.
  The music is great.  When Digger was released in 1983, it was quite
  advanced for its time.
</p>
<h2 id="dosbox-screenshot-capture">DOSBox Screenshot Capture<a href="#dosbox-screenshot-capture"></a></h2>
<p>
  The screenshots above were obtained by running IBM PC Logo and the
  original 1983 PC booter version of Digger on DOSBox and then
  resizing the screenshots such that their aspect ratio matches the
  aspect ratio of old CRT computer monitors.
</p>
<p>
  To obtain the screenshots, we first press
  <kbd>ctrl</kbd>+<kbd>f5</kbd> while DOSBox is running.  The paths of
  the screenshots appear in the console output at the terminal where
  DOSBox was launched.  For example:
</p>
<pre>
<samp>Capturing Screenshot to /Users/susam/Library/Preferences/capture/logo_000.png
Capturing Screenshot to /Users/susam/Library/Preferences/capture/logo_001.png</samp>
</pre>
<pre>
<samp>Capturing Screenshot to /Users/susam/Library/Preferences/capture/digger_000.png
Capturing Screenshot to /Users/susam/Library/Preferences/capture/digger_001.png</samp>
</pre>
<p>
  The screenshots obtained in this manner have an aspect ratio of 8:5
  which makes the output look stretched horizontally.  The old CRT
  computer monitors for which these old DOS programs were written had
  an aspect ratio of 4:3 instead.  This stretched look can be fixed by
  resizing the images to an aspect ratio of 4:3.  Here are the
  commands used to fix the aspect ratio and produce the images:
</p>
<pre>
<code>convert logo_000.png -sample '1920x1440!' dosbox-logo-0.png
convert logo_001.png -sample '1920x1440!' dosbox-logo-1.png</code>
</pre>
<pre>
<code>convert digger_000.png -sample '1920x1440!' dosbox-digger-0.png
convert digger_001.png -sample '1920x1440!' dosbox-digger-1.png</code>
</pre>
<!--
According to Screen Resolution Statistics for January 2020 by
w3schools.com, here are the statistics of browser resolutions:

Resolution   %age  Cumulative

Lower         9.0    9.0
1280 x  720   3.9   12.9
1024 x  768   1.4   14.3
1360 x  768   1.0   15.3
1366 x  768  27.6   42.9
1280 x  800   1.8   44.7
1536 x  864   9.8   54.5
1440 x  900   5.6   60.1
1600 x  900   4.1   64.2
1280 x 1024   2.4   66.6
1680 x 1050   2.6   69.2
1920 x 1080  20.3   89.5
1920 x 1200   1.5   91.0
2560 x 1440   1.7   92.7
Other High    7.3  100.0

1440 x 1080 is strictly larger than 54.5% displays.
1600 x 1200 is strictly larger than 66.6% displays.
1920 x 1440 is strictly larger than 91.0% displays.
x 1080 is larger than 89.5% displays
x 1200 is larger than 91.0% displays.
x 1440 is larger than 92.7% displays
-->
<p>
  The <code>convert</code> program comes with ImageMagick.  There are
  a few things worth noting here:
</p>
<ul>
  <li>
    We use the <code>-sample</code> option here to resize the image as
    opposed to using <code>-resize</code> or <code>-scale</code>.  The
    <code>-resize</code> or <code>-scale</code> option would smooth
    the jagged edges in the text and graphics by introducing
    additional colours.  The <code>-resize</code> option is great for
    real world images where we do want the edges to be smooth while
    scaling up or down but in these screenshots we want to retain the
    crisp and jagged edges that is typical of DOSBox and the old CRT
    monitors.  Therefore we use the <code>-sample</code> option that
    does not introduce any new colours.  Instead it uses
    nearest-neighbour interpolation (point sampling) to decide the
    colours of the scaled image.
  </li>
  <li>
    The <code>!</code> flag is used to ignore the aspect ratio of the
    original image.  Without this flag, the output files would be
    1920x1200 in size, that is, the largest size with an aspect ratio
    of 8:5 that fits in a 1920x1440 box.  With this flag, the original
    aspect ratio of 8:5 is ignored and the output is exactly 1920x1440
    in size.
  </li>
</ul>
<h2 id="dosbox-video-capture">DOSBox Video Capture<a href="#dosbox-video-capture"></a></h2>
<p>
  To start capturing video of DOSBox, we
  press <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>f5</kbd>.  The same key
  combination stops capturing video.  The following output appears in
  the console output to show where the video file is saved:
</p>
<pre>
<samp>Capturing Video to /Users/susam/Library/Preferences/capture/logo_000.avi
Stopped capturing video.</samp>
</pre>
<p>
  Say, I want to share a video capture of DOSBox with Logo running on
  it with my friends who might be on devices that do not support
  playing AVI files.  The following FFmpeg command converts the video
  to a format that can be distributed widely and played on a wide
  range of devices and players:
</p>
<pre>
<code>ffmpeg -i logo_000.avi -an -c:v libx264 -preset veryslow \
       -crf 17 -vf format=yuv420p,scale=1920:1440:flags=neighbor,fps=30 \
       dosbox-logo.mp4</code>
</pre>
<p>
  Here is what the output looks like:
</p>
<figure id="logo-video">
  <video controls>
    <source src="files/blog/dosbox-logo.mp4" type="video/mp4">
  </video>
  <figcaption>
    Video capture of IBM Personal Computer Logo
    [<a href="files/blog/dosbox-logo.mp4">MP4</a>]
  </figcaption>
</figure>
<p>
  Let us briefly discuss the various FFmpeg options used here:
</p>
<ul>
  <li>
    <p>
      <code>-i logo_000.avi</code>
    </p>
    <p>
      This, of course, specifies the input file.
    </p>
  </li>
  <li>
    <p>
      <code>-an</code>
    </p>
    <p>
      The audio is silent in this video, so we reduce the file size a
      little by disabling the audio stream with this option.  For
      example, without this option the output file size was 317 KB but
      with this option it turned out to be 282 KB.
    </p>
    <p>
      This option should not be specified if the audio stream needs to
      preserved, for example, with DOS games that have audio.  We will
      see an example of this in the next section.
    </p>
  </li>
  <li>
    <p>
      <code>-c:v libx264</code>
    </p>
    <p>
      This option selects the x264 encoder to encode the video stream
      into H.264 format.  H.264 is also known as MPEG-4 Part 10,
      Advanced Video Coding (MPEG-4 AVC).  Currently, it is the most
      popular format for recording, compression and distribution of
      video content.
    </p>
  </li>
  <li>
    <p>
      <code>-crf 17</code>
    </p>
    <p>
      This option provides visually lossless output, that is, high
      quality output without any loss in quality that can be perceived
      by human eyes.  For completely lossless output, we need to use
      the <code>-crf 0</code> option.  However, this option sets the
      video profile to <code>High 4:4:4 Predictive</code> which
      prevents the video from playing in some video players.  This
      issue is discussed in more detail in the point
      about <code>yuv420p</code> pixel format that comes later in this
      list.  Since <code>-crf 0</code> cannot be used due to this
      issue, the next best option is
      <code>-crf 1</code> which while not completely lossless is much
      better than visually lossless.  Since it trades quality for
      output size, the output file turns out to be 319 KB in size.  The
      <code>-crf 51</code> option produces the most lossy output, that
      is, the worst quality output with a file size of 159 KB.
    </p>
  </li>
  <li>
    <p>
      <code>-preset veryslow</code>
    </p>
    <p>
      This option provides better compression at the cost of encoding
      speed.  For example, without this option it produces an output
      of size 355 KB in about 16 seconds on my system but with this
      option it produces an output of size 282 KB in about 31 seconds
      on the same system.
    </p>
  </li>
  <li>
    <p>
      <code>-vf format=yuv420p</code>
    </p>
    <p>
      This video filter option ensures that the output video file can
      be run in a wide range of devices and players.
    </p>
    <p>
      For example, without this video filter option, we get the output
      in the YUV 4:4:4 planar format.  I found that QuickTime Player
      version 10.4 on macOS High Sierra as well as Android 9.0.0 was
      unable to play this format.
    </p>
<pre>
<samp>$ <kbd>ffmpeg -v quiet -i logo_000.avi -an -c:v libx264 dosbox-logo.mp4</kbd>
$ <kbd>ffprobe -v error -show_entries stream=codec_name,profile,pix_fmt dosbox-logo.mp4</kbd>
[STREAM]
codec_name=h264
profile=High 4:4:4 Predictive
pix_fmt=yuv444p
[/STREAM]</samp>
</pre>
    <p>
      With this video filter option, we get the output in the YUV
      4:2:0 planar format.  Now both QuickTime Player version 10.4 as
      well as Android 9.0.0 could play this format.
    </p>
<pre>
<samp>$ <kbd>ffmpeg -v quiet -i logo_000.avi -an -c:v libx264 -vf format=yuv420p dosbox-logo.mp4</kbd>
$ <kbd>ffprobe -v error -show_entries stream=codec_name,profile,pix_fmt dosbox-logo.mp4</kbd>
[STREAM]
codec_name=h264
profile=High
pix_fmt=yuv420p
[/STREAM]</samp>
</pre>
    <p>
      For maximum compatibility with very old or obsolete devices, we
      could add the <code>-profile:v baseline</code> option that setst
      the video profile to <code>Constrained Baseline</code>.  This
      option is not recommended unless we really need to support old
      or obsolete devices.  We also need to keep in mind that the
      baseline profile does not support lossless encoding with
      the <code>-crf 0</code> option.  The least lossy encoding option
      we can specify with this profile is <code>-crf 1</code> which
      while not technically lossless is much better than visually
      lossless.
    </p>
<pre>
<samp>$ <kbd>ffmpeg -v quiet -i logo_000.avi -an -c:v libx264 -vf format=yuv420p -profile:v baseline dosbox-logo.mp4</kbd>
$ <kbd>ffprobe -v error -show_entries stream=codec_name,profile,pix_fmt dosbox-logo.mp4</kbd>
[STREAM]
codec_name=h264
profile=Constrained Baseline
pix_fmt=yuv420p
[/STREAM]</samp>
</pre>
  </li>
  <li>
    <p>
      <code>scale=1920:1440:flags=neighbor</code>
    </p>
    <p>
      With this video filter option, we resize the video to maintain
      an aspect ratio of 4:3, that is, the aspect ratio of the old CRT
      computer monitors, so that the output looks similar to how it
      used to look on those monitors.
    </p>
    <p>
      The <code>neighbor</code> flag ensures that the nearest-neighbor
      interpolation (point sampling) is used to decide the colours of
      the scaled image.  Without this option, the default bicubic
      interpolation algorithm is used.  It has the effect of smoothing
      the edges by introducing new colours such as new shades of grey
      for this example video.  While such smoothing of edges is good
      for scaling pictures of the real world, in this case, it spoils
      the crisp and jagged edges that is typical of output visible in
      DOSBox or the old CRT monitors.  With the <code>neighbor</code>
      option, we retain the crisp and jagged edges visible in the
      original video capture.
    </p>
  </li>
  <li>
    <p>
      <code>fps=30</code>
    </p>
    <p>
      This video filter option sets the frame rate to 30 frames per
      second (FPS).  Without this option, the output video has a frame
      rate of 70.09 FPS and file size of 558 KB.  With this option the
      output frame rate is 30 FPS and the file size is 282 KB.
    </p>
    <p>
      The default value of <code>machine</code> configuration variable
      of DOSBox v0.74-3 is <code>svga_s3</code>, so by default it
      emulates a machine with SVGA card.  While emulating a machine
      with SVGA card, DOSBox creates video capture files with frame
      rate of 70.09 FPS.  When it emulates a machine with CGA card,
      such as when the its <code>machine</code> configuration variable
      is set to <code>cga</code> or when DOSBox is run with
      the <code>-machine cga</code> option, it creates video captures
      files with frame rate of 59.92 FPS.
    </p>
    <p>
      For the <a href="#logo-video">Logo video capture</a>, there is
      no high-speed motion going on in the video, so we don't need a
      high frame rate.  A lower frame rate of 30 FPS looks just as
      good.
    </p>
  </li>
</ul>
<h2 id="dosbox-audio-video-capture">DOSBox Audio/Video Capture<a href="#dosbox-audio-video-capture"></a></h2>
<p>
  The video capture of Digger game is processed similarly, however,
  there are a few additional things we need to take care of.  We want
  to include the game audio in the output file.  We also want a higher
  frame rate because games may sometimes have high-speed motion.
</p>
<p>
  Like before, we use <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>f5</kbd> to
  start capturing the video.  The same key combination stops capturing
  video.  The following output appears in the console output to show
  where the video file is saved:
</p>
<pre>
<samp>Capturing Video to /Users/susam/Library/Preferences/capture/digger_000.avi
Stopped capturing video.</samp>
</pre>
<p>
  Here is the command to convert the video capture of Digger to a
  distributable format:
</p>
<pre>
<code>ffmpeg -i digger_000.avi -c:a aac -b:a 256k -c:v libx264 -preset veryslow \
       -crf 17 -vf format=yuv420p,scale=1920:1440:flags=neighbor,fps=50 \
       dosbox-digger.mp4</code>
</pre>
<p>
  Here is the output:
</p>
<figure id="digger-video">
  <video controls>
    <source src="files/blog/dosbox-digger.mp4" type="video/mp4">
  </video>
  <figcaption>
    Video capture of Digger
    [<a href="files/blog/dosbox-digger.mp4">MP4</a>]
  </figcaption>
</figure>
<p>
  Most of the FFmpeg options used in the command above have been
  discussed in the previous section.  Let us discuss the new options
  used here that have not been discussed earlier:
</p>
<ul>
  <li>
    <p>
      <code>-c:a aac</code>
    </p>
    <p>
      This option selects the native FFmpeg AAC encoder to encode the
      audio stream to Advanced Audio Coding (AAC) format.  It is a
      very popular format for audio streams in MP4 files.
    </p>
  </li>
  <li>
    <p>
      <code>-b:a 256k</code>
    </p>
    <p>
      This sets the audio bitrate high enough to ensure that we get
      good quality audio in the output.  We don't need to worry about
      our specified bitrate being too high.  If the audio can be
      encoded with a lower bitrate without compromising on quality,
      the output audio stream is encoded at a lower bitrate.  For
      example, for this specific video, the actual audio bitrate in
      the output file turns out to be 245k because that is enough to
      encode the audio stream in the input file.
    </p>
<pre>
<samp>$ <kbd>ffprobe -v error -select_streams a -show_entries stream=bit_rate dosbox-digger.mp4</kbd>
[STREAM]
bit_rate=245184
[/STREAM]</samp>
</pre>
  </li>
  <li>
    <p>
      <code>fps=50</code>
    </p>
    <p>
      If we set the frame rate to a lower value like 30 FPS like we
      did in the previous section, we still get pretty good output,
      however, certain parts of the output video look slightly choppy.
      For example, at 7 seconds into the video when the player is the
      pushing up against the gold bag, the video becomes slightly
      choppy if we generate the output with a frame rate of 30 FPS.  A
      higher frame rate such as 50 FPS prevents this problem.
    </p>
    <p>
      If we omit this option entirely, we get an output video that has
      the same frame rate as that of the input video, that is, 59.92
      FPS, with an output file size of 4.6 MB.  With this option, we
      get an output video that has a frame rate of 50 FPS and a file
      size of 4.2 MB.
    </p>
  </li>
</ul>
<p>
  If we look at the output video above closely enough, we see that the
  colours don't look as crisp as they do in
  the <a href="#digger-game-screenshot">Digger game screenshot</a>.
  The <code>neighbor</code> flag was very effective at maintaining the
  crisp and jagged edges in the <a href="#logo-video">Logo video
  capture</a> but it does not produce perfect results for
  the <a href="#digger-video">Digger video capture</a> in this
  section.  Despite the imperfection, it is still necessary to specify
  the <code>neighbor</code> option because without this option, the
  output video looks even worse.  We can use a different pixel format
  like <code>yuv444p</code> instead of <code>yuv420p</code> to work
  around this issue.  Using the <code>yuv444p</code> format indeed
  results in perfect nearest-neighbour interpolation which helps in
  retaining the crisp and jagged edges in the video accurately but as
  explained in the previous section, many media players currently
  cannot play this pixel format, so we stick to using
  the <code>yuv420p</code> format in this article.
</p>
<h2 id="dosbox-gif-animation">DOSBox GIF Animation<a href="#dosbox-gif-animation"></a></h2>
<p>
  Now just for fun, let us see if we can convert the video captures
  into GIF animations.  This can be done quite easily with FFmpeg.
  Here are the commands to convert the Logo video capture to GIF
  animation:
</p>
<pre>
<samp>ffmpeg -i logo_000.avi -vf palettegen palette.png
ffmpeg -i logo_000.avi -i palette.png \
       -lavfi 'scale=1920:1440:flags=neighbor,paletteuse,fps=30' \
       dosbox-logo.gif</samp>
</pre>
<p>
  The first command generates a colour palette from the video capture.
  The second command uses this colour palette to generate a GIF
  animation.  Like before, we use the <code>neighbor</code> flag to
  retain the crisp and jagged edges.  Here is the output:
</p>
<figure id="logo-gif">
  <a href="files/blog/dosbox-logo.gif"><img
      src="files/blog/dosbox-logo.gif"
       alt="An animated image of programming in Logo"></a>
  <figcaption>
    GIF animation of IBM Personal Computer Logo
  </figcaption>
</figure>
<p>
  Here are the commands to convert the Digger video capture to GIF
  animation:
</p>
<pre>
<samp>ffmpeg -i digger_000.avi -vf palettegen palette.png
ffmpeg -i digger_000.avi -i palette.png \
       -lavfi 'scale=1920:1440:flags=neighbor,paletteuse,fps=50' \
       dosbox-digger.gif</samp>
</pre>
<figure id="digger-gif">
  <a href="files/blog/dosbox-digger.gif"><img
      src="files/blog/dosbox-digger.gif"
       alt="An animated image of a game of Digger"></a>
  <figcaption>
    GIF animation of a game of Digger
  </figcaption>
</figure>
<h2 id="references">References<a href="#references"></a></h2>
<p>
  Here is a bunch of references that contains more details about the
  commands used in this article:
</p>
<ul>
  <li><a href="https://www.dosbox.com/wiki/Special_Keys">DOSBox Special Keys</a></li>
  <li><a href="https://www.imagemagick.org/Usage/resize/">ImageMagick Examples: Resize or Scaling</a></li>
  <li><a href="https://www.imagemagick.org/Usage/filter/">ImageMagick Examples: Resampling Filters</a></li>
  <li><a href="https://trac.ffmpeg.org/wiki/Encode/H.264">FFmpeg H.264 Video Encoding Guide</a></li>
  <li><a href="https://trac.ffmpeg.org/wiki/Scaling">FFmpeg Scaling Guide</a></li>
  <li><a href="https://www.ffmpeg.org/ffmpeg-scaler.html">FFmpeg Scaler Documentation</a></li>
  <li><a href="https://ffmpeg.org/ffmpeg-filters.html">FFmpeg Filters Documentation</a></li>
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/good-quality-dosbox-video-capture.html">Read on website</a> |
  <a href="https://susam.net/tag/dos.html">#dos</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Leap Year Test in K&amp;R</title>
<link>https://susam.net/leap-year-test-in-knr.html</link>
<guid isPermaLink="false">tzjpk</guid>
<pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  About 18 years ago, while learning to program a computer using C, I
  learnt the following test for leap year from the book <em>The C
  Programming Language, 2nd ed.</em> (K&amp;R) written by Brian
  Kernighan and Dennis Ritchie.  Section 2.5 (Arithmetic Operators) of
  the book uses the following test:
</p>
<pre>
<code>(year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0</code>
</pre>
<p>
  It came as a surprise to me.  Prior to reading this, I did not know
  that centurial years are not leap years except for those centurial
  years that are also divisible by 400.  Until then, I always
  incorrectly thought that all years divisible by 4 are leap years.  I
  have witnessed only one centurial year, namely the year 2000, which
  happens to be divisible by 400.  As a result, the year 2000 proved
  to be a leap year and my misconception remained unchallenged for
  another few years until I finally came across the above test in
  K&amp;R.
</p>
<p>
  Now that I understand that centurial years are not leap years unless
  divisible by 400, it is easy to confirm this with the
  Unix <code>cal</code> command.  Enter <code>cal 1800</code>
  or <code>cal 1900</code> and we see calendars of non-leap years.
  But enter <code>cal 2000</code> and we see the calendar of a leap
  year.
</p>
<p>
  By the way, the following leap year test is equally effective:
</p>
<pre>
<code>year % 4 == 0 &amp;&amp; (year % 100 != 0 || year % 400 == 0)</code>
</pre>
<hr>
<p>
  <strong>Update:</strong> In the
  <a href="comments/leap-year-test-in-knr.html">comments section</a>,
  Thaumasiotes explains why both tests work.  Let me take the liberty
  of elaborating that comment further with a truth table.  We use the
  notation <code>A</code>, <code>B</code> and <code>C</code>
  respectively, for the three comparisons in the above expressions.
  Then the two tests above can be expressed as the following boolean
  expressions:
</p>
<ul>
  <li><code>(A &amp;&amp; B) || C</code></li>
  <li><code>A &amp;&amp; (B || C)</code></li>
</ul>
<p>
  Now normally these two boolean expressions are not equivalent.  The
  truth table below shows this:
</p>
<table class="grid center textcenter">
  <tr>
    <th><code>A</code></th>
    <th><code>B</code></th>
    <th><code>C</code></th>
    <th><code>(A &amp;&amp; B) || C</code></th>
    <th><code>A &amp;&amp; (B || C)</code></th>
  </tr>
  <tr>
    <td>F</td>
    <td>F</td>
    <td>F</td>
    <td>F</td>
    <td>F</td>
  </tr>
  <tr>
    <td>F</td>
    <td>F</td>
    <td>T</td>
    <td>T</td>
    <td>F</td>
  </tr>
  <tr>
    <td>F</td>
    <td>T</td>
    <td>F</td>
    <td>F</td>
    <td>F</td>
  </tr>
  <tr>
    <td>F</td>
    <td>T</td>
    <td>T</td>
    <td>T</td>
    <td>F</td>
  </tr>
  <tr>
    <td>T</td>
    <td>F</td>
    <td>F</td>
    <td>F</td>
    <td>F</td>
  </tr>
  <tr>
    <td>T</td>
    <td>F</td>
    <td>T</td>
    <td>T</td>
    <td>T</td>
  </tr>
  <tr>
    <td>T</td>
    <td>T</td>
    <td>F</td>
    <td>T</td>
    <td>T</td>
  </tr>
  <tr>
    <td>T</td>
    <td>T</td>
    <td>T</td>
    <td>T</td>
    <td>T</td>
  </tr>
</table>
<p>
  We see that there are two cases where the last two columns differ.
  This confirms that the two boolean expressions are not equivalent.
  The two cases where the boolean expressions yield different results
  occur when <code>A</code> is false and <code>C</code> is true.  But
  these cases are impossible!  If <code>A</code> is false
  and <code>C</code> is true, it means we have <code>year % 4 !=
  0</code> and <code>year % 400 == 0</code> which is impossible.
</p>
<p>
  If <code>year % 400 == 0</code> is true, then <code>year % 4 ==
  0</code> must also hold true.  In other words, if <code>C</code> is
  true, <code>A</code> must also be true.  Therefore, the two cases
  where the last two columns differ cannot occur and may be ignored.
  The last two columns are equal in all other cases and that is why
  the two tests we have are equivalent.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/leap-year-test-in-knr.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a>
</p>
]]>
</description>
</item>
<item>
<title>Sticking With MathJax</title>
<link>https://susam.net/sticking-with-mathjax.html</link>
<guid isPermaLink="false">bazuh</guid>
<pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I have considered switching from MathJax to KaTeX for my
  MathJax-based projects such
  as <a href="https://github.com/susam/texme">TeXMe</a>
  and <a href="https://github.com/susam/mathb">MathB</a> but I had to
  decide against doing so because MathJax supports commands
  like <code>\label</code>, <code>\eqref</code>, <code>\notag</code>,
  etc. and environments like <code>align</code>,
  <code>multiline</code>, etc.  KaTeX does not support them, so
  switching to KaTeX would break many existing documents written using
  TeXMe or MathBin.  I am going to stick with MathJax for now.
</p>
<p>
  Here are some useful resources:
</p>
<ul>
  <li>
    <a href="http://docs.mathjax.org/en/latest/input/tex/macros/">MathJax: Supported TeX/LaTeX commands</a>
  </li>
  <li>
    <a href="https://katex.org/docs/supported.html">KaTeX: Supported Functions</a>
  </li>
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/sticking-with-mathjax.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Debian Releases and Toy Story</title>
<link>https://susam.net/debian-releases-and-toy-story.html</link>
<guid isPermaLink="false">shcfc</guid>
<pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Did you know that Debian releases are named after characters from
  the <em>Toy</em> Story films?  I began using it with Debian 4 (Etch)
  in 2007.  It was named after Etch A Sketch, one of Andy's toys.  The
  latest release, Debian 10 (Buster), is named after Andy's pet puppy.
</p>
<p>
  The name Debian itself is a portmanteau of the names Ian Murdock
  (the creator of Debian) and Debra Lynn (his then-girlfriend, later
  ex-wife).  As a result, this name has been called a <em>curiously
  personal name for such a community-oriented project</em>.
</p>
<p>
  I was using Fedora and Ubuntu in 2007 when a member of a local Linux
  User Group (LUG) introduced me to Debian.  Its simplicity and
  elegance, its vast package repository along with its stability and
  robustness made me an ardent user of this distribution pretty
  quickly.  Thirteen years later, I still use Debian on my laptops,
  Linode servers and virtual machines.  I run my personal website on
  Debian too.  I have got so used to <code>apt-get install</code> and
  the large number of tools available in the Debian repositories that
  I keep a Debian virtual machine or a remote shell handy when I am
  working on a non-Debian system.  Over these years, I have gradually
  moved from GNOME 2 to GNOME 3 and then to Xfce 4.  It really helps
  that Debian still provides an installation CD with Xfce as the
  default.  In case anyone is interested, I have documented and shared
  my <a href="https://github.com/susam/dotfiles/blob/master/docs/debian-setup.md">Debian
  setup notes on GitHub</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/debian-releases-and-toy-story.html">Read on website</a> |
  <a href="https://susam.net/tag/linux.html">#linux</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Lisp in Vim</title>
<link>https://susam.net/lisp-in-vim.html</link>
<guid isPermaLink="false">bgxhz</guid>
<pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="introduction">Introduction<a href="#introduction"></a></h2>
<p>
  Fifteen years ago, writing Lisp code in Vim was an odd adventure.
  There were no good plugins for Vim that assisted in structured
  editing of Lisp s-expressions or allowed interactive programming by
  embedding a Lisp Read-Eval-Print-Loop (REPL) or a debugger within
  the editor.  The situation has improved a lot since then.  In the
  last ten years, we have seen active development of two Vim plugins
  named <a href="https://github.com/kovisoft/slimv">Slimv</a> and
  <a href="https://github.com/l04m33/vlime">Vlime</a>.  Slimv is over
  10 years old now.  Vlime is more recent and less than 3 years old
  right now.  Both support interactive programming in Lisp.
</p>
<p>
  I am going to discuss and compare both Slimv and Vlime in this
  article.  I will show how to get started with both plugins and
  introduce some of their basic features.  I will not cover everything
  though.  This is not a tutorial.  For tutorials, see
  the <a href="#references"><em>References</em></a> section.
</p>
<p>
  If you are looking only for a comparison of the two plugins or a
  quick recommendation, jump directly to the
  <a href="#comparison-of-slimv-and-vlime"><em>Comparison of Slimv and Vlime</em></a>
  section or the
  <a href="#quick-recommendation"><em>Quick Recommendation</em></a>
  section.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#background">Background</a>
    <ul>
      <li><a href="#lisp">Lisp</a></li>
      <li><a href="#emacs-slime">Emacs: SLIME</a></li>
      <li><a href="#vim-slimv-vlime">Vim: Slimv/Vlime</a></li>
    </ul>
  </li>
  <li><a href="#vim-plugin-management">Vim Plugin Management</a></li>
  <li><a href="#software-versions">Software Versions</a></li>
  <li><a href="#get-started">Get Started</a>
    <ul>
      <li><a href="#get-started-with-slimv-and-sbcl">Get Started with Slimv and SBCL</a></li>
      <li><a href="#get-started-with-vlime-and-sbcl">Get Started with Vlime and SBCL</a></li>
      <li><a href="#get-started-with-paredit">Get Started with Paredit</a></li>
    </ul>
  </li>
  <li><a href="#use-debugger-and-inspector">Use Debugger and Inspector</a>
    <ul>
      <li><a href="#use-debugger-and-inspector-with-slimv">Use Debugger and Inspector with Slimv</a></li>
      <li><a href="#use-debugger-and-inspector-with-vlime">Use Debugger and Inspector with Vlime</a></li>
    </ul>
  </li>
  <li><a href="#trace-function">Trace Function</a>
    <ul>
      <li><a href="#trace-function-in-slimv">Trace Function in Slimv</a></li>
      <li><a href="#trace-function-in-vlime">Trace Function in Vlime</a></li>
    </ul>
  </li>
  <li><a href="#nifty-features">Nifty Features</a>
    <ul>
      <li><a href="#evaluate-top-level-form">Evaluate Top-Level Form</a></li>
      <li><a href="#rainbow-parentheses">Rainbow Parentheses</a></li>
      <li><a href="#argument-list">Argument List</a></li>
      <li><a href="#omni-completion">Omni-Completion</a></li>
      <li><a href="#describe-symbol">Describe Symbol</a></li>
      <li><a href="#expand-macro">Expand Macro</a></li>
      <li><a href="#cross-reference">Cross Reference</a></li>
    </ul>
  </li>
  <li><a href="#other-common-lisp-implementations">Other Common Lisp Implementations</a>
    <ul>
      <li><a href="#use-slimv-with-clisp">Use Slimv with CLISP</a></li>
      <li><a href="#use-slimv-with-ecl">Use Slimv with ECL</a></li>
      <li><a href="#use-vlime-with-clisp">Use Vlime with CLISP</a></li>
      <li><a href="#use-vlime-with-ecl">Use Vlime with ECL</a></li>
    </ul>
  </li>
  <li><a href="#other-lisp-dialects">Other Lisp Dialects</a>
    <ul>
      <li><a href="#use-slimv-with-mit-gnu-scheme">Use Slimv with MIT/GNU Scheme</a></li>
      <li><a href="#use-slimv-with-clojure">Use Slimv with Clojure</a></li>
    </ul>
  </li>
  <li><a href="#comparison-of-slimv-and-vlime">Comparison of Slimv and Vlime</a></li>
  <li><a href="#quick-recommendation">Quick Recommendation</a></li>
  <li><a href="#disclosure">Disclosure</a></li>
  <li><a href="#references">References</a></li>
</ul>
<h2 id="background">Background<a href="#background"></a></h2>
<p>
  Before we get started with Slimv and Vlime, it would be nice to take
  a brief look at the heritage behind these plugins.  These plugins
  provide Lisp development environments for Vim, so their story begins
  with Lisp.
</p>
<h3 id="lisp">Lisp<a href="#lisp"></a></h3>
<p>
  Lisp is a family of programming languages with a distinctive, fully
  parenthesised prefix notation.  It is quite unlike most of the other
  popular programming languages today like C, Python, Ruby, etc.  Its
  homoiconic nature and its powerful macro system that can transform
  arbitrary Lisp expressions make it such a flexible, versatile,
  extensible and introspective language that articles describing Lisp
  often have the word "enlightenment" in them.  For example, see the
  following articles:
</p>
<ul>
  <li>
    <a href="http://www.paulgraham.com/avg.html"><em>Beating the
    Averages</em></a> (by Paul Graham)
  </li>
  <li>
    <a href="https://www.defmacro.org/ramblings/lisp.html"><em>The
    Nature of Lisp</em></a> (by Slava Akhmechet)
  </li>
  <li>
    <a href="https://twobithistory.org/2018/10/14/lisp.html"><em>How
    Lisp Became God's Own Programming Language</em></a> (by Sinclair
    Target)
  </li>
</ul>
<p>
  Lisp has been described in various ways by various eminent
  personalities in the history of computing.  Alan Kay has famously
  described Lisp as:
</p>
<blockquote>
  The greatest single programming language ever designed.
</blockquote>
<p>
  John Foderaro has written this about Lisp:
</p>
<blockquote>
  Lisp is a programmable programming language.
</blockquote>
<p>
  Eric S. Raymond has expressed the enlightenment one experiences by
  learning Lisp in his famous article titled
  <a href="http://www.catb.org/~esr/faqs/hacker-howto.html"><em>How To Become A Hacker</em></a>:
</p>
<blockquote>
  Lisp is worth learning for the profound enlightenment experience you
  will have when you finally get it.  That experience will make you a
  better programmer for the rest of your days, even if you never
  actually use Lisp itself a lot.
</blockquote>
<p>
  Randall Munroe, the creator of the
  <a href="https://xkcd.com/">XKCD</a> webcomic has dedicated two
  comic strips to Lisp:
</p>
<figure class="soft">
  <img src="files/blog/xkcd-224-lisp.jpg" alt="XKCD comic on Lisp"
       title="Original title text: We lost the documentation on quantum mechanics.  You'll have to decode the regexes yourself.">
  <figcaption>
    <em>Lisp</em> by Randall Munroe
    (Source: <a href="https://xkcd.com/224/">https://xkcd.com/224/</a>)
  </figcaption>
</figure>
<figure class="soft">
  <img src="files/blog/xkcd-297-lisp-cycles.png" alt="XKCD comic on Lisp Cycles"
       title="Original title text: I've just received word that the Emperor has dissolved the MIT computer science program permanently.">
  <figcaption>
    <em>Lisp Cycles</em> by Randall Munroe
    (Source: <a href="https://xkcd.com/297/">https://xkcd.com/297/</a>)
  </figcaption>
</figure>
<p>
  Developed in 1958 by John McCarthy, Lisp is the second oldest
  programming language in use today.  Only Fortran is older, by one
  year.  Some of the popular Lisp dialects today include Common Lisp,
  Scheme and Clojure.  Most of this article would focus on Common
  Lisp.  Scheme and Clojure would be discussed briefly towards the end
  of this article.
</p>
<h3 id="emacs-slime">Emacs: SLIME<a href="#emacs-slime"></a></h3>
<p>
  Many Lisp programmers immediately think of Emacs when they think of
  writing Lisp code.  Emacs is a family of text editors.  An Emacs
  editor itself is typically implemented in a dialect of Lisp.  There
  is an Emacs mode named SLIME that provides excellent support for
  programming in Lisp.  SLIME stands for Superior Lisp Interaction
  Mode for Emacs.  First released in August 2003, SLIME was created by
  Eric Marsden and then later developed further by Luke Gorrie and
  Helmut Eller.  It offers a Read-Eval-Print-Loop (REPL), integrated
  debugging and interactive evaluation of expressions, all available
  right within the editor.  There are several nifty key bindings
  available to compile and evaluate parts or whole of the code in the
  current buffer.
</p>
<p>
  SLIME works by launching a Swank TCP server.  Swank is a backend
  server program written in Common Lisp that listens on a socket to
  receive SLIME commands from Emacs and execute them.  SLIME is so
  useful that it is considered to be indispensible by many Lisp
  programmers who write Lisp code in Emacs.
</p>
<h3 id="vim-slimv-vlime">Vim: Slimv/Vlime<a href="#vim-slimv-vlime"></a></h3>
<p>
  Is there anything similar to SLIME for Vim?  Yes, there are two
  popular options:
</p>
<ul>
  <li>
    <p>
      <strong>Slimv:</strong> It stands for Superior Lisp Interaction
      Mode for Vim.  It is a Vim plugin created by Tamas Kovacs that
      was first released in January 2009.
    </p>
  </li>
  <li>
    <p>
      <strong>Vlime:</strong> It is a Vim plugin created by Kay Z that
      was first released in May 2017.  It is much more recent than
      Slimv.  Vlime is younger than Slimv by eight years.
    </p>
  </li>
</ul>
<p>
  Both plugins use a client-server architecture like SLIME does in
  Emacs.  Both plugins rely on Swank server to be started.  In fact,
  Slimv bundles a slightly modified version of Swank with it, so that
  it can launch it and connect to it to send expressions to be
  evaluated.  Vlime does not bundle Swank server with itself but it
  provides a wrapper that automatically downloads Swank server when
  needed.
</p>
<h2 id="vim-plugin-management">Vim Plugin Management<a href="#vim-plugin-management"></a></h2>
<p>
  When I started using Vim fifteen years ago, we used to just download
  a Vim plugin and copy/extract it to <code>~/.vim</code> directory.
  These days, there are a few plugin management tools for Vim such
  as <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>,
  <a href="https://github.com/VundleVim/Vundle.Vim">Vundle</a>,
  <a href="https://github.com/junegunn/vim-plug">vim-plug</a>, etc.  I
  am not going to use any of them because I don't know which one of
  them you use and I don't want to write down steps for each one of
  them.
</p>
<p>
  In fact, I have never used any Vim plugin manager myself.  Until Vim
  7, I used to create a <code>~/.vim/bundle</code> directory, then
  copy each plugin to its own directory within it and add the plugin's
  directory path to Vim's <code>runtimepath</code> option.
</p>
<p>
  Vim 8 has native support for packages which makes installing plugins
  and loading them simpler.  With Vim 8, we can copy each plugin to
  its own directory within <code>~/.vim/pack/plugins/start</code> and
  they are loaded automatically when Vim starts.  The directory name
  <code>plugins</code> in this path is only an example.  It could be
  any arbitrary name and Vim would still load the plugins fine.
</p>
<p>
  In this article, I will use Vim 8's native support for packages to
  set up Vim plugins.  The only exception to this would be installing
  Vlime.  The top-level directory of Vlime is not the plugin
  directory.  The plugin directory is contained in a subdirectory
  named <code>vim</code>.  This does not conform to the directory
  structure of plugins in a Vim package.  Therefore, in this article,
  I will set up Vlime in the old fashioned way by copying it
  to <code>~/.vim/bundle</code> and then adding the path to its plugin
  directory to Vim's <code>runtimepath</code> option.
</p>
<h2 id="software-versions">Software Versions<a href="#software-versions"></a></h2>
<p>
  Since this article involves several layers of software, some of what
  is written here may not hold good in future as these various pieces
  of software change and evolve over time.  Therefore, in this
  section, I will note down the versions of various software tools I
  used while writing this article.  Here they are:
</p>
<ul>
  <li>Debian GNU/Linux 10.1 (buster)</li>
  <li>Vim 8.1</li>
  <li>
    Slimv (Git repo last updated on 30 Nov 2019 with commit
    <a href="https://github.com/kovisoft/slimv/commits/47a0070">47a0070</a>)
  </li>
  <li>
    Vlime (Git repo last updated on 16 Oct 2017 with commit
    <a href="https://github.com/l04m33/vlime/commits/065b95f">065b95f</a>)
  </li>
  <li>
    Paredit (Git repo last updated on 30 Nov 2019 with commit
    <a href="https://github.com/kovisoft/paredit/commits/d99905a">d99905a</a>)
  </li>
  <li>
    Rainbow Parentheses (Git repo last updated on 29 Oct 2015 with commit
    <a href="https://github.com/junegunn/rainbow_parentheses.vim/commits/27e7cd7">27e7cd7</a>)
  </li>
  <li>SBCL 1.4.16.debian</li>
  <li>GNU CLISP 2.49.92</li>
  <li>ECL 16.1.3</li>
  <li>MIT/GNU Scheme 9.1.1 on Debian GNU/Linux 9.11 (stretch)</li>
  <li>Clojure 1.10.1</li>
  <li>Quicklisp beta (libraries last updated on 30 Nov 2019)</li>
  <li>tmux 2.8</li>
</ul>
<p>
  You will probably need only a tiny subset of the tools above
  depending on which sections in this article you would follow.  Just
  pick the sections you want to try out and follow the steps written
  in them.  They will walk you through the procedure to install the
  tools applicable to the sections you have picked.  Regardless of
  which sections you pick, I recommend that you definitely go through
  the three "Get Started" subsections below.  These subsections go
  into detail about some of the prerequisites such as support for
  tmux, Paredit, support for Python interface in Vim, etc. that are
  not covered in the other sections.
</p>
<p>
  The choice of Debian may look like an odd one.  I want the commands
  and steps discussed in this article to be easily reproducible in a
  free and open source operating system.  Debian happens to be my
  favourite.  What works on Debian is easily reproducible on Ubuntu
  and other derivatives, often without any changes to the steps.  I
  believe, it will not be too difficult to translate the steps
  provided for Debian to the steps that would work on another
  operating system.
</p>
<p>
  Note that Quicklisp (a prerequisite for Vlime) is still beta
  software at the time of writing this article.  The actual steps to
  install Quicklisp may change in future.  Check
  <a href="https://www.quicklisp.org/">https://www.quicklisp.org/</a>
  for the most up-to-date instructions to install Quicklisp.
</p>
<h2 id="get-started">Get Started<a href="#get-started"></a></h2>
<h3 id="get-started-with-slimv-and-sbcl">Get Started with Slimv and SBCL<a href="#get-started-with-slimv-and-sbcl"></a></h3>
<p>
  Here are the steps to set up Slimv and use it:
</p>
<ol>
  <li>
    <p>
      Install the tools required to set up a Common Lisp development
      environment with Slimv with this command:
    </p>
    <pre><code>sudo apt-get install vim-nox sbcl tmux git</code></pre>
    <p>
      The default Vim in Debian is <code>vim.basic</code> provided by
      the <code>vim</code> package which does not have support for
      Python interface.  Slimv is written in Vim script, Lisp and
      Python 3, so it does need a Vim package that has support for
      Python interface.  One such package is <code>vim-nox</code> that
      provides the <code>vim.nox</code> command.  Installing it
      automatically updates the <code>vim</code> command to
      run <code>vim.nox</code>.  Another such package
      is <code>vim-gtk</code> which additionally provides GUI support.
      The graphical Vim known as GVim can be launched with
      the <code>gvim</code> command.  It runs in the desktop
      environment.  For the purpose of this article, I will stick
      to <code>vim-nox</code> because it is lightweight.  All steps
      meant for Slimv would run equally well on <code>vim-gtk</code>,
      MacVim and GVim.
    </p>
    <p>
      Installing tmux is optional.  Slimv can launch Swank server
      automatically if Vim is running within tmux, GNU Screen or a
      desktop environment, so if you are using GNU Screen already, you
      don't need to install tmux.  Also, if you are running Slimv in a
      desktop environment, you don't really need to install either
      tmux or GNU Screen, although you could if you would like to see
      Swank running in a separate tmux or GNU Screen window rather
      than a separate terminal window.  In this article, I am going to
      assume that Vim is running within tmux.
    </p>
    <p>
      If you are going to run Slimv in a terminal without a desktop
      environment, tmux or GNU Screen, Swank server has to be run
      manually.  Point 4 below explains how to do it.
    </p>
  </li>
  <li>
    <p>
      Installing Slimv is pretty simple.  Here is one way to do it:
    </p>
<pre>
<code>git clone https://github.com/kovisoft/slimv.git ~/.vim/pack/plugins/start/slimv
vim +'helptags ~/.vim/pack/plugins/start/slimv/doc' +q</code>
</pre>
    <p>
      That is it!  Slimv is set up.  It's that straightforward.  The
      commands above show how to set up Slimv with just two shell
      commands.  You could also use a Vim plugin manager to install
      Slimv for you but I am not going to cover that here.
    </p>
  </li>
  <li>
    <p>
      This is an optional step.  Slimv supports starting Swank server
      automatically if you are running Vim in tmux, GNU Screen or a
      desktop environment.  To start tmux, enter this command:
    </p>
    <pre><code>tmux</code></pre>
    <p>
      If you use GNU screen or a desktop environment, you don't have
      to run tmux.
    </p>
    <p>
      If you do not use tmux, GNU Screen or a desktop environment,
      then you must start Swank server manually as explained in the
      next point.
    </p>
  </li>
  <li>
    <p>
      This step is necessary only if you are not using tmux, GNU
      Screen or a desktop environment.  The following command shows
      how to start Swank server manually:
    </p>
    <pre><code>sbcl --load ~/.vim/pack/plugins/start/slimv/slime/start-swank.lisp</code></pre>
    <p>
      If you are using tmux, GNU Screen or a desktop environment,
      Slimv can start Swank server automatically when needed and you
      don't need to perform this step.
    </p>
  </li>
  <li>
    <p>
      Create a new Lisp source code file, say, <code>foo.lisp</code>
      with this command:
    </p>
    <pre><code>vim foo.lisp</code></pre>
  </li>
  <li>
    <p>
      To connect to Swank server, enter the following command in
      normal mode:
    </p>
    <p>
      <kbd>,</kbd><kbd>c</kbd>
    </p>
    <p>
      If Vim is running within tmux, GNU Screen or desktop
      environment, Slimv would automatically launch Swank server and
      connect to it.
    </p>
    <p>
      After Slimv connects to Swank successfully, Vim window should
      split into two and the following prompt should appear in the new
      split window:
    </p>
    <pre><samp>CL-USER&gt;</samp></pre>
    <p>
      This is the integrated REPL.  It is now alive and ready for
      interactive programming.
    </p>
    <p>
      We assume here that Slimv is using the default Slimv leader
      key <kbd>,</kbd>.  If you have overridden the Vim leader key,
      then the Slimv leader key might be same as the Vim leader key.
      Enter the command <code>:echo g:slimv_leader</code> in Vim
      command-line mode to find the leader key being used by Slimv.
    </p>
  </li>
  <li>
    <p>
      Type some code into the buffer for the new file.  To do so,
      first type <kbd>i</kbd> to enter insert mode and type this code:
    </p>
    <pre><code>(format t "hello, world~%")</code></pre>
    <p>
      Type <kbd>esc</kbd> to return to normal mode.
    </p>
  </li>
  <li>
    <p>
      To evaluate the current expression under the cursor, enter the
      following command in normal mode:
    </p>
    <p>
      <kbd>,</kbd><kbd>e</kbd>
    </p>
    <p>
      Both the current expression and its result should appear in the
      REPL window.
    </p>
  </li>
  <li>
    <p>
      The REPL is interactive.  Type
      <kbd>ctrl</kbd>+<kbd>w</kbd><kbd>w</kbd> to switch to the REPL
      window.  Then type <kbd>i</kbd> to enter insert mode and type
      this code:
    </p>
    <pre><code>(+ 1 2)</code></pre>
    <p>
      Type <kbd>enter</kbd> to evaluate the expression just like you
      would do in a real REPL.  The result should then appear in the
      REPL.
    </p>
    <p>
      Type <kbd>esc</kbd> to return to normal mode again.  Use the
      normal mode command
      <kbd>ctrl</kbd>&nbsp;+&nbsp;<kbd>w</kbd>&nbsp;<kbd>w</kbd> to
      switch between the split windows.
    </p>
  </li>
  <li>
    <p>
      Now that you have got started with Slimv, here is a brief note
      on uninstallation, in case you ever need it.  If Slimv is
      installed as described in point 2 above, enter the following
      command to uninstall it:
    </p>
    <pre><code>rm -rf ~/.vim/pack/plugins/start/slimv</code></pre>
  </li>
</ol>
<p>
  In steps 7 and 9, you may have noticed that as soon as you type an
  opening parenthesis or double quotation mark, a matching closing one
  is automatically inserted.  That is done by the
  <a href="https://github.com/kovisoft/paredit">Paredit</a> plugin
  which is bundled along with Slimv.  Paredit ensures structured
  editing of Lisp s-expressions and keeps all matched characters
  (parentheses, brackets, braces, quotes) balanced.  It also provides
  many new keybindings to edit s-expressions conveniently.  We will
  look into Paredit in a little more detail in
  the <a href="#get-started-with-paredit"><em>Get Started with
  Paredit</em></a> subsection later.
</p>
<h3 id="get-started-with-vlime-and-sbcl">Get Started with Vlime and SBCL<a href="#get-started-with-vlime-and-sbcl"></a></h3>
<p>
  Here are the steps to set up Vlime and use it:
</p>
<ol>
  <li>
    <p>
      Install the tools required to set up a Common Lisp development
      environment with Vlime with this command:
    </p>
    <pre><code>sudo apt-get install vim sbcl git curl</code></pre>
    <p>
      Note that unlike Slimv, Vlime can work with the default Vim in
      Debian, i.e. <code>vim.basic</code>.  Vlime does not require Vim
      with Python interface.
    </p>
  </li>
  <li>
    <p>
      Install Quicklisp with these commands:
    </p>
<pre>
<code>curl -O https://beta.quicklisp.org/quicklisp.lisp
sbcl --load quicklisp.lisp --eval '(quicklisp-quickstart:install)' --eval '(exit)'
sbcl --load ~/quicklisp/setup.lisp --eval '(ql:add-to-init-file)' --eval '(exit)'</code>
</pre>
    <p>
      Type <kbd>enter</kbd> in the end, when prompted, to complete the
      installation.
    </p>
  </li>
  <li>
    <p>
      Install Vlime and Paredit with these commands:
    </p>
<pre>
<code>git clone https://github.com/l04m33/vlime.git ~/.vim/bundle/vlime
git clone https://github.com/kovisoft/paredit ~/.vim/pack/plugins/start/paredit
echo 'set runtimepath^=~/.vim/bundle/vlime/vim' &gt;&gt; ~/.vimrc
vim +'helptags ~/.vim/bundle/vlime/vim/doc' +'helptags ~/.vim/pack/plugins/start/paredit/doc' +q</code>
</pre>
    <p>
      Unlike Slimv, Vlime does not bundle
      <a href="https://github.com/kovisoft/paredit">Paredit</a> along
      with itself.  As explained in the previous section, it helps us
      with structured editing of Lisp s-expressions.
    </p>
    <p>
      I recommend that you install Paredit but in case you choose not
      to, ensure that loading of filetype plugins is enabled by
      entering the <code>:filetype</code> command in command-line
      mode.  The output should contain <code>plugin:ON</code>.  If it
      is off, add the command <code>filetype plugin on</code>
      to <code>~/.vimrc</code> to ensure that this is always on.
      Vlime won't work without this being enabled.  If you install
      Paredit, you don't have to bother about this because Paredit
      takes care of enabling this by default.
    </p>
  </li>
  <li>
    <p>
      Create a new Lisp source code file, say, <code>foo.lisp</code>
      with this command:
    </p>
    <pre><code>vim foo.lisp</code></pre>
  </li>
  <li>
    <p>
      To start Vlime server (a wrapper around Swank server) and
      connect to it automatically, enter the following command in
      normal mode:
    </p>
    <p>
      <kbd>\</kbd><kbd>r</kbd><kbd>r</kbd>
    </p>
    <p>
      We assume here that Vim <code>&lt;LocalLeader&gt;</code> is left
      to its default, i.e. backslash.  If it is mapped to some other
      key combination, then that must be used instead of backslash in
      the above command.
    </p>
    <p>
      The first time this command is run after installing Vlime, it
      installs Swank server using Quicklisp.  Therefore, it can take a
      while for Vlime server to start the first time this command is
      run.  On subsequent use of these commands, it would start faster
      because it would be already installed.
    </p>
    <p>
      The console output from Vlime server is displayed in a split
      window.  After Vlime successfully connects to Swank, the
      following message is displayed at the bottom:
    </p>
    <pre><samp>Vlime Connection 1 established.</samp></pre>
    <p>
      After the above message appears, it is okay to close the split
      window for Vlime server by entering this command in Vim
      command-line mode:
    </p>
    <pre><code>:q</code></pre>
    <p>
      Vlime server would continue to run in background.  The following
      command can be used in normal mode to view the console output of
      Vlime server anytime it is required:
    </p>
    <p>
      <kbd>\</kbd><kbd>r</kbd><kbd>v</kbd>
    </p>
  </li>
  <li>
    <p>
      Type some code into the buffer for the new file.  To do so,
      first type <kbd>i</kbd> to enter insert mode and type this code:
    </p>
    <pre><code>(format t "hello, world~%")</code></pre>
    <p>
      Type <kbd>esc</kbd> to return to normal mode.
    </p>
  <li>
    <p>
      To evaluate, the current expression under the cursor, enter the
      following command in normal mode:
    </p>
    <p>
      <kbd>\</kbd><kbd>s</kbd><kbd>s</kbd>
    </p>
    <p>
      Both the current expression and its result should appear in the
      REPL window.
    </p>
    <p>
      Unlike Slimv, the REPL window of Vlime is <em>not</em>
      interactive.  Its <code>nomodifiable</code> option is set, so we
      cannot type code directly into the REPL window.  This can be a
      bit of a problem if we want to type arbitrary expressions into
      the REPL and execute them.  To mitigate this shortcoming to some
      extent, Vlime provides an alternative way to evaluate the
      current expression known as the interaction mode.  This is
      explained in the next point.
    </p>
  </li>
  <li>
    <p>
      Enable interaction mode by entering this command in normal mode:
    </p>
    <p><kbd>\</kbd><kbd>i</kbd></p>
    <p>
      The same command disables interaction mode, i.e. this command
      toggles the state of interaction mode between on and off.  When
      interaction mode is on, evaluate an expression under the cursor
      by simply pressing <kbd>enter</kbd> in normal mode.
    </p>
  </li>
  <li>
    <p>
      Now that you have got started with Vlime, here is a brief note
      on uninstallation, in case you ever need it.  If Quicklisp and
      Vlime are installed as described in the points 2 and 3 above,
      run these commands to uninstall them:
    </p>
<pre>
<code>rm -rf ~/quicklisp ~/.vim/bundle/vlime ~/.vim/pack/plugins/start/paredit
sed -i.bkp '/runtimepath.*vlime/d' ~/.vimrc</code>
</pre>
    <p>
      Optionally, remove <code>~/.sblrc</code> or edit it to remove
      the code pertaining to loading
      <code>quicklisp/setup.lisp</code>.
  </li>
</ol>
<h3 id="get-started-with-paredit">Get Started with Paredit<a href="#get-started-with-paredit"></a></h3>
<p>
  You have already got started with Paredit when you wrote Lisp code
  while following one of the previous two subsections.  The moment you
  typed an opening parenthesis, Paredit inserted a closing one for you
  automatically.  Paredit keeps all matched characters such as
  parentheses, double quotes, etc. balanced when you edit code.  Here
  is a very brief exercise to quickly get started with some of the
  very basic features of Paredit:
</p>
<ol>
  <li>
    <p>
      Create a new Lisp source code file, say, <code>foo.lisp</code>
      with this command:
    </p>
    <pre><code>vim foo.lisp</code></pre>
  </li>
  <li>
    <p>
      Type <kbd>i</kbd> to enter insert mode and then type only this:
    </p>
    <pre><code>(defun square (x</code></pre>
    <p>
      At this point, Paredit should have inserted the two closing
      parentheses automatically.  The code should look like this:
    </p>
    <pre><code>(defun square (x<span class="cursor">)</span>)</code></pre>
    <p>
      The cursor should be situated just after the parameter
      <code>x</code>.  The block above shows where the cursor should
      be.
    </p>
  </li>
  <li>
    <p>
      While you are still in insert mode, type the first closing
      parenthesis.  Yes, type it even if the closing parenthesis is
      already present.  The cursor should now skip over the first
      closing parenthesis like this:
    </p>
    <pre><code>(defun square (x)<span class="cursor">)</span></code></pre>
    <p>
      Of course, there was no need to type the closing parenthesis
      because it was already present but typing it out to skip over it
      is more efficient than escaping to normal mode, then moving over
      it and then entering insert mode again.  This is, in fact, a
      very nifty feature of Paredit.  We can enter code with the same
      keystrokes as we would without Paredit.
    </p>
  </li>
  <li>
    <p>
      You should still be in insert mode.  Type <kbd>enter</kbd> to
      create a new line below.  Now one of two things is going to
      happen.  If electric return is disabled, then a newline is
      inserted as expected like this:
    </p>
<pre>
<code>(defun square (x))
  <span class="cursor">)</span></code>
</pre>
    <p>
      If electric return is enabled, two newlines are inserted to
      create an empty line in between:
    </p>
<pre>
<code>(defun square (x)
  <span class="cursor"> </span>
  )</code>
</pre>
    <p>
      In both cases, indentation of two spaces is inserted
      automatically.  The new empty line inserted by electric return
      allows linewise editing of the code to be entered in this empty
      line.
    </p>
    <p>
      The electric return feature is enabled by default in both
      Paredit and Slimv.  It works by Paredit remapping the "enter"
      key (<code>&lt;CR&gt;</code>) in insert mode to a function that
      inserts electric return.  Slimv needs to remap the "enter" key
      to present the argument list of the current function but it
      takes care of performing an electric return before showing the
      argument list.  Vlime, however, forgets to perform electric
      return before showing the argument list, so this feature does
      not work in Vlime.
    </p>
    <p>
      For now, we will continue with the assumption that electric
      return is enabled and working fine.  If it is disabled or if it
      is not working for you, ignore the steps that discuss electric
      return.
    </p>
  </li>
  <li>
    <p>
      Now, type only this:
    </p>
    <pre><code>(* x x</code></pre>
    <p>
      Again, Paredit would have inserted the closing parenthesis
      automatically.  The code should look like this now:
    </p>
<pre>
<code>(defun square (x)
  (* x x<span class="cursor">)</span>
  )</code>
</pre>
  </li>
  <li>
    <p>
      Now, type one more closing parenthesis to advance past the
      automatically inserted closing parenthesis like this:
    </p>
<pre>
<code>(defun square (x)
  (* x x)<span class="cursor"> </span>
  )</code>
</pre>
  </li>
  <li>
    <p>
      Then type another closing parenthesis.  Paredit would now pick
      the lone closing parenthesis that is present in its own line and
      move it at the end of the current line like this:
    </p>
<pre>
<code>(defun square (x)
  (* x x))<span class="cursor"> </span></code>
</pre>
    <p>
      This behaviour of consuming the extra newline inserted by an
      electric return on typing a closing parenthesis helps the code
      to conform to the popular Lisp coding convention of putting all
      the consecutive closing parentheses next to each other in the
      same line.  In other words, typing closing parentheses
      re-gathers electric returns when applicable.
    </p>
  </li>
  <li>
    <p>
      Let us see what happens if we try to delete the opening
      parenthesis around the product function (the <code>*</code>
      function).  Type <kbd>esc</kbd> to return to normal mode.  Then
      enter <kbd>h</kbd> in normal mode to move the cursor one place
      left so that the cursor is placed on the parenthesis just after
      the last <code>x</code> in the code like this:
    </p>
<pre>
<code>(defun square (x)
  (* x x<span class="cursor">)</span>)</code>
</pre>
    <p>
      Type <kbd>x</kbd> to delete the closing parenthesis the cursor
      is on.  Nothing gets deleted!  Instead the cursor just skips
      over the parenthesis like this:
    </p>
<pre>
<code>(defun square (x)
  (* x x)<span class="cursor">)</span></code>
</pre>
    <p>
      Paredit refuses to delete the closing parenthesis because it
      encloses a non-empty list.  It would have deleted the closing
      parenthesis along with the opening one if the list were empty.
      This is Paredit trying to ensure that the s-expressions remain
      valid while editing.
    </p>
    <p>
      Note that in this step, <kbd>h</kbd> is a regular Vim motion
      command.  In Vim, by default, <kbd>x</kbd> deletes the character
      under the cursor, but when Paredit is enabled, it remaps this
      command to behave the way it did in this step to ensure that the
      parentheses remain balanced.
    </p>
  </li>
  <li>
    <p>
      Let us now try to delete the current line.  Type
      <kbd>d</kbd><kbd>d</kbd> to do so.  The result looks like this:
    </p>
<pre>
<code>(defun square (x)
  <span class="cursor">)</span></code>
</pre>
    <p>
      Note how the closing parenthesis has been left intact to keep
      the parentheses balanced.  Again, Paredit has remapped the
      <kbd>d</kbd><kbd>d</kbd> command to produce this behaviour.
    </p>
  </li>
  <li>
    <p>
      Now type <kbd>d</kbd><kbd>a</kbd><kbd>(</kbd> to delete the
      entire <code>defun</code> expression.  The buffer should look
      empty now.
    </p>
  </li>
  <li>
    <p>
      Type <kbd>i</kbd> to enter insert mode and type out the
      following code:
    </p>
    <pre><code>(list (* 10 20) (+ 30 40))<span class="cursor"> </span></code></pre>
  </li>
  <li>
    <p>
      Type <kbd>esc</kbd> to return to normal mode.
      Type <kbd>h</kbd><kbd>(</kbd><kbd>h</kbd><kbd>h</kbd> to place
      the cursor on the closing parenthesis of the first expression.
    </p>
    <pre><code>(list (* 10 20<span class="cursor">)</span> (+ 30 40))</code></pre>
    <p>
      Now type <kbd>,</kbd><kbd>&gt;</kbd>.  The closing parenthesis
      of the first expression moves right to <em>slurp</em> the next
      expression.  The buffer looks like this:
    </p>
    <pre><code>(list (* 10 20 (+ 30 40)<span class="cursor">)</span>)</code></pre>
    <p>
      We assume here that Paredit is using the default Paredit leader
      key <kbd>,</kbd>.  If you have overridden the Vim leader key,
      then the Paredit leader key might be same as the Vim leader key.
      Enter the command <code>:echo g:paredit_leader</code> in Vim
      command-line mode to find the leader key being used by Paredit.
    </p>
  </li>
  <li>
    <p>
      Now type <kbd>,</kbd><kbd>&lt;</kbd>.  The closing parenthesis
      of the outer expression moves left to <em>barf</em> the inner
      expression out.  The buffer looks like this again:
    </p>
    <pre><code>(list (* 10 20<span class="cursor">)</span> (+ 30 40))</code></pre>
    <p>
      While the cursor is on a parenthesis, the normal mode
      commands <code>,&lt;</code> or <code>,&gt;</code> can be used in
      this manner to move the parenthesis left or right respectively,
      thereby slurping or barfing expressions.
    </p>
  </li>
</ol>
<p>
  That was a very brief overview of what Paredit can do.  There is a
  lot more to Paredit than what is described above.  Paredit has a
  rich set of keybindings to make editing s-expressions very
  convenient.  Enter <code>:help paredit-keys</code> in command-line
  mode to see the list of the keybindings.
</p>
<p>
  I think it is a good idea to read the entire Paredit documentation.
  Enter <code>:help paredit</code> to do so.  It is about 500 lines
  long and takes about 30 to 40 minutes to read.  The time spent
  reading this documentation is worth it because it makes editing Lisp
  code very pleasant and productive.
</p>
<h2 id="use-debugger-and-inspector">Use Debugger and Inspector<a href="#use-debugger-and-inspector"></a></h2>
<p>
  After getting started with Slimv or Vlime, the very next thing you
  might want to know is how to work with the debugger.  The debugger
  window comes up whenever an error or an unhandled condition occurs.
  It might look quite scary to a beginner, so it is a good idea to
  become comfortable with it as soon as possible.  Fortunately, both
  Slimv and Vlime provide excellent key-bindings to inspect the error
  or dismiss it to return to the source code buffer quickly and
  easily.
</p>
<h3 id="use-debugger-and-inspector-with-slimv">Use Debugger and Inspector with Slimv<a href="#use-debugger-and-inspector-with-slimv"></a></h3>
<p>
  The following steps trigger an error and then show how to work with
  the debugger in Slimv:
</p>
<ol>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
<pre>
<code>(defun square (x)
  (* x x))

(square "foo")</code>
</pre>
  </li>
  <li>
    <p>
      Enter <kbd>,</kbd><kbd>b</kbd> to evaluate the buffer.
    </p>
  </li>
  <li>
    <p>
      As soon as the defective form <code>(square "foo")</code> gets
      evaluated, an error occurs.  The error, possible restarts and
      the backtrace is displayed in a new split window for SLDB.  SLDB
      stands for Slime Debugger.  Here is an example of what may
      appear in the SLDB window:
    </p>
<pre>
<samp>The value
  "foo"
is not of type
  NUMBER
when binding SB-KERNEL::X
   [Condition of type TYPE-ERROR]

Restarts:
  0: [RETRY] Retry SLIME REPL evaluation request.
  1: [*ABORT] Return to SLIME's top level.
  2: [ABORT] abort thread (#&lt;THREAD "repl-thread" RUNNING {1003274E23}&gt;)

Backtrace:
  0: (SB-KERNEL:TWO-ARG-* "foo" "foo") [external]
  1: (SQUARE "foo")
  2: (SB-DEBUG::TRACE-CALL #&lt;SB-DEBUG::TRACE-INFO SQUARE&gt; #&lt;FUNCTION SQUARE&gt; "foo")
  3: (SB-INT:SIMPLE-EVAL-IN-LEXENV (SQUARE "foo") #&lt;NULL-LEXENV&gt;)
  4: (EVAL (SQUARE "foo"))
  5: (SWANK::EVAL-REGION "(defun square (x) ..)
  6: ((LAMBDA NIL :IN SWANK-REPL::REPL-EVAL))
  ...</samp>
</pre>
    <p>
      The ellipsis in the end is added by me to denote that the actual
      output has been truncated in this article for the sake of
      brevity.
    </p>
  </li>
  <li>
    <p>
      In the SLDB window, move the cursor to the second line of
      backtrace, i.e. on the following line:
    </p>
    <pre><samp>  1: (SQUARE "foo")</samp></pre>
    <p>
      Then type <kbd>enter</kbd>.  This line should now unfold to show
      the following details:
    </p>
<pre>
<samp>  1: (SQUARE "foo")
      in "(SB-INT:NAMED-LAMBDA SQUARE-----------------------------------
    Locals:
      X = "foo"</samp>
</pre>
  </li>
  <li>
    <p>
      Move the cursor to the line that begins with <code>in</code>,
      i.e. on this line:
    </p>
    <pre><samp>      in "(SB-INT:NAMED-LAMBDA SQUARE-----------------------------------</samp></pre>
    <p>
      Then type <kbd>enter</kbd>.  Some information about its source
      code should appear like this:
    </p>
<pre>
<samp>  1: (SQUARE "foo")
      in "(SB-INT:NAMED-LAMBDA SQUARE
    (X)
  (BLOCK SQUARE (#:***HERE*** (* X X))))" byte 1
    Locals:
      X = "foo"</samp>
</pre>
  </li>
  <li>
    <p>
      Move the cursor to the following line:
    </p>
    <pre><samp>      X = "foo"</samp></pre>
    <p>
      Then type <kbd>,</kbd><kbd>i</kbd> to inspect this variable.  A
      prompt would appear to confirm the variable name.  Type
      <kbd>enter</kbd> to confirm.  An inspector window should now
      appear with more details about this variable.  This window should
      look like this:
    </p>
<pre>
<samp>Inspecting #&lt;(SIMPLE-ARRAY CHARACTER (3)) {100478AFAF}&gt;
--------------------
Press &lt;F1&gt; for Help

Dimensions: (3)
Element type: CHARACTER
Total size: 3
Adjustable: NIL
Fill pointer: NIL
Contents:
0: #\f
1: #\o
2: #\o


[&lt;&lt;] Exit Inspector</samp>
</pre>
  </li>
  <li>
    <p>
      Type <kbd>enter</kbd> to inspect any object under the cursor and
      drill down further.
    </p>
  </li>
  <li>
    <p>
      Type <kbd>backspace</kbd> in normal mode to return to the
      previous object.
    </p>
  </li>
  <li>
    <p>
      Enter <kbd>,</kbd><kbd>q</kbd> in normal mode to quit the
      inspector.
    </p>
  </li>
  <li>
    <p>
      Finally, move the cursor to the following line in the SLDB
      window:
    </p>
    <pre><samp>  1: [*ABORT] Return to SLIME's top level.</samp></pre>
    <p>
      Then type <kbd>enter</kbd> to execute this restart.
      Alternatively, enter <kbd>,</kbd><kbd>a</kbd> in normal mode to
      select the abort restart and quit to the previous level or
      <kbd>,</kbd><kbd>q</kbd> to quit to top level.
    </p>
  </li>
</ol>
<p>
  Most of the times when an error occurs, I quickly take a look at the
  stack trace to realise that I have made a silly mistake and enter
  the <kbd>,</kbd><kbd>q</kbd> command to abort and quit to top level.
  This can be quite convenient because it allows returning from
  debugging to coding very quickly with only two keystrokes.
</p>
<h3 id="use-debugger-and-inspector-with-vlime">Use Debugger and Inspector with Vlime<a href="#use-debugger-and-inspector-with-vlime"></a></h3>
<p>
  The following steps trigger an error and then show how to work with
  the debugger in Vlime:
</p>
<ol>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
<pre>
<code>(defun square (x)
  (* x x))

(square "foo")</code>
</pre>
  </li>
  <li>
    <p>
      Save the file, connect to Vlime server and enter
      <kbd>\</kbd><kbd>o</kbd><kbd>f</kbd> in normal mode to compile
      the entire buffer.
    </p>
  </li>
  <li>
    <p>
      As soon as the defective form <code>(square "foo")</code> gets
      evaluated, an error occurs.  The error, possible restarts and
      the backtrace is displayed in a new split window for SLDB.  SLDB
      stands for Slime Debugger.  Here is an example of what may
      appear in the SLDB window:
    </p>
<pre>
<samp>Thread: 1; Level: 1

The value
  "foo"
is not of type
  NUMBER
when binding SB-KERNEL::X
   [Condition of type TYPE-ERROR]

Restarts:
  0. *ABORT - Return to SLIME's top level.
  1.  ABORT - abort thread (#&lt;THREAD "worker" RUNNING {10045D6F83}&gt;)

Frames:
  0.  (SB-KERNEL:TWO-ARG-* "foo" "foo") [external]
  1.  (SQUARE "foo")
  2.  (SB-FASL::LOAD-FASL-GROUP #S(SB-FASL::FASL-INPUT :STREAM #&lt;SB-SYS:FD-STREAM for "file /home/susam/foo.fasl" {10045E76A3}&gt; :TABLE #(41 #&lt;PACKAGE "SB-IMPL"&gt; SB-IMPL::%DEFUN #&lt;PACKAGE "COMMON-LISP-USER"&gt;..
  3.  (SB-FASL::LOAD-AS-FASL #&lt;SB-SYS:FD-STREAM for "file /home/susam/foo.fasl" {10045E76A3}&gt; NIL NIL)
  4.  ((FLET SB-FASL::THUNK :IN LOAD))
  5.  (SB-FASL::CALL-WITH-LOAD-BINDINGS #&lt;CLOSURE (FLET SB-FASL::THUNK :IN LOAD) {7F7B9B0B60BB}&gt; #&lt;SB-SYS:FD-STREAM for "file /home/susam/foo.fasl" {10045E76A3}&gt;)
  ...</samp>
</pre>
    <p>
      The ellipsis in the end is added by me to denote that the actual
      output has been truncated in this article for the sake of
      brevity.
    </p>
  </li>
  <li>
    <p>
      In the SLDB window, move the cursor to the second line of
      backtrace, i.e. on the following line:
    </p>
    <pre><samp>  1.  (SQUARE "foo")</samp></pre>
    <p>
      Then type <kbd>d</kbd>.  A new split window should appear with
      the following details about this frame:
    </p>
<pre>
<samp>Frame: 1 (Restartable)

Locals:
  X: "foo"

Location:
  File: /home/susam/foo.lisp
  Position: 20
  Snippet:
    (* x x))

    (square "foo")</samp>
</pre>
  </li>
  <li>
	<p>
      While the cursor is on the same line as mentioned in the
      previous point, type <kbd>i</kbd> to bring up the inspector
      window for this frame.
	</p>
  </li>
  <li>
    <p>
      In the inspector window, type <kbd>i</kbd> to enter insert mode.
      Enter the following variable name in insert mode:
    </p>
    <pre><code>x</code></pre>
    <p>
      Then type <kbd>esc</kbd> to return to normal mode.  Then type
      <kbd>enter</kbd>.  The following details about the variable
      <code>x</code> should now appear in the inspector window:
    </p>
<pre>
<samp>#&lt;(SIMPLE-ARRAY CHARACTER (3)) {1004617ABF}&gt;
============================================

Dimensions: (3)
Element type: CHARACTER
Total size: 3
Adjustable: NIL
Fill pointer: NIL
Contents:
0: #\f
1: #\o
2: #\o</samp></pre>
  </li>
  <li>
    <p>
      Type <kbd>enter</kbd> to inspect any object under the cursor and
      drill down further.
    </p>
  </li>
  <li>
    <p>
      Type <kbd>p</kbd> to return to the previous object.
    </p>
  </li>
  <li>
    <p>
      Enter the regular Vim command <code>:q</code> in command-line
      mode to quit the inspector window.
    </p>
  </li>
  <li>
    <p>
      Finally, move the cursor to the following line in the SLDB
      window:
    </p>
    <pre><samp>  1: [*ABORT] Return to SLIME's top level.</samp></pre>
    <p>
      Then type <kbd>enter</kbd> to execute this restart.
      Alternatively, we can enter <kbd>a</kbd> in normal mode to
      select the abort restart to return to the previous level.  At
      this time, there is no command to return to SLIME's top level.
    </p>
  </li>
</ol>
<h2 id="trace-function">Trace Function<a href="#trace-function"></a></h2>
<h3 id="trace-function-in-slimv">Trace Function in Slimv<a href="#trace-function-in-slimv"></a></h3>
<p>
  The following steps show how to get started with tracing functions
  in Slimv:
</p>
<ol>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
<pre>
<code>(defun square (x)
  (* x x))

(square (square 2))</code>
</pre>
  </li>
  <li>
    <p>
      Enter <kbd>,</kbd><kbd>b</kbd> in normal mode to evaluate the
      entire buffer.
    </p>
  </li>
  <li>
    <p>
      Place the cursor on the function name, i.e. on
      <code>square</code> and enter <kbd>,</kbd><kbd>t</kbd> in normal
      mode to toggle tracing for this function.  A prompt appears to
      confirm the function name.  Type <kbd>enter</kbd> to confirm.
    </p>
  </li>
  <li>
    <p>
      While the cursor is on the last expression, enter
      <kbd>,</kbd><kbd>d</kbd> in normal mode to evaluate the top-level
      form.  The following output appears in the REPL buffer.
    </p>
<pre>
<code>(square (square 2))
  0: (SQUARE 2)
  0: SQUARE returned 4
  0: (SQUARE 4)
  0: SQUARE returned 16
16</code>
</pre>
    <p>
      This output contains information about each call to the traced
      function, arguments passed to it and the return values.
    </p>
  </li>
</ol>
<h3 id="trace-function-in-vlime">Trace Function in Vlime<a href="#trace-function-in-vlime"></a></h3>
<p>
  It takes a little more work to start tracing functions in Vlime.
  The following steps show how to do it:
</p>
<ol>
  <li>
    <p>
      Add the following statement to <code>~/.vimrc</code>:
    </p>
<pre>
<code>let g:vlime_contribs = ['SWANK-ASDF', 'SWANK-PACKAGE-FU',
                      \ 'SWANK-PRESENTATIONS', 'SWANK-FANCY-INSPECTOR',
                      \ 'SWANK-C-P-C', 'SWANK-ARGLISTS', 'SWANK-REPL',
                      \ 'SWANK-FUZZY', 'SWANK-TRACE-DIALOG']</code>
</pre>
    <p>
      The above variable defines the list of Swank contrib modules to
      load while initialising a Vlime connection.  All modules
      mentioned above except the last one are loaded by default.  The
      <code>SWANK-TRACE-DIALOG</code> module is not loaded by default
      but this module is necessary for tracing functions, so in order
      to load it, we define this variable to load this module in
      addition to all the other modules that are loaded by default.
    </p>
  </li>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
<pre>
<code>(defun square (x)
  (* x x))

(square (square 2))</code>
</pre>
  </li>
  <li>
    <p>
      Save the file, connect to Vlime server and enter
      <kbd>\</kbd><kbd>o</kbd><kbd>f</kbd> in normal mode to compile
      the entire buffer.
    </p>
  </li>
  <li>
    <p>
      Enter <kbd>\</kbd><kbd>T</kbd><kbd>D</kbd> in normal mode to
      show the trace dialog in a split window.
    </p>
  </li>
  <li>
    <p>
      Enter <kbd>ctrl</kbd>&nbsp;+&nbsp;<kbd>w</kbd>&nbsp;<kbd>w</kbd>
      in normal mode to go back to the source code window.
    </p>
  </li>
  <li>
    <p>
      Place the cursor on the function name, i.e. on
      <code>square</code> and enter
      <kbd>\</kbd><kbd>T</kbd><kbd>T</kbd> in normal mode to toggle
      tracing for this function.
    </p>
  </li>
  <li>
    <p>
      While the cursor is on the last expression, enter
      <kbd>\</kbd><kbd>s</kbd><kbd>t</kbd> in normal mode to evaluate
      the top-level form.
    </p>
  </li>
  <li>
    <p>
      Enter <kbd>ctrl</kbd>&nbsp;+&nbsp;<kbd>w</kbd>&nbsp;<kbd>w</kbd>
      in normal mode twice to go to the trace window.
    </p>
  </li>
  <li>
    <p>
      Under <code>Trace Entries</code>, place the cursor on
      <code>[refresh]</code> and type <kbd>enter</kbd>.
    </p>
  </li>
  <li>
    <p>
      Then place the cursor on <code>[fetch next batch]</code> and
      type <kbd>enter</kbd>.  Two results should appear for the two
      <code>square</code> calls that were made due to step 7.  The trace
      information would be folded under each call.
    </p>
  </li>
  <li>
    <p>
      Move the cursor to each fold line and enter
      <kbd>z</kbd><kbd>o</kbd> in normal mode to open the fold.  After
      opening both the folds, the following result should be visible:
    </p>
    <pre>
<code>0 - COMMON-LISP-USER::SQUARE
    &gt; 2
    &lt; 4
1 - COMMON-LISP-USER::SQUARE
    &gt; 4
    &lt; 16
    16</code>
</pre>
    <p>
      The lines starting with <code>&gt;</code> show the arguments and
      the ones starting with <code>&lt;</code> show the return values.
    </p>
  </li>
</ol>
<h2 id="nifty-features">Nifty Features<a href="#nifty-features"></a></h2>
<p>
  In this section, we will go over some of the nifty features that
  these plugins offer.  Not all features will be covered here.  I have
  chosen only a few features for the discussion here that I felt would
  be useful to beginners and at the same time also demonstrate the
  versatility of these plugins.
</p>
<h3 id="evaluate-top-level-form">Evaluate Top-Level Form<a href="#evaluate-top-level-form"></a></h3>
<p>
  In the previous sections, we saw how to evaluate the current
  expression under the cursor.  In this section, we will see how to
  evaluate the top-level expression around the current cursor
  position.  Let us do a small exercise to see this:
</p>
<ol>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
    <pre><code>(+ 1 (* 2 (/ 6 <span class="cursor">2</span>)))</code></pre>
  </li>
  <li>
    <p>
      With Slimv or Vlime connected to Swank, let us do a quick recap
      of how to evaluate the current expression.
    </p>
    <p>
      With Slimv, enter the normal mode
      command <kbd>,</kbd><kbd>e</kbd> to evaluate the current
      expression.
    </p>
    <p>
      With Vlime, enter the normal mode command
      <kbd>\</kbd><kbd>s</kbd><kbd>s</kbd> to evaluate the current
      expression.
    </p>
    <p>
      The current expression, i.e. <code>(/ 6 2)</code> should get
      evaluated and the result <code>3</code> should appear in the
      REPL buffer.
    </p>
  </li>
  <li>
    <p>
      Let us now see how to evaluate the top-level expression.
    </p>
    <p>
      With Slimv, enter the normal mode
      command <kbd>,</kbd><kbd>d</kbd> to evaluate the top-level
      expression.
    </p>
    <p>
      With Vlime, enter the normal mode command
      <kbd>\</kbd><kbd>s</kbd><kbd>t</kbd> to evaluate the top-level
      expression.
    </p>
    <p>
      The top-level expression should get evaluated and the result
      <code>7</code> should appear in the REPL buffer.
    </p>
  </li>
</ol>
<h3 id="rainbow-parentheses">Rainbow Parentheses<a href="#rainbow-parentheses"></a></h3>
<p>
  Rainbow parentheses make it easy to see matching parentheses by
  colouring different levels of parentheses with different colours.
  Matching parentheses have the same colour.  To enable this feature
  in Slimv, add this command to <code>~/.vimrc</code>:
</p>
<pre><code>let g:lisp_rainbow=1</code></pre>
<p>
  This feature is not available in Vlime.  But there are several Vim
  plugins that support rainbow parentheses.  Here are the steps to
  install one such plugin that is quite popular:
</p>
<pre>
<code>git clone https://github.com/junegunn/rainbow_parentheses.vim.git ~/.vim/pack/plugins/start/rainbow_parentheses
echo 'autocmd FileType lisp,scheme,clojure RainbowParentheses' &gt;&gt; ~/.vimrc</code>
</pre>
<p>
  In case you ever want to uninstall it, enter these commands:
</p>
<pre>
<code>rm -rf ~/.vim/pack/plugins/start/rainbow_parentheses
sed -i.bkp '/autocmd.*RainbowParentheses/d' ~/.vimrc</code>
</pre>
<h3 id="argument-list">Argument List<a href="#argument-list"></a></h3>
<p>
  You must have seen this feature already while trying out the
  sections earlier.  While editing a Lisp source file, after typing a
  function name, as soon as a space is typed or the enter key is
  typed, the argument list for the function appears to serve as a
  reference.  In Slimv, the argument list appears in the status line
  at the bottom.  In Vlime, the argument list appears in a split
  window at the top.
</p>
<h3 id="omni-completion">Omni-Completion<a href="#omni-completion"></a></h3>
<p>
  Type a function name partially, e.g. <code>form</code> and type
  <kbd>tab</kbd> while still in insert mode.  The omni-completion menu
  should appear with the list of completions if there are multiple
  choices.  Type <kbd>ctrl</kbd>+<kbd>n</kbd> to select the next choice
  and <kbd>ctrl</kbd>+<kbd>p</kbd> to select the previous choice.
  Selecting a choice also immediately inserts that choice in the
  buffer.  This works in both Slimv and Vlime.  In Slimv, we can also
  type <kbd>tab</kbd> to select the next choice.
</p>
<p>
  By default, omni-completion is fuzzy.  For example,
  type <code>wl</code> and type <kbd>tab</kbd> and omni-complete
  should insert <code>write-line</code> automatically as well as show
  other matching choices.
</p>
<h3 id="describe-symbol">Describe Symbol<a href="#describe-symbol"></a></h3>
<p>
  With Slimv, enter the normal mode command <kbd>,</kbd><kbd>s</kbd>
  to describe the symbol under the cursor.  This brings up the
  documentation of the symbol in the Vim message area.  This feature
  works while editing Common Lisp and Clojure source files but not
  while editing Scheme source file.  This feature is not supported for
  Scheme at this time.  See
  the <a href="#other-lisp-dialects"><em>Other Lisp Dialects</em></a>
  section for details on how to set up Slimv with Clojure and MIT/GNU
  Scheme.
</p>
<p>
  With Vlime, enter <kbd>\</kbd><kbd>d</kbd><kbd>a</kbd> in normal
  mode to describe the symbol under the cursor.  This brings up the
  documentation of the symbol in a split window.
</p>
<h3 id="expand-macro">Expand Macro<a href="#expand-macro"></a></h3>
<p>
  Here is an excercise that shows how to expand macros interactively
  while editing a Lisp source file:
</p>
<ol>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
<pre>
<code>(defmacro calc (a op b)
  (list op a b))

(defmacro square (x)
  (list 'calc x '* x))

(square 2)</code>
</pre>
  </li>
  <li>
    <p>
      With Slimv, enter <kbd>,</kbd><kbd>b</kbd> in normal mode to
      evaluate the entire buffer.
    </p>
    <p>
      With Vlime, save the file, connect to Vlime server and type
      <kbd>\</kbd><kbd>o</kbd><kbd>f</kbd> in normal mode to compile the
      entire buffer.
    </p>
  </li>
  <li>
    <p>
      With Slimv, while the cursor is on the last expression, enter
      <kbd>,</kbd><kbd>1</kbd> in normal mode to expand the macro form
      once.
    </p>
    <p>
      With Vlime, enter <kbd>\</kbd><kbd>m</kbd><kbd>1</kbd> in normal
      mode to do the same thing.
    </p>
    <p>
      The following expansion should appear as the result:
    </p>
    <pre><code>(CALC 2 * 2)</code></pre>
    <p>
      Slimv displays the expansion in the REPL buffer whereas Vlime
      displays it in a new split window.
    </p>
  </li>
  <li>
    <p>
      With Slimv, enter <kbd>,</kbd><kbd>m</kbd> in normal mode to
      recursively expand the current expression until it is no longer
      a macro.
    </p>
    <p>
      With Vlime, enter <kbd>\</kbd><kbd>m</kbd><kbd>a</kbd> in normal
      mode to do the same thing.
    </p>
    <p>
      The following expansion should appear as the result:
    </p>
    <pre><code>(* 2 2)</code></pre>
  </li>
</ol>
<h3 id="cross-reference">Cross Reference<a href="#cross-reference"></a></h3>
<p>
  Here is an exercise that shows how to use the cross-reference
  commands in Slimv and Vlime:
</p>
<ol>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
<pre>
<code>(defun square (x)
  (* x x))

(defun square-of-sum (x y)
  (square (+ x y)))

(defun sum-of-squares (x y)
  (+ (square x) (square y)))

(square-of-sum 2 3)
(sum-of-squares 2 3)</code>
</pre>
  </li>
  <li>
    <p>
      With Slimv, enter <kbd>,</kbd><kbd>b</kbd> in normal mode to
      evaluate the entire buffer.
    </p>
    <p>
      With Vlime, save the file, connect to Vlime server and type
      <kbd>\</kbd><kbd>o</kbd><kbd>f</kbd> in normal mode to compile the
      entire buffer.
    </p>
  </li>
  <li>
    <p>
      With Slimv, place the cursor on any occurrence of the symbol
      <code>square</code> and enter
      <kbd>,</kbd><kbd>x</kbd><kbd>l</kbd> in normal mode.  A prompt
      would appear to confirm the symbol name.  Type <kbd>enter</kbd>
      to confirm.  The list of all callers should now appear in the
      REPL buffer.
    </p>
    <p>
      With Vlime, place the cursor on any occurrence of the symbol
      <code>square</code> and enter <kbd>\</kbd><kbd>x</kbd><kbd>c</kbd>
      in normal mode to list all callers of the function.  The output
      appears in a split window containing the cross reference (xref)
      buffer.  Type <kbd>enter</kbd> on any item in the xref buffer and
      Vlime will take you directly to the referenced location.
    </p>
  </li>
</ol>
<h2 id="other-common-lisp-implementations">Other Common Lisp Implementations<a href="#other-common-lisp-implementations"></a></h2>
<p>
  The previous sections used SBCL as the implementation of Common
  Lisp.  How well do Slimv and Vlime work with other Common Lisp
  implementations?
</p>
<p>
  I have found that both plugins are pretty well tested with SBCL.
  However, they may not be so well tested with other implementations.
  Due to the lack of sufficient testing with Common Lisp
  implementations other than SBCL, certain errors may occur while
  using other implementations.  Sometimes it is possible to work
  around these errors and sometimes it isn't.  We will see an example
  of this in an upcoming section when we try to start Swank server
  automatically using Vlime and CLISP.
</p>
<p>
  For this section, I choose CLISP and Embeddable Common-Lisp (ECL) as
  two other implementations of Common Lisp that will be used with
  Slimv and Vlime.  After following the upcoming subsections, you
  should get the hang of how to make Slimv or Vlime work with other
  implementations of Common Lisp.
</p>
<h3 id="use-slimv-with-clisp">Use Slimv with CLISP<a href="#use-slimv-with-clisp"></a></h3>
<p>
  If you have read and tried the steps in the
  <a href="#get-started-with-slimv-and-sbcl"><em>Get Started with
  Slimv and SBCL</em></a> section, it is going to be quite easy to use
  Slimv with CLISP.  The steps are similar with a few minor
  modifications.  They are explained below:
</p>
<ol>
  <li>
    <p>
      Uninstall SBCL and install CLISP with these commands:
    </p>
    <pre>
<code>sudo apt-get remove sbcl
sudo apt-get install clisp</code></pre>
  </li>
  <li>
    <p>
      To start Swank server manually, enter this command:
    </p>
    <pre><code>clisp ~/.vim/pack/plugins/start/slimv/slime/start-swank.lisp</code></pre>
    <p>
      Then edit a Lisp source file and enter the normal command
      <kbd>,</kbd><kbd>c</kbd> to connect to it and bring up the REPL
      window.
    </p>
  </li>
  <li>
    <p>
      To start Swank automatically from Slimv, there is nothing more
      to be done.  Just edit a Lisp source file and enter the normal
      mode command <kbd>,</kbd><kbd>c</kbd>.  While running in GNU
      Screen, tmux or a desktop environment, Slimv can automatically
      detect CLISP and start Swank server with it.
    </p>
  </li>
</ol>
<p>
  In general, to start Swank server manually with another Common Lisp
  implementation, we need to figure out how to load
  <code>start-swank.lisp</code> with it.
</p>
<h3 id="use-slimv-with-ecl">Use Slimv with ECL<a href="#use-slimv-with-ecl"></a></h3>
<p>
  The steps to use Slimv with Embeddable Common-Lisp (ECL) are very
  similar too.  Once again, only if we need to start Swank server
  manually, we need to figure out the command to do so.  Otherwise,
  there is no other difference.  Here are the steps:
</p>
<ol>
  <li>
    <p>
      Ensure that SBCL and CLISP are uninstalled and ECL is installed.
    </p>
    <pre>
<code>sudo apt-get remove sbcl clisp
sudo apt-get install ecl</code></pre>
  </li>
  <li>
    <p>
      To start Swank server manually, enter this command:
    </p>
    <pre><code>ecl --load ~/.vim/pack/plugins/start/slimv/slime/start-swank.lisp</code></pre>
    <p>
      Then edit a Lisp source file and enter the normal command
      <kbd>,</kbd><kbd>c</kbd> to connect to it and bring up the REPL
      window.
    </p>
  </li>
  <li>
    <p>
      To start Swank automatically from Slimv, there is nothing more
      to be done.  Just edit a Lisp source file and enter the normal
      mode command <kbd>,</kbd><kbd>c</kbd>.  While running in GNU
      Screen, tmux or a desktop environment, Slimv can automatically
      detect CLISP and start Swank server with it.
    </p>
    <p>
      There is a possible timeout issue to be aware of though.  ECL
      can take a minute or two to compile the code it loads the first
      time Swank server is started.  However, Slimv has a default
      timeout period of 20 seconds, so Slimv may fail with the
      following error message:
    </p>
    <pre><samp>SWANK server is not running.  Press ENTER to continue.</samp></pre>
    <p>
      If this happens, just wait for ECL to complete compiling Swank
      server.  Once it starts Swank server, enter the normal mode
      command <kbd>,</kbd><kbd>c</kbd> again and it should connect
      immediately.
    </p>
  </li>
</ol>
<h3 id="use-vlime-with-clisp">Use Vlime with CLISP<a href="#use-vlime-with-clisp"></a></h3>
<p>
  This subsection assumes that you have already read and tried the
  <a href="#get-started-with-vlime-and-sbcl"><em>Get Started with
  Vlime and SBCL</em></a> section, so you are familiar with Vlime
  basics.  Now we will see what more it takes to use Vlime with CLISP
  in the steps below:
</p>
<ol>
  <li>
    <p>
      Let us assume we want to start afresh with CLISP, i.e. we do not
      have previous artefacts created by SBCL.  To clean up old
      artefacts, enter these commands:
    </p>
<pre>
<code>rm -rf ~/.sbclrc ~/quicklisp
sudo apt-get remove sbcl</code>
</pre>
  </li>
  <li>
    <p>
      Install CLISP with this command:
    </p>
    <pre><code>sudo apt-get install clisp</code></pre>
  </li>
  <li>
    <p>
      Install Quicklisp using CLISP with these commands:
    </p>
    <pre>
<code>curl -O https://beta.quicklisp.org/quicklisp.lisp
clisp -i quicklisp.lisp -x '(quicklisp-quickstart:install)'
clisp -i ~/quicklisp/setup.lisp -x '(ql:add-to-init-file)'</code>
</pre>
    <p>
      Type <kbd>enter</kbd> in the end, when prompted, to complete the
      installation.
    </p>
  </li>
  <li>
    <p>
      Add the following code to <code>~/.vimrc</code>:
    </p>
<pre>
<code>let g:vlime_cl_impl = 'clisp'
function! VlimeBuildServerCommandFor_clisp(vlime_loader, vlime_eval)
    return ['clisp', '-i', a:vlime_loader,
                   \ '-x', a:vlime_eval,
                   \ '-repl']
endfunction</code>
</pre>
    <p>
      Unlike Slimv, automatic start of Swank server with Common Lisp
      implementations other than SBCL are not supported out of the
      box, so the above Vim script tells Vlime how to start Swank
      server with CLISP.  The <code>-repl</code> option is used to
      work around an issue that is explained in the next point.
    </p>
  </li>
  <li>
    <p>
      Vlime is now ready to be used with CLISP.  Just edit a Lisp
      source file and enter the normal mode command
      <kbd>\</kbd><kbd>r</kbd><kbd>r</kbd> to start Swank server and
      connect to it automatically.
    </p>
    <p>
      You may see the following error in the SLIME debugger
      (<code>sldb</code>) split window:
    </p>
    <pre><samp>SOCKET-STATUS on #1=#&lt;INPUT STRING-INPUT-STREAM&gt; is illegal</samp></pre>
    <p>
      Despite the above error, the following message should appear at
      the bottom:
    </p>
    <pre><samp>Vlime Connection 1 established.</samp></pre>
    <p>
      If the above message occurs, you can ignore this error, close
      the debugger window as well as the console output window and
      continue to use Vlime normally.
    </p>
    <p>
      The <code>-repl</code> option used in the previous step ensures
      that the REPL starts despite this error.  Without it, this step
      would not have succeeded.  This is what I meant when I said
      earlier that we may need to work around certain errors while
      using these plugins with a Common Lisp implementation other than
      SBCL.
    </p>
  </li>
</ol>
<h3 id="use-vlime-with-ecl">Use Vlime with ECL<a href="#use-vlime-with-ecl"></a></h3>
<p>
  Here are the steps to use Vlime with ECL:
</p>
<ol>
  <li>
    <p>
      Let us assume we want to start afresh with ECL, i.e. we do not
      have previous artefacts created by SBCL or ECL.  To clean up old
      artefacts, enter these commands:
    </p>
<pre>
<code>rm -rf ~/.sbclrc ~/.clisprc.lisp ~/quicklisp
sudo apt-get remove sbcl clisp</code>
</pre>
  </li>
  <li>
    <p>
      Install ECL with this command:
    </p>
    <pre><code>sudo apt-get install ecl</code></pre>
  </li>
  <li>
    <p>
      Install Quicklisp using ECL with these commands:
    </p>
    <pre>
<code>curl -O https://beta.quicklisp.org/quicklisp.lisp
ecl --load quicklisp.lisp --eval '(quicklisp-quickstart:install)' --eval '(quit)'
ecl --load ~/quicklisp/setup.lisp --eval '(ql:add-to-init-file)' --eval '(quit)'</code>
</pre>
    <p>
      Type <kbd>enter</kbd> in the end, when prompted, to complete the
      installation.
    </p>
  </li>
  <li>
    <p>
      Add the following code to <code>~/.vimrc</code>:
    </p>
<pre>
<code>let g:vlime_cl_impl = 'ecl'
function! VlimeBuildServerCommandFor_ecl(vlime_loader, vlime_eval)
    return ['ecl', '--load', a:vlime_loader,
                 \ '--eval', a:vlime_eval]
endfunction</code>
</pre>
  </li>
  <li>
    <p>
      Edit a Lisp source file and enter the normal mode command
      <kbd>\</kbd><kbd>r</kbd><kbd>r</kbd> to start Swank server and
      connect to it automatically.
    </p>
  </li>
</ol>
<h2 id="other-lisp-dialects">Other Lisp Dialects<a href="#other-lisp-dialects"></a></h2>
<p>
  So far, we have seen how to use Slimv or Vlime with a Common Lisp
  implementation.  Now let us see how well these plugins work with
  other Lisp dialects.  Vlime does not support other Lisp dialects.
  It supports Common Lisp only.  Slimv supports two other popular
  dialects of Lisp: Scheme and Clojure.  In the next two subsections,
  we see how
</p>
<h3 id="use-slimv-with-mit-gnu-scheme">Use Slimv with MIT/GNU Scheme<a href="#use-slimv-with-mit-gnu-scheme"></a></h3>
<p>
  Slimv is documented to work with MIT/GNU Scheme on Linux only.
  Enter
  <code>:help slimv-installation</code> in Vim to read more about it.
  It says the following under the "Prerequisites" section.
</p>
<blockquote>
  Lisp or Clojure or MIT/GNU Scheme (Linux only) installed.
</blockquote>
<p>
  Further, the Swank loader script for MIT/GNU Scheme named
  <code>swank-mit-scheme.scm</code> says the following in its source code
  comments:
</p>
<blockquote>
  You need MIT/GNU Scheme 9.2
</blockquote>
<p>
  At the time of writing this article, I have confirmed that both
  these requirements indeed need to be met to use Slimv with MIT/GNU
  Scheme.  Here are the steps to use Slimv with MIT/GNU Scheme:
</p>
<ol>
  <li>
    <p>
      Install MIT/GNU Scheme with this command:
    </p>
    <pre><code>sudo apt-get mit-scheme</code></pre>
    <p>
      Ensure that <code>vim-nox</code>, tmux and Slimv are installed
      as explained in the
      <a href="#get-started-with-slimv-and-sbcl"><em>Get Started with
      Slimv and SBCL</em></a> subsection earlier.
    </p>
  </li>
  <li>
    <p>
      This is an optional step.  To start Swank server automatically
      from Slimv, run Vim in tmux, GNU Screen or a desktop
      environment.  In this article, we use tmux, so start tmux with
      this command:
    </p>
    <pre><code>tmux</code></pre>
  </li>
  <li>
    <p>
      This step is necessary only if you are not using tmux, GNU
      Screen or a desktop environment.  In such a case, enter this
      command to start Swank server manually:
    </p>
    <pre><code>scheme --load ~/.vim/pack/plugins/start/slimv/slime/contrib/swank-mit-scheme.scm</code></pre>
  </li>
  <li>
    <p>
      Create a new Scheme source code file, say, <code>foo.scm</code>
      with this command:
    </p>
    <pre><code>vim foo.scm</code></pre>
  </li>
  <li>
    <p>
      To connect to Swank server, enter the following command in Vim
      normal mode:
    </p>
    <p>
      <kbd>,</kbd><kbd>c</kbd>
    </p>
  </li>
  <li>
    <p>
      Type some code into the buffer for the new file.  To do so,
      first type <kbd>i</kbd> to enter insert mode and type this code:
    </p>
    <pre><code>(display "hello, world\n")</code></pre>
    <p>
      Type <kbd>esc</kbd> to return to normal mode.  To evaluate, the
      current expression under the cursor, enter the following command
      in normal mode:
    </p>
    <p>
      <kbd>,</kbd><kbd>e</kbd>
    </p>
    <p>
      Both the current expression and its result should appear in the
      REPL window.
    </p>
  </li>
</ol>
<p>
  I have confirmed that the steps above work fine with MIT/GNU Scheme
  9.1.1 on Debian GNU/Linux 9.11 (stretch).  Like I mentioned before,
  Slimv requires Linux to work with MIT/GNU Scheme.  For example,
  trying to start Swank server with MIT/GNU Scheme 9.2 on macOS High
  Sierra 10.13.6 fails with this error:
</p>
<pre>
<samp>; /usr/local/Cellar/mit-scheme/9.2_2/lib/mit-scheme-c/include/config.h:879:10:
fatal error: 'sys/types.h' file not found</samp>
</pre>
<p>
  Further, the version of MIT/GNU Scheme really needs to be 9.x.  For
  example, when I try to start Swank with MIT/GNU Scheme 10.1.5 on
  Debian GNU/Linux 10.1 (buster), the following error occurs:
</p>
<pre><samp>;The object #[package 12 (user)], passed as an argument to -&gt;environment, is not an environment.</samp></pre>
<h3 id="use-slimv-with-clojure">Use Slimv with Clojure<a href="#use-slimv-with-clojure"></a></h3>
<p>
  Slimv works fine with Clojure too.  However, it may have some
  trouble locating Clojure on the system if we attempt to start Swank
  server automatically with Clojure.  That is because where and how
  Clojure is installed varies from operating system to operating
  system and also depends on the installation procedure chosen to set
  up Clojure.
</p>
<p>
  On Unix-like systems, Slimv looks for JAR files that match the glob
  pattern <code>clojure*.jar</code> at paths that match the glob
  pattern <code>/usr/local/bin/*clojure*</code>
  and <code>~/*clojure</code>, in that order.  On Windows, it looks
  for the JAR files at directory paths that match the glob
  pattern <code>C:\*clojure*</code> and <code>C:\*clojure*\lib</code>.
  Additionally, Slimv also looks for the JAR files at the paths
  mentioned in the <code>PATH</code> environment variable.  There are
  a few more strategies too to locate Clojure but we will not get into
  that here.
</p>
<p>
  In this section, I will show how to build Clojure from source with
  Maven and install it at <code>~/clojure/clojure.jar</code>, a path
  Slimv can easily find, so installing it here would mean that the
  steps below would work everywhere regardless of the operating
  system.  If you are on Windows, install Clojure
  at <code>C:\clojure\clojure.jar</code> instead.
</p>
<p>
  Here are the steps to install Clojure at
  <code>~/clojure/clojure.jar</code> and use it with Slimv:
</p>
<ol>
  <li>
    <p>
      Choose one of the two sets of commands below to install Maven:
    </p>
<pre>
<code># On Debian, Ubuntu, etc.
sudo apt-get install maven

# On macOS
brew install openjdk maven
export JAVA_HOME=/usr/local/opt/openjdk
export PATH="$JAVA_HOME/bin:$PATH"</code>
</pre>
  </li>
  <li>
    <p>
      Enter these commands to install Clojure:
    </p>
<pre>
<code>git clone https://github.com/clojure/clojure.git ~/clojure
git -C ~/clojure checkout clojure-1.10.1
mvn -f ~/clojure/pom.xml -Plocal -Dmaven.test.skip=true package</code>
</pre>
  </li>
  <li>
    <p>
      Ensure that <code>vim-nox</code>, tmux and Slimv are installed
      as explained in
      the <a href="#get-started-with-slimv-and-sbcl"><em>Get Started
      with Slimv and SBCL</em></a> subsection earlier.
    </p>
  </li>
  <li>
    <p>
      This is an optional step.  To start Swank server automatically
      from Slimv, run Vim in tmux, GNU Screen or a desktop
      environment.  In this article, we use tmux, so start tmux with
      this command:
    </p>
    <pre><code>tmux</code></pre>
  </li>
  <li>
    <p>
      This step is necessary only if you are not using tmux, GNU
      Screen or a desktop environment.  In such a case, enter these
      commands to start Swank server manually:
    </p>
<pre>
<code>SWANK_DIR=~/.vim/pack/plugins/start/slimv/swank-clojure
java -cp "$HOME/clojure/clojure.jar:$SWANK_DIR" clojure.main -i "$SWANK_DIR/swank/swank.clj" -e '(swank.swank/start-repl)' -r</code>
</pre>
  </li>
  <li>
    <p>
      Create a new Clojure source code file, say, <code>foo.clj</code>
      with this command:
    </p>
    <pre><code>vim foo.clj</code></pre>
  </li>
  <li>
    <p>
      To connect to Swank server, enter the following command in Vim
      normal mode:
    </p>
    <p>
      <kbd>,</kbd><kbd>c</kbd>
    </p>
  </li>
  <li>
    <p>
      Type some code into the buffer for the new file.  To do so,
      first type <kbd>i</kbd> to enter insert mode and type this code:
    </p>
<pre><code>(println "hello, world")</code></pre>
    <p>
      Type <kbd>esc</kbd> to return to normal mode.  To evaluate, the
      current expression under the cursor, enter the following command
      in normal mode:
    </p>
    <p>
      <kbd>,</kbd><kbd>e</kbd>
    </p>
    <p>
      Both the current expression and its result should appear in the
      REPL window.
    </p>
  </li>
</ol>
<h2 id="comparison-of-slimv-and-vlime">Comparison of Slimv and Vlime<a href="#comparison-of-slimv-and-vlime"></a></h2>
<p>
  Finally, let me provide a comparison of both Slimv and Vlime side by
  side.  This comparison table below is not exhaustive.  There are
  more differences between the tools than what is mentioned below.
</p>
<table class="grid top">
  <thead>
    <tr>
      <th>Slimv</th>
      <th>Vlime</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="width: 50%">
        <p>
          Slimv's directory structure conforms to the directory
          structure of plugins in a Vim package as well as the default
          directory structure expected by popular Vim plugin managers,
          so installing Slimv is quite straightforward.
        </p>
      </td>
      <td style="width: 50%">
        <p>
          Vlime's directory structure does not conform to the
          directory structure of plugins in a Vim package or the
          default directory structure expected by popular Vim plugin
          managers.  As a result, Vim's native support for packages
          cannot be used to install Vlime.  Installing it via a plugin
          manager requires fiddling with
          Vim's <code>runtimepath</code> option in order to load it
          successfully.
        </p>
      </td>
    </tr>
    <tr>
      <td style="width: 50%">
        <p>
          Slimv requires a Vim package that is compiled with support
          for Python interface.
        </p>
      </td>
      <td style="width: 50%">
        <p>
          Vlime does not have this requirement.  It can work with
          basic Vim that does not have Python interface.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv requires Vim to be running within tmux, GNU Screen or
          a desktop environment to be able to start Swank server
          automatically.  If you have none of these, Swank server
          needs to be started manually.
        </p>
      </td>
      <td>
        <p>
          Vlime does not require tmux, GNU Screen or a desktop
          environment in order to start Vlime server automatically.
          It can start Vlime server on its own.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv does not require Quicklisp to install Swank.  Slimv
          bundles the Swank server code with itself.
        </p>
      </td>
      <td>
        <p>
          Vlime requires Quicklisp to be installed.  It relies on
          Quicklisp to install Swank the first time it is needed.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv bundles Paredit with itself.  Installing Slimv also
          provides Paredit.
        </p>
      </td>
      <td>
        <p>
          Vlime does not bundle Paredit with itself.  Paredit needs to
          be installed separately.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          The buffer for REPL is interactive in Slimv.  We can type
          code directly into the REPL window and type <kbd>enter</kbd>
          to execute it.
        </p>
      </td>
      <td>
        <p>
          The buffer for REPL is not interactive in Vlime.  Its
          <code>nomodifiable</code> option is set, so we cannot type
          code directly into the REPL window.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Paredit electric returns work fine with Slimv.  Slimv remaps
          the "enter" key to show argument list of the current
          function after inserting electric returns.  It takes care of
          preserving the electric return functionality of Paredit.
        </p>
      </td>
      <td>
        <p>
          Paredit electric returns do not work fine with Vlime.  Vlime
          remaps the "enter" key to show argument list of the current
          function without inserting electric returns.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv shows argument list of a function, symbol description,
          etc. in the status line or message area at the bottom.
        </p>
      </td>
      <td>
        <p>
          Vlime shows argument list of a function, symbol description,
          etc. in separate split windows.  These are extra windows to
          skip over while cycling between windows with the normal mode
          <kbd>ctrl</kbd>&nbsp;+&nbsp;<kbd>w</kbd>&nbsp;<kbd>w</kbd>
          command which could feel inconvenient.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv shows trace results, macro expansion, cross reference,
          etc. in the REPL buffer.
        </p>
      </td>
      <td>
        <p>
          Vlime shows resultions of trace results, macro expansion,
          cross reference, etc. in split windows.  These are extra
          windows to skip over while cycling between windows.  This
          could feel inconvenient.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv supports programming in Common Lisp, MIT/GNU Scheme
          and Clojure.
        </p>
      </td>
      <td>
        <p>
          Vlime supports programming in Common Lisp only.  It does not
          support Scheme or Clojure.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv supports rainbow parentheses by adding
          <code>let g:lisp_rainbow=1</code> to <code>~/.vimrc</code>.
          With this feature, parentheses at different levels have
          different colours and matching parentheses have the same
          colour.
        </p>
      </td>
      <td>
        <p>
          Vlime does not have rainbow parentheses.  However, this is
          not a major problem because there are several independent
          plugins available that provide rainbow parentheses.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv cross-reference commands do not help us to jump
          directly to a function listed in the results.
        </p>
      </td>
      <td>
        <p>
          Vlime cross-reference commands create a xref buffer that
          allows us to jump directly to a function listed in the
          results by moving the cursor to the function name in the
          xref buffer and typing <code>enter</code>.
        </p>
      </td>
    </tr>
  </tbody>
</table>
<h2 id="quick-recommendation">Quick Recommendation<a href="#quick-recommendation"></a></h2>
<p>
  If you are looking for a quick recommendation on which plugin to
  use, I am going to recommend Slimv.  It has been around for much
  longer.  It supports a wider variety of Lisp implementations.  I
  find its default key bindings more convenient.  A truly interactive
  REPL buffer is also a bonus.  Also, Slimv supports Scheme and
  Clojure whereas Vlime does not.  Having said that, I think it is a
  good idea to try out both the plugins on your own and then find out
  which one suits you more.
</p>
<h2 id="disclosure">Disclosure<a href="#disclosure"></a></h2>
<p>
  Four bugs were harmed while writing this article!
</p>
<p>
  While writing this article, I found the following four bugs in Slimv
  which were then promptly squashed:
  <a href="https://github.com/kovisoft/slimv/pull/87">#87</a>,
  <a href="https://github.com/kovisoft/slimv/pull/88">#88</a>,
  <a href="https://github.com/kovisoft/slimv/pull/89">#89</a> and
  <a href="https://github.com/kovisoft/slimv/pull/90">#90</a>.
</p>
<h2 id="references">References<a href="#references"></a></h2>
<ul>
  <li>
    <a href="https://web.archive.org/web/20160303225220/http://osdir.com/ml/lisp.cmucl.devel/2003-08/msg00302.html">Couple of Emacs hacks</a>
  </li>
  <li>
    <a href="https://groups.google.com/forum/#!topic/vim_announce/EKTuhjF3ET0">Vim 8.0 Released</a>
  </li>
  <li>
    <a href="https://kovisoft.github.io/slimv-tutorial/tutorial.html">Slimv Tutorial</a>
  </li>
  <li>
    <a href="https://github.com/l04m33/vlime/blob/master/vim/doc/vlime-tutor.txt">A Tutorial for Vlime</a>
  </li>
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/lisp-in-vim.html">Read on website</a> |
  <a href="https://susam.net/tag/lisp.html">#lisp</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/vim.html">#vim</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Sinkholed</title>
<link>https://susam.net/sinkholed.html</link>
<guid isPermaLink="false">rhbww</guid>
<pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="introduction">Introduction<a href="#introduction"></a></h2>
<p>
  On 26 Nov 2019 at 14:55 UTC, I logged into my server that hosts my
  website to perform a simple maintenance activity.  Merely three
  minutes later, at 14:58 UTC, the domain
  name <a href="https://susam.in/">susam.in</a> used to host this
  website was transferred to another registrant without any
  authorisation by me or without any notification sent to me.  Since
  the DNS results for this domain name was cached on my system, I was
  unaware of this issue at that time.  It would take me three days to
  realise that I had lost control of the domain name I had been using
  for my website for the last 12 years.  This blog post documents when
  this happened, how this happened and what it took to regain control
  of this domain name.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#domain-name-transfer">Domain Name Transfer</a></li>
  <li><a href="#avalanche-botnet">Avalanche Botnet</a></li>
  <li><a href="#support-ticket">Support Ticket</a></li>
  <li><a href="#tweets-and-retweets">Tweets and Retweets</a></li>
  <li><a href="#domain-name-return">Domain Name Return</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>
<h2 id="domain-name-transfer">Domain Name Transfer<a href="#domain-name-transfer"></a></h2>
<p>
  On 29 Nov 2019 at 19:00 UTC, when I visited my website hosted at
  <a href="https://susam.in">https://susam.in/</a>, I found that a
  zero-byte file was being served at this URL.  My website was
  missing.  In fact, the domain name resolved to an IPv4 address I was
  unfamiliar with.  It did not resolve to the address of my Linode
  server anymore.
</p>
<p>
  I checked the WHOIS records for this domain name.  To my
  astonishment, I found that I was no longer the registrant of this
  domain.  An entity named The Verden Public Prosecutor's Office was
  the new registrant of this domain.  The WHOIS records showed that
  the domain name was transferred to this organisation on 26 Nov 2019
  at 14:58 UTC, merely three minutes after I had performed my
  maintenance activity on the same day.  Here is a snippet of the
  WHOIS records that I found:
</p>
<pre id="whois">
<samp>Domain Name: susam.in
Registry Domain ID: D2514002-IN
Registrar WHOIS Server:
Registrar URL:
Updated Date: 2019-11-26T14:58:00Z
Creation Date: 2007-05-15T07:19:26Z
Registry Expiry Date: 2020-05-15T07:19:26Z
Registrar: NIXI Special Projects
Registrar IANA ID: 700066
Registrar Abuse Contact Email:
Registrar Abuse Contact Phone:
Domain Status: clientTransferProhibited http://www.icann.org/epp#clientTransferProhibited
Domain Status: serverRenewProhibited http://www.icann.org/epp#serverRenewProhibited
Domain Status: serverDeleteProhibited http://www.icann.org/epp#serverDeleteProhibited
Domain Status: serverUpdateProhibited http://www.icann.org/epp#serverUpdateProhibited
Domain Status: serverTransferProhibited http://www.icann.org/epp#serverTransferProhibited
Registry Registrant ID:
Registrant Name:
Registrant Organization: The Verden Public Prosecutor's Office
Registrant Street:
Registrant Street:
Registrant Street:
Registrant City:
Registrant State/Province: Niedersachsen
...
Name Server: sc-c.sinkhole.shadowserver.org
Name Server: sc-d.sinkhole.shadowserver.org
Name Server: sc-a.sinkhole.shadowserver.org
Name Server: sc-b.sinkhole.shadowserver.org
...</samp>
</pre>
<p>
  The ellipsis denotes some records I have omitted for the sake of
  brevity.  There were three things that stood out in these records:
</p>
<ol>
  <li>
    The registrar was changed from eNom, Inc. to NIXI Special Projects.
  </li>
  <li>
    The registrant was changed from Susam Pal to The Verden Public
    Prosecutor's Office.
  </li>
  <li>
    The name servers were changed from Linode's servers to
    Shadowserver's sinkholes.
  </li>
</ol>
<h2 id="avalanche-botnet">Avalanche Botnet<a href="#avalanche-botnet"></a></h2>
<p>
  On searching more about the new registrant on the web, I realised
  that it was a German criminal justice body that was involved in the
  takedown of the <a href="https://en.wikipedia.org/wiki/Avalanche_(phishing_group)">Avalanche</a>
  malware-hosting network.  It took a four-year concerted effort by
  INTERPOL, Europol, the Shadowserver Foundation, Eurojust, the
  Luneberg Police and several other international organisations to
  finally destroy the Avalanche botnet on 30 Nov 2016.  In this list
  of organisations, one name caught my attention immediately: The
  Shadowserver Foundation.  The WHOIS name server records pointed to
  Shadowserver's sinkholes.
</p>
<p>
  The fact that the domain name was transferred to another
  organisation merely three minutes after I had performed a simple
  maintenance activity got me worried.  Was the domain name hijacked?
  Did my maintenance activity on the server have anything to do with
  it?  What kind of attack one might have pulled off to hijack the
  domain name?  I checked all the logs and there was no evidence that
  anyone other than me had logged into the server or executed any
  command or code on it.  Further, a domain name transfer usually
  involves email notification and authorisation.  None of that had
  happened.  It increasingly looked like that the three minute
  interval between the maintenance activity and the domain name
  transfer was merely a coincidence.
</p>
<p>
  More questions sprang up as I thought about it.  The Avalanche
  botnet was destroyed in 2016.  What has that got to do with the
  domain name being transferred in 2019?  Did my server somehow become
  part of the Avalanche botnet?  My server ran a minimal installation
  of the latest Debian GNU/Linux system.  It was always kept
  up-to-date to minimise the risk of malware infection or security
  breach.  It hosted a static website composed of static HTML files
  served with Nginx.  I found no evidence of unauthorised access of my
  server while inspecting the logs.  I could not find any malware on
  the system.
</p>
<p>
  The presence of Shadowserver sinkhole name servers in the WHOIS
  records was a good clue.  Sinkholing of a domain name can be done
  both malicously as well as constructively.  In this case, it looked
  like the Shadowserver Foundation intended to sinkhole the domain
  name constructively, so that any malware client trying to connect to
  my server nefariously would end up connecting to a sinkhole address
  instead.  My domain name was sinkholed!  The question now was: Why
  was it sinkholed?
</p>
<h2 id="support-ticket">Support Ticket<a href="#support-ticket"></a></h2>
<p>
  On 29 Nov 2019 at 19:29 UTC, I submitted a support ticket to
  Namecheap to report this issue.  At 21:05 UTC, I received a response
  from Namecheap support that they have contacted Enom, their upstream
  registrar, to discuss the issue.  There was no estimate for when a
  resolution might be available.
</p>
<p>
  At 21:21 UTC, I submitted a domain name
  <a href="https://forms.icann.org/en/resources/compliance/complaints/transfer/form">transfer complaint</a>
  to the Internet Corporation for Assigned Names and Numbers (ICANN).  I
  was not expecting any response from ICANN because they do not have any
  contractual authority on a country code top-level domain (ccTLD).
</p>
<p>
  At 21:23 UTC, I emailed National Internet Exchange of India (NIXI).
  NIXI is the ccTLD manager for .IN domain and they have authority on
  it.  I found their contact details from
  the <a href="https://www.iana.org/domains/root/db/in.html">IANA
  Delegation Record for .IN</a>.  Again, I was not expecting a
  response from NIXI because they do not have any contractual
  relationship directly with me.  They have a contractual relationship
  with Namecheap, so any communication from them would be received by
  Namecheap and Namecheap would have to pass that on to me.
</p>
<p>
  At 21:30 UTC, ICANN responded and said that I should contact the
  ccTLD manager directly.  Like I explained in the previous paragraph,
  I had already done that, so there was nothing more for me to do
  except wait for Namecheap to provide an update after their
  investigation.  By the way, NIXI never replied to my email.
</p>
<h2 id="tweets-and-retweets">Tweets and Retweets<a href="#tweets-and-retweets"></a></h2>
<p>
  On 30 Nov 2019 at 07:30 UTC, I
  <a href="https://twitter.com/susam/status/1200678538254393345">shared
  this issue on Twitter</a>.  I was hoping that someone who had been
  through a similar experience could offer some advice.  In fact, soon
  after I posted the tweet, a kind person named Max from Germany
  generously
  <a href="https://twitter.com/LTE_Max/status/1200699507631112193">offered
  to help</a> by writing a letter in German addressed to the new
  registrant which was a German organisation.  The reason for
  sinkholing my domain name was still unclear.  I hoped that with
  enough number of retweets someone closer to the source of truth
  could shed some light on why and how this happened.
</p>
<p>
  At 09:54 UTC, Richard Kirkendall, founder and CEO of Namecheap,
  <a href="https://twitter.com/NamecheapCEO/status/1200714718610153472">responded</a>
  to my tweet and informed that they were contacting NIXI regarding
  the issue.  This seemed like a good step towards resolution.  After
  all, the domain name was no longer under their upstream registrar
  named Enom.  The domain name was now with NIXI as evident from
  the <a href="#whois">WHOIS records</a>.
</p>
<p>
  Several other users tweeted about my issue, added more information
  about what might have happened and retweeted my tweet.
</p>
<p>
  On 1 Dec 2019 at 11:48 UTC, Benedict Addis from the Shadowserver
  Foundation contacted me by email.  He said that they had begun
  looking into this issue as soon as one of the tweets about this
  issue had referred to their organisation.  He explained in his email
  that my domain name was sinkholed accidentally as part of their
  Avalanche operation.  Although it is now three years since the
  initial takedown of the botnet, they still see over 3.5 million
  unique IP addresses connecting to their sinkholes everyday.
  Unfortunately, their operation inadvertently flagged my domain name
  as one of the domain names to be sinkholed because it matched the
  pattern of command and control (C2) domain names generated by a
  malware family named Nymaim, one of the malware families hosted on
  Avalanche.  Although, they had validity checks to avoid sinkholing
  false-positives, my domain name unfortunately slipped through those
  checks.  Benedict mentioned that he had just raised this issue with
  NIXI and requested them to return the domain name to me as soon as
  possible.
</p>
<h2 id="domain-name-return">Domain Name Return<a href="#domain-name-return"></a></h2>
<p>
  On 2 Dec 2019 at 04:00 UTC, when I looked up the WHOIS records for
  the domain name, I found that it had been returned to me already.
  At 08:37 UTC, Namecheap support responded to my support ticket to
  say that they had been informed that NIXI had returned the domain
  name to its original state.  At 09:55 UTC, Juliya Zinovjeva, Domains
  Product Manager of Namecheap,
  <a href="https://twitter.com/JuliyaZinovjeva/status/1201439676118290432">commented
  on Twitter</a> and confirmed the same thing.
</p>
<h2 id="conclusion">Conclusion<a href="#conclusion"></a></h2>
<p>
  Despite the successful resolution, it was still quite unsettling
  that a domain name could be transferred to another registrant and
  sinkholed for some perceived violation.  I thought there would be
  more checks in place to confirm that a perceived violation was real
  before a domain name could be transferred.  Losing a domain name I
  have been using actively for 12 years was an unpleasant experience.
  Losing a domain name accidentally should have been a lot harder than
  this.  Benedict from the Shadowserver Foundation assured me that my
  domain name would be excluded from future sinkholing for this
  particular case.  However, the possibility that this could happen
  again due to another unrelated operation by another organisation in
  future is disconcerting.
</p>
<p>
  I also wondered if a domain name under a country code top-level
  domain (ccTLD) like .in is more susceptible to this kind of
  sinkholing than a domain name under a generic top-level domain
  (gTLD) like .com.  I asked Benedict if it is worth migrating my
  website from .in to .com.  He replied that in his personal opinion,
  NIXI runs an excellent, clean registry and are very responsive in
  resolving issues when they arise.  He also added that domain
  generation algorithms (DGAs) of malware are equally or possibly even
  more problematic for .com domains.  He advised against migrating my
  website.
</p>
<p>
  Thanks to everyone who retweeted my
  <a href="https://twitter.com/susam/status/1200678538254393345">tweet</a>
  on this issue.  Also, thanks to Richard Kirkendall (CEO of
  Namecheap), Namecheap support team and Benedict Addis from the
  Shadowserver Foundation for contacting NIXI to resolve this issue.
</p>
<hr>
<p>
  <em>
    <strong>Update on 06 Jan 2022:</strong> Nearly two years after
    this incident, I eventually moved this website to
    <a href="https://susam.net/">susam.net</a>.  The decision to do
    so was not influenced by this incident.  I wanted this domain name
    since 2006 but it was unavailable back then.  This domain name
    became available only very recently and I moved my website to this
    domain as soon as it became available.
  </em>
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/sinkholed.html">Read on website</a> |
  <a href="https://susam.net/tag/networking.html">#networking</a> |
  <a href="https://susam.net/tag/protocol.html">#protocol</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>File Transfer with SSH, Tee and Base64</title>
<link>https://susam.net/file-transfer-with-ssh-tee-and-base64.html</link>
<guid isPermaLink="false">ngbfb</guid>
<pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Computer servers deployed in a secure environment may allow SSH
  sessions but forbid SCP, SFTP and execution of remote commands
  without a login shell.  Such restricted access is typically enforced
  with SSH gateways and firewalls.  An SSH gateway provides controlled
  access to the remote system.  A firewall can ensure that only an SSH
  gateway can connect to the remote system.  Thus, users can be forced
  to connect to the remote system only via the SSH gateway which can
  now control what is allowed and what isn't.
</p>
<p>
  Even if SCP, SFTP, port forwarding and remote command execution
  without a login shell are forbidden, as long as we get a login shell
  on our terminal and we can print data on the terminal, we are
  already able to transfer data from the remote system to our local
  system.  The data is in the terminal.  It is now only a matter of
  figuring out how to copy that data to a file.
</p>
<div class="highlight">
  <p>
    <strong>Note:</strong> Various readers of this post notice that
    SCP or SFTP is not allowed and immediately begin suggesting me a
    solution similar to one of the following ones:
  </p>
  <ul>
    <li><code>ssh HOST cat file &gt; file</code></li>
    <li><code>ssh HOST tar cf - file | tar xf -</code></li>
  </ul>
  <p>
    Note that these solutions and other similar solutions are not
    going to work because the SSH gateway described in the previous
    two paragraphs forbids remote command execution without a login
    shell.  It also blocks port forwarding, so any solution involving
    port forwarding is not going to work either.
  </p>
</div>
<p>
  Assuming that both the remote and local systems are Unix-like, the
  following steps show one way to accomplish copying a file from the
  remote system to our local system:
</p>
<ol>
  <li>
    <p>
      Connect to the remote system with <code>ssh</code> and pipe the
      output to <code>tee</code> to write the entire session to a text
      file on the local system.
    </p>
    <pre><code>ssh HOST | tee ssh.txt</code></pre>
    <p>
      This type of pipeline works as intended even while connecting to
      a remote system via a jumphost or an SSH gateway.
    </p>
  </li>
  <li>
    <p>
      In the remote system, create a 10 MB file to serve as an example
      payload to be transferred.
    </p>
    <pre><code>head -c 10485760 /dev/urandom &gt; /tmp/payload</code></pre>
    <p>
      You probably already have a meaningful payload that you want to
      copy, so in that case, you would skip this step.
    </p>
  </li>
  <li>
    <p>
      Compute checksum on the file.  This will be used later to verify
      that the entire file is transferred correctly.
    </p>
    <pre><code>sha1sum /tmp/payload</code></pre>
  </li>
  <li>
    <p>
      Print Base64 representation of the file.
    </p>
    <pre><code>base64 /tmp/payload</code></pre>
    <p>
      Depending on the Internet bandwidth, this can take a few seconds
      to a few minutes to complete.
    </p>
  </li>
  <li>
    <p>
      End the SSH session.
    </p>
    <pre><code>exit</code></pre>
  </li>
  <li>
    <p>
      On the local system, extract the Base64 encoded payload and
      decode it.  Assuming the shell prompt on the remote system ends
      with the dollar sign (i.e. <code>$</code>), the following
      command does this.
    </p>
    <pre><code>sed '1,/$ base64/d;/$ exit/,$d' ssh.txt | base64 --decode &gt; payload</code></pre>
  </li>
  <li>
    <p>
      Extract the checksum computed on the original file.
    </p>
    <pre><code>grep -A 1 sha1sum ssh.txt</code></pre>
  </li>
  <li>
    <p>
      Compute checksum on the decoded payload.
    </p>
    <pre><code>sha1sum payload</code></pre>
    <p>
      Ensure that the checksum in this step matches the checksum in
      the previous step.
    </p>
  </li>
</ol>
<p>
  The steps above assume the use of the <code>sha1sum</code> command
  to compute checksum.  If this command is unavailable, use
  <code>sha1</code>, <code>shasum</code> or something else that serves
  this purpose well.  If you are worried about collision attacks, you
  might want <code>sha256sum</code>, <code>sha256</code>, <code>shasum
  -a 256</code>, etc. instead.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/file-transfer-with-ssh-tee-and-base64.html">Read on website</a> |
  <a href="https://susam.net/tag/networking.html">#networking</a> |
  <a href="https://susam.net/tag/protocol.html">#protocol</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>FD 100</title>
<link>https://susam.net/fd-100.html</link>
<guid isPermaLink="false">qzsnh</guid>
<pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I learnt how to write computer programs in IBM/LCSI PC Logo.  That
  was back in the year 1992.  Computers were much simpler in those
  days.  The ones in our school were IBM PC compatible computers with
  mostly monochrome displays.  The ability to boot a computer using a
  5Â¼-inch floppy disk containing MS-DOS, load a Logo interpreter and
  then write some programs without any distraction had its own charm
  that I find missing from modern day computing.
</p>
<h2 id="the-first-line-of-code">The First Line of Code<a href="#the-first-line-of-code"></a></h2>
<p>
  The first line of code I ever wrote was:
</p>
<!--
 K   4  88-89
 1   5  89-90
 2   6  90-91
 3   7  91-92
 4   8  92-93
 5   9  93-94
 6  10  94-95
 7  11  95-96
 8  12  96-97
 9  13  97-98
10  14  98-99
-->
<pre><code>FD 100</code></pre>
<p>
  Here is how the output looks:
</p>
<figure>
  <a href="files/blog/logo-line.png"><img
      src="files/blog/logo-line.png"
      alt="A vertical line drawn with Logo along with Logo source code for it"></a>
  <figcaption>
    The first Logo program
  </figcaption>
</figure>
<p>
  That is the "hello, world" of turtle graphics in Logo.  That simple
  line of code changed my world.  I could make stuff happen in an
  otherwise mostly blank monochrome CRT display.  Until then I had
  seen CRTs in televisions where I had very little control on what I
  see on the screen.  But now, I had control!  The turtle became my
  toy and I could make it draw anything on a 320 &times; 250 canvas.
</p>
<h2 id="polygons">Polygons<a href="#polygons"></a></h2>
<p>
  With a little knowledge of geometry, one could draw polygons.  Often
  the first polygon one would learn to draw was a square.  It involves
  making the turtle walk forward 100 steps, then turn right 90&deg;
  and repeat these two operations four times in a loop.  Here is the
  code:
</p>
<pre><code>REPEAT 4 [FD 100 RT 90]</code></pre>
<p>
  Here is the output:
</p>
<figure>
  <a href="files/blog/logo-square.png"><img
      src="files/blog/logo-square.png"
      alt="A square drawn with Logo along with source code"></a>
  <figcaption>
    A square drawn with IBM Personal Computer Logo
  </figcaption>
</figure>
<p>
  Similarly, one could draw other polygons.  The only thing my
  nine-year-old self then needed to understand was that after drawing
  an entire polygon, the turtle is back to its original position
  having completed one full turn.  Therefore to draw a polygon with \(
  n \) sides, the turtle needs to turn by \( 360 / n \) degrees after
  drawing each side.  Drawing a pentagon is as simple as:
</p>
<pre><code>REPEAT 5 [FD 80 RT 72]</code></pre>
<p>
  Here is the output:
</p>
<figure>
  <a href="files/blog/logo-pentagon.png"><img
      src="files/blog/logo-pentagon.png"
      alt="A pentagon drawn with Logo along with source code"></a>
  <figcaption>
    A pentagon drawn with IBM Personal Computer Logo
  </figcaption>
</figure>
<p>
  The same approach works for drawing a regular five-pointed star too.
  The only new thing we need to consider here is that as the turtle
  draws the shape, it makes two full turns.  Therefore, it must turn
  by \( 720 / 5 \) degrees after drawing each side.  Here is the code:
</p>
<pre><code>REPEAT 5 [FD 100 RT 144]</code></pre>
<p>
  Here is the output:
</p>
<figure>
  <a href="files/blog/logo-star.png"><img
      src="files/blog/logo-star.png"
      alt="A pentagram drawn with Logo along with source code"></a>
  <figcaption>
    A pentagram drawn with IBM Personal Computer Logo
  </figcaption>
</figure>
<p>
  I remember feeling uneasy about the lopsided appearance of the
  polygons above and then trying to please my sense of aesthetics by
  centring these polygons horizontally on the screen and having them
  stand firmly on an imaginary horizontal line so that they look
  balanced.  I won't include the code and output for that on this page
  for the sake of brevity of this post but here are links to some
  screenshots I have kept that show a few of several ways to do it:
  <a href="files/blog/logo-square-centre.png">logo-square-centre.png</a>,
  <a href="files/blog/logo-pentagon-centre.png">logo-pentagon-centre.png</a>
  and <a href="files/blog/logo-star-centre.png">logo-star-centre.png</a>.
</p>
<h2 id="circles">Circles<a href="#circles"></a></h2>
<p>
  Going from polygons to circles was especially fun.  Here is the
  first piece of code one would normally write to learn to draw a
  circle:
</p>
<pre><code>REPEAT 360 [FD 1 RT 1]</code></pre>
<p>
  Here is the output:
</p>
<figure>
  <a href="files/blog/logo-circle.png"><img
      src="files/blog/logo-circle.png"
      alt="A circle drawn with Logo along with source code"></a>
  <figcaption>
    A circle drawn with IBM Personal Computer Logo
  </figcaption>
</figure>
<p>
  Now precisely speaking, this is not exactly a circle.  This is a
  triacosiahexeacontagon, i.e. a 360-gon.  It is an approximation of a
  circle with 360 very short line segments.  Nevertheless it was
  enough to get a young child who had just begun to learn using the
  computer excited about programming.  It showed me how control flow
  could be used elegantly to express complex ideas in a simple
  expression.  By the way, here is one way to centre that circle
  horizontally on the
  screen: <a href="files/blog/logo-circle-centre.png">logo-circle-centre.png</a>.
</p>
<p>
  Soon after learning to draw a circle, I learnt to write this:
</p>
<pre><code>REPEAT 20 [REPEAT 180 [FD 1 RT 2] RT 18]</code></pre>
<p>
  This code draws 20 overlapping circles.  The output looks like this:
</p>
<figure>
  <a href="files/blog/logo-circles.png"><img
      src="files/blog/logo-circles.png"
      alt="A grid made with 20 circles along with Logo source code for it"></a>
  <figcaption>
    Grid of circles drawn with IBM Personal Computer Logo
  </figcaption>
</figure>
<h2 id="a-lasting-effect">A Lasting Effect<a href="#a-lasting-effect"></a></h2>
<p>
  There is a lot more to Logo than turtle graphics.  Logo gave me a
  brief taste of functional programming even though back then I did
  not know the term "functional programming".  I discovered the same
  simplicity and elegance in Lisp about 15 years later.  After all,
  Logo can be thought of as a dialect of Lisp without parentheses that
  controls a turtle.
</p>
<p>
  At an impressionable age of nine, reading and writing code like this
  and using simple arithmetic, geometry, logic and code to manipulate
  a two-dimensional world had a lasting effect on me.  Back in those
  days, I used to find joy in sharing some of my interesting Logo
  programs with my teachers and friends.  I like to believe that my
  passion for software engineering as well as my love for writing
  code, sharing code and open source development are a result of
  coming across these beautiful code examples early in my life.
</p>
<p>
  FD 100&mdash;it is a tiny piece of code, but it changed my world!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/fd-100.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/dos.html">#dos</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>TeX Live Packages in Debian 10</title>
<link>https://susam.net/tex-live-packages-in-debian.html</link>
<guid isPermaLink="false">hwgyd</guid>
<pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  In this post, I document an overview of the various TeX Live
  packages available in Debian, their sizes, the faciliies they offer
  and the relationship between these packages.  I have referred to a
  fresh new Debian GNU/Linux 10.0 (buster) installation while writing
  this post.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#package-sizes">Package Sizes</a></li>
  <li><a href="#package-details">Package Details</a></li>
  <li><a href="#dependency-graph">Dependency Graph</a></li>
  <li><a href="#installation-choices">Installation Choices</a></li>
</ul>
<h2 id="package-sizes">Package Sizes<a href="#package-sizes"></a></h2>
<p>
  The table below shows the size of archives that are downloaded and
  the additional disk space that is used for each package installed
  with <code>apt-get install</code> command.  Each size displayed
  include the size of the package being installed and the size of all
  dependencies that would be installed along with it.
</p>
<table class="grid">
  <thead>
    <tr>
      <th>Package</th>
      <th>Archives</th>
      <th>Disk Space</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>texlive-latex-base</td>
      <td>59 MB</td>
      <td>216 MB</td>
    </tr>
    <tr>
      <td>texlive-latex-recommended</td>
      <td>74 MB</td>
      <td>248 MB</td>
    </tr>
    <tr>
      <td>texlive-pictures</td>
      <td>83 MB</td>
      <td>277 MB</td>
    </tr>
    <tr>
      <td>texlive-fonts-recommended</td>
      <td>83 MB</td>
      <td>281 MB</td>
    </tr>
    <tr>
      <td>texlive</td>
      <td>98 MB</td>
      <td>314 MB</td>
    </tr>
    <tr>
      <td>texlive-plain-generic</td>
      <td>82 MB</td>
      <td>261 MB</td>
    </tr>
    <tr>
      <td>texlive-latex-extra</td>
      <td>144 MB</td>
      <td>452 MB</td>
    </tr>
    <tr>
      <td>texlive-full</td>
      <td>2804 MB</td>
      <td>5358 MB</td>
    </tr>
  </tbody>
</table>
<h2 id="package-details">Package Details<a href="#package-details"></a></h2>
<ul>
  <li>
    <p>
      <code>texlive-latex-base</code>: This package contains packages
      that are either mandated by the core LaTeX team or very widely
      used and strongly recommended in practice.
    </p>
    <p>
      It includes 28 CTAN packages:
    </p>
    <pre><code>ae, amscls, amsmath, babel, babel-english, babelbib, carlisle, colortbl, fancyhdr, fix2col, geometry, graphics, graphics-cfg, hyperref, latex, latex-bin, latex-fonts, latexconfig, ltxmisc, mfnfss, mptopdf, natbib, oberdiek, pslatex, psnfss, pspicture, tools, url</code></pre>
  </li>
  <li>
    <p>
      <code>texlive-latex-recommended</code>: It contains a collection
      of recommended add-on packages for LaTeX which have widespread
      use.
    </p>
    <p>
      Installing this package also
      installs <code>texlive-latex-base</code>
      because <code>texlive-latex-recommended</code>
      recommends <code>tipa</code> which depends
      on <code>texlive-latex-base</code>.
    </p>
    <p>
      It includes 62 CTAN packages:
    </p>
    <pre><code>anysize, beamer, booktabs, breqn, caption, cite, cmap, crop, ctable, eso-pic, euenc, euler, etoolbox, extsizes, fancybox, fancyref, fancyvrb, filehook, float, fontspec, fp, index, jknapltx, koma-script, latexbug, l3experimental, l3kernel, l3packages, lineno, listings, lwarp, mathspec, mathtools, mdwtools, memoir, metalogo, microtype, ms, ntgclass, parskip, pdfpages, polyglossia, powerdot, psfrag, rcs, sansmath, section, seminar, sepnum, setspace, subfig, textcase, thumbpdf, translator, typehtml, ucharcat, underscore, unicode-math, xcolor, xkeyval, xltxtra, xunicode</code></pre>
  </li>
  <li>
    <p>
      <code>texlive-pictures</code>: It contains packages for
      graphics, pictures and diagrams including TikZ, pict, etc.
    </p>
    <p>
      Installing this package also
      installs <code>texlive-latex-base</code> and
      <code>texlive-latex-recommended</code> because this package
      depends on <code>texlive-latex-recommended</code> which in turn
      depends on <code>texlive-latex-base</code>.
    </p>
    <p>
      It includes 188 CTAN packages:
    </p>
    <pre><code>adigraph, aobs-tikz, askmaps, asyfig, asypictureb, autoarea, bardiag, beamerswitch, binarytree, blochsphere, bloques, blox, bodegraph, bondgraph, bondgraphs, braids, bxeepic, cachepic, callouts, celtic, chemfig, combinedgraphics, circuitikz, curve, curve2e, curves, dcpic, diagmac2, ditaa, doc-pictex, dottex, dot2texi, dratex, drs, duotenzor, dynkin-diagrams, ecgdraw, eepic, ellipse, endofproofwd, epspdf, epspdfconversion, esk, euflag, fast-diagram, fig4latex, fitbox, flowchart, forest, genealogytree, getmap, gincltex, gnuplottex, gradientframe, grafcet, graph35, graphicxpsd, graphviz, gtrlib-largetrees, harveyballs, here, hf-tikz, hobby, hvfloat, istgame, knitting, knittingpattern, ladder, lapdf, latex-make, lpic, lroundrect, luamesh, luasseq, maker, makeshape, mathspic, milsymb, miniplot, mkpic, modiagram, neuralnetwork, numericplots, pb-diagram, penrose, petri-nets, pgf, pgf-blur, pgf-cmykshadings, pgf-soroban, pgf-spectra, pgf-umlcd, pgf-umlsd, pgfgantt, pgfkeyx, pgfmolbio, pgfopts, pgfornament, pgfplots, picinpar, pict2e, pictex, pictex2, pinlabel, pixelart, pmgraph, postage, prerex, productbox, pxpgfmark, qcircuit, quantikz, qrcode, randbild, randomwalk, realhats, reotex, rviewport, sa-tikz, schemabloc, scsnowman, scratch, scratch3, setdeck, signchart, smartdiagram, spath3, spectralsequences, swimgraf, table-fct, texdraw, ticollege, tipfr, tikz-3dplot, tikz-bayesnet, tikz-cd, tikz-dependency, tikz-dimline, tikz-feynhand, tikz-feynman, tikz-imagelabels, tikz-inet, tikz-kalender, tikz-karnaugh, tikz-ladder, tikz-layers, tikz-nef, tikz-network, tikz-opm, tikz-optics, tikz-page, tikz-palattice, tikz-qtree, tikz-relay, tikz-sfc, tikz-timing, tikz-truchet, tikzcodeblocks, tikzducks, tikzinclude, tikzlings, tikzmark, tikzmarmots, tikzorbital, tikzpagenodes, tikzpfeile, tikzpeople, tikzposter, tikzscale, tikzsymbols, timing-diagrams, tqft, tkz-base, tkz-berge, tkz-doc, tkz-euclide, tkz-fct, tkz-graph, tkz-kiviat, tkz-linknodes, tkz-orm, tkz-tab, tsemlines, tufte-latex, venndiagram, visualpstricks, xpicture, xypic</code></pre>
  </li>
  <li>
    <p>
      <code>texlive-fonts-recommended</code>: This package contains
      the recommended fonts, including the base 35 PostScript fonts,
      Latin Modern, TeX Gyre and T1 and other encoding support for
      Computer Modern, in outline form.
    </p>
    <p>
      Installing this package also installs
      <code>texlive-latex-base</code> because it is one of the
      dependencies of this package.
    </p>
    <p>
      It includes 24 CTAN packages:
    </p>
    <pre><code>avantgar, bookman, charter, cmextra, courier, ec, euro, euro-ce, eurosym, fpl, helvetic, marvosym, mathpazo, manfnt-font, mflogo-font, ncntrsbk, palatino, pxfonts, rsfs, symbol, times, txfonts, utopia, wasy, wasy2-ps, wasysym, zapfchan, zapfding</code></pre>
  </li>
  <li>
    <p>
      <code>texlive</code>: This metapackage provides a decent
      selection of the TeX Live packages which should suffice for the
      most common tasks.
    </p>
    <p>
      This is a metapackage, i.e. it does not include any CTAN
      packages of its own.  It merely depends on
      <code>texlive-latex-base</code>, <code>texlive-latex-recommended</code>
      and <code>texlive-fonts-recommended</code>.  In other words,
      <code>apt-get install texlive</code> would be a convenient way
      to install a trimmed down TeX Live distribution with all the
      recommended CTAN packages.
    </p>
  </li>
  <li>
    <p>
      <code>texlive-plain-generic</code>: This package contains add-on
      packages and macros that work with plain TeX, often LaTeX and
      occasionally other formats.
    </p>
    <p>
      It includes 91 CTAN packages:
    </p>
    <pre><code>abbr, abstyles, apnum, autoaligne, barr, bitelist, borceux, c-pascal, catcodes, chronosys, colorsep, cweb-old, dinat, dirtree, docbytex, dowith, eijkhout, encxvlna, epigram, epsf, epsf-dvipdfmx, fenixpar, figflow, fixpdfmag, fltpoint, fntproof, font-change, fontch, fontname, gates, genmisc, getoptk, gfnotation, gobble, graphics-pln, gtl, hlist, hyplain, ifetex, iftex, insbox, js-misc, kastrup, lambda-lists, langcode, lecturer, librarian, listofitems, mathdots, metatex, midnight, mkpattern, modulus, multido, navigator, newsletr, ofs, olsak-misc, path, pdf-trans, pitex, placeins-plain, plainpkg, plipsum, plnfss, plstmary, poormanlog, present, randomlist, resumemac, schemata, shade, simplekv, systeme, tabto-generic, termmenu, tex-ps, tex4ht, texapi, texdate, timetable, tracklang, treetex, trigonometry, ulem, upca, varisize, xii, xii-lat, xlop, yax</code></pre>
  </li>
  <li>
    <p>
      <code>texlive-latex-extra</code>: This package contains a very
      large collection of add-on packages.
    </p>
    <p>
      Installing this package also
      installs <code>texlive-latex-base</code>,
      <code>texlive-latex-recommended</code>, <code>texlive-pictures</code>,
      <code>texlive-fonts-recommended</code>
      and <code>texlive-plain-generic</code>.  This package depends on
      <code>texlive-latex-recommended</code> (which in turn depends on
      <code>texlive-latex-base</code>)
      and <code>texlive-pictures</code>.  Further, this package
      recommends <code>texlive-plain-generic</code> and
      <code>texlive-fonts-recommended</code>.
    </p>
    <p>
      It includes 1239 CTAN packages:
    </p>
    <pre><code>2up, ESIEEcv, GS1, HA-prosper, Tabbing, a0poster, a4wide, a5comb, abraces, abstract, achemso, acro, acronym, acroterm, actuarialangle, actuarialsymbol, addfont, addlines, adjmulticol, adjustbox, adrconv, advdate, akktex, akletter, alertmessage, alnumsec, alterqcm, altfont, amsaddr, animate, anonchap, answers, anyfontsize, appendix, appendixnumberbeamer, apptools, arcs, arrayjobx, arraysort, arydshln, asciilist, assignment, assoccnt, attachfile, aurl, authoraftertitle, authorarchive, authorindex, autonum, autopdf, avremu, axessibility, background, bankstatement, bashful, basicarith, bchart, beamer2thesis, beameraudience, beamercolorthemeowl, beamerdarkthemes, beamerposter, beamersubframe, beamertheme-cuerna, beamertheme-detlevcm, beamertheme-epyt, beamertheme-focus, beamertheme-light, beamertheme-metropolis, beamertheme-npbt, beamertheme-phnompenh, beamertheme-saintpetersburg, beamertheme-upenn-bc, beamerthemejltree, beamerthemenirma, beton, bewerbung, bez123, bezos, bhcexam, bibletext, bigfoot, bigints, biochemistry-colors, bizcard, blindtext, blkarray, block, blowup, bnumexpr, boites, bold-extra, bookcover, bookest, booklet, boolexpr, bophook, boxedminipage, boxedminipage2e, boxhandler, bracketkey, braket, breakurl, bullcntr, bussproofs, bxcalc, bxdpx-beamer, bxdvidriver, bxenclose, bxnewfont, bxpapersize, bxpdfver, bxtexlogo, calcage, calctab, calculator, calrsfs, cals, calxxxx-yyyy, cancel, canoniclayout, capt-of, captcont, captdef, carbohydrates, cases, casyl, catchfilebetweentags, catechis, catoptions, cbcoptic, ccaption, cclicenses, cd, cd-cover, cdpbundl, cellprops, cellspace, censor, changebar, changelayout, changelog, changepage, changes, chappg, chapterfolder, cheatsheet, chet, chextras, childdoc, chkfloat, chletter, chngcntr, chronology, circ, classics, classpack, clefval, cleveref, clipboard, clock, cloze, clrdblpg, clrstrip, cmdstring, cmdtrack, cmsd, cnltx, cntformats, cntperchap, codedoc, codepage, codesection, collcell, collectbox, colophon, colordoc, colorinfo, coloring, colorspace, colortab, colorwav, colorweb, colourchange, combelow, combine, comma, commado, commedit, comment, competences, concepts, concprog, constants, continue, contour, contracard, conv-xkv, cooking, cooking-units, cool, coollist, coolstr, coolthms, cooltooltips, coordsys, copyedit, copyrightbox, coseoul, counttexruns, courseoutline, coursepaper, coverpage, cprotect, crbox, crossreference, crossreftools, csquotes, css-colors, csvsimple, cuisine, currency, currfile, currvita, cutwin, cv, cv4tw, cweb-latex, cyber, cybercic, dashbox, dashrule, dashundergaps, dataref, datatool, dateiliste, datenumber, datetime, datetime2, datetime2-bahasai, datetime2-basque, datetime2-breton, datetime2-bulgarian, datetime2-catalan, datetime2-croatian, datetime2-czech, datetime2-danish, datetime2-dutch, datetime2-en-fulltext, datetime2-english, datetime2-esperanto, datetime2-estonian, datetime2-finnish, datetime2-french, datetime2-galician, datetime2-german, datetime2-greek, datetime2-hebrew, datetime2-icelandic, datetime2-irish, datetime2-italian, datetime2-it-fulltext, datetime2-latin, datetime2-lsorbian, datetime2-magyar, datetime2-norsk, datetime2-polish, datetime2-portuges, datetime2-romanian, datetime2-russian, datetime2-samin, datetime2-scottish, datetime2-serbian, datetime2-slovak, datetime2-slovene, datetime2-spanish, datetime2-swedish, datetime2-turkish, datetime2-ukrainian, datetime2-usorbian, datetime2-welsh, dblfloatfix, decimal, decorule, delimtxt, denisbdoc, diagbox, diagnose, dialogl, dichokey, dinbrief, directory, dirtytalk, dlfltxb, dnaseq, doclicense, docmfp, docmute, doctools, documentation, doi, dotarrow, dotseqn, download, dox, dpfloat, dprogress, drac, draftcopy, draftfigure, draftwatermark, dtk, dtxdescribe, dtxgallery, duckuments, ducksay, dvdcoll, dynamicnumber, dynblocks, ean13isbn, easy, easy-todo, easyfig, easyformat, easylist, easyreview, ebezier, ecclesiastic, ecv, ed, edmargin, eemeir, efbox, egplot, elegantbook, elegantnote, elegantpaper, elements, ellipsis, elmath, elocalloc, elpres, elzcards, emarks, embedall, embrac, emptypage, emulateapj, endfloat, endheads, endnotes, engpron, engrec, enotez, enumitem, enumitem-zref, envbig, environ, envlab, epigraph, epiolmec, eqell, eqlist, eqnalign, eqname, eqparbox, errata, erw-l3, esami, esdiff, esint, esint-type1, etaremune, etextools, etoc, eukdate, eulerpx, europasscv, europecv, everyhook, everypage, exam, exam-n, exam-randomizechoices, examdesign, exframe, example, examplep, exceltex, excludeonly, exercise, exercisebank, exercisepoints, exercises, exp-testopt, expdlist, export, exsheets, exsol, extract, facsimile, factura, fancyhandout, fancylabel, fancynum, fancypar, fancyslides, fancytabs, fancytooltips, fcolumn, fetchcls, ffslides, fgruler, fibeamer, fifo-stack, figsize, filecontents, filecontentsdef, filedate, fileinfo, filemod, fink, finstrut, fithesis, fixcmex, fixfoot, fixme, fixmetodonotes, fjodor, flabels, flacards, flagderiv, flashcards, flashmovie, flipbook, flippdf, floatflt, floatrow, flowfram, fmp, fmtcount, fn2end, fnbreak, fncychap, fncylab, fnpara, fnpct, fnumprint, foilhtml, fontaxes, fonttable, footmisc, footmisx, footnotebackref, footnotehyper, footnoterange, footnpag, forarray, foreign, forloop, formlett, forms16be, formular, fragments, frame, framed, frankenstein, frege, ftcap, ftnxtra, fullblck, fullminipage, fullwidth, fundus-calligra, fundus-cyr, fundus-sueterlin, fvextra, fwlw, g-brief, gatherenum, gauss, gcard, gcite, gender, genmpage, getfiledate, getitems, ginpenc, gitfile-info, gitinfo, gitinfo2, gitlog, gitver, globalvals, gloss, glossaries, glossaries-danish, glossaries-dutch, glossaries-english, glossaries-estonian, glossaries-extra, glossaries-finnish, glossaries-french, glossaries-german, glossaries-irish, glossaries-italian, glossaries-magyar, glossaries-polish, glossaries-portuges, glossaries-serbian, glossaries-spanish, gmdoc, gmdoc-enhance, gmiflink, gmutils, gmverb, grabbox, graphbox, graphicx-psmin, graphicxbox, grayhints, grfpaste, grid, grid-system, gridset, gridslides, guitlogo, halloweenmath, hackthefootline, handin, handout, hang, hanging, hardwrap, harnon-cv, harpoon, hc, he-she, hhtensor, histogr, hitec, hletter, hpsdiss, hrefhide, hvindex, hypdvips, hyper, hyperbar, hypernat, hyperxmp, hyphenat, identkey, idxcmds, idxlayout, iffont, ifmslide, ifmtarg, ifnextok, ifoddpage, ifplatform, ifthenx, iitem, image-gallery, imakeidx, import, incgraph, indextools, inline-images, inlinedef, inputtrc, interactiveworkbook, interfaces, intopdf, inversepath, invoice, invoice-class, invoice2, iso, iso10303, isodate, isodoc, isonums, isopt, isorot, isotope, issuulinks, iwhdp, jlabels, jslectureplanner, jumplines, jvlisting, kalendarium, kantlipsum, kerntest, keycommand, keyfloat, keyreader, keystroke, keyval2e, keyvaltable, kix, knowledge, koma-moderncvclassic, koma-script-sfs, komacv, komacv-rg, ktv-texdata, l3build, labbook, labels, labelschanged, lastpackage, lastpage, latex-tds, latex-uni8, latexcolors, latexdemo, latexgit, layouts, lazylist, lccaps, lcd, lcg, leading, leaflet, lectures, leftidx, leipzig, lengthconvert, lettre, lettrine, lewis, lhelp, libgreek, limap, linegoal, linop, lipsum, lisp-on-tex, listing, listlbls, listliketab, listofsymbols, lkproof, lmake, locality, localloc, logbox, logical-markup-utils, logpap, longfbox, longfigure, longnamefilelist, loops, lsc, lstaddons, lstfiracode, lt3graph, ltablex, ltabptch, ltxdockit, ltxguidex, ltxindex, ltxkeys, ltxnew, ltxtools, lua-check-hyphen, luatodonotes, macroswap, magaz, makecookbook, mailing, mailmerge, makebarcode, makebase, makebox, makecell, makecirc, makecmds, makedtx, makeglos, mandi, manfnt, manuscript, manyind, marginfit, marginfix, marginnote, markdown, mathalfa, mathastext, mathexam, mathfam256, mathfont, maybemath, mbenotes, mcaption, mceinleger, mcexam, mcite, mciteplus, mdframed, media9, medstarbeamer, meetingmins, memexsupp, memory, mensa-tex, menu, menukeys, metalogox, method, metre, mfirstuc, mftinc, mi-solns, midpage, minibox, minidocument, minifp, minipage-marginpar, minitoc, minorrevision, minted, minutes, mla-paper, mlist, mmap, mnotes, moderncv, modernposter, moderntimeline, modref, modroman, modular, monofill, moodle, moreenum, morefloats, morehype, moresize, moreverb, morewrites, movie15, mparhack, mpostinl, msc, msg, mslapa, mtgreek, multenum, multiaudience, multibbl, multicap, multicolrule, multidef, multienv, multiexpand, multilang, multirow, mversion, mwe, mycv, mylatexformat, nag, nameauth, namespc, ncclatex, ncctools, needspace, nestquot, newcommand, newenviron, newfile, newlfm, newspaper, newunicodechar, newvbtm, newverbs, nextpage, nfssext-cfr, nicefilelist, niceframe, nicetext, nidanfloat, nlctdoc, noconflict, noindentafter, noitcrul, nolbreaks, nomencl, nomentbl, nonfloat, nonumonpart, nopageno, normalcolor, notes, notespages, notestex, notoccite, nowidow, nox, ntheorem, numberedblock, numname, numprint, numspell, ocg-p, ocgx, ocgx2, ocr-latex, octavo, oldstyle, onlyamsmath, opcit, optidef, optional, options, outline, outliner, outlines, outlining, overlays, overpic, padcount, pagecolor, pagecont, pagenote, pagerange, pageslts, paper, papercdcase, papermas, papertex, paracol, parades, paralist, paresse, parnotes, parselines, pas-cours, pas-cv, pas-tableur, patch, patchcmd, pauldoc, pawpict, pax, pbox, pbsheet, pdf14, pdfcomment, pdfcprot, pdfmarginpar, pdfoverlay, pdfpagediff, pdfpc-movie, pdfprivacy, pdfreview, pdfscreen, pdfslide, pdfsync, pdfwin, pdfx, pecha, perltex, permute, petiteannonce, phffullpagefigure, phfnote, phfparen, phfqit, phfquotetext, phfsvnwatermark, phfthm, philex, phonenumbers, photo, piff, pkgloader, placeins, plantslabels, plates, plweb, polynom, polynomial, polytable, postcards, poster-mac, ppr-prv, preprint, pressrelease, prettyref, printlen, probsoln, program, progress, progressbar, proofread, properties, prosper, protex, protocol, psfragx, pstool, pstring, pxgreeks, pygmentex, python, qcm, qstest, qsymbols, quicktype, quotchap, quoting, quotmark, ran_toks, randtext, rccol, rcs-multi, rcsinfo, readarray, realboxes, recipe, recipebook, recipecard, rectopma, refcheck, refenums, reflectgraphics, refman, refstyle, regcount, regexpatch, register, regstats, relenc, relsize, repeatindex, repltext, returntogrid, rgltxdoc, rjlparshap, rlepsf, rmpage, robustcommand, robustindex, romanbar, romanbarpagenumber, romanneg, romannum, rotfloat, rotpages, roundbox, rterface, rtkinenc, rulercompass, rvwrite, sanitize-umlaut, sauerj, savefnmark, savesym, savetrees, scale, scalebar, scalerel, scanpages, scrlttr2copy, sdrt, secdot, sectionbox, sectionbreak, sectsty, seealso, selectp, semantic, semantic-markup, semioneside, semproc, sepfootnotes, seqsplit, sesstime, sf298, sffms, sfmath, shadethm, shadow, shadowtext, shapepar, shdoc, shipunov, shorttoc, show2e, showcharinbox, showdim, showexpl, showhyphens, showlabels, sidecap, sidenotes, silence, simplecd, simplecv, simpleinvoice, sitem, skb, skdoc, skeycommand, skeyval, skrapport, slantsc, smalltableof, smartunits, smartref, snapshot, snotez, soul, spark-otf, sparklines, sphack, splitindex, spot, spotcolor, spreadtab, spverbatim, srbook-mem, srcltx, sseq, sslides, stack, stackengine, standalone, stdclsdv, stealcaps, stdpage, stex, storebox, storecmd, stringstrings, sttools, stubs, studenthandouts, subdepth, subeqn, subeqnarray, subfigmat, subfigure, subfiles, subfloat, substitutefont, substr, supertabular, svg, svgcolor, svn, svn-multi, svn-prov, svninfo, syntax, syntrace, synttree, tabfigures, tableaux, tablefootnote, tableof, tablestyles, tablists, tabls, tablvar, tabstackengine, tabto-ltx, tabu, tabularborder, tabularcalc, tabularew, tabulary, tagging, tagpair, tagpdf, talk, tamefloats, tasks, tcldoc, tcolorbox, tdclock, technics, ted, templatetools, termcal, termlist, testhyphens, testidx, tex-label, tex-locale, texlogos, texmate, texments, texpower, texshade, texvc, textfit, textmerg, textpos, textualicomma, theoremref, thinsp, thmtools, threadcol, threeparttable, threeparttablex, thumb, thumbs, thumby, ticket, titlecaps, titlefoot, titlepic, titleref, titlesec, titling, tocbibind, tocdata, tocloft, tocvsec2, todo, todonotes, tokenizer, toolbox, topfloat, topiclongtable, totcount, totpages, translations, trfsigns, trimspaces, trivfloat, trsym, truncate, tucv, turnthepage, twoinone, twoup, txgreeks, type1cm, typed-checklist, typeface, typoaid, typogrid, uassign, ucs, uebungsblatt, umoline, underlin, underoverlap, undolabl, units, unravel, upmethodology, upquote, uri, ushort, uspace, uwmslide, variablelm, varindex, varsfromjobname, varwidth, vdmlisting, verbasef, verbatimbox, verbatimcopy, verbdef, verbments, version, versions, versonotes, vertbars, vgrid, vhistory, vmargin, volumes, vpe, vruler, vwcol, wallcalendar, wallpaper, warning, warpcol, was, widetable, widows-and-orphans, williams, withargs, wordcount, wordlike, worksheet, wrapfig, wtref, xargs, xassoccnt, xbmks, xcntperchap, xcolor-material, xcolor-solarized, xcomment, xcookybooky, xdoc, xellipsis, xfakebold, xfor, xhfill, xifthen, xint, xltabular, xmpincl, xnewcommand, xoptarg, xpatch, xpeek, xprintlen, xpunctuate, xsavebox, xsim, xstring, xtab, xurl, xwatermark, xytree, yafoot, yaletter, yagusylo, ycbook, ydoc, yplan, zebra-goodies, zed-csp, ziffer, zwgetfdate, zwpagelayout</code></pre>
  </li>
  <li>
    <p>
      <code>texlive-full</code>: This metapackage pulls all components
      of TeX Live.  Installing this metapackage installs all the
      packages discussed above and much more.  This metapackage
      depends on all Tex Live packages including all the above
      packages.
    </p>
  </li>
</ul>
<h2 id="dependency-graph">Dependency Graph<a href="#dependency-graph"></a></h2>
<p>
  Here's a dependency graph which shows how the various Debian
  packages for TeX Live depend on each other.
</p>
<pre>
<code>                          texlive-latex-extra
                             |   |   :   :
           +-----------------+   |   :   :..................
           |                     |   :                     :
           v                     |   :                     v
    texlive-pictures             |   :           texlive-plain-generic
           |                     |   :
           |    +----------------+   :...............
           |    |                                   :
           |    |              texlive              :
           |    |               | | |               :
           |    |    +----------+ | +----------+    :
           |    |    |            |            |    :
           v    v    v            |            v    v
    texlive-latex-recommended     |  texlive-fonts-recommended
                     |            |            :
                     |            |            v
                     |            |           tipa
                     |            |            |
                     +----------+ | +----------+
                                | | |
                                v v v
                         texlive-latex-base</code>
</pre>
<p>
  Here's the legend for the above graph:
</p>
<pre>
<code>          A                       A
          |                       :
          v                       v
          B                       B

    A depends on B          A recommends B</code>
</pre>
<p>
  The <code>texlive-full</code> package depends on all of the packages
  shown above (except <code>texlive</code> of course because that's a
  metapackage).
</p>
<h2 id="installation-choices">Installation Choices<a href="#installation-choices"></a></h2>
<p>
  Considering everything I have mentioned above, I see the following
  good choices for installing TeX Live on Debian or Ubuntu.
</p>
<ul>
  <li>
    <p>
      <code>apt-get install texlive-base</code>: This is a tiny
      installation.  It downloads only 59 MB of archives and occupies
      only 216 MB of disk space.  It is sufficient for only very basic
      and straightforward typesetting.  Someone who has just started
      learning LaTeX may be able to perform their learning activities
      with this minimal installation.  But it may not suffice for
      someone who creates presentations (<code>beamer</code> is
      missing), includes syntax-highlighted code blocks
      (<code>listings</code> and <code>xcolor</code> are missing),
      adds vertical space between paragraphs (<code>parskip</code> is
      missing) or customises captions (<code>caption</code> is
      missing).
    </p>
  </li>
  <li>
    <p>
      <code>apt-get install texlive</code>: This is a small
      installation.  It downloads only 98 MB of archives and occupies
      314 MB of disk space.  It includes most of the useful stuff like
      <code>beamer</code>, <code>listings</code>, <code>xcolor</code>,
      <code>parskip</code>, <code>caption</code>, etc.  I think one
      can go a long way with this installation.  However, it may not
      be sufficient if you want to draw diagrams with TikZ
      (<code>pgf</code> is missing) or if you want to customise the
      section headings (<code>titlesec</code> is missing) or if you
      want to place boxes at absolute positions (<code>textpos</code>
      is missing).
    </p>
  </li>
  <li>
    <code>apt-get install texlive-latex-extra</code>: This is a medium
    installation.  It downloads 144 MB of archives and occupies 452 MB
    of disk space.  It includes a lot of packages.  Almost all
    frequently used stuff are present.  For example, <code>pgf</code>,
    <code>titlesec</code> and <code>textpos</code> are present.  This
    is what I usually install.  Even with the large number of
    packages, it has a few useful things missing that I occassionally
    rely on.  For example, I cannot include pretty icons with it
    (<code>fontawesome</code> is missing).  For such things, I install
    them separately with <code>tlmgr</code>.
  </li>
  <li>
    <p>
      <code>apt-get install texlive-full</code>: This is a huge
      installation.  It downloads 2.7 GB of archives and occupies 5.2
      GB of disk space on installation.  Once installed, we are all
      set for all kinds of typesetting work.  We almost never have to
      worry about missing packages again.
    </p>
  </li>
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/tex-live-packages-in-debian.html">Read on website</a> |
  <a href="https://susam.net/tag/latex.html">#latex</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Peculiar Self-References</title>
<link>https://susam.net/peculiar-self-references.html</link>
<guid isPermaLink="false">svacn</guid>
<pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="self-referential-lists">Peculiar Results<a href="#self-referential-lists"></a></h2>
<p>
  Here is a tiny Python example that creates a self-referential list
  and demonstrates the self-reference:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a[0] = [0]</kbd>
&gt;&gt;&gt; <kbd>a</kbd>
[[...]]
&gt;&gt;&gt; <kbd>a[0]</kbd>
[[...]]
&gt;&gt;&gt; <kbd>a[0][0]</kbd>
[[...]]
&gt;&gt;&gt; <kbd>a is a[0]</kbd>
True</samp>
</pre>
<p>
  The output shows that <code>a[0]</code> refers to <code>a</code>
  itself which makes it a self-referential list.  Why does this simple
  code create a self-referential list?  Should it not have failed
  with <code>NameError</code> because <code>a</code> is not yet
  defined while assigning the list <code>[0]</code>
  to <code>a[0]</code>?
</p>
<p>
  Here is another similar example that creates a self-referential list
  too:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a[0] = [0, 0]</kbd>
&gt;&gt;&gt; <kbd>a</kbd>
[[...], 0]</samp>
</pre>
<p>
  Here is a similar example for dictionary:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a[0] = {}</kbd>
&gt;&gt;&gt; <kbd>a</kbd>
{0: {...}}</samp>
</pre>
<p>
   Note that <code>0</code> is used as a dictionary key in the above
  example.  Here is another very simple example that uses a string
  key:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a['k'] = {}</kbd>
&gt;&gt;&gt; <kbd>a</kbd>
{'k': {...}}</samp>
</pre>
<h2 id="language-reference">The Language Reference<a href="#language-reference"></a></h2>
<p>
  My first guess was that the statement
</p>
<pre><code>a = a[0] = [0]</code></pre>
<p>
  behaves like
</p>
<pre>
<code>new = [0]
a = new
a[0] = new</code>
</pre>
<p>
  which would indeed create a self-referential list.
</p>
<p>
  <a href="https://docs.python.org/3.7/reference/simple_stmts.html#assignment-statements">Section
  7.2 (Assignment statements)</a> of <em>The Python Language
  Reference</em> confirms this behaviour.  Quoting the relevant part
  from this section here:
</p>
<blockquote>
  <p>
    Assignment statements are used to (re)bind names to values and to
    modify attributes or items of mutable objects:
  </p>
  <pre>
<code>assignment_stmt ::=  (target_list "=")+ (starred_expression | yield_expression)
target_list     ::=  target ("," target)* [","]
target          ::=  identifier
                     | "(" [target_list] ")"
                     | "[" [target_list] "]"
                     | attributeref
                     | subscription
                     | slicing
                     | "*" target</code>
</pre>
  <p>
    (See section
    <a href="https://docs.python.org/3.7/reference/expressions.html#primaries">Primaries</a>
    for the syntax definitions for attributeref, subscription and
    slicing.)
  </p>
  <p>
    An assignment statement evaluates the expression list (remember
    that this can be a single expression or a comma-separated list,
    the latter yielding a tuple) and assigns the single resulting
    object to each of the target lists, from left to right.
  </p>
</blockquote>
<p>
  We see that the assignment statement is defined as follows:
</p>
<pre><code>assignment_stmt ::=  (target_list "=")+ (starred_expression | yield_expression)</code></pre>
<p>
  Thus the statement
</p>
<pre><code>a = a[0] = [0]</code></pre>
<p>
  has two <code>target_list</code> elements (<code>a</code>
  and <code>a[0]</code>) and a <code>starred_expression</code> element
  (<code>[0]</code>).  As a result, the same list on the
  right-hand-side is assigned to both <code>a</code>
  and <code>a[0]</code>, from left to right, i.e. the
  list <code>[0]</code> is first assigned to <code>a</code>,
  then <code>a[0]</code> is set to the <em>same</em> list.  As a
  result, <code>a[0]</code> is set to <code>a</code> itself.
</p>
<p>
  The behaviour of the statement
</p>
<pre><code>a = a[0] = {}</code></pre>
<p>
  can be explained in a similar way.  The dictionary object on the
  right-hand-side is first assigned to <code>a</code>.  Then a
  key <code>0</code> is inserted within the <em>same</em> dictionary.
  Finally the value of <code>a[0]</code> is set to the <em>same</em>
  dictionary.  In other words, <code>a[0]</code> is set
  to <code>a</code> itself.
</p>
<h2 id="more-experiments">More Experiments<a href="#more-experiments"></a></h2>
<p>
  The evaluation of the expression list on the right hand side first
  and then assigning the result to each target list from left to right
  explains the behaviour we observed in the previous sections.  This
  left-to-right assignment is quite uncommon among mainstream
  programming languages.  For example, in C, C++, Java and JavaScript
  the simple assignment operator (<code>=</code>) has right-to-left
  associativity.  The left-to-right assignment in Python can be
  further demonstrated with some intentional errors.  Here is an
  example:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a[0] = a = [0]</kbd>
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'a' is not defined</samp>
</pre>
<p>
  In this example, when the assignment to <code>a[0]</code> occurs,
  the variable named <code>a</code> is not defined yet, so it leads
  to <code>NameError</code>.
</p>
<p>
  Here is another example:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a[0] = 0</kbd>
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object does not support item assignment</samp>
</pre>
<p>
  In this example, <code>0</code> is first assigned to <code>a</code>.
  Then <code>a[0]</code> needs to be evaluated before <code>0</code>
  can be assigned to it but this evaluation fails
  because <code>a</code> is an <code>int</code>, a type that does not
  support
  <a href="https://docs.python.org/3.7/reference/expressions.html#subscriptions">subscription</a>
  (also known as indexing), so it fails with <code>TypeError</code>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/peculiar-self-references.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Zero Point Leet Seconds</title>
<link>https://susam.net/zero-point-leet-seconds.html</link>
<guid isPermaLink="false">mixqg</guid>
<pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  While calculating certain round-trip times, here is a number I came
  across that is surprisingly memorable: It takes light 0.1337 seconds
  to travel the length of the Earth's equator via vacuum or air.  Let
  me repeat that.  It takes light "zero point leet" seconds to travel
  once around the equator.
</p>
<p>
  We are going to ignore practical considerations regarding how light
  would actually follow a curved path around the Earth's equator via
  vacuum or air.  This allows us to find the minimum time that any
  signal must take in order to complete a round trip around the Earth.
  Despite the lack of practicality, this is an interesting result
  because it provides us a theoretical limit for the shortest time
  interval between sending a signal and receiving it after it has made
  a complete trip around the world.
</p>
<p>
  The equatorial radius of the Earth is about 6378.137 km.  The
  equatorial circumference of the Earth then is about 40075 km.  The
  speed of light in vacuum is 299792.458 km/s by definition.  The
  speed of light in air is about 299705 km/s.  Therefore, it takes
  light about 40075/299792.458 seconds in vacuum and about
  40075/299705 seconds in air to travel once around the equator.  Both
  values can be written as 0.1337 seconds accurate up to 4 decimal
  places.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/zero-point-leet-seconds.html">Read on website</a> |
  <a href="https://susam.net/tag/networking.html">#networking</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>C Standard Terms for Behaviour</title>
<link>https://susam.net/c-standard-terms-for-behaviour.html</link>
<guid isPermaLink="false">dfqke</guid>
<pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here are some excerpts from the final drafts of the C99 and C11
  standards <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf">n1256.pdf</a>
  and <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf">n1570.pdf</a>
  respectively.
</p>
<ul>
  <li>
    <p>
      <strong>Â§3.4.0: behavior:</strong> external appearance or action
    </p>
  </li>
  <li>
    <p>
      <strong>Â§3.4.1: implementation-defined behavior:</strong>
      unspecified behavior where each implementation documents how the
      choice is made.
    </p>
    <p>
      EXAMPLE: An example of implementation-defined behavior is the
      propagation of the high-order bit when a signed integer is
      shifted right.
    </p>
  </li>
  <li>
    <p>
      <strong>Â§3.4.2: locale-specific behavior:</strong> behavior that
      depends on local conventions of nationality, culture, and
      language that each implementation documents.
    </p>
    <p>
      EXAMPLE: An example of locale-specific behavior is whether the
      <code>islower</code> function returns true for characters other
      than the 26 lowercase Latin letters.
    </p>
  </li>
  <li>
    <p>
      <strong>Â§3.4.3: undefined behavior:</strong> behavior, upon use
      of a nonportable or erroneous program construct or of erroneous
      data, for which this International Standard imposes no
      requirements.
    </p>
    <p>
      NOTE: Possible undefined behavior ranges from ignoring the
      situation completely with unpredictable results, to behaving
      during translation or program execution in a documented manner
      characteristic of the environment (with or without the issuance
      of a diagnostic message), to terminating a translation or
      execution (with the issuance of a diagnostic message).
    </p>
    <p>
      EXAMPLE: An example of undefined behavior is the behavior on
      integer overflow.
    </p>
  </li>
  <li>
    <p>
      <strong>Â§3.4.4: unspecified behavior:</strong> use of an
      unspecified value, or other behavior where this International
      Standard provides two or more possibilities and imposes no
      further requirements on which is chosen in any instance.
    </p>
    <p>
      EXAMPLE: An example of unspecified behavior is the order in
      which the arguments to a function are evaluated.
    </p>
  </li>
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/c-standard-terms-for-behaviour.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Building Common Lisp Executables</title>
<link>https://susam.net/building-common-lisp-executables.html</link>
<guid isPermaLink="false">nwdzf</guid>
<pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Since Common Lisp is a language standard (not an implementation) it
  is hard to provide a single set of instructions or guidelines that
  would work for all implementations.  There are various
  implementations of Common Lisp that target native machine code, C
  code, bytecode, JVM, etc.  So the build instructions, project
  structure, etc. depend on the target.
</p>
<h2 id="using-sbcl">Using SBCL<a href="#using-sbcl"></a></h2>
<p>
  Here is a minimal example that builds a Lisp program into a binary
  executable with SBCL:
</p>
<pre>
<code>(defun main ()
  (format t "hello, world~%"))
(sb-ext:save-lisp-and-die "hello" :executable t :toplevel #'main)</code>
</pre>
<p>
  The SBCL-specific <code>save-lisp-and-die</code> function saves the
  Lisp process as a core image.  The <code>:executable t</code>
  keyword argument includes the SBCL runtime in the image to ensure
  that the image is a standalone executable.  This is why the
  executable for even a simple hello-world program tends to be quite
  large (30 MB to 50 MB)!  The <code>:toplevel</code> argument
  specifies the function to run when the core file is run.
</p>
<p>
  Here are some example commands to get you started:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main ()
  (format t "hello, world~%"))
(sb-ext:save-lisp-and-die "hello" :executable t :toplevel #'main)
$ <kbd>sbcl --load hello.lisp</kbd>
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>

<h2 id="moving-unportable-code-to-command-line-argument">Moving Unportable Code to Command Line Argument<a href="#moving-unportable-code-to-command-line-argument"></a></h2>
<p>
  If you would rather not have SBCL specific code in the Lisp source
  code file, then you could move
  the <code>sb-ext:save-lisp-and-die</code> call out of your source
  file to the SBCL command invocation.  The source code now looks like
  this:
</p>
<pre>
<code>(defun main ()
  (format t "hello, world~%"))</code>
</pre>
<p>
  The shell commands now look like this:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main ()
  (format t "hello, world~%"))
$ <kbd>sbcl --load hello.lisp --eval "(sb-ext:save-lisp-and-die \"hello\" :executable t :toplevel #'main)"</kbd>
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>

<h2 id="using-buildapp">Using Buildapp<a href="#using-buildapp"></a></h2>
<p>
  By the way, there is also
  <a href="https://www.xach.com/lisp/buildapp/">Buildapp</a> that
  provides a layer of abstraction for building executables from Lisp
  programs.  It works with SBCL and CCL.  It requires the toplevel
  function to be called with an argument though.  Therefore the source
  code needs to be modified to the following:
</p>
<pre>
<code>(defun main (argv)
  (declare (ignore argv))
  (format t "hello, world~%"))</code>
</pre>
<p>
Then Buildapp can be invoked like this:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main (argv)
  (declare (ignore argv))
  (format t "hello, world~%"))
$ <kbd>buildapp --load hello.lisp --entry main --output hello</kbd>
;; loading file #P"/Users/susam/hello.lisp"
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>  
<!-- ### -->
<p>
  <a href="https://susam.net/building-common-lisp-executables.html">Read on website</a> |
  <a href="https://susam.net/tag/lisp.html">#lisp</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Unix Line Discard</title>
<link>https://susam.net/unix-line-discard.html</link>
<guid isPermaLink="false">jxiwr</guid>
<pubDate>Sun, 09 Jul 2017 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Type <code>C-u</code> (i.e. <kbd>ctrl</kbd>+<kbd>u</kbd>) in Bash or
  Zsh to discard the current line of input.  To read more about it,
  enter <code>man bash</code> and then type
  <code>/unix-line-discard</code> to locate the relevant section of
  the manual.  Here is an excerpt:
</p>
<pre>
<code>unix-line-discard (C-u)
       Kill backward from point to the beginning of the line.
       The killed text is saved on the kill-ring.</code>
</pre>
<p>
  Similarly, for Zsh, type <code>man zshzle</code> and then
  type <code>/kill-whole-line</code>.  We find this:
</p>
<pre>
<code>kill-whole-line (^U) (unbound) (unbound)
       Kill the current line.</code>
</pre>
<p>
  By the way, Emacs-style key sequence like <code>C-a C-k</code> works
  too.
</p>
<p>
  Furthermore, it is quite likely that <code>C-u</code> is mapped to
  delete the current line of input in the terminal itself.  To confirm
  this, type the command <code>stty -a</code> and check the output.
  If the output contains the text <code>kill = ^U</code>, then
  typing <code>C-u</code> anytime in the terminal would delete the
  current line of input.  This would happen regardless of what program
  is running in the terminal.  For example, programs
  like <code>cat</code>, <code>sbcl</code>, etc. do not support key
  sequences like <code>C-a</code>, <code>C-k</code>, <code>C-u</code>,
  etc. the way Bash or Zsh does.  Despite this limitation,
  typing <code>C-u</code> in <code>sbcl</code> would delete the
  current line of input if the output of <code>stty -a</code>
  indicates that the terminal has mapped this key sequence to the
  operation of deleting the current line.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/unix-line-discard.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>QuickQWERTY</title>
<link>https://susam.net/quickqwerty.html</link>
<guid isPermaLink="false">zlnzx</guid>
<pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Touch typing tutor that runs in your web browser.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/quickqwerty.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Fixed Bits of Version 4 UUID</title>
<link>https://susam.net/fixed-bits-of-version-4-uuid.html</link>
<guid isPermaLink="false">axzhy</guid>
<pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  <em>Universally Unique Identifiers</em> or UUIDs are a popular way
  of creating identifiers that are unique for <em>practical</em>
  purposes.  Quoting from
  <a href="https://www.rfc-editor.org/rfc/rfc4122">RFC 4122</a>
  below:
</p>
<blockquote>
  This specification defines a Uniform Resource Name namespace for
  UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally
  Unique IDentifier).  A UUID is 128 bits long and requires no central
  registration process.
</blockquote>
<p>
  These 128-bit identifiers are typically represented as 32
  hexadecimal digits, displayed in five groups separated by hyphens.
  There are various variants and versions of UUIDs which differ in how
  the identifiers are encoded in binary and how they are generated.
  In this post, we are going to focus only on variant 1 of version 4
  UUIDs, also known simply as version 4 UUIDs or random UUIDs.  Here
  are a couple examples of version 4 UUIDs generated using Python:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>import uuid</kbd>
&gt;&gt;&gt; <kbd>str(uuid.uuid4())</kbd>
'980ddc6a-2c56-44da-ac71-9e6bfc924e25'
&gt;&gt;&gt; <kbd>str(uuid.uuid4())</kbd>
'10c3fcde-96a0-4c9e-905b-443b00ceeb01'</samp>
</pre>
<p>
  Version 4 UUID is one of the most popular type of UUIDs in use
  today.  Unlike the other versions, this version does not require
  external inputs like MAC address, sequence number, current time,
  etc.  All except six bits are generated randomly in version 4 UUIDs.
  The six non-random bits are fixed.  They represent the version and
  variant of the UUID.  Here is a tiny Python program that
  demonstrates the first set of fixed bits:
</p>
<pre><code>while str(uuid.uuid4())[14] == '4': pass</code></pre>
<p>
  The above program is an infinite loop.  So is this:
</p>
<pre><code>while str(uuid.uuid4())[19] in ['8', '9', 'a', 'b']: pass</code></pre>
<p>
  The above infinite loops show that the hexademical digit at index 14
  must always be 4.  Similarly, the hexadecimal digit at index 19 must
  always be one of 8, 9, a and b.  We can see the two examples of
  version 4 UUIDs mentioned earlier and confirm that this is indeed
  the case.  Here are a few more examples that illustrate this
  pattern:
</p>
<pre>
<code>527218be-a09e-<span class="hl">4</span>d0e-<span class="hl">8</span>6ce-c39d1348d953
14163389-2eea-<span class="hl">4</span>e30-<span class="hl">9</span>124-fcf2451eb9fc
c21b57cc-2a4e-<span class="hl">4</span>425-<span class="hl">a</span>2f4-129256562599
37700270-6deb-<span class="hl">4</span>a73-<span class="hl">b</span>bcd-d47c6e20b567</code>
</pre>
<p>
  The digit after the second hyphen is at index 14 and indeed this
  digit is always 4.  Similarly, the hexadecimal digit after the third
  hyphen is at index 19 and indeed it is always one of 8, 9, a and b.
</p>
<p>
  If we number the octets in the identifiers as 0, 1, 2, etc. where 0
  represents the most significant octet (the leftmost pair of
  hexadecimal digits in the string representations above), then with a
  careful study of
  <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.1.1">section
  4.1.1</a> of RFC 4122 we know that the first two most significant
  bits of octet 8 represent the variant number.  Since we are working
  with variant 1 of version 4 UUIDs, these two bits must be 1 and 0.
  As a result, octet 8 must be of the form 10xx xxxx in binary where
  each x represents an independent random bit.  Thus, in binary, the
  four most significant bits of octet 8 must be one of 1000, 1001,
  1010 and 1011.  This explains why we always see the hexadecimal
  digit 8, 9, a or b at this position.
</p>
<p>
  Similarly, a study of
  <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.1.2">section 4.1.2</a>
  and <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.1.3">section 4.1.3</a>
  of the RFC shows that the four most significant bits of octet 6 must
  be set to 0100 to represent the version number 4.  This explains why
  we always see the hexadecimal digit 4 here.
</p>
<p>
  <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.4">Section
  4.4</a> of RFC 4122 further summarises these points.  To summarise,
  version 4 UUIDs, although 128 bits in length, have 122 bits of
  randomness.  They have six fixed bits that represent its version and
  variant.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/fixed-bits-of-version-4-uuid.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 0.1.0</title>
<link>https://susam.net/code/news/mathb/0.1.0.html</link>
<guid isPermaLink="false">pskny</guid>
<pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB is a web-based mathematics pastebin service.  It was developed
  on Sunday, 25 March 2022, as a weekend project to share mathematical
  notes with friends.  After more than one and a half years of
  development and tweaks, this is the first stable release of the
  software.  To read more about this project, please
  see <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/0.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>AUTH CRAM-MD5</title>
<link>https://susam.net/auth-cram-md5.html</link>
<guid isPermaLink="false">jcrvn</guid>
<pubDate>Mon, 07 Nov 2011 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="introduction">Introduction<a href="#introduction"></a></h2>
<p>
  Last night, while I was setting up my SMTP server, I decided to dig
  deeper into CRAM-MD5 authentication mechanism.  It is a
  challenge-response authentication mechanism and involves HMAC-MD5.
  We don't use SSL/TLS in the SMTP session examples below in order to
  show the underlying protocol in clear.  In practice, any email
  program should be configured to use SSL/TLS while having a session
  with an SMTP server.  We will first see a few examples of other
  authentication mechanisms before discussing the CRAM-MD5 mechanism.
</p>
<h2 id="auth-plain">AUTH PLAIN<a href="#auth-plain"></a></h2>
<p>
  Here is an example of a session that uses the PLAIN authentication
  mechanism:
</p>
<pre>
<samp>$ <kbd>telnet susam.in 25</kbd>
Trying 106.187.41.241...
Connected to susam.in.
Escape character is '^]'.
220 tesseract.susam.in ESMTP Exim 4.72 Mon, 07 Nov 2011 20:27:56 +0530
<kbd>EHLO nifty.localdomain</kbd>
250-tesseract.susam.in Hello nifty.localdomain [122.167.80.194]
250-SIZE 52428800
250-PIPELINING
250-AUTH PLAIN LOGIN CRAM-MD5
250-STARTTLS
250 HELP
<kbd>AUTH PLAIN AGFsaWNlAHdvbmRlcmxhbmQ=</kbd>
235 Authentication succeeded
<kbd>MAIL FROM:&lt;alice@susam.in&gt;</kbd>
250 OK
<kbd>RCPT TO:&lt;example.recipient@gmail.com&gt;</kbd>
250 Accepted
<kbd>DATA</kbd>
354 Enter message, ending with "." on a line by itself
<kbd>Date: Mon, 07 Nov 2011 20:28:00 +0530
From: Alice &lt;alice@susam.in&gt;
To: Example Recipient &lt;example.recipient@gmail.com&gt;
Subject: Test email

This is a test email.
.</kbd>
250 OK id=1RNQef-0004e7-7s
<kbd>QUIT</kbd>
221 tesseract.susam.in closing connection
Connection closed by foreign host.</samp>
</pre>
<p>
  The string <code>"AGFsaWNlAHdvbmRlcmxhbmQ="</code> in the <code>AUTH
  PLAIN</code> command is the the base64 encoding of the string
  <code>"\0alice\0wonderland"</code> where <code>"\0"</code> indicates
  a null character, <code>"alice"</code> is the sender's user name and
  <code>"wonderland"</code> is the sender's password.  If an
  eavesdropper intercepts this traffic, he or she can easily find the
  user's password by simply decoding the base64 response sent by the
  client.  Here is an example of decoding the base64 response with
  Python 2.7:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>'AGFsaWNlAHdvbmRlcmxhbmQ='.decode('base64')</kbd>
'\x00alice\x00wonderland'</samp>
</pre>
<p>
  This is also susceptible to replay attacks as the eavesdropper can
  use the <code>AUTH PLAIN</code> line containing the base64 encoded
  credentials to log into the server in future.  This is why it is
  very important to secure the connection with SSL/TLS while having a
  session with the SMTP server.
</p>
<h2 id="auth-login">AUTH LOGIN<a href="#auth-login"></a></h2>
<p>
  Here is another example snippet that shows the LOGIN mechanism:
</p>
<pre>
<samp><kbd>AUTH LOGIN</kbd>
334 VXNlcm5hbWU6
<kbd>YWxpY2U=</kbd>
334 UGFzc3dvcmQ6
<kbd>d29uZGVybGFuZA==</kbd>
235 Authentication succeeded</samp>
</pre>
<p>
  Here are the base64 responses decoded with Python 2.7:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>'VXNlcm5hbWU6'.decode('base64')</kbd>
'Username:'
&gt;&gt;&gt; <kbd>'YWxpY2U='.decode('base64')</kbd>
'alice'
&gt;&gt;&gt; <kbd>'UGFzc3dvcmQ6'.decode('base64')</kbd>
'Password:'
&gt;&gt;&gt; <kbd>'d29uZGVybGFuZA=='.decode('base64')</kbd>
'wonderland'</samp>
</pre>
<p>
  If the session isn't encrypted, LOGIN authentication mechanism is
  susceptible to the same problems that PLAIN authentication mechanism
  is susceptible to.
</p>
<h2 id="auth-cram-md5">AUTH CRAM-MD5<a href="#auth-cram-md5"></a></h2>
<p>
  Let us take a look at the CRAM-MD5 authentication mechanism now.
  When the client selects the CRAM-MD5 authentication mechanism, the
  server sends a base64 encoded challenge like this:
</p>
<pre>
<samp><kbd>AUTH CRAM-MD5</kbd>
334 PDE3ODkzLjEzMjA2NzkxMjNAdGVzc2VyYWN0LnN1c2FtLmluPg==</samp>
</pre>
<p>
  An HMAC is calculated for this challenge with the password as the
  key and MD5 as the hash function.  A string is formed by
  concatenating the user name, a space and the hexadecimal
  representation of the HMAC.  The base64 encoding of this string is
  sent as the response by the client.  The following statements in
  Python 2.7 show how a response can be formed for the above
  challenge:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>'PDE3ODkzLjEzMjA2NzkxMjNAdGVzc2VyYWN0LnN1c2FtLmluPg=='.decode('base64')</kbd>
'&lt;17893.1320679123@tesseract.susam.in&gt;'
&gt;&gt;&gt; <kbd>import hmac, hashlib</kbd>
&gt;&gt;&gt; <kbd>hmac.new('wonderland', '&lt;17893.1320679123@tesseract.susam.in&gt;', hashlib.md5).hexdigest()</kbd>
'64b2a43c1f6ed6806a980914e23e75f0'
&gt;&gt;&gt; <kbd>'alice 64b2a43c1f6ed6806a980914e23e75f0'.encode('base64')</kbd>
'YWxpY2UgNjRiMmE0M2MxZjZlZDY4MDZhOTgwOTE0ZTIzZTc1ZjA=\n'</samp>
</pre>
<p>
  Of course, this can be written as a small function:
</p>
<pre>
<code>import hmac, hashlib
def cram_md5_response(username, password, base64challenge):
    return (username + ' ' +
            hmac.new(password,
                     base64challenge.decode('base64'),
                     hashlib.md5).hexdigest()).encode('base64')</code>
</pre>
<p>
  The following snippet shows the SMTP server accepting the
  client-response:
</p>
<pre>
<samp><kbd>AUTH CRAM-MD5</kbd>
334 PDE3ODkzLjEzMjA2NzkxMjNAdGVzc2VyYWN0LnN1c2FtLmluPg==
<kbd>YWxpY2UgNjRiMmE0M2MxZjZlZDY4MDZhOTgwOTE0ZTIzZTc1ZjA=</kbd>
235 Authentication succeeded</samp>
</pre>
<p>
  When the connection is not secured, CRAM-MD5 authentication
  mechanism is relatively more secure than the other two mechanisms
  because the password cannot be retrieved by decoding the base64
  encoded response from the client.  The password is used as the key
  to calculate the HMAC but the password itself is not present in the
  response.  It prevents replay attacks too because the server sends
  an unpredictable challenge for every authentication.  The response
  sent by the client for a certain challenge is invalid for another
  instance of authentication because the other instance would involve
  a different unpredictable challenge.
</p>
<h2 id="further-reading">Further Reading<a href="#further-reading"></a></h2>
<p>
  Here is a list of hyperlinks for further reading:
</p>
<ol>
<li><a href="https://www.rfc-editor.org/rfc/rfc4954">RFC 4954</a>:
    SMTP Service Extension for Authentication
</li>
<li><a href="https://www.rfc-editor.org/rfc/rfc4616">RFC 4616</a>:
    The PLAIN Simple Authentication and Security Layer (SASL) Mechanism
</li>
<li><a href="https://www.rfc-editor.org/rfc/rfc2195">RFC 2195</a>:
    IMAP/POP AUTHorize Extension for Simple Challenge/Response
</li>
<li><a href="https://www.rfc-editor.org/rfc/rfc2104">RFC 2104</a>:
    HMAC: Keyed-Hashing for Message Authentication</li>
</ol>
<!-- ### -->
<p>
  <a href="https://susam.net/auth-cram-md5.html">Read on website</a> |
  <a href="https://susam.net/tag/networking.html">#networking</a> |
  <a href="https://susam.net/tag/protocol.html">#protocol</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Loopy C Puzzle</title>
<link>https://susam.net/loopy-c-puzzle.html</link>
<guid isPermaLink="false">yuzqb</guid>
<pubDate>Sat, 01 Oct 2011 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="integer-underflow">Integer Underflow<a href="#integer-underflow"></a></h2>
<p>
  Let us talk a little bit about integer underflow and undefined
  behaviour in C before we discuss the puzzle I want to share in this
  post.
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main()
{
    int i;
    for (i = 0; i &lt; 6; i--) {
        printf(".");
    }
    return 0;
}</code>
</pre>
<p>
  This code invokes undefined behaviour.  The value in variable
  <code>i</code> decrements to <code>INT_MIN</code> after
  <code>|INT_MIN|</code> iterations.  In the next iteration, there is a
  negative overflow which is undefined for signed integers in C.  On
  many implementations though, <code>INT_MIN - 1</code> wraps around
  to <code>INT_MAX</code>.  Since <code>INT_MAX</code> is not less than
  <code>6</code>, the loop terminates.  With such implementations, this
  code prints print <code>|INT_MIN| + 1</code> dots.  With 32-bit integers,
  that amounts to 2147483649 dots.  Here is one such example output:
</p>
<pre>
<samp>$ <kbd>gcc -std=c89 -Wall -Wextra -pedantic foo.c &amp;&amp; ./a.out | wc -c</kbd>
2147483649</samp>
</pre>
<p>
  It is worth noting that the above behaviour is only one of the many
  possible ones.  The code invokes undefined behaviour and the ISO
  standard imposes no requirements on a specific implementation of the
  compiler regarding what the behaviour of such code should be.  For
  example, an implementation could also exploit the undefined
  behaviour to turn the loop into an infinite loop.  In fact, GCC does
  optimise it to an infinite loop if we compile the code with
  the <code>-O2</code> option.
</p>
<pre>
<samp><kbd># This never terminates!</kbd>
$ <kbd>gcc -O2 -std=c89 -Wall -Wextra -pedantic foo.c &amp;&amp; ./a.out</kbd></samp>
</pre>
<h2 id="puzzle">Puzzle<a href="#puzzle"></a></h2>
<p>
  Let us take a look at the puzzle now.
</p>
<div class="highlight">
<p>
  Add or modify exactly one operator in the following code such that
  it prints exactly 6 dots.
</p>
<pre>
<code>for (i = 0; i &lt; 6; i--) {
    printf(".");
}</code>
</pre>
</div>
<p>
  An obvious solution is to change <code>i--</code>
  to <code>i++</code>.
</p>
<pre>
<code>for (i = 0; i &lt; 6; i++) {
    printf(".");
}</code>
</pre>
<p>
  There are a few more solutions to this puzzle.  One of the solutions
  is very interesting.  We will discuss the interesting solution in
  detail below.
</p>
<h2 id="solutions">Solutions<a href="#solutions"></a></h2>
<p>
  <em><strong>Update on 02 Oct 2011:</strong> The puzzle has been
  solved in the <a href="comments/loopy-c-puzzle.html">comments</a>
  section.  We will discuss the solutions now.  If you want to think
  about the problem before you see the solutions, this is a good time
  to pause and think about it.  There are spoilers ahead.</em>
</p>
<p>
  Here is a list of some solutions:
</p>
<ul>
  <li>
    <code>for (i = 0; i &lt; 6; i++)</code>
  </li>
  <li>
    <code>for (i = 0; i &lt; 6; ++i)</code>
  </li>
  <li>
    <code>for (i = 0; -i &lt; 6; i--)</code>
  </li>
  <li>
    <code>for (i = 0; i + 6; i--)</code>
  </li>
  <li>
    <code>for (i = 0; i ^= 6; i--)</code>
  </li>
</ul>
<p>
  The last solution involving the bitwise XOR operation is not
  immediately obvious.  A little analysis is required to understand
  why it works.
</p>
<h2 id="generalisation">Generalisation<a href="#generalisation"></a></h2>
<p>
  Let us generalise the puzzle by replacing \( 6 \) in the loop with
  an arbitrary positive integer \( n.  \)  The loop in the last
  solution now becomes:
</p>
<pre>
<code>for (i = 0; i ^= n; i--) {
    printf(".");
}</code>
</pre>
<p>
  If we denote the value of the variable <code>i</code> set by the
  execution of <code>i ^= n</code> after \( k \) dots are printed as
  \( f(k), \) then

  \[
    f(k) =
      \begin{cases}
        0                       &amp; \text{if } k = 0, \\
        n \oplus (f(k - 1) - 1) &amp; \text{if } k \gt 1
      \end{cases}
  \]

  where \( k \) is a nonnegative integer, \( n \) is a positive
  integer and the symbol \( \oplus \) denotes bitwise XOR operation on
  two nonnegative integers.
</p>
<p>
  Note that \( f(0) \) represents the value of <code>i</code> set by
  the execution of <code>i ^= n</code> when no dots have been printed
  yet.
</p>
<p>
  If we can show that \( n \) is the least value of \( k \) for which
  \( f(k) = 0, \) it would prove that the loop terminates after
  printing \( n \) dots.
</p>
<p>
  We will see in the next section that for odd values of \( n, \)

  \[
    f(k) =
      \begin{cases}
        n &amp; \text{if } k \text{ is even}, \\
        1 &amp; \text{if } k \text{ is odd}.
      \end{cases}
  \]

  Therefore there is no value of \( k \) for which \( f(k) = 0 \) when
  \( n \) is odd.  As a result, the loop never terminates when \( n \)
  is odd.
</p>
<p>
  We will then see that for even values of \( n \) and \( 0 \leq k
  \leq n, \)

  \[
    f(k) = 0 \iff k = n.
  \]

  Therefore the loop terminates after printing \( n \) dots when
  \( n \) is even.
</p>
<h2 id="lemmas">Lemmas<a href="#lemmas"></a></h2>
<p>
  We will first prove a few lemmas about some interesting properties
  of the bitwise XOR operation.  We will then use it to prove the
  claims made in the previous section.
</p>
<!-- Lemma 1 -->
<p>
<strong>Lemma 1.</strong>
<em>
  For an odd positive integer \( n, \)

  \[
    n \oplus (n - 1) = 1
  \]

  where the symbol \( \oplus \) denotes bitwise XOR operation on two
  nonnegative integers.
</em>
</p>
<p>
  <em>Proof.</em>  Let the binary representation of \( n \) be \( b_m
  \dots b_1 b_0 \) where \( m \) is a nonnegative integer and
  \( b_m \) represents the most significant nonzero bit of \( n.  \)
  Since \( n \) is an odd number, \( b_0 = 1.  \)

  Thus \( n \) may be written as

  \[
    b_m \dots b_1 1.
  \]

  As a result \( n - 1 \) may be written as

  \[
    b_m \dots b_1 0.
  \]

  The bitwise XOR of both binary representations is \( 1.  \)
</p>
<!-- Lemma 2 -->
<p>
  <strong>Lemma 2.</strong>
  <em>
    For a nonnegative integer \( n, \)

    \[
      n \oplus 1 =
      \begin{cases}
      n + 1 &amp; \text{if } n \text{ is even}, \\
      n - 1 &amp; \text{if } n \text{ is odd}.
      \end{cases}
    \]

    where the symbol \( \oplus \) denotes bitwise XOR operation on two
    nonnegative integers.
  </em>
</p>
<p>
  <em>Proof.</em>  Let the binary representation of \( n \) be \( b_m
  \dots b_1 b_0 \) where \( m \) is a nonnegative integer and
  \( b_m \) represents the most significant nonzero bit of \( n.  \)
</p>
<p>
  If \( n \) is even, \( b_0 = 0.  \)  In this case, \( n \) may be
  written as \( b_m \dots b_1 0.  \)  Thus \( n \oplus 1 \) may be
  written as \( b_m \dots b_1 1.  \)  Therefore \( n \oplus 1 = n + 1.  \)
</p>
<p>
  If \( n \) is odd, \( b_0 = 1.  \)  In this case, \( n \) may be
  written as \( b_m \dots b_1 1.  \)  Thus \( n \oplus 1 \) may be
  written as \( b_m \dots b_1 0.  \)  Therefore \( n \oplus 1 = n - 1.  \)
</p>
<p>
  Note that for odd \( n, \) lemma 1 can also be derived as a
  corollary of lemma 2 in this manner:

  \[
    k \oplus (k - 1)
    = k \oplus (k \oplus 1)
    = (k \oplus k) \oplus 1
    = 0 \oplus 1
    = 1.
  \]
</p>
<!-- Lemma 3 -->
<p>
  <strong>Lemma 3.</strong>
  <em>
    If \( x \) is an even nonnegative integer and \( y \) is an odd
    positive integer, then \( x \oplus y \) is odd, where the symbol
    \( \oplus \) denotes bitwise XOR operation on two nonnegative
    integers.
  </em>
</p>
<p>
  <em>Proof.</em>  Let the binary representation of \( x \) be \(
  b_{xm_x} \dots b_{x1} b_{x0} \) and that of \( y \) be \( b_{ym_y}
  \dots b_{y1} b_{y0} \) where \( m_x \) and \( m_y \) are nonnegative
  integers and \( b_{xm_x} \) and \( b_{xm_y} \) represent the most
  significant nonzero bits of \( x \) and \( y \) respectively.
</p>
<p>
  Since \( x \) is even, \( b_{x0} = 0.  \)  Since \( y \) is odd, \(
  b_{y0} = 1.  \)
</p>
<p>
  Let \( z = x \oplus y \) with a binary representation of \( b_{zm_z}
  \dots b_{z1} b_{z0} \) where \( m_{zm_z} \) is a nonnegative integer
  and \( b_{zm_z} \) is the most significant nonzero bit of \( z.  \)
</p>
<p>
  We get \( b_{z0} = b_{x0} \oplus b_{y0} = 0 \oplus 1 = 1.  \)
  Therefore \( z \) is odd.
</p>
<h2 id="theorems">Theorems<a href="#theorems"></a></h2>
<!-- Theorem 1 -->
<p>
<strong>Theorem 1.</strong>
<em>
  Let \( \oplus \) denote bitwise XOR operation on two nonnegative
  integers and

  \[
    f(k) =
    \begin{cases}
    n                        &amp; \text{if } n = 0, \\
    n \oplus (f(n - 1) - 1)  &amp; \text{if } n \gt 1.
    \end{cases}
  \]

  where \( k \) is a nonnegative integer and \( n \) is an odd
  positive integer.  Then

  \[
    f(k) =
    \begin{cases}
    n &amp; \text{if } k \text{ is even}, \\
    1 &amp; \text{if } k \text{ is odd}.
    \end{cases}
  \]
</em>
</p>
<p>
  <em>Proof.</em>  This is a proof by mathematical induction.  We have
  \( f(0) = n \) by definition.  Therefore the base case holds good.
</p>
<p>
  Let us assume that \( f(k) = n \) for any even \( k \) (induction
  hypothesis).  Let \( k' = k + 1 \) and \( k'' = k + 2.  \)
</p>
<p>
  If \( k \) is even, we get

  \begin{align*}
    f(k')  &amp; = n \oplus (f(k) - 1)  &amp;&amp; \text{(by definition)} \\
           &amp; = n \oplus (n - 1)     &amp;&amp; \text{(by induction hypothesis)} \\
           &amp; = 1                    &amp;&amp; \text{(by lemma 1)},\\
    f(k'') &amp; = n \oplus (f(k') - 1) &amp;&amp; \text{(by definition)} \\
           &amp; = n \oplus (1 - 1)     &amp;&amp; \text{(since \( f(k') = 1 \))} \\
           &amp; = n \oplus 0 \\
           &amp; = n.
  \end{align*}
</p>
<p>
  Since \( f(k'') = n \) and \( k'' \) is the next even number after
  \( k, \) the induction step is complete.  The induction step shows
  that for every even \( k, \) \( f(k) = n \) holds good.  It also
  shows that as a result of \( f(k) = n \) for every even \( k, \) we
  get \( f(k') = 1 \) for every odd \( k'.  \)
</p>
<!-- Theorem 2 -->
<p>
  <strong>Theorem 2.</strong>
  <em>
    Let \( \oplus \) denote bitwise XOR operation on two nonnegative
    integers and

    \[
      f(k) =
        \begin{cases}
          n                        &amp; \text{if } n = 0, \\
          n \oplus (f(n - 1) - 1)  &amp; \text{if } n \gt 1.
        \end{cases}
    \]

    where \( k \) is a nonnegative integer, \( n \) is an even
    positive integer and \( 0 \leq k \leq n.  \)  Then

   \[
     f(k) = 0 \iff k = n.
   \]
</em>
</p>
<p>
  <em>Proof.</em>  We will first show by the principle of mathematical
  induction that for even \( k, \) \( f(k) = n - k.  \)  We have \(
  f(0) = n \) by definition, so the base case holds good.  Now let us
  assume that \( f(k) = n - k \) holds good for any even \( k \) where
  \( 0 \leq k \leq n \) (induction hypothesis).
</p>
<p>
  Since \( n \) is even (by definition) and \( k \) is even (by
  induction hypothesis), \( f(k) = n - k \) is even.  As a result, \(
  f(k) - 1 \) is odd.  By lemma 3, we conclude that \( f(k + 1) = n
  \oplus (f(k) - 1) \) is odd.
</p>
<p>
  Now we perform the induction step as follows:

  \begin{align*}
    f(k + 2) &amp; = n \oplus (f(k + 1) - 1)
                     &amp;&amp; \text{(by definition)} \\
             &amp; = n \oplus (f(k + 1) \oplus 1)
                     &amp;&amp; \text{(by lemma 2 for odd \( n \))} \\
             &amp; = n \oplus ((n \oplus (f(k) - 1)) \oplus 1)
                     &amp;&amp; \text{(by definition)} \\
             &amp; = (n \oplus n ) \oplus ((f(k) - 1) \oplus 1)
                     &amp;&amp; \text{(by associativity of XOR)} \\
             &amp; = 0 \oplus ((f(k) - 1) \oplus 1) \\
             &amp; = (f(k) - 1) \oplus 1 \\
             &amp; = (f(k) - 1) - 1
                     &amp;&amp; \text{(from lemma 2 for odd \( n \))} \\
             &amp; = f(k) - 2 \\
             &amp; = n - k - 2
                     &amp;&amp; \text{(by induction hypothesis).}
  \end{align*}

  This completes the induction step and proves that \( f(k) = n - k \)
  for even \( k \) where \( 0 \leq k \leq n.  \)
</p>
<p>
  We have shown above that \( f(k) \) is even for every even \( k \)
  where \( 0 \leq k \leq n \) which results in \( f(k + 1) \) as odd
  for every odd \( k + 1.  \)  This means that \( f(k) \) cannot be \(
  0 \) for any odd \( k.  \)  Therefore \( f(k) = 0 \) is possible only
  even \( k.  \)  Solving \( f(k) = n - k = 0, \) we conclude that \(
  f(k) = 0 \) if and only if \( k = n.  \)
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/loopy-c-puzzle.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>Random String in Shell</title>
<link>https://susam.net/random-string-in-shell.html</link>
<guid isPermaLink="false">pvmbx</guid>
<pubDate>Thu, 11 Aug 2011 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is a quick way to generate a random alphanumeric string in the
  shell:
</p>
<pre><code>LC_CTYPE=C tr -dc '[:alnum:]' &lt; /dev/urandom | head -c 20; echo</code></pre>
<p>
  Here is an example output:
</p>
<pre><samp>GrWPmvF1oOmbeUzyJwC3</samp></pre>
<p>
  The command works both on macOS as well as Linux.
  The <code>LC_CTYPE=C</code> environment variable is set specifically
  to make the command work successfully on macOS.  Without
  it <code>tr</code> may report an "Illegal byte sequence" error.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/random-string-in-shell.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>URL in C</title>
<link>https://susam.net/url-in-c.html</link>
<guid isPermaLink="false">vnjtr</guid>
<pubDate>Fri, 03 Jun 2011 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is an interesting C puzzle I created recently.  It is a silly
  one but you might find it amusing.
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main()
{
    https://susam.net/
    printf("hello, world\n");
    return 0;
}</code>
</pre>
<p>
  This code compiles and runs successfully.
</p>
<pre>
<samp>$ <kbd>c99 hello.c &amp;&amp; ./a.out</kbd>
hello, world</samp>
</pre>
<p>
  However, the
  <a href="http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf">C99
  standard</a> does not mention anywhere that a URL is a valid
  syntactic element in C.  How does this code work then?
</p>
<p>
  <em><strong>Update on 04 Jun 2011:</strong> The puzzle has been
  solved in the <a href="comments/url-in-c.html">comments</a> section.
  If you want to think about the problem before you see the solutions,
  this is a good time to pause and think about it.  There are spoilers
  ahead.</em>
</p>
<p>
  The code works fine because <code>https:</code> is a label and
  <code>//</code> following it begins a comment.  In case, you are
  wondering if <code>//</code> is indeed a valid comment in C, yes, it
  is, since C99.  Download the
  <a href="http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf">C99
  standard</a>, go to section 6.4.9 (Comments) and read the second
  point which mentions this:
</p>
<blockquote>
  Except within a character constant, a string literal, or a comment,
  the characters <code>//</code> introduce a comment that includes all
  multibyte characters up to, but not including, the next new-line
  character.  The contents of such a comment are examined only to
  identify multibyte characters and to find the terminating new-line
  character.
</blockquote>
<!-- ### -->
<p>
  <a href="https://susam.net/url-in-c.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>Ternary Operator Puzzle</title>
<link>https://susam.net/ternary-operator-puzzle.html</link>
<guid isPermaLink="false">kaibc</guid>
<pubDate>Wed, 06 Apr 2011 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  What is the shortest statement you can write in the C or C++
  programming language to express the following statement?
</p>
<pre><code>a = (a == 0 ? 0 : 1);</code></pre>
<p>
  See the comments page for the solution.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/ternary-operator-puzzle.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>Clumsy Pointers</title>
<link>https://susam.net/clumsy-pointers.html</link>
<guid isPermaLink="false">kwnco</guid>
<pubDate>Mon, 29 Nov 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="pointer-declarator">Pointer Declarator<a href="#pointer-declarator"></a></h2>
<p>
  Here is a fun puzzle that involves complex type declarations in C:
</p>
<div class="highlight">
  <p>
    Without using <code>typedef</code>, declare <code>x</code> as a
    pointer to a function that takes one argument which is an array of
    10 pointers to functions which in turn take <code>int *</code> as
    their only argument and returns a pointer to a function which
    has <code>int *</code> argument and <code>void</code> return type.
  </p>
</div>
<p>
  Here is a simpler way to state this puzzle:
</p>
<div class="highlight">
  <p>
    Without using <code>typedef</code>, declare <code>x</code> as a
    pointer that is equivalent to the following declaration
    of <code>x</code>:
  </p>
<pre>
<code>typedef void (*func_t)(int *);
func_t (*x)(func_t [10]);</code>
</pre>
</div>
<p>
  <em>If you want to think about this puzzle, this is a good time to
  pause and think about it.  There are spoilers ahead.</em>
</p>
<p>
  Let me describe how I solve such problems.  Let us start from the
  right end of the problem and work our way to the left end defining
  each part one by one.
</p>
<div style="text-align: center">
  <p>
    <code>void x(int *)</code><br>
    A function that has <code>int *</code> argument and
    <code>void</code> return type.
  </p>
  <p>
    <code>void (*x)(int *)</code><br>
    A pointer to a function that has <code>int *</code> argument
    and <code>void</code> return type.
  </p>
  <p>
    <code>void (*x())(int *)</code><br>
    A function that returns a pointer to a function that has <code>int
    *</code> argument and <code>void</code> return type.
  </p>
  <p>
    <code>void (*x(void (*)(int *)))(int *)</code><br>
    A function that has a pointer to a function that has <code>int
    *</code> argument and <code>void</code> return type as argument
    and returns a pointer to a function which has <code>int *</code>
    argument and <code>void</code> return type.
  </p>
  <p>
    <code>void (*x(void (*[10])(int *)))(int *)</code><br>
    A function that has an array of 10 pointers to functions that has
    <code>int *</code> argument and <code>void</code> return type as
    argument and returns a pointer to a function which has <code>int
    *</code> argument and <code>void</code> return type.
  </p>
  <p>
    <code>void (*(*x)(void (*[10])(int *)))(int *)</code><br>
    A pointer to a function that has an array of 10 pointers to
    functions that has <code>int *</code> argument and
    <code>void</code> return type as argument and returns a pointer to
    a function which has <code>int *</code> argument and
    <code>void</code> return type.
  </p>
</div>
<h2 id="example-code">Example Code<a href="#example-code"></a></h2>
<p>
  Here is an example that uses the above pointer declaration in a
  program in order to verify that it works as expected:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

/* A function which has int * argument and void return type.  */
void g(int *a)
{
    printf("g(): a = %d\n", *a);
}

/* A function which has an array of 10 pointers to g()-like functions
   and returns a pointer to a g()-like funciton.  */
void (*f(void (*a[10])(int *)))(int *)
{
    int i;
    for (i = 0; i &lt; 10; i++)
        a[i](&amp;i);
    return g;
}

int main()
{
    /* An array of 10 pointers to g().  */
    void (*a[10])(int *) = {g, g, g, g, g, g, g, g, g, g};

    /* A pointer to function f().  */
    void (*(*x)(void (*[10])(int *)))(int *) = f;

    /* A pointer to function g() returned by f().  */
    void (*y)(int *a) = x(a);

    int i = 10;
    y(&amp;i);
    return 0;
}</code>
</pre>
<p>
  Here is the output of this program:
</p>
<pre>
<samp>$ gcc -Wall -Wextra -pedantic -std=c99 foo.c &amp;&amp; ./a.out
g(): a = 0
g(): a = 1
g(): a = 2
g(): a = 3
g(): a = 4
g(): a = 5
g(): a = 6
g(): a = 7
g(): a = 8
g(): a = 9
g(): a = 10</samp>
</pre>
<h2 id="further-reading">Further Reading<a href="#further-reading"></a></h2>
<p>
  The book
  <em><a href="https://en.wikipedia.org/wiki/The_C_Programming_Language_(book)">The
  C Programming Language</a></em>, Second Edition has some good
  examples of complicated declarations of pointers in Section 5.12
  (Complicated Declarations).  Here are a couple of them:
</p>
<p>
  <code>char (*(*x())[])()</code><br>
  x: function returning pointer to array[] of pointer to function
  returning char
</p>
<p>
  <code>char (*(*x[3])())[5]</code><br>
  x: array[3] of pointer to function returning pointer to array[5] of
  char
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/clumsy-pointers.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Stack Overwriting Function</title>
<link>https://susam.net/stack-overwriting-function.html</link>
<guid isPermaLink="false">oijgw</guid>
<pubDate>Wed, 28 Jul 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="skipping-over-a-function-call">Skipping Over a Function Call<a href="#skipping-over-a-function-call"></a></h2>
<p>
  Here is a C puzzle that involves some analysis of the machine code
  generated from it followed by manipulation of the runtime stack.
  The solution to this puzzle is <em>implementation-dependent</em>.
  Here is the puzzle:
</p>
<div class="highlight">
<p>
  Consider this C code:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

void f()
{
}

int main()
{
    printf("1\n");
    f();
    printf("2\n");
    printf("3\n");
    return 0;
}</code>
</pre>
<p>
  Define the function <code>f()</code> such that the output of the
  above code is:
</p>
<pre>
<samp>1
3</samp>
</pre>
<p>
  Printing <code>3</code> in <code>f()</code> and exiting is not
  allowed as a solution.
</p>
</div>
<p>
  <em>If you want to think about this problem, this is a good time to
  pause and think about it.  There are spoilers ahead.</em>
</p>
<p>
  The solution essentially involves figuring out what code we can
  place in the body of <code>f()</code> such that it causes the
  program to skip over the machine code generated for
  the <code>printf("2\n")</code> operation.  I'll share two solutions
  for two different implementations:
</p>
<ol>
  <li>
    gcc 4.3.2 on 64-bit Debian 5.0.3 running on 64-bit Intel Core 2
    Duo.
  </li>
  <li>
    Microsoft Visual Studio 2005 on 32-bit Windows XP running on
    64-bit Intel Core 2 Duo.
  </li>
</ol>
<h2 id="solution-for-gcc">Solution for GCC<a href="#solution-for-gcc"></a></h2>
<p>
  Let us first see step by step how I approached this problem for GCC.
  We add a statement <code>char a = 7;</code> to the function
  <code>f()</code>.  The code looks like this:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

void f()
{
    char a = 7;
}

int main()
{
    printf("1\n");
    f();
    printf("2\n");
    printf("3\n");
    return 0;
}</code>
</pre>
<p>
  There is nothing special about the number <code>7</code> here.  We
  just want to define a variable in <code>f()</code> and assign some
  value to it.
</p>
<p>
  Then we compile the code and analyse the machine code generated for
  <code>f()</code> and <code>main()</code> functions.
</p>
<pre>
<samp>$ <kbd>gcc -c overwrite.c &amp;&amp; objdump -d overwrite.o</kbd>

overwrite.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &lt;f&gt;:
   0:   55                      push   %rbp
   1:   48 89 e5                mov    %rsp,%rbp
   <span class="hl">4:   c6 45 ff 07             movb   $0x7,-0x1(%rbp)</span>
   8:   c9                      leaveq
   9:   c3                      retq

000000000000000a &lt;main&gt;:
   a:   55                      push   %rbp
   b:   48 89 e5                mov    %rsp,%rbp
   e:   bf 00 00 00 00          mov    $0x0,%edi
  13:   e8 00 00 00 00          callq  18 &lt;main+0xe&gt;
  18:   b8 00 00 00 00          mov    $0x0,%eax
  1d:   e8 00 00 00 00          callq  22 &lt;main+0x18&gt;
  <span class="hl">22:   bf 00 00 00 00          mov    $0x0,%edi
  27:   e8 00 00 00 00          callq  2c &lt;main+0x22&gt;</span>
  2c:   bf 00 00 00 00          mov    $0x0,%edi
  31:   e8 00 00 00 00          callq  36 &lt;main+0x2c&gt;
  36:   b8 00 00 00 00          mov    $0x0,%eax
  3b:   c9                      leaveq
  3c:   c3                      retq</samp>
</pre>
<p>
  When <code>main()</code> calls <code>f()</code>, the microprocessor
  saves the return address (where the control must return to after
  <code>f()</code> is executed) in stack.  The line at offset
  <samp>1d</samp> in the listing above for <code>main()</code> is the
  call to <code>f()</code>.  After <code>f()</code> is executed, the
  instruction at offset <samp>22</samp> is executed.  Therefore the
  return address that is saved on stack is the address at which the
  instruction at offset
  <samp>22</samp> would be present at runtime.
</p>
<p>
  The instructions at offsets <samp>22</samp> and <samp>27</samp> are
  the instructions for the <code>printf("2\n")</code> call.  These are
  the instructions we want to skip over.  In other words, we want to
  modify the return address in the stack from the address of the
  instruction at offset <samp>22</samp> to that of the instruction at
  offset <samp>2c</samp>.  This is equivalent to skipping 10 bytes
  (0x2c - 0x22 = 10) of machine code or adding 10 to the return
  address saved in the stack.
</p>
<p>
  Now how do we get hold of the return address saved in the stack when
  <code>f()</code> is being executed?  This is where the variable
  <code>a</code> we defined in <code>f()</code> helps.  The instruction
  at offset <samp>4</samp> is the instruction generated for
  assigning <code>7</code> to the variable <code>a</code>.
</p>
<p>
  From the knowledge of how microprocessor works and from the machine
  code generated for <code>f()</code>, we find that the following
  sequence of steps are performed during the call to <code>f()</code>:
</p>
<ol>
  <li>
    The microprocessor saves the return address by pushing the content
    of RIP (instruction pointer) register into the stack.
  </li>
  <li>
    The function <code>f()</code> pushes the content of the RBP (base
    pointer) register into the stack.
  </li>
  <li>
    The function <code>f()</code> copies the content of the RSP (stack
    pointer) register to the RBP register.
  </li>
  <li>
    The function <code>f()</code> stores the byte value <code>7</code>
    at the memory address specified by the content of RBP minus 1.
    This achieves the assignment of the value <code>7</code> to the
    variable <code>a</code>.
  </li>
</ol>
<p>
  After <code>7</code> is assigned to the variable <code>a</code>, the
  stack is in the following state:
</p>
<table class="grid center textcenter">
  <tr>
    <th>Address</th>
    <th>Content</th>
    <th>Size (in bytes)</th>
  </tr>
  <tr>
    <td><code>&amp;a + 5</code></td>
    <td>Return address (old RIP)</td>
    <td>8</td>
  </tr>
  <tr>
    <td><code>&amp;a + 1</code></td>
    <td>Old base pointer (old RBP)</td>
    <td>8</td>
  </tr>
  <tr>
    <td><code>&amp;a</code></td>
    <td>Variable <code>a</code></td>
    <td>1</td>
  </tr>
</table>
<p>
  If we add 9 to the address of the variable <code>a</code>, i.e.
  <code>&amp;a</code>, we get the address where the return address is
  stored.  We saw earlier that if we increment this return address by
  10 bytes, it solves the problem.  Therefore here is the solution
  code:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

void f()
{
    char a;
    (&amp;a)[9] += 10;
}

int main()
{
    printf("1\n");
    f();
    printf("2\n");
    printf("3\n");
    return 0;
}</code>
</pre>
<p>
  Finally, we compile and run this code and confirm that the solution
  works fine:
</p>
<pre>
<samp>$ <kbd>gcc overwrite.c &amp;&amp; ./a.out</kbd>
1
3</samp>
</pre>
<h2 id="solution-for-visual-studio">Solution for Visual Studio<a href="#solution-for-visual-studio"></a></h2>
<p>
  Now we will see another example solution, this time for Visual
  Studio 2005.
</p>
<p>
  Like before we define a variable <code>a</code> in <code>f()</code>.
  The code now looks like this:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

void f()
{
    char a = 7;
}

int main()
{
    printf("1\n");
    f();
    printf("2\n");
    printf("3\n");
    return 0;
}</code>
</pre>
<p>
  Then we compile the code and analyse the machine code generated from
  it.
</p>
<pre>
<samp>C:\&gt;<kbd>cl overwrite.c</kbd>
Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.42
for 80x86
Copyright (C) Microsoft Corporation.  All rights reserved.

overwrite.c
Microsoft (R) Incremental Linker Version 8.00.50727.42
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:overwrite.exe
overwrite.obj

C:\&gt;<kbd>dumpbin /disasm overwrite.obj</kbd>
Microsoft (R) COFF/PE Dumper Version 8.00.50727.42
Copyright (C) Microsoft Corporation.  All rights reserved.


Dump of file overwrite.obj

File Type: COFF OBJECT

_f:
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  <span class="hl">00000004: C6 45 FF 07        mov         byte ptr [ebp-1],7</span>
  00000008: 8B E5              mov         esp,ebp
  0000000A: 5D                 pop         ebp
  0000000B: C3                 ret
  0000000C: CC                 int         3
  0000000D: CC                 int         3
  0000000E: CC                 int         3
  0000000F: CC                 int         3
_main:
  00000010: 55                 push        ebp
  00000011: 8B EC              mov         ebp,esp
  00000013: 68 00 00 00 00     push        offset $SG2224
  00000018: E8 00 00 00 00     call        _printf
  0000001D: 83 C4 04           add         esp,4
  00000020: E8 00 00 00 00     call        _f
  <span class="hl">00000025: 68 00 00 00 00     push        offset $SG2225
  0000002A: E8 00 00 00 00     call        _printf
  0000002F: 83 C4 04           add         esp,4</span>
  00000032: 68 00 00 00 00     push        offset $SG2226
  00000037: E8 00 00 00 00     call        _printf
  0000003C: 83 C4 04           add         esp,4
  0000003F: 33 C0              xor         eax,eax
  00000041: 5D                 pop         ebp
  00000042: C3                 ret

  Summary

           B .data
          57 .debug$S
          2F .drectve
          43 .text</samp>
</pre>
<p>
  Just like in the previous <code>objdump</code> listing, in this
  listing too, the instruction at offset <code>4</code> shows where
  the variable <code>a</code> is allocated and the instructions at
  offsets <code>25</code>, <code>2A</code> and <code>2F</code> show
  the instructions we want to skip, i.e. instead of returning to the
  instruction at offset <code>25</code>, we want the microprocessor to
  return to the instruction at offset <code>32</code>.  This involves
  skipping 13 bytes (0x32 - 0x25 = 13) of machine code.
</p>
<p>
  Unlike the previous <code>objdump</code> listing, in this listing we
  see that the Visual Studio I am using is a 32-bit on, so it
  generates machine code to use 32-bit registers like EBP, ESP, etc.
  Thus the stack looks like this after <code>7</code> is assigned to
  the variable
  <code>a</code>:
</p>
<table class="grid center textcenter">
  <tr>
    <th>Address</th>
    <th>Content</th>
    <th>Size (in bytes)</th>
  </tr>
  <tr>
    <td><code>&amp;a + 5</code></td>
    <td>Return address (old EIP)</td>
    <td>4</td>
  </tr>
  <tr>
    <td><code>&amp;a + 1</code></td>
    <td>Old base pointer (old EBP)</td>
    <td>4</td>
  </tr>
  <tr>
    <td><code>&amp;a</code></td>
    <td>Variable <code>a</code></td>
    <td>1</td>
  </tr>
</table>
<p>
  If we add 5 to the address of the variable <code>a</code>, i.e.
  <code>&amp;a</code>, we get the address where the return address is
  stored.  Here is the solution code:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

void f()
{
    char a;
    (&amp;a)[5] += 13;
}

int main()
{
    printf("1\n");
    f();
    printf("2\n");
    printf("3\n");
    return 0;
}</code>
</pre>
<p>
  Finally, we compile and run this code and confirm that the solution
  works fine:
</p>
<pre>
<samp>C:\&gt;<kbd>cl /w overwrite.c</kbd>
Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.42
for 80x86
Copyright (C) Microsoft Corporation.  All rights reserved.

overwrite.c
Microsoft (R) Incremental Linker Version 8.00.50727.42
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:overwrite.exe
overwrite.obj

C:\&gt;<kbd>overwrite.exe</kbd>
1
3</samp>
</pre>
<h2 id="conclusion">Conclusion<a href="#conclusion"></a></h2>
<p>
  The machine code that the compiler generates for a given C code is
  highly dependent on the implementation of the compiler.  In the two
  examples above, we have two different solutions for two different
  compilers.
</p>
<p>
  Even with the same brand of compiler, the way it generates machine
  code for a given code may change from one version of the compiler to
  another.  Therefore, it is very likely that the above solution would
  not work on another system (such as your system) even if you use the
  same compiler that I am using in the examples above.
</p>
<p>
  However, we can arrive at the solution for an implementation of the
  compiler by determining what number to add to <code>&amp;a</code> to
  get the address where the return address is saved on stack and what
  number to add to this return address to make it point to the
  instruction we want to skip to after <code>f()</code> returns.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/stack-overwriting-function.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>Timing With Curl</title>
<link>https://susam.net/timing-with-curl.html</link>
<guid isPermaLink="false">tmcva</guid>
<pubDate>Sat, 10 Jul 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is a command I use often while measuring why an HTTP request is
  taking too long:
</p>
<pre>
<code>curl -L -w "time_namelookup: %{time_namelookup}
time_connect: %{time_connect}
time_appconnect: %{time_appconnect}
time_pretransfer: %{time_pretransfer}
time_redirect: %{time_redirect}
time_starttransfer: %{time_starttransfer}
time_total: %{time_total}
" https://example.com/</code>
</pre>
<p>
  Here is the same command written as a one-liner, so that I can copy
  it easily from this page with a triple-click whenever I need it in
  future:
</p>
<pre><code>curl -L -w "time_namelookup: %{time_namelookup}\ntime_connect: %{time_connect}\ntime_appconnect: %{time_appconnect}\ntime_pretransfer: %{time_pretransfer}\ntime_redirect: %{time_redirect}\ntime_starttransfer: %{time_starttransfer}\ntime_total: %{time_total}\n" https://example.com/</code></pre>
<p>
  Here is how the output of the above command typically looks:
</p>
<pre>
<samp>$ <kbd>curl -L -w "namelookup: %{time_namelookup}\nconnect: %{time_connect}\nappconnect: %{time_appconnect}\npretransfer: %{time_pretransfer}\nstarttransfer: %{time_starttransfer}\ntotal: %{time_total}\n" https://example.com/</kbd>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
...
&lt;/html&gt;
time_namelookup: 0.001403
time_connect: 0.245464
time_appconnect: 0.757656
time_pretransfer: 0.757823
time_redirect: 0.000000
time_starttransfer: 0.982111
time_total: 0.982326</samp>
</pre>
<p>
  In the output above, I have omitted most of the HTML output and
  replaced the omitted part with ellipsis for the sake of brevity.
</p>
<p>
  The list below provides a description of each number in the output
  above.  This information is picked straight from the manual page of
  curl 7.20.0.  Here are the details:
</p>
<ul>
  <li>
    <p>
      <em>time_namelookup:</em> The time, in seconds, it took from the
      start until the name resolving was completed.
    </p>
  </li>
  <li>
    <p>
      <em>time_connect:</em> The time, in seconds, it took from the
      start until the TCP connect to the remote host (or proxy) was
      completed.
    </p>
  </li>
  <li>
    <p>
      <em>time_appconnect:</em> The time, in seconds, it took from the
      start until the SSL/SSH/etc connect/handshake to the remote host
      was completed.  (Added in 7.19.0)
    </p>
  </li>
  <li>
    <p>
      <em>time_pretransfer:</em> The time, in seconds, it took from
      the start until the file transfer was just about to begin.  This
      includes all pre-transfer commands and negotiations that are
      specific to the particular protocol(s) involved.
    </p>
  </li>
  <li>
    <p>
      <em>time_redirect:</em> The time, in seconds, it took for all
      redirection steps include name lookup, connect, pretransfer and
      transfer before the final transaction was started.
      time_redirect shows the complete execution time for multiple
      redirections.  (Added in 7.12.3)
    </p>
  </li>
  <li>
    <p>
      <em>time_starttransfer:</em> The time, in seconds, it took from
      the start until the first byte was just about to be transferred.
      This includes time_pretransfer and also the time the server
      needed to calculate the result.
    </p>
  <li>
    <p>
      <em>time_total:</em> The total time, in seconds, that the full
      operation lasted.  The time will be displayed with millisecond
      resolution.
    </p>
  </li>
</ul>
<p>
  An important thing worth noting here is that the difference in the
  numbers for <code>time_appconnect</code>
  and <code>time_connect</code> time tells us how much time is spent
  in SSL/TLS handshake.  For a cleartext connection without SSL/TLS,
  <code>time_appconnect</code> is reported as zero.  Here is an example
  output that demonstrates this:
</p>
<pre>
<samp>$ <kbd>curl -L -w "time_namelookup: %{time_namelookup}\ntime_connect: %{time_connect}\ntime_appconnect: %{time_appconnect}\ntime_pretransfer: %{time_pretransfer}\ntime_redirect: %{time_redirect}\ntime_starttransfer: %{time_starttransfer}\ntime_total: %{time_total}\n" http://example.com/</kbd>
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
...
&lt;/html&gt;
time_namelookup: 0.001507
time_connect: 0.247032
time_appconnect: 0.000000
time_pretransfer: 0.247122
time_redirect: 0.000000
time_starttransfer: 0.512645
time_total: 0.512853</samp>
</pre>
<p>
  Also note that <code>time_redirect</code> is zero in both outputs
  above.  That is because no redirection occurs while visiting
  <a href="https://example.com">example.com</a>.  Here is another
  example that shows how the output looks when a redirection occurs:
</p>
<pre>
<samp>$ <kbd>curl -L -w "time_namelookup: %{time_namelookup}\ntime_connect: %{time_connect}\ntime_appconnect: %{time_appconnect}\ntime_pretransfer: %{time_pretransfer}\ntime_redirect: %{time_redirect}\ntime_starttransfer: %{time_starttransfer}\ntime_total: %{time_total}\n" https://susam.net/blog</kbd>
&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
...
&lt;/html&gt;
time_namelookup: 0.001886
time_connect: 0.152445
time_appconnect: 0.465326
time_pretransfer: 0.465413
time_redirect: 0.614289
time_starttransfer: 0.763997
time_total: 0.765413</samp>
</pre>
<p>
  When faced with a potential latency issue in web services, this is
  often one of the first commands I run several times from multiple
  clients because the results from this command help to get a quick
  sense of the layer that might be responsible for the latency issue.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/timing-with-curl.html">Read on website</a> |
  <a href="https://susam.net/tag/networking.html">#networking</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Big-Endian on Little-Endian</title>
<link>https://susam.net/big-endian-on-little-endian.html</link>
<guid isPermaLink="false">fclnd</guid>
<pubDate>Sun, 20 Jun 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  In this post, I will share how I set up big-endian emulation on my
  little-endian Intel machine to tets a program for byte order related
  issues.  I used the QEMU PowerPC emulator to set up the big-endian
  emulation.  The steps to do so are documented in the list below.
</p>
<ol>
  <li>
    <p>
      Install QEMU.
    </p>
    <pre><code>apt-get update &amp;&amp; apt-get install qemu</code></pre>
  </li>
  <li>
    <p>
      Download <code>mol-0.9.72.1.tar.bz2</code> from
      <a href="http://sourceforge.net/projects/mac-on-linux/files/">http://sourceforge.net/projects/mac-on-linux/files/</a>
      and copy the file named <code>video.x</code> from the downloaded
      tarball to
      <code>/usr/share/qemu/</code>.  This is necessary to
      prevent <code>qemu-system-ppc</code> from complaining about it.
    </p>
    <pre>
<code>wget https://sourceforge.net/projects/mac-on-linux/files/mac-on-linux/mol-0.9.72.1/mol-0.9.72.1.tar.bz2
tar -xjf mol-0.9.72.1.tar.bz2
sudo cp mol-0.9.72.1/mollib/drivers/video.x /usr/share/qemu/</code>
</pre>
  </li>
  <li>
    <p>
      Create a QEMU hard disk image.
    </p>
    <pre><code>qemu-img create powerpc.img 2G</code></pre>
  </li>
  <li>
    <p>
      Download Debian for PowerPC and install it on the QEMU hard disk
      image.
    </p>
    <pre>
<code>wget http://cdimage.debian.org/debian-cd/5.0.4/powerpc/iso-cd/debian-504-powerpc-CD-1.iso
qemu-system-ppc -m 512 -boot d -hda powerpc.img -cdrom debian-504-powerpc-CD-1.iso</code>
</pre>
  </li>
  <li>
    <p>
      Boot the QEMU PowerPC emulator with the new hard disk image.
    </p>
    <pre><code>qemu-system-ppc -m 512 -hda powerpc.img</code></pre>
  </li>
  <li>
    <p>
      Write a small program inside the new Debian system,
      say, <code>endian.c</code> like this:
    </p>
    <pre>
<code>#include &lt;stdio.h&gt;

int main()
{
    int n = 1;
    printf(*((char *) &amp;n) ? "little-endian\n" : "big-endian\n");
    return 0;
}</code>
</pre>
  </li>
  <li>
    <p>
      Compile and execute the C program.
    </p>
    <pre>
<code>$ <kbd>gcc endian.c &amp;&amp; ./a.out</kbd>
big-endian</code>
</pre>
  </li>
</ol>
<!-- ### -->
<p>
  <a href="https://susam.net/big-endian-on-little-endian.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Correctly Printing STAFString</title>
<link>https://susam.net/correctly-printing-stafstring.html</link>
<guid isPermaLink="false">dzrqs</guid>
<pubDate>Fri, 04 Jun 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  At RSA, we use <a href="http://staf.sourceforge.net/">Software
  Testing Automation Framework (STAF)</a> to automate testing our
  products.  Recently, I ran into a bug that occurred due
  to <code>STAFResult::STAFString</code> not being null-terminated.
  Here is an example C++ program that demonstrates the issue:
</p>
<pre>
<code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

#include "STAF.h"
#include "STAFString.h"

int main(int argc, char **argv)
{
    STAFString name("foo");
    STAFHandlePtr handle;

    int rc = STAFHandle::create(name, handle);
    if (rc != 0) {
        std::cerr &lt;&lt; "Could not create STAF handle; error code: "
                  &lt;&lt; rc &lt;&lt; endl;
        return 1;
    }

    STAFResultPtr result = handle-&gt;submit("127.0.0.1", "VAR",
                                          "RESOLVE STRING {STAF/Env/DUMMY}");
    if (result-&gt;rc != 0) {
        std::cerr &lt;&lt; "Could not run STAF command; error code: "
                  &lt;&lt; rc &lt;&lt; "\n";
        return 1;
    }

    STAFString output = result-&gt;result;
    std::cout &lt;&lt; "Output: " &lt;&lt; output.buffer() &lt;&lt; "\n";
}</code>
</pre>
<p>
  Here is an example output of the above program:
</p>
<pre>
<samp>C:\&gt;<kbd>echo %DUMMY%</kbd>
Why__does__it__break
C:\&gt;<kbd>STAFExperiments.exe</kbd>
Output: Why__does__it__break/Env/DUMMY}}</samp>
</pre>
<p>
  The substring <code>/Env/DUMMY</code> at the end of the output is
  garbage.  The result is not null-terminated in the output buffer.
  Here is the correct way to print the output:
</p>
<pre><code>std::cout &lt;&lt; "Output: " &lt;&lt; string(output.buffer(), output.length()) &lt;&lt; "\n";</code></pre>
<!-- ### -->
<p>
  <a href="https://susam.net/correctly-printing-stafstring.html">Read on website</a> |
  <a href="https://susam.net/tag/c++.html">#c++</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Sequence Points</title>
<link>https://susam.net/sequence-points.html</link>
<guid isPermaLink="false">moksh</guid>
<pubDate>Wed, 26 May 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="code-examples">Code Examples<a href="#code-examples"></a></h2>
<p>
  A particular type of question comes up often in C programming
  forums.  Here is an example of such a question:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main()
{
    int i = 5;
    printf("%d %d %d\n", i, i--, ++i);
    return 0;
}</code>
</pre>
<p>
  The output is <code>5 6 5</code> when compiled with GCC and
  <code>6 6 6</code> when compiled with the C compiler that comes with
  Microsoft Visual Studio.  The versions of the compilers with which I
  got these results are:
</p>
<ul>
  <li>
    gcc (Debian 4.3.2-1.1) 4.3.2
  </li>
  <li>
    Microsoft Visual Studio 2005 32-Bit C/C++ Optimizing Compiler
    Version 14.00.50727.42 for 80x86
  </li>
</ul>
<p>
  Here is another example of such a question:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main()
{
    int a = 5;
    a += a++ + a++;
    printf("%d\n", a);
    return 0;
}</code>
</pre>
<p>
  In this case, I got the output <code>17</code> with both the
  compilers.
</p>
<p>
  The behaviour of such C programs is undefined.  Consider the
  following two statements:
</p>
<ul>
  <li><code>printf("%d %d %d\n", i, i--, ++i);</code></li>
  <li><code>a += a++ + a++;</code></li>
</ul>
<p>
  We will see below that in both the statements, the variable is
  modified twice between two consecutive sequence points.  If the
  value of a variable is modified more than once between two
  consecutive sequence points, the behaviour is undefined.  Such code
  may behave differently when compiled with different compilers.
</p>
<h2 id="knr">K&amp;R<a href="#knr"></a></h2>
<p>
  Before looking at the relevant sections of the C99 standard, let us
  see what the book
  <em><a href="https://en.wikipedia.org/wiki/The_C_Programming_Language_(book)">The
  C Programming Language</a></em>, Second Edition says about such C
  statements.  In Section 2.12 (Precedence and Order of Evaluation) of
  the book, the authors write:
</p>
<blockquote>
  <p>
    C, like most languages, does not specify the order in which the
    operands of an operator are evaluated.  (The exceptions are
    <code>&amp;&amp;</code>, <code>||</code>, <code>?:</code>, and
    '<code>,</code>'.)  For example, in a statement like
  </p>
  <pre><code>x = f() + g();</code></pre>
  <p>
    <code>f</code> may be evaluated before <code>g</code> or vice
    versa; thus if either <code>f</code> or <code>g</code> alters a
    variable on which the other depends, <code>x</code> can depend on
    the order of evaluation.  Intermediate results can be stored in
    temporary variables to ensure a particular sequence.
  </p>
</blockquote>
<p>
  In the next paragraph, they write,
</p>
<blockquote>
  <p>
    Similarly, the order in which function arguments are evaluated is
    not specified, so the statement
  </p>
  <pre><code>printf("%d %d\n", ++n, power(2, n));    /* WRONG */</code></pre>
  <p>
    can produce different results with different compilers, depending
    on whether <code>n</code> is incremented before <code>power</code>
    is called.  The solution, of course, is to write
  </p>
<pre>
<code>++n;
printf("%d %d\n", n, power(2, n));</code>
</pre>
</blockquote>
<p>
  They provide one more example in this section:
</p>
<blockquote>
  <p>
    One unhappy situation is typified by the statement
  </p>
<pre>
<code>a[i] = i++;</code>
</pre>
  <p>
    The question is whether the subscript is the old value
    of <code>i</code> or the new.  Compilers can interpret this in
    different ways and generate different answers depending on their
    interpretation.
  </p>
</blockquote>
<h2 id="c99">C99<a href="#c99"></a></h2>
<p>
  To read more about this, download the
  <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf">C99
  standard</a>, go to section 5.1.2.3 (Program execution) and see the
  second point which mentions:
</p>
<blockquote>
  Accessing a volatile object, modifying an object, modifying a file,
  or calling a function that does any of those operations are
  all <em>side effects</em>,<sup>11)</sup> which are changes in the
  state of the execution environment.  Evaluation of an expression may
  produce side effects.  At certain specified points in the execution
  sequence called <em>sequence points</em>, all side effects of
  previous evaluations shall be complete and no side effects of
  subsequent evaluations shall have taken place.  (A summary of the
  sequence points is given in annex C.)
</blockquote>
<p>
  Then go to section 6.5 and see the second point which mentions:
</p>
<blockquote>
  Between the previous and next sequence point an object shall have
  its stored value modified at most once by the evaluation of an
  expression.<sup>72)</sup> Furthermore, the prior value shall be read
  only to determine the value to be stored.<sup>73)</sup>
</blockquote>
<p>
  Finally go to Annex C (Sequence Points).  It lists all the sequence
  points.  For example, the following is mentioned as a sequence point:
</p>
<blockquote>
  The call to a function, after the arguments have been evaluated
  (6.5.2.2).
</blockquote>
<p>
  This means that in the statement
</p>
<pre><code>printf("%d %d %d\n", i, i--, ++i);</code></pre>
<p>
  there is a sequence point after the evaluation of the three
  arguments (<code>i</code>, <code>i--</code> and <code>++i</code>)
  and before the <code>printf()</code> function is called.  But none
  of the items specified in Annex C implies that there is a sequence
  point between the evaluation of the arguments.  Yet the value
  of <code>i</code> is modified more than once during the evaluation
  of these arguments.  This makes the behaviour of this statement
  undefined.  Further, the value of <code>i</code> is being read not
  only for determining what it must be updated to but also for using
  as arguments to the <code>printf()</code> call.  This also makes the
  behaviour of this code undefined.
</p>
<p>
  Let us see another example of a sequence point from Annex C.
</p>
<blockquote>
  The end of a full expression: an initializer (6.7.8); the expression
  in an expression statement (6.8.3); the controlling expression of a
  selection statement (<code>if</code> or <code>switch</code>)
  (6.8.4); the controlling expression of a <code>while</code>
  or <code>do</code> statement (6.8.5); each of the expressions of
  a <code>for</code> statement (6.8.5.3); the expression in
  a <code>return</code> statement (6.8.6.4).
</blockquote>
<p>
  Therefore in the statement
</p>
<pre><code>a += a++ + a++;</code></pre>
<p>
  there is a sequence point at the end of the complete expression
  (marked with a semicolon) but there is no other sequence point
  before it.  Yet the value of <code>a</code> is modified twice before
  the sequence point.  Thus the behaviour of this statement is
  undefined.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/sequence-points.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>UID Numbering Scheme</title>
<link>https://susam.net/uid-numbering-scheme.html</link>
<guid isPermaLink="false">bfgqj</guid>
<pubDate>Mon, 24 May 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Some thoughts on
  <a href="http://web.archive.org/web/20100704211109/www.uidai.gov.in/documents/A_UID_Numbering_Scheme.pdf">A UID Numbering Scheme</a>
  published by
  <a href="http://web.archive.org/web/20100523144720/http://uidai.gov.in/">Unique Identification Authority of India (UIDAI)</a>.
</p>
<ol>
  <li>
    <p>
      <strong>Process for De-duplication</strong> (page 5):
    </p>
    <blockquote>
      Since biometric information contain no ordering and hence cannot
      be indexed like text based information, when a resident applies
      for a UID with his/her fingerprints, iris and photo of face,
      these biometrics have to be compared against the entire UID
      database (existing residents with UIDs) to ensure that this new
      applicant is indeed unique and has not already been allotted a
      UID (even under a different name, address etc).  This 1:N
      biometric comparison (N=size of the UID database) is the most
      compute intensive operation of the UID server systeem.
    </blockquote>
    <p>
      It sounds as if the search operation would take O(N) time.  Why
      can't the data be treated as binary numbers that can be ordered
      and indexed?  It'll improve the search time to at least O(log N)
      time and possibly even further to O(1) time if a hashtable is
      used.  The performance improvement is going to be huge since N
      is as large as 1.2 billion.
    </p>
  </li>
  <li>
    <p>
      <strong>Memorisation of UID</strong> (page 6):
    </p>
    <blockquote>
      This section is about how long the string length should be.  In
      short, the string has to be as short as possible but that meets
      density requirement and does not include alphabet characters,
      just numbers.  It is important to keep the UID simple and small
      to help residents to remember their number.
    </blockquote>
    <blockquote>
      Firstly the use of the hindu-arabic numeral
      system(0,1,2,3,4,5,6,7,8,9) is suggested since these numerals
      are recognised/used by the largest subset of people in the
      country.  Secondly we suggest the use of 12 digits (11 + 1 check
      sum) since 11 digits gives us a 100 billion number space which
      in turn can provide a low density of used numbers.
    </blockquote>
    <p>
      I don't think a 12 digit UID is easy to memorise.  However, I
      agree that this length is necessary to ensure unique UIDs for a
      large population like India's.  The population of India is about
      1.2 billion now.  Now issuing 1.2 billion UIDs from a maximum
      possible space of 100 billion numbers implies that any UID
      chosen at random has a 1.2% probability of being a valid UID
      issued to someone.  In other words, 1 out of every 83 possible
      UID values is a valid UID issued to someone.  Therefore, these
      UIDs should not be treated as secret.  It should be assumed that
      an adversary can easily guess valid UIDs issued to actual
      residents.
    </p>
    <p>
      Note that this problem gets worse as the population of India
      grows.  Currently, it is growing at the rate of about 1.4% every
      year.  The growth rate is expected to slow down in future.  For
      now, I will assume that the growth rate is never going to exceed
      1.4% to get a conservative estimate.  Then by the year 2050, the
      population of India would not exceed 2.1 billion.  Then the
      probability that a randomly generated UID is an actual UID
      issued to a resident would increase to 2.1%.
    </p>
    <p>
      Therefore, any critical operation performed using a UID must
      perform an independent verification, such as two-factor
      authentication, SMS-based verification, etc. to ensure that the
      operation is approved by the actual resident the UID is issued
      to.
    </p>
  </li>
  <li>
    <p>
      <strong>UID static PIN and dynamic PIN</strong> (page 7):
    </p>
    <blockquote>
      In order to authenticate (ascertain it is who s/he claims to be) a
      resident needs to provide his/her UID number as well as say a
      biometric marker â€“ such as a fingerprint.
    </blockquote>
    <p>
      Using biometrics while issuing UIDs may be fine.  But using
      biometrics for other important transactions might put the
      resident at risk.  For example, see this BBC news story:
      <a href="http://web.archive.org/web/20050528103727/http://news.bbc.co.uk/2/hi/asia-pacific/4396831.stm">Malaysia Car Thieves Steal Finger</a>.
  </li>
  <li>
    <p>
      <strong>Principles and Requirements</strong> (page 11):
    </p>
    <blockquote>
      Number Generation: The numbers are generated in a random,
      non-repeating sequence.  There are several approaches to doing
      this in the computer science literature.  The algorithm and any
      "seed" chosen to generate IDs should not be made public and
      should be considered a national secret.
    </blockquote>
    <p>
      This violates Shannon's maxim, "The enemy knows the system."
      The security of the system must rely on the secrecy of the seed
      only.  It must not depend on the secrecy of the algorithm.
      Further, as explained in point 2 above, an adversory can
      randomly generate 12 digit number with a high likelihood of it
      being an actual UID to a resident.
    </p>
  </li>
  <li>
    <p>
      <strong>The Checksum</strong> (page 12):
    </p>
    <blockquote>
      There is one scheme that meets our requirements: the Verhoeff
      Scheme.  This scheme is relatively complex, and in the days
      before ubiquitous computing, there was a tendency to avoid it in
      favor of simpler schemes.  In this day and age however, and at
      the scale of the UID, precision must be the goal.  The Verhoeff
      scheme catches all single errors and all adjacent
      transpositions.  It also catches &gt;95% of twin errors and
      &gt;94% of jump transpositions.
    </blockquote>
    <p>
      For those who are curious about what this scheme is, more information can be found at
      <a href="http://www.cs.utsa.edu/~wagner/laws/verhoeff.html">http://www.cs.utsa.edu/~wagner/laws/verhoeff.html</a>
      and <a href="http://en.wikipedia.org/wiki/Verhoeff_algorithm">http://en.wikipedia.org/wiki/Verhoeff_algorithm</a>.
    </p>
  </li>
</ol>
<p>
  <strong>Update on 31 May 2010:</strong> After an email conversation
  with Nandan Nilekani about the points I have documented in this blog
  post, he requested that I send these points in the form a document
  to him so that he can have it reviewed by his team.  I have done so
  today.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/uid-numbering-scheme.html">Read on website</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Coefficient of Variation Function in PostgreSQL</title>
<link>https://susam.net/coefficient-of-variation-function-in-postgresql.html</link>
<guid isPermaLink="false">doyiz</guid>
<pubDate>Thu, 13 May 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Today I learnt how to create an aggregate function in PostgreSQL
  function that wraps the functionality provided by other aggregate
  functions in PosgreSQL.  In this experiment, I created
  a <code>cv()</code> function that calculates the coefficient of
  variation.  The function <code>cv(x)</code> is equivalent
  to <code>stddev(x)</code> / <code>avg(x)</code> where <code>x</code>
  represents the list of data points.
</p>
<h2 id="example-data-table">Example Data Table<a href="#example-data-table"></a></h2>
<pre>
<samp>$ <kbd>cat perf.sql</kbd>
CREATE TABLE performance
(
    name VARCHAR,
    duration DOUBLE PRECISION
);

INSERT INTO performance VALUES ('RAND', 101.0);
INSERT INTO performance VALUES ('ZERO', 157.0);
INSERT INTO performance VALUES ('NONE', 209.0);
INSERT INTO performance VALUES ('TEST', 176.0);
INSERT INTO performance VALUES ('UNIT', 197.0);
INSERT INTO performance VALUES ('LOAD', 193.0);
INSERT INTO performance VALUES ('FREE', 198.0);
$ <kbd>psql statistics</kbd>
psql (8.4.3)
Type "help" for help.
statistics=# <kbd>\i perf.sql</kbd>
DROP TABLE
CREATE TABLE
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
statistics=# <kbd>select * from performance;</kbd>
 name | duration
------+----------
 RAND |      101
 ZERO |      157
 NONE |      209
 TEST |      176
 UNIT |      197
 LOAD |      193
 FREE |      198
(7 rows)

statistics=#</samp>
</pre>
<h2 id="useful-details-to-create-our-function">Useful Details to Create Our Function<a href="#useful-details-to-create-our-function"></a></h2>
<pre>
<samp>statistics=# <kbd>SELECT aggtransfn, aggfinalfn, aggtranstype::regtype, agginitval</kbd>
statistics-# <kbd>FROM pg_aggregate</kbd>
statistics-# <kbd>WHERE aggfnoid='stddev(double precision)'::regprocedure;</kbd>
  aggtransfn  |     aggfinalfn     |    aggtranstype    | agginitval
--------------+--------------------+--------------------+------------
 float8_accum | float8_stddev_samp | double precision[] | {0,0,0}
(1 row)

statistics=# <kbd>SELECT aggtransfn, aggfinalfn, aggtranstype::regtype, agginitval</kbd>
statistics-# <kbd>FROM pg_aggregate</kbd>
statistics-# <kbd>WHERE aggfnoid='avg(double precision)'::regprocedure;</kbd>
  aggtransfn  | aggfinalfn |    aggtranstype    | agginitval
--------------+------------+--------------------+------------
 float8_accum | float8_avg | double precision[] | {0,0,0}
(1 row)

statistics=#</samp>
</pre>
<h2 id="function-definition">Function Definition<a href="#function-definition"></a></h2>
<pre>
<samp>$ <kbd>cat cv.sql</kbd>
CREATE OR REPLACE FUNCTION finalcv(double precision[])
RETURNS double precision
AS $$
    SELECT float8_stddev_samp($1) / float8_avg($1);
$$ LANGUAGE SQL;

CREATE AGGREGATE cv(double precision)
(
    sfunc = float8_accum,
    stype = double precision[],
    finalfunc = finalcv,
    initcond = '{0, 0, 0}'
);</samp>
</pre>
<h2 id="usage">Usage<a href="#usage"></a></h2>
<pre>
<samp>$ <kbd>psql statistics</kbd>
psql (8.4.3)
Type "help" for help.

statistics=# <kbd>select stddev(duration), avg(duration) from performance;</kbd>
      stddev      |       avg
------------------+------------------
 37.1682147873178 | 175.857142857143
(1 row)

statistics=# <kbd>select stddev(duration) / avg(duration) as cv from performance;</kbd>
        cv
-------------------
 0.211354592616754
(1 row)

statistics=# <kbd>\i cv.sql</kbd>
CREATE FUNCTION
CREATE AGGREGATE
statistics=# <kbd>select cv(duration) from performance;</kbd>
        cv
-------------------
 0.211354592616754
(1 row)

statistics=#</samp>
</pre>
<h2 id="bessel-correction">Bessel's Correction<a href="#bessel-correction"></a></h2>
<p>
  Checked whether
  <a href="http://en.wikipedia.org/wiki/Bessel's_correction">Bessel's
  correction</a> was used in the <code>stddev()</code> function of
  PostgreSQL.  Yes, it was used.
</p>
<pre>
<samp>$ <kbd>octave -q</kbd>
octave:1&gt; <kbd>std([101, 157, 209, 176, 197, 193, 198], 0)</kbd>
ans =  37.168
octave:2&gt; <kbd>std([101, 157, 209, 176, 197, 193, 198], 1)</kbd>
ans =  34.411
octave:3&gt;</samp>
</pre>
<p>
  The <code>std()</code> function in MATLAB and GNU Octave applies
  Bessel's correction when invoked with the second argument
  as <code>0</code>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/coefficient-of-variation-function-in-postgresql.html">Read on website</a> |
  <a href="https://susam.net/tag/sql.html">#sql</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Zero Length Regular Expression</title>
<link>https://susam.net/zero-length-regular-expression.html</link>
<guid isPermaLink="false">ywxjf</guid>
<pubDate>Mon, 03 May 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  This post presents a list of how zero length regular expression is
  handled in various tools and programming languages.  All of them
  compile the zero length regular expression pattern and the regular
  expression matches all strings.
</p>
<h2 id="gnu-grep">GNU grep<a href="#gnu-grep"></a></h2>
<pre>
<samp>$ <kbd>printf "foo\nbar\n" | grep ""</kbd>
foo
bar</samp>
</pre>
<h2 id="bsd-grep">BSD grep<a href="#bsd-grep"></a></h2>
<pre>
<samp>$ <kbd>printf "foo\nbar\n" | grep ""</kbd>
foo
bar</samp>
</pre>
<h2 id="perl">Perl<a href="#perl"></a></h2>
<pre>
<samp>$ <kbd>perl -e 'print(("foo" =~ //) . "\n")'</kbd>
1</samp>
</pre>
<h2 id="python">Python<a href="#python"></a></h2>
<pre>
<samp>$ <kbd>python</kbd>
Python 2.5.2 (r252:60911, Jan  4 2009, 21:59:32)
[GCC 4.3.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <kbd>import re; re.compile('').search('foo')</kbd>
&lt;_sre.SRE_Match object at 0x7fc6c5a2c510&gt;</samp>
</pre>
<h2 id="java">Java<a href="#java"></a></h2>
<pre>
<samp>$ <kbd>cat RegexExperiment.java</kbd>
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class RegexExperiment
{
    public static void main(String[] args)
    {
        System.out.println(Pattern.compile("").matcher("foo").find());
    }
}
$ <kbd>javac RegexExperiment.java &amp;&amp; java RegexExperiment</kbd>
true</samp>
</pre>
<h2 id="mzscheme">MzScheme<a href="#mzscheme"></a></h2>
<pre>
<samp>$ <kbd>mzscheme</kbd>
Welcome to MzScheme v4.0.1 [3m], Copyright (c) 2004-2008 PLT Scheme Inc.
&gt; <kbd>(regexp-match "" "foo")</kbd>
("")</samp>
</pre>
<h2 id="clisp">CLISP<a href="#clisp"></a></h2>
<pre>
<samp>$ <kbd>clisp</kbd>
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.44.1 (2008-02-23) &lt;http://clisp.cons.org/&gt;

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

[1]&gt; <kbd>(regexp:match "" "foo")</kbd>
#S(REGEXP:MATCH :START 0 :END 0)</samp>
</pre>
<h2 id="c">C<a href="#c"></a></h2>
<pre>
<samp>$ <kbd>ls -l /usr/lib/libpcre.so*</kbd>
lrwxrwxrwx 1 root root     17 May  3 15:15 /usr/lib/libpcre.so -&gt; libpcre.so.3.12.1
lrwxrwxrwx 1 root root     17 Jan  6 14:57 /usr/lib/libpcre.so.3 -&gt; libpcre.so.3.12.1
-rw-r--r-- 1 root root 162816 Jul 14  2008 /usr/lib/libpcre.so.3.12.1
susam@swift:~$ <kbd>cat pcre.c</kbd>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;pcre.h&gt;

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;pcre.h&gt;

int main(int argc, char **argv)
{
    pcre *p;
    char *re = "";
    char *s  = "foo";
    const char *errmsg;
    int errpos;
    int ovector[10];
    int ret;

    p = pcre_compile(re, 0, &amp;errmsg, &amp;errpos, NULL);
    ret = pcre_exec(p, NULL, s, strlen(s), 0, 0,
                    ovector, sizeof ovector / sizeof *ovector);

    printf(ret &lt; 0 ? "no match\n" : "match\n");
}
$ <kbd>cc -lpcre pcre.c &amp;&amp; ./a.out</kbd>
match</samp>
</pre>
<!-- ### -->
<p>
  <a href="https://susam.net/zero-length-regular-expression.html">Read on website</a> |
  <a href="https://susam.net/tag/perl.html">#perl</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/java.html">#java</a> |
  <a href="https://susam.net/tag/lisp.html">#lisp</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Minimal Installation of WinHTTP API</title>
<link>https://susam.net/minimal-installation-of-winhttp-api.html</link>
<guid isPermaLink="false">draiq</guid>
<pubDate>Wed, 14 Apr 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here are the steps to perform for a minimal download and
  installation of WinHTTP API for C++ so that we have the
  the <code>winhttp.lib</code> and <code>winhttp.h</code> files while
  writing C++ programs using the WinHTTP API:
</p>
<ol>
  <li>Download PSDK-x86.exe
  from <a href="https://web.archive.org/web/20100507044252/http://www.microsoft.com/downloads/details.aspx?familyid=0BAF2B35-C656-4969-ACE8-E4C0C0716ADB&amp;displaylang=en">Microsoft
      Â® Windows ServerÂ® 2003 R2 Platform SDK Web Install</a>.
  </li>
  <li>
    Run the installer, select <em>Custom</em> installation type, clear
    all categories and select <em>Microsoft Windows Core SDK</em> &gt;
    <em>Build Environment</em> &gt; <em>Build Environment (x86
    32-bit)</em>.
  </li>
</ol>
<p>
  After the installation is complete, the <code>winhttp.h</code> file
  can be found at <code>C:\Program Files\Microsoft Platform SDK Server
    2003 R2\Include</code>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/minimal-installation-of-winhttp-api.html">Read on website</a> |
  <a href="https://susam.net/tag/c++.html">#c++</a> |
  <a href="https://susam.net/tag/windows.html">#windows</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Immediate SourceForge Tracker Notification</title>
<link>https://susam.net/immediate-sourceforge-tracker-notification.html</link>
<guid isPermaLink="false">egwey</guid>
<pubDate>Tue, 13 Apr 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here are the steps I followed to prevent the tracker email
  notification sent to a SourceForge mailing list address from being
  held for moderation.
</p>
<ol>
  <li>
    Navigate to <em>Mailman admin</em> &gt; <em>Privacy options</em>
    &gt; <em>Sender filters</em>.  Then
    add <code>noreply@sourceforge.net</code> to the list of non-member
    addresses whose postings should be automatically accepted.
  </li>
  <li>
    Navigate to <em>Mailman admin</em> &gt; <em>Privacy options</em>
    &gt; <em>Recepient filters</em>.  Then
    add <code>noreply@sourceforge.net</code> to alias names (regexps)
    which qualify as explicit to or cc destination names for this
    list.
  </li>
</ol>
<p>
  The first step was necessary because all emails sent by tracker
  has <code>noreply@sourceforge.net</code> as the <em>From</em>
  address.
</p>
<p>
  The second step was necessary because all emails sent by tracker
  has <code>noreply@sourceforge.net</code> as the <em>To</em> address.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/immediate-sourceforge-tracker-notification.html">Read on website</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Lucene Java Example</title>
<link>https://susam.net/lucene-java-example.html</link>
<guid isPermaLink="false">cvlmk</guid>
<pubDate>Sat, 10 Apr 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is a simple program I wrote that makes use of Lucene Java
  3.0.1:
</p>

<pre>
<code>package in.susam;

import java.io.File;
import java.io.IOException;

import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.util.Version;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;

public class LuceneDemo
{
    static final String INDEX_DIR = "index1";

    public static void main(String[] args) throws Exception {
        write();
        search("content", "integer");
        search("tags", "rhyme");
    }

    static void write() throws IOException {
        // Create index
        IndexWriter writer = new IndexWriter(
                FSDirectory.open(new File(INDEX_DIR)),
                new StandardAnalyzer(Version.LUCENE_30),
                true,
                IndexWriter.MaxFieldLength.UNLIMITED);

        Document doc;
        String field;
        String text;

        // Add first document
        doc = new Document();

        field = "title";
        text = "Humpty Dumpty sat on a wall";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "content";
        text = "Humpty Dumpty sat on a wall.\n" +
               "Humpty Dumpty had a great fall;\n" +
               "All the King's horses and all the King's men,\n" +
               "Couldn't put Humpty together again.";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "tags";
        text = "rhyme";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        writer.addDocument(doc);

        // Add second document
        doc = new Document();

        field = "title";
        text = "Jack and Jill went up the hill";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "content";
        text = "Jack and Jill went up the hill\n" +
               "To fetch a pail of water.\n" +
               "Jack fell down and broke his crown,\n" +
               "And Jill came tumbling after.\n";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "tags";
        text = "rhyme";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        writer.addDocument(doc);

        // Add third document
        doc = new Document();

        field = "title";
        text = "Fermat's Last Theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "content";
        text = "In number theory, Fermat's Last Theorem states that no " +
               "three positive integers a, b and c can satisfy the " +
               "equation for a^n + b^n = c^n for any integer value of n " +
               "greater than two.";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "tags";
        text = "math, theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        writer.addDocument(doc);

        // Add fourth document
        doc = new Document();

        field = "title";
        text = "Euler's theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "content";
        text = "Euler's theorem states that if n is a positive integer and " +
               "a is a positive integer coprime to n, then a^phi(n) = 1 " +
               "(mod n) where phi(n) is Euler's totient function.";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "tags";
        text = "math, theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        writer.addDocument(doc);

        writer.close();
    }

    static void search(String field, String query) throws IOException,
                                                          ParseException {
        IndexSearcher searcher = new IndexSearcher(
                FSDirectory.open(new File(INDEX_DIR)), true);
        QueryParser parser = new QueryParser(
                Version.LUCENE_30, field,
                new StandardAnalyzer(Version.LUCENE_30));
        TopDocs docs = searcher.search(parser.parse(query), 10);
        System.out.println("Query: '" + query + "' in '" + field + "'");
        System.out.println("Total hits: " + docs.totalHits);
        System.out.println("");
        for (int i = 0; i &lt; docs.scoreDocs.length; i++) {
            ScoreDoc hit = docs.scoreDocs[i];
            Document doc = searcher.doc(hit.doc);
            System.out.println("#" + i);
            System.out.println("title: " + doc.get("title"));
            System.out.println("content: " + doc.get("content"));
            System.out.println("tags: " + doc.get("tags"));
            System.out.println("id: " + hit.doc);
            System.out.println("score: " + hit.score);
            System.out.println();
        }
    }
}</code>
</pre>
<p>
  Here is the output when the above code is compiled and run:
</p>
<pre>
<samp>Query: 'integer' in 'content'
Total hits: 2

#0
title: Euler's theorem
content: Euler's theorem states that if n is a positive integer and a is a positive integer coprime to n, then a^phi(n) = 1 (mod n) where phi(n) is Euler's totient function.
tags: math, theorem
id: 3
score: 0.34144828

#1
title: Fermat's Last Theorem
content: In number theory, Fermat's Last Theorem states that no three positive integers a, b and c can satisfy the equation for a^n + b^n = c^n for any integer value of n greater than two.
tags: math, theorem
id: 2
score: 0.24144039

Query: 'rhyme' in 'tags'
Total hits: 2

#0
title: Humpty Dumpty sat on a wall
content: Humpty Dumpty sat on a wall.
Humpty Dumpty had a great fall;
All the King's horses and all the King's men,
Couldn't put Humpty together again.
tags: rhyme
id: 0
score: 1.287682

#1
title: Jack and Jill went up the hill
content: Jack and Jill went up the hill
To fetch a pail of water.
Jack fell down and broke his crown,
And Jill came tumbling after.

tags: rhyme
id: 1
score: 1.287682
</samp></pre>
<!-- ### -->
<p>
  <a href="https://susam.net/lucene-java-example.html">Read on website</a> |
  <a href="https://susam.net/tag/java.html">#java</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>ResizableDoubleArray contract() and expand()</title>
<link>https://susam.net/resizabledoublearray-contract-and-expand.html</link>
<guid isPermaLink="false">xlpxy</guid>
<pubDate>Tue, 23 Mar 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is a diff of the changes I made to Apache Common Math's
  <code>ResizableDoubleArray</code> class to investigate how it
  contracts or expands its internal capacity.
</p>
<pre>
<code>Index: src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java
===================================================================
--- src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java (revision 925455)
+++ src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java (working copy)
@@ -157,6 +157,14 @@
     public ResizableDoubleArray(int initialCapacity) {
         setInitialCapacity(initialCapacity);
         internalArray = new double[this.initialCapacity];
+        System.out.println(":::: initialCapacity: " + initialCapacity);
+        System.out.println(":::: expansionMode: " +
+                           (expansionMode == 0 ? "MULTIPLICATIVE_MODE"
+                                               : "ADDITIVE_MODE" ));
+        System.out.println(":::: expansionFactor: " + expansionFactor);
+        System.out.println(":::: contractionCriteria: " +
+                           contractionCriteria);
+        System.out.println();
     }

     /**
@@ -264,14 +272,33 @@
      * @param value to be added to end of array
      */
     public synchronized void addElement(double value) {
+        System.out.println(":::: addElement(" + value + ")");
+        System.out.println(":::: startIndex: " + startIndex);
+        System.out.println(":::: internalArray.length: " +
+                           internalArray.length);
         numElements++;
+        System.out.println(":::: numElements incremented to: " +
+                           numElements);
+
         if ((startIndex + numElements) &gt; internalArray.length) {
+            System.out.println(":::: expanding ...");
             expand();
+            System.out.println(":::: expanded; internalArray.length: " +
+                               internalArray.length);
         }
         internalArray[startIndex + (numElements - 1)] = value;
+        System.out.print(":::: internalArray: ");
+        for (int i = 0; i &lt; startIndex + numElements; i++) {
+            System.out.print(internalArray[i] + ", ");
+        }
+        System.out.println();
         if (shouldContract()) {
+            System.out.println(":::: contracting ...");
             contract();
+            System.out.println(":::: contracted; internalArray.length: " +
+                               internalArray.length);
         }
+        System.out.println();
     }

     /**</code>
</pre>
<p>
  Here is a tiny test program to use <code>ResizableDoubleArray</code>.
</p>
<pre>
<code>import org.apache.commons.math.util.ResizableDoubleArray;

public class RDAContractExpand
{
    public static void main(String[] args)
    {
        ResizableDoubleArray rda = new ResizableDoubleArray(10);
        for (int i = 0; i &lt; 10; i++)
            rda.addElement(i);
    }
}</code>
</pre>
<p>
  Here is the output of the above program:
</p>
<pre>
<samp>:::: initialCapacity: 10
:::: expansionMode: MULTIPLICATIVE_MODE
:::: expansionFactor: 2.0
:::: contractionCriteria: 2.5

:::: addElement(0.0)
:::: startIndex: 0
:::: internalArray.length: 10
:::: numElements incremented to: 1
:::: internalArray: 0.0,
:::: contracting ...
:::: contracted; internalArray.length: 2

:::: addElement(1.0)
:::: startIndex: 0
:::: internalArray.length: 2
:::: numElements incremented to: 2
:::: internalArray: 0.0, 1.0,

:::: addElement(2.0)
:::: startIndex: 0
:::: internalArray.length: 2
:::: numElements incremented to: 3
:::: expanding ...
:::: expanded; internalArray.length: 4
:::: internalArray: 0.0, 1.0, 2.0,

:::: addElement(3.0)
:::: startIndex: 0
:::: internalArray.length: 4
:::: numElements incremented to: 4
:::: internalArray: 0.0, 1.0, 2.0, 3.0,

:::: addElement(4.0)
:::: startIndex: 0
:::: internalArray.length: 4
:::: numElements incremented to: 5
:::: expanding ...
:::: expanded; internalArray.length: 8
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0,

:::: addElement(5.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 6
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0,

:::: addElement(6.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 7
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0,

:::: addElement(7.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 8
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,

:::: addElement(8.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 9
:::: expanding ...
:::: expanded; internalArray.length: 16
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,

:::: addElement(9.0)
:::: startIndex: 0
:::: internalArray.length: 16
:::: numElements incremented to: 10
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,</samp>
</pre>
<!-- ### -->
<p>
  <a href="https://susam.net/resizabledoublearray-contract-and-expand.html">Read on website</a> |
  <a href="https://susam.net/tag/java.html">#java</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Keep Fun in Computing</title>
<link>https://susam.net/keep-fun-in-computing.html</link>
<guid isPermaLink="false">nhhzx</guid>
<pubDate>Tue, 18 Aug 2009 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is a famous quote by Alan J. Perlis taken from
  the <em>Dedication</em> section of the book <em>Structure and
  Interpretation of Computer Programs</em>, 2nd ed. (1996) written by
  Harold Abelson, Gerald Jay Sussman and Julie Sussman.
</p>
<blockquote>
  I think that it's extraordinarily important that we in computer
  science keep fun in computing.  When it started out, it was an awful
  lot of fun.  Of course, the paying customers got shafted every now
  and then, and after a while we began to take their complaints
  seriously.  We began to feel as if we really were responsible for
  the successful, error-free perfect use of these machines.  I don't
  think we are.  I think we're responsible for stretching them,
  setting them off in new directions, and keeping fun in the house.  I
  hope the field of computer science never loses its sense of fun.
</blockquote>
<!-- ### -->
<p>
  <a href="https://susam.net/keep-fun-in-computing.html">Read on website</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/quote.html">#quote</a>
</p>
]]>
</description>
</item>
<item>
<title>Apache Nutch 1.0 Released</title>
<link>https://susam.net/apache-nutch-1-released.html</link>
<guid isPermaLink="false">mjopy</guid>
<pubDate>Sat, 28 Mar 2009 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Today, we received
  <a href="http://www.mail-archive.com/nutch-dev@lucene.apache.org/msg09511.html">an
  announcement</a> from the Nutch committer,
  <a href="http://people.apache.org/%7Esiren/">Sami Siren</a> that
  <a href="http://nutch.apache.org/">Apache Nutch</a> 1.0 has been
  released.  An extract from the announcement:
</p>
<blockquote>
  <p>
    Apache Nutch, a subproject of Apache Lucene, is open source
    web-search software.  It builds on Lucene Java, adding
    web-specifics, such as a crawler, a link-graph database, parsers
    for HTML and other document formats.
  </p>
  <p>
    Apache Nutch 1.0 contains a number of bug fixes and improvements
    such as Solr Integration, new indexing framework and new scoring
    framework just to mention a few.  Details can be found in the
    changes file:
  </p>
  <p>
    <a href="http://svn.apache.org/repos/asf/nutch/tags/release-1.0/CHANGES.txt">http://svn.apache.org/repos/asf/nutch/tags/release-1.0/CHANGES.txt</a>
  </p>
  <p>
    Apache Nutch is available for download from the following download
    page:
    <a href="http://www.apache.org/dyn/closer.cgi/nutch/">http://www.apache.org/dyn/closer.cgi/nutch/</a>
  </p>
</blockquote>
<p>
  I have been waiting for this release for a long time as I made some
  contributions to this project and I wanted them to be available in
  official release so that I didn't have to maintain a separate set of
  patches for myself.  These contributions were also my first major
  contributions to an open source project.  Let me list my
  contributions from
  the <a href="http://svn.apache.org/repos/asf/nutch/tags/release-1.0/CHANGES.txt">CHANGES.txt</a>
  file and then describe how I got involved in this project.
</p>
<pre>
<code>62. NUTCH-559 - NTLM, Basic and Digest Authentication schemes for web/proxy
    server. (Susam Pal via dogacan)

77. NUTCH-44 - Too many search results, limits max results returned from a
    single search. (Emilijan Mirceski and Susam Pal via kubes)

80. NUTCH-612 - URL filtering was disabled in Generator when invoked
    from Crawl (Susam Pal via ab)

81. NUTCH-601 - Recrawling on existing crawl directory (Susam Pal via ab)</code>
</pre>
<p>
  In 2007, while playing with the search engine, I found that there
  was no way for Nutch to authenticate itself to intranet sites
  requiring HTTP authentication.  I modified the module that deals
  with the HTTP protocol so that it could authenticate itself with
  configured credentials when challenged with authentication.  With
  this change, Nutch now supports NTLM, Basic and Digest
  authentication schemes.  More details on this can be found on the
  Nutch JIRA at
  <a href="https://issues.apache.org/jira/browse/NUTCH-559">NUTCH-559</a>.
  and at the Nutch Wiki entry
  on <a href="http://wiki.apache.org/nutch/HttpAuthenticationSchemes">HTTP
  authentication schemes</a>.
</p>
<p>
  <a href="https://issues.apache.org/jira/browse/NUTCH-44">NUTCH-44</a>
  and <a href="https://issues.apache.org/jira/browse/NUTCH-612">NUTCH-612</a>
  were bug fixes.
  <a href="https://issues.apache.org/jira/browse/NUTCH-601">NUTCH-601</a>
  now allows Nutch to perform deeper crawls using a live index.  In
  the days of Nutch 0.9, the crawler complained if a directory with
  the name 'crawl' already existed in the current directory.  As a
  result, before beginning a re-crawl using the <code>bin/nutch
  crawl</code> command, we had to move the existing crawl directory to
  another location.  After a discussion in the community, we agreed
  that it was better to avoid shuffling the crawl directories by
  allowing re-crawls on the same directory.
</p>
<p>
  Nutch users' mailing list has often received emails from users who
  wanted to know how they could enable support for authentication
  schemes in Nutch 0.9 by applying the
  <a href="https://issues.apache.org/jira/secure/attachment/12370428/NUTCH-559v0.5.patch">NUTCH-559
  patch</a>.  Patching Nutch 0.9 was a little cumbersome as the patch
  was generated against the trunk.  With this release, the users can
  now simply download Nutch 1.0 and configure the authentication
  schemes.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/apache-nutch-1-released.html">Read on website</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>From Perl to Pi</title>
<link>https://susam.net/from-perl-to-pi.html</link>
<guid isPermaLink="false">jelap</guid>
<pubDate>Tue, 15 Apr 2008 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I was learning Perl last weekend from the book <em>Learning
  Perl</em>, 3rd Edition by Randal L. Schwartz and Tom Phoenix.  While
  reading the book, I came across these lines:
</p>
<blockquote>
  It's easier to type <code>$pi</code> than \( \pi, \) especially if
  you don't have Unicode.  And it will be easy to maintain the program
  in case the value of \( \pi \) ever changes.<sup>379</sup>
</blockquote>
<p>
  The corresponding footnote mentions:
</p>
<blockquote>
  <em>
    <sup>379</sup> It nearly did change by a legislative act in the
    state of Indiana.
    <a href="http://www.urbanlegends.com/legal/pi_indiana.htm">http://www.urbanlegends.com/legal/pi_indiana.htm</a>
  </em>
</blockquote>
<p>
  I searched the web and found that the original urbanlegends.com
  website is no longer there.  However while searching for it, I came
  across this brilliant piece of humour archived in the article titled
  <a href="https://www.snopes.com/fact-check/alabamas-slice-of-pi/">Alabama's
  Slice of Pi</a> on Snopes.  It is a fictitious report on a state
  legislature redefining the value of \( \pi \) to 3.
</p>
<p>
  The Snopes artile mentions that this piece of humour was first
  posted in a newsgroup.  Then people started circulating it as hoax
  from there.  Here are some of the intriguing and funny bits from it:
</p>
<blockquote>
  Lawson called into question the usefulness of any number that cannot
  be calculated exactly, and suggested that never knowing the exact
  answer could harm students' self-esteem.
</blockquote>
<blockquote>
  Scientists have arbitrarily assumed that space is Euclidean, he
  says.  He points out that a circle drawn on a spherical surface has
  a different value for the ratio of circumfence to diameter.
</blockquote>
<p>
  In fact, with a little geometry we can see that if a
  <a href="https://en.wikipedia.org/wiki/Flatland">flatlander</a>
  living on a globe with diameter \( D \) draws a circle of diameter
  \( d \) assuming that he is on a flat surface, then the ratio of the
  circumference \( c \) to the diameter \( d \) is

  \[
    \frac{c}{d} = \frac{\pi D}{d} \sin{\frac{d}{D}}.
  \]

  Here are a few more excerpts from the Snopes article:
</p>
<blockquote>
  "These nabobs waltzed into the capital with an arrogance that was
  breathtaking," Learned said.  "Their prefatorial deficit resulted in
  a polemical stance at absolute contraposition to the legislature's
  puissance."
</blockquote>
<blockquote>
  One member of the state school board, Lily Ponja, is anxious to get
  the new value of pi into the state's math textbooks, but thinks that
  the old value should be retained as an alternative.  She said, "As
  far as I am concerned, the value of pi is only a theory, and we
  should be open to all interpretations."  She looks forward to
  students having the freedom to decide for themselves what value pi
  should have.
</blockquote>
<p>
  By the way, the real event that the footnote in the
  <em>Learning Perl</em> book mentioned is
  the <a href="http://en.wikipedia.org/wiki/Indiana_Pi_Bill">Indiana
  Pi Bill</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/from-perl-to-pi.html">Read on website</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a> |
  <a href="https://susam.net/tag/book.html">#book</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/quote.html">#quote</a>
</p>
]]>
</description>
</item>
<item>
<title>Writing Boot Sector Code</title>
<link>https://susam.net/writing-boot-sector-code.html</link>
<guid isPermaLink="false">qtplr</guid>
<pubDate>Mon, 19 Nov 2007 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="introduction">Introduction<a href="#introduction"></a></h2>
<p>
  In this article, we discuss how to write our own
  <code>"hello, world"</code> program into the boot sector.  At the
  time of this writing, most such code examples available on the web
  were meant for the Netwide Assembler (NASM).  Very little material
  was available that could be tried with the readily available GNU
  tools like the GNU assembler (as) and the GNU linker (ld).  This
  article is an effort to fill this gap.
</p>
<h2 id="boot-sector">Boot Sector<a href="#boot-sector"></a></h2>
<p>
  When the computer starts, the processor starts executing
  instructions at the memory address 0xffff:0x0000 (CS:IP).  This is
  an address in the BIOS ROM.  The machine instructions at this
  address begins the boot sequence.  In practice, this memory address
  contains a <code>JMP</code> instruction to another address,
  typically 0xf000:0xe05b.  This latter address contains the code to
  perform power-on self test (POST), perform several initialisations,
  find the boot device, load the code from the boot sector into memory
  and execute it.  From here, the code in the boot sector takes
  control.  In IBM-compatible PCs, the boot sector is the first sector
  of a data storage device.  This is 512 bytes in length.  The
  following table shows what the boot sector contains.
</p>
<table class="grid center textcenter">
  <tr>
    <th colspan="2">Address</th>
    <th rowspan="2">Description</th>
    <th rowspan="2">Size in bytes</th>
  </tr>
  <tr>
    <th>Hex</th><th>Dec</th>
  </tr>
  <tr>
    <td>000</td><td>0</td><td>Code</td><td>440</td>
  </tr>
  <tr>
    <td>1b8</td><td>440</td><td>Optional disk signature</td><td>4</td>
  </tr>
  <tr>
    <td>1bc</td><td>444</td><td>0x0000</td><td>2</td>
  </tr>
  <tr>
    <td>1be</td><td>446</td>
    <td>Four 16-byte entries for primary partitions</td><td>64</td>
  </tr>
  <tr>
    <td>1fe</td><td>510</td><td>0xaa55</td><td>2</td>
  </tr>
</table>
<p>
  This type of boot sector found in IBM-compatible PCs is also known
  as master boot record (MBR).  The next two sections explain how to
  write executable code into the boot sector.  Two programs are
  discussed in the these two sections: one that merely prints a
  character and another that prints a string.
</p>
<p>
  The reader is expected to have a working knowledge of x86 assembly
  language programming using GNU assembler.  The details of assembly
  language won't be discussed here.  Only how to write code for boot
  sector will be discussed.
</p>
<p>
  The code examples were verified by using the following tools while
  writing this article:
</p>
<ol>
  <li>Debian GNU/Linux 4.0 (etch)</li>
  <li>GNU assembler (GNU Binutils for Debian) 2.17</li>
  <li>GNU ld (GNU Binutils for Debian) 2.17</li>
  <li>dd (coreutils) 5.97</li>
  <li>DOSBox 0.65</li>
  <li>QEMU 0.8.2</li>
</ol>
<!--
Version information available here:
http://archive.debian.org/debian/dists/etch/main/binary-i386/Packages.gz
-->
<h2 id="print-character">Print Character<a href="#print-character"></a></h2>
<p>
  The following code prints the character 'A' in yellow on a blue
  background:
</p>
<pre>
<code>.code16
.section .text
.globl _start
_start:
  mov $0xb800, %ax
  mov %ax, %ds
  mov $0x1e41, %ax
  xor %di, %di
  mov %ax, (%di)
idle:
  hlt
  jmp idle</code>
</pre>
<p>
  We save the above code in a file, say <code>a.s</code>, then
  assemble and link this code with the following commands:
</p>
<pre>
<code>as -o a.o a.s
ld --oformat binary -o a.com a.o</code>
</pre>
<p>
  The above commands should generate a 15-byte output file
  named <code>a.com</code>.  The <code>.code16</code> directive in the
  source code tells the assembler that this code is meant for 16-bit
  mode.  The <code>_start</code> label is meant to tell the linker
  that this is the entry point in the program.
</p>
<p>
  The video memory of the VGA is mapped to various segments between
  0xa000 and 0xc000 in the main memory.  The colour text mode is
  mapped to the segment 0xb800.  The first two instructions copy
  0xb800 into the data segment register, so that any data offsets
  specified is an offset in this segment.  Then the ASCII code for the
  character 'A' (i.e. 0x41 or 65) is copied into the first location in
  this segment and the attribute (0x1e) of this character to the
  second location.  The higher nibble (0x1) is the attribute for
  background colour and the lower nibble (0xe) is that of the
  foreground colour.  The highest bit of each nibble is the
  intensifier bit.  Depending on the video mode setup, the highest bit
  may also represent a blinking character.  The other three bits
  represent red, green and blue.  This is represented in a tabular
  form below.
</p>
<table class="grid center textcenter">
  <tr>
    <td colspan="8">Attribute</td>
  </tr>
  <tr>
    <td colspan="4">Background</td>
    <td colspan="4">Foreground</td>
  </tr>
  <tr>
    <td>I</td>
    <td>R</td>
    <td>G</td>
    <td>B</td>
    <td>I</td>
    <td>R</td>
    <td>G</td>
    <td>B</td>
  </tr>
  <tr>
    <td>0</td>
    <td>0</td>
    <td>0</td>
    <td>1</td>
    <td>1</td>
    <td>1</td>
    <td>1</td>
    <td>0</td>
  </tr>
  <tr>
    <td colspan="4">0x1</td>
    <td colspan="4">0xe</td>
  </tr>
</table>
<p>
  We can be see from the table that the background colour is dark blue
  and the foreground colour is bright yellow.  We assemble and link
  the code with the <code>as</code> and <code>ld</code> commands
  mentioned earlier and generate an executable binary consisting of
  machine code.
</p>
<p>
  Before writing the executable binary into the boot sector, we might
  want to verify whether the code works correctly with an emulator.
  DOSBox is a pretty good emulator for this purpose.  It is available
  as the <code>dosbox</code> package in Debian.  Here is one way to
  run the executable binary file using DOSBox:
</p>
<pre><code>dosbox -c cls a.com</code></pre>
<p>
  The letter <code>A</code> printed in yellow on a blue foreground
  should appear in the first column of the first row of the screen.
</p>
<p>
  In the <code>ld</code> command earlier to generate the executable
  binary, we used the extension name <code>com</code> for the binary
  file to make DOSBox believe that it is a DOS COM file, i.e. merely
  machine code and data with no headers.  In fact, the <code>--oformat
  binary</code> option in the <code>ld</code> command ensures that the
  output file contains only machine code.  This is why we are able to
  run the binary with DOSBox for verification.  If we do not use
  DOSBox, any extension name or no extension name for the binary would
  suffice.
</p>
<p>
  Once we are satisfied with the output of <code>a.com</code> running
  in DOSBox, we create a boot image file with this command: sector
  with these commands:
</p>
<pre>
<code>cp a.com a.img
echo 55 aa | xxd -r -p | dd seek=510 bs=1 of=hello.img</code>
</pre>
<p>
  This boot image can be tested with DOSBox using the following
  command:
</p>
<pre><code>dosbox -c cls -c 'boot a.img'</code></pre>
<p>
  Yet another way to test this image would be to make QEMU x86 system
  emulator boot using this image.  Here is the command to do so:
</p>
<pre><code>qemu-system-i386 -fda a.img</code></pre>
<p>
  Finally, if you are feeling brave enough, you could write this image
  to the boot sector of an actual physical storage device, such as a
  USB flash drive and then boot your computer with it.  To do so, you
  first need to determine the device file that represents the storage
  device.  There are many ways to do this.  A couple of commands that
  may be helpful to locate the storage device are <code>mount</code>
  and <code>fdisk -l</code>.  Assuming that there is a USB flash drive
  at <code>/dev/sdx</code>, the boot image can be written to its boot
  sector using this command:
</p>
<pre><code>cp a.img /dev/sdx</code></pre>
<p>
  <em>
    CAUTION: You need to be absolutely sure of the device path of the
    device being written to.  The device path <code>/dev/sdx</code> is
    only an example here.  If the boot image is written to the wrong
    device, access to the data on that would be lost.
  </em>
</p>
<p>
  Now booting the computer with this device should show display the
  letter 'A' in yellow on a blue background.
</p>
<h2 id="print-string">Print String<a href="#print-string"></a></h2>
<p>
  The following code prints the string "hello, world" in yellow on a
  blue background:
</p>
<pre>
<code>.code16

.section .text
.globl _start
_start:
  ljmp $0, $start
start:
  mov $0xb800, %ax
  mov %ax, %ds
  xor %di, %di
  mov $message, %si
  mov $0x1e, %ah
print:
  mov %cs:(%si), %al
  mov %ax, (%di)
  inc %si
  inc %di
  inc %di
  cmp $24, %di
  jne print
idle:
  hlt
  jmp idle

.section .data
message:
  .ascii "hello, world"</code>
</pre>
<p>
  The BIOS reads the code from the first sector of the boot device
  into the memory at physical address 0x7c00 and jumps to that
  address.  While most BIOS implementations jump to 0x0000:0x7c00
  (CS:IP) to execute the boot sector code loaded at this address,
  unfortunately there are some BIOS implementations that jump to
  0x07c0:0x0000 instead to reach this address.  We will soon see that
  we are going to use offsets relative to the code segment to locate
  our string and copy it to video memory.  While the physical address
  of the string is always going to be the same regardless of which of
  the two types of BIOS implementations run our program, the offset of
  the string is going to differ based on the BIOS implementation.  If
  the register CS is set to 0 and the register IP is set to 0x7c00
  when the BIOS jumps to our program, the offset of the string is
  going to be greater than 0x7c00.  But if CS and IP are set to 0x07c0
  and 0 respectively, when the BIOS jumps to our program, the offset
  of the string is going to be much smaller.
</p>
<p>
  We cannot know in advance which type of BIOS implementation is going
  to load our program into memory, so we need to prepare our program
  to handle both scenarios: one in which the BIOS executes our program
  by jumping to 0x0000:0x7c00 as well as the other in which the BIOS
  jumps to 0x07c0:0x0000 to execute our program.  We do this by using
  a very popular technique of setting the register CS to 0 ourselves
  by executing a far jump instruction to the code segment 0.  The very
  first instruction in this program that performs <code>ljmp $0,
  $start</code> accomplishes this.
</p>
<p>
  There are two sections in this code.  The text section has the
  executable instructions.  The data section has the string we want to
  print.  The code copies the first byte of the string to the memory
  location 0xb800:0x0000, its attribute to 0xb800:0x0001, the second
  byte of the string to 0xb800:0x0002, its attribute to 0xb800:0x0003
  and so on until it has advanced to 0xb800:0x0018 after having
  written 24 bytes for the 12 characters we need to print.  The
  instruction <code>movb %cs:(%si), %al</code> copies one character
  from the string indexed by the SI register in the code segment into
  the AL register.  We are reading the characters from the code
  segment because we will place the string in the code segment using
  the linker commands discussed later.
</p>
<p>
  However, while testing with DOSBox, things are a little different.
  In DOS, the text section is loaded at an offset 0x0100 in the code
  segment.  This should be specified to the linker while linking so
  that it can correctly resolve the value of the label
  named <code>message</code>.  Therefore we will assemble and link our
  program twice: once for testing it with DOSBox and once again for
  creating the boot image.
</p>
<p>
  To understand the offset at which the data section can be put, it is
  worth looking at how the binary code looks like with a trial linking
  with the following commands:
</p>
<pre>
<code>as -o hello.o hello.s
ld --oformat binary -Ttext 0 -Tdata 40 -o hello.com hello.o
objdump -bbinary -mi8086 -D hello.com
xxd -g1 hello.com</code>
</pre>
<p>
  The <code>-Ttext 0</code> option tells the linker to assume that the
  text section should be loaded at offset 0x0 in the code segment.
  Similarly, the <code>-Tdata 40</code> tells the linker to assume
  that the data section is at offset 0x40.
</p>
<p>
  The <code>objdump</code> command mentioned above disassembles the
  generated binary file.  This shows where the text section and data
  section are placed.
</p>
<pre>
<samp>$ <kbd>objdump -bbinary -mi8086 -D hello.com</kbd>

hello.com:     file format binary


Disassembly of section .data:

00000000 &lt;.data&gt;:
   0:   ea 05 00 00 00          ljmp   $0x0,$0x5
   5:   b8 00 b8                mov    $0xb800,%ax
   8:   8e d8                   mov    %ax,%ds
   a:   31 ff                   xor    %di,%di
   c:   be 40 00                mov    $0x40,%si
   f:   b4 1e                   mov    $0x1e,%ah
  11:   2e 8a 04                mov    %cs:(%si),%al
  14:   89 05                   mov    %ax,(%di)
  16:   46                      inc    %si
  17:   47                      inc    %di
  18:   47                      inc    %di
  19:   83 ff 18                cmp    $0x18,%di
  1c:   75 f3                   jne    0x11
  1e:   f4                      hlt
  1f:   eb fd                   jmp    0x1e
        ...
  3d:   00 00                   add    %al,(%bx,%si)
  3f:   00 68 65                add    %ch,0x65(%bx,%si)
  42:   6c                      insb   (%dx),%es:(%di)
  43:   6c                      insb   (%dx),%es:(%di)
  44:   6f                      outsw  %ds:(%si),(%dx)
  45:   2c 20                   sub    $0x20,%al
  47:   77 6f                   ja     0xb8
  49:   72 6c                   jb     0xb7
  4b:   64                      fs</samp>
</pre>
<p>
  Note that the <samp>...</samp> above indicates zero bytes skipped
  by <code>objdump</code>.  The text section is above these zero bytes
  and the data section is below them.  Let us also see the output of
  the <code>xxd</code> command:
</p>
<pre>
<samp>$ <kbd>xxd -g1 hello.com</kbd>
00000000: ea 05 00 00 00 b8 00 b8 8e d8 31 ff be 40 00 b4  ..........1..@..
00000010: 1e 2e 8a 04 89 05 46 47 47 83 ff 18 75 f3 f4 eb  ......FGG...u...
00000020: fd 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000040: 68 65 6c 6c 6f 2c 20 77 6f 72 6c 64              hello, world</samp>
</pre>
<p>
  Both outputs above show that the text section occupies the first
  0x21 bytes (33 bytes).  The data section is 0xc bytes (12 bytes) in
  length.  Let us create a binary where the region from offset 0x0 to
  offset 0x20 contains the text section and the region from offset
  0x21 to offset 0x2c contains the data section.  The total length of
  the binary would then be 0x2d bytes (45 bytes).  We will create a
  new binary as per this plan.
</p>
<p>
  However while creating the new binary, we should remember that DOS
  would load the binary at offset 0x100, so we need to tell the linker
  to assume 0x100 as the offset of the text section and 0x121 as the
  offset of the data section, so that it resolves the value of the
  label named <code>message</code> accordingly.  Moreover while
  testing with DOS, we must remove the far jump instruction at the top
  of our program because DOS does not load our program at physical
  address 0x7c00 of the memory.  We create a new binary in this manner
  and test it with DOSBox with these commands:
</p>
<pre>
<code>grep -v ljmp hello.s &gt; dos-hello.s
as -o hello.o dos-hello.s
ld --oformat binary -Ttext 100 -Tdata 121 -o hello.com hello.o</code>
</pre>
<p>
  Now we can test this program with DOSBox with the following command:
</p>
<pre><code>dosbox -c cls hello.com</code></pre>
<p>
  If everything looks fine, we assemble and link our program once
  again for boot sector and create a boot image with these commands:
</p>
<pre>
<code>as -o hello.o hello.s
ld --oformat binary -Ttext 7c00 -Tdata 7c21 -o hello.img hello.o
echo 55 aa | xxd -r -p | dd seek=510 bs=1 of=hello.img</code>
</pre>
<p>
  Now we can test this image with DOSBox like this:
</p>
<pre><code>dosbox -c cls -c 'boot hello.img'</code></pre>
<p>
  We can also test the image with QEMU with the following command:
</p>
<pre><code>qemu-system-i386 -fda hello.img</code></pre>
<p>
  Finally, this image can be written to the boot sector as follows:
</p>
<pre><code>cp hello.img /dev/sdx</code></pre>
<p>
  <em>
    CAUTION: Again, one needs to be very careful with the commands
    here.  The device path <code>/dev/sdx</code> is only an example.
    This path must be changed to the path of the actual device one
    wants to write the boot sector binary to.
  </em>
</p>
<p>
  Once written to the device successfully, the computer may be booted
  with this device to display the "hello, world" string on the screen.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/writing-boot-sector-code.html">Read on website</a> |
  <a href="https://susam.net/tag/assembly.html">#assembly</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/linux.html">#linux</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Very Remote Debugging</title>
<link>https://susam.net/very-remote-debugging.html</link>
<guid isPermaLink="false">gsoqd</guid>
<pubDate>Mon, 03 Sep 2007 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  There is a wonderful story about a legendary Lisp debugging story in
  the <a href="https://gigamonkeys.com/book/lather-rinse-repeat-a-tour-of-the-repl.html">second
  chapter</a> of the book <em>Practical Common Lisp</em> by Peter
  Seibel.  Quoting the story here:
</p>
<blockquote>
  <p>
    An even more impressive instance of remote debugging occurred on
    NASA's 1998 Deep Space 1 mission.  A half year after the space
    craft launched, a bit of Lisp code was going to control the
    spacecraft for two days while conducting a sequence of
    experiments.  Unfortunately, a subtle race condition in the code
    had escaped detection during ground testing and was already in
    space.  When the bug manifested in the wild--100 million miles
    away from Earth--the team was able to diagnose and fix the running
    code, allowing the experiments to complete.  One of the
    programmers described it as follows:
  </p>
  <blockquote>
    <p>
      Debugging a program running on a $100M piece of hardware that is
      100 million miles away is an interesting experience.  Having a
      read-eval-print loop running on the spacecraft proved invaluable
      in finding and fixing the problem.
    </p>
  </blockquote>
</blockquote>
<p>
  The original source of this story is an article
  called <a href="https://flownet.com/gat/jpl-lisp.html">Lisping at
  JPL</a> written by Ron Garret in 2002.  This story occurs in the
  section called <em>1994-1999 - Remote Agent</em> of the article.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/very-remote-debugging.html">Read on website</a> |
  <a href="https://susam.net/tag/lisp.html">#lisp</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/quote.html">#quote</a>
</p>
]]>
</description>
</item>
<item>
<title>Character Encoding Bug in Notepad</title>
<link>https://susam.net/character-encoding-bug-in-notepad.html</link>
<guid isPermaLink="false">lrtgk</guid>
<pubDate>Mon, 19 Jun 2006 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="symptoms-of-the-bug">Symptoms of the Bug<a href="#symptoms-of-the-bug"></a></h2>
<p>
  I came across an interesting bug in Notepad last week.  I have
  verified that this bug is reproducible in Windows XP.  Older
  versions might be affected as well.  Here are the steps to reproduce
  the issue:
</p>
<ol>
  <li>
    Open Notepad.
  </li>
  <li>
    Enter the following text exactly as shown here:
    <pre><samp>this app can break</samp></pre>
  </li>
  <li>
    Save the file.
  </li>
  <li>
    Close Notepad.
  </li>
  <li>
    Open the file again with Notepad.
  </li>
</ol>
<p>
  Some users may find Chinese characters instead of the English text
  that was entered.  Others may find 9 boxes instead.
</p>
<p>
  A similar issue happens with other strings like the following ones:
</p>
<pre><samp>Bush hid the facts</samp></pre>
<pre><samp>Bill hid the facts</samp></pre>
<pre><samp>aa aaa aaa</samp></pre>
<pre><samp>bb bbb bbb</samp></pre>
<p>
  We can craft many more such strings that trigger this bug if we
  understand what causes this bug.
</p>
<h2 id="cause-of-the-bug">Cause of the Bug<a href="#cause-of-the-bug"></a></h2>
<p>
  Let us take the following text as an example and try to understand
  what is going on:
</p>
<pre><samp>this app can break</samp></pre>
<p>
  Here are the hexadecimal codes for the characters in the string:
</p>
<pre><samp>74 68 69 73 20 61 70 70 20 63 61 6e 20 62 72 65 61 6b</samp></pre>
<p>
  Now let us try to interpret these 18 bytes as if they represent
  UTF-16LE encoded characters.  After rearranging them to represent
  UTF-16LE encoded characters, we get 9 UTF-16LE encoded characters
  with the following code points:
</p>
<pre>
<samp><a href="https://www.fileformat.info/info/unicode/char/6874/">6874</a> <!--
--><a href="https://www.fileformat.info/info/unicode/char/7369/">7369</a> <!--
--><a href="https://www.fileformat.info/info/unicode/char/6120/">6120</a> <!--
--><a href="https://www.fileformat.info/info/unicode/char/7070/">7070</a> <!--
--><a href="https://www.fileformat.info/info/unicode/char/6320/">6320</a> <!--
--><a href="https://www.fileformat.info/info/unicode/char/6e61/">6e61</a> <!--
--><a href="https://www.fileformat.info/info/unicode/char/6220/">6220</a> <!--
--><a href="https://www.fileformat.info/info/unicode/char/6572/">6572</a> <!--
--><a href="https://www.fileformat.info/info/unicode/char/6b61/">6b61</a></samp>
</pre>
<p>
  Click the codes above to see what the characters they represent look
  like.  Each code represents a CJK ideograph.  CJK stands for
  Chinese, Japanese and Korean.
</p>
<p>
  We can see now that the 18 bytes entered into Notepad also happen to
  represent 9 valid CJK ideographs when encoded using UTF-16LE.  When
  Notepad opens a text file, it finds that the bytes in the file
  happen to be valid UTF-16LE characters, so it attempts to display
  them as the corresponding UTF-16LE characters.  Those who do not
  have CJK fonts installed on their systems see them appear as boxes.
</p>
<h2 id="rewriting-the-file">Rewriting the File<a href="#rewriting-the-file"></a></h2>
<p>
  One of my friends, after playing a little with this bug, asked me,
  "When I create that file for the first time, I see 9 boxes.  But if
  I open the same file, delete everything, type the same thing again,
  close it and open it again, I don't see 9 boxes any more.  I can
  read the English text without issues now.  Does it mean that for
  some reason this time Notepad can interpret them as ASCII encoded
  characters?"
</p>
<p>
  The answer is: No!  In fact it is just the opposite.  This time
  Notepad correctly saves them as UTF-16LE encoded characters.
</p>
<p>
  The first time Notepad saves the data in ASCII encoding.  The next
  time it saves it as UTF-16LE encoded characters.
</p>
<p>
  Let us create the file for the first time and see what each byte
  looks like using the <samp>debug</samp> program of DOS.
</p>
<pre>
<samp>C:\&gt;<kbd>debug foo.txt</kbd>
-<kbd>r ip</kbd>
IP 0100
:
-<kbd>d 100 11f</kbd>
0B66:0100  74 68 69 73 20 61 70 70-20 63 61 6E 20 62 72 65  this app can bre
0B66:0110  61 6B BC 00 72 16 03 D3-13 C8 E8 B3 34 00 55 0B  ak..r.......4.U.
-</samp>
</pre>
<p>
  When we open this file using Notepad and edit, Notepad considers the
  text to be in UTF-16LE encoding due to reasons explained earlier in
  this post.  Therefore it displays the text as CJK ideographs or
  boxes (if CJK fonts are missing).  Now when we erase the text and
  write the same English text again, the English text is saved in
  UTF-16LE encoding (not ASCII encoding like the first time).  This
  can be confirmed with the <samp>debug</samp> command.
</p>
<pre>
<samp>C:\&gt;<kbd>debug a.txt</kbd>
-<kbd>r ip</kbd>
IP 0100
:
-<kbd>d 100 11f</kbd>
0B66:0100  FF FE 74 00 68 00 69 00-73 00 20 00 61 00 70 00   ..t.h.i.s.  .a.p.
0B66:0110  70 00 20 00 63 00 61 00-6E 00 20 00 62 00 72 00   p. .c.a.n.  .b.r.
-</samp>
</pre>
<p>
  The two bytes <samp>FF</samp> and <samp>EE</samp> in the beginning
  is the byte order mark (BOM) for UTF-16LE encoding.  The remaining
  bytes are the characters of the text in UTF-16LE encoding.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/character-encoding-bug-in-notepad.html">Read on website</a> |
  <a href="https://susam.net/tag/windows.html">#windows</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Fork Bunny</title>
<link>https://susam.net/fork-bunny.html</link>
<guid isPermaLink="false">atzub</guid>
<pubDate>Sun, 11 Jun 2006 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Have a close look at this line of shell command that can be executed
  on Bash, Zsh and most POSIX or POSIX-like shells:
</p>
<pre><code>: () { : | : &amp; } ; :</code></pre>
<p>
  Beware!  Don't execute it on your system without understanding the
  consequences completely.  If the command above looks puzzling, that
  is because it is deliberately obfuscated.  Let us simplify it.
</p>
<p>
  The <code>:</code> is a function name.  It could very well have
  been <code>f</code>.  Let us replace <code>:</code>
  with <code>f</code> and see what the code now looks like.
</p>
<pre><code>f () { f | f &amp; } ; f</code></pre>
<p>
  Now it looks familiar.  We have two commands separated by a
  semicolon.  Written in a more legible manner, the code would look
  like this:
</p>
<pre>
<code>f()
{
    f | f &amp;
}

f</code>
</pre>
<p>
  It creates a function <code>f</code> and then executes it.  This
  function calls itself twice recursively.  The control
  operator <code>&amp;</code> executes the recursive calls
  to <code>f</code> asynchronously, i.e. in the background.  The
  number of instances of the function executing keeps growing
  exponentially thereby depleting CPU cycles and memory.  The system
  is rendered unusable soon.
</p>
<p>
  This type of denial-of-service attack by self-replication is also
  known as a <em>fork bunny</em> which is a specific type
  of <em>wabbit</em>.  See the following entry in the Jargon File for
  more information on this:
  <a href="http://catb.org/~esr/jargon/html/W/wabbit.html">wabbit</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/fork-bunny.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Self-Printing Machine Code</title>
<link>https://susam.net/self-printing-machine-code.html</link>
<guid isPermaLink="false">uabwv</guid>
<pubDate>Thu, 27 Oct 2005 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  The following 12-byte program composed of pure x86 machine code
  writes itself to standard output when executed in a DOS environment:
</p>
<pre><code>fc b1 0c ac 92 b4 02 cd 21 e2 f8 c3</code></pre>
<p>
  We can write these bytes to a file with the .COM extension and
  execute it in DOS.  It runs successfully in MS-DOS 6.22, Windows 98,
  as well as in DOSBox and writes a copy of itself to standard output.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#demo">Demo</a></li>
  <li><a href="#quine-conundrums">Quine Conundrums</a></li>
  <li><a href="#proper-quines">Proper Quines</a></li>
  <li><a href="#a-note-on-dos-services">A Note on DOS Services</a></li>
  <li><a href="#writing-to-video-memory-directly">Writing to Video Memory Directly</a></li>
  <li><a href="#boot-program">Boot Program</a></li>
</ul>
<h2 id="demo">Demo<a href="#demo"></a></h2>
<p>
  On a Unix or Linux system, the following commands demonstrate this
  program with the help of DOSBox:
</p>
<pre>
<code>echo fc b1 0c ac 92 b4 02 cd 21 e2 f8 c3 | xxd -r -p &gt; foo.com
dosbox -c 'MOUNT C .' -c 'C:\FOO &gt; C:\OUT.COM' -c 'EXIT'
diff foo.com OUT.COM</code>
</pre>
<p>
  The <code>diff</code> command should produce no output confirming
  that the output of the program is identical to the program itself.
  On an actual MS-DOS 6.22 system or a Windows 98 system, we can
  demonstrate this program in the following manner:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG</kbd>
-<kbd>E 100 fc b1 0c ac 92 b4 02 cd 21 e2 f8 c3</kbd>
-<kbd>N</kbd> FOO.COM
-<kbd>R CX</kbd>
CX 0000
:<kbd>C</kbd>
-<kbd>W</kbd>
Writing 0000C bytes
-<kbd>Q</kbd>

C:\&gt;<kbd>FOO &gt; OUT.COM</kbd>

C:\&gt;<kbd>FC FOO.COM OUT.COM</kbd>
Comparing files FOO.COM and OUT.COM
FC: no differences encountered</samp>
</pre>
<p>
  In the <code>DEBUG</code> session shown above, we use the debugger
  command <code>E</code> to enter the machine code at offset 0x100 of
  the code segment.  Then we use the <code>N</code> command to name
  the file we want to write this machine code to.  The command <code>R
  CX</code> is used to specify that we want to write 0xC (decimal 12)
  bytes to this file.  The <code>W</code> command writes the 12 bytes
  entered at offset 0x100.  The <code>Q</code> command quits the
  debugger.  Then we run the new <code>FOO.COM</code> program while
  redirecting its output to <code>OUT.COM</code>.  Finally, we use
  the <code>FC</code> command to compare the two files and confirm
  that they are exactly the same.
</p>
<p>
  Let us disasssemble this program now and see what it does.  The
  output below is generated using the Netwide Disassembler (NDISASM),
  a tool that comes with Netwide Assembler (NASM):
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x100 foo.com</kbd>
00000100  FC                cld
00000101  B10C              mov cl,0xc
00000103  AC                lodsb
00000104  92                xchg ax,dx
00000105  B402              mov ah,0x2
00000107  CD21              int 0x21
00000109  E2F8              loop 0x103
0000010B  C3                ret</samp>
</pre>
<p>
  When DOS executes a program in .COM file, it loads the machine code
  in the file at offset 0x100 of the code segment chosen by DOS.  That
  is why we ask the disassembler to assume a load address of 0x100
  with the <code>-o</code> command line option.  The first instruction
  clears the direction flag.  The purpose of this instruction is
  explained later.  The next instruction sets the register CL to 0xc
  (decimal 12).  The register CH is already set to 0 by default when a
  .COM program starts.  Thus setting the register CL to 0xc
  effectively sets the entire register CX to 0xc.  The register CX is
  used as a loop counter for the <code>loop 0x103</code> instruction
  that comes later.  Everytime this loop instruction executes, it
  decrements CX and makes a near jump to offset 0x103 if CX is not 0.
  This results in 12 iterations of the loop.
</p>
<p>
  In each iteration of the loop, the instructions from offset 0x103 to
  offset 0x109 are executed.  The <code>lodsb</code> instruction loads
  a byte from address DS:SI into AL.  When DOS starts executing this
  program, DS and SI are set to CS and 0x100 by default, so at the
  beginning DS:SI points to the first byte of the program.
  The <code>xchg</code> instruction exchanges the values in AX and DX.
  Thus the byte we just loaded into AL ends up in DL.  Then we set AH
  to 2 and generate the software interrupt 0x21 (decimal 33) to write
  the byte in DL to standard output.  This is how each iteration reads
  a byte of this program and writes it to standard output.
</p>
<p>
  The <code>lodsb</code> instruction increments or decrements SI
  depending on the state of the direction flag (DF).  When DF is
  cleared, it increments SI.  If DF is set, it decrements SI.  We use
  the <code>cld</code> instruction at the beginning to clear DF, so
  that in each iteration of the loop, SI moves forward to point to the
  next byte of the program.  This is how the 12 iterations of the loop
  write 12 bytes of the program to standard output.  In many DOS
  environments, the DF flag is already in cleared state when a .COM
  program starts, so the CLD instruction could be omitted in such
  environments.  However, there are some environments where DF may not
  be in cleared state when our program starts, so it is a best
  practice to clear DF before relying on it.
</p>
<p>
  Finally, when the loop terminates, we execute the <code>RET</code>
  instruction to terminate the program.
</p>
<h2 id="quine-conundrums">Quine Conundrums<a href="#quine-conundrums"></a></h2>
<p>
  While reading the description of the self-printing program presented
  earlier, one might wonder if it is a quine.  While there is no
  standardised definition of the term <em>quine</em>, it is generally
  accepted that a quine is a computer program that takes no input and
  produces an exact copy of its own source code as its output.  Since
  a quine cannot take any input, tricks involving reading its own
  source code or evaluating itself are ruled out.
</p>
<p>
  For example, this shell script is a valid quine:
</p>
<pre><code>s='s=\47%s\47;printf "$s" "$s"\n';printf "$s" "$s"</code></pre>
<p>
  However, the following shell script is not considered a proper
  quine:
</p>
<pre><code>cat $0</code></pre>
<p>
  The shell script above reads its own source code which is considered
  cheating.  Improper quines like this are often called <em>cheating
  quines</em>.
</p>
<p>
  Is our 12-byte x86 program a quine?  It turns out that we have a
  conundrum.  There is no notion of source code for our program.
  There would have been one if we had written out the source code of
  this program in assembly language.  In such a case we would first
  need to choose an assembler and a proper quine would need to produce
  an exact copy of the assembly language source code (not the machine
  code bytes) for the chosen assembler.  But we are not doing that
  here.  We want the machine code to produce an exact copy of itself.
  There is no source code involved.  We only have machine code.  So we
  could argue that the whole notion of machine code quine is nonsense.
  No machine code quine can exist because there is no source code to
  produce as output.
</p>
<p>
  However, we could also argue that the machine code is the input for
  the CPU that the CPU fetches, decodes and converts to a sequence of
  state changes in the CPU.  If we define a machine code quine to be a
  machine code program that writes its own bytes, then we could say
  that we have a machine code quine here.
</p>
<p>
  Let us now entertain the thought that our 12-byte program is indeed
  a machine code quine.  Now we have a new conundrum.  Is it a proper
  quine?  This program reads its own bytes from memory and writes
  them.  Does that make it a cheating quine?  What would a proper
  quine written in pure machine code even look like?  If we look at
  the shell script quine above, we see that it contains parts of the
  executable part of the script code embedded in a string as data.
  Then we format the string cleverly to produce a new string that
  looks exactly like the entire shell script.  It is a common pattern
  followed in many quines.  The quine does not read its own code but
  it reads some data defined by the code and formats that data to look
  like its own code.  However, in pure machine code like this the
  lines between data and code are blurred.  Even if we try to keep the
  bytes we want to read at a separate place in the memory and treat it
  like data, they would look exactly like machine instructions, so one
  might wonder if there is any point in trying to make a machine quine
  that does not read its own bytes.  Nevertheless the next section
  shows how to accomplish this.
</p>
<h2 id="proper-quines">Proper Quines<a href="#proper-quines"></a></h2>
<p>
  If the thought of a machine code quine program reading its own bytes
  from the memory makes you uncomfortable, here is an adapation of the
  previous program that keeps the machine instructions to be executed
  separate from the data bytes to be read by the program.
</p>
<pre>
<code>fc b3 02 b1 14 be 14 01 ac 92 b4 02 cd 21 e2 f8 4b 75 f0 c3
fc b3 02 b1 14 be 14 01 ac 92 b4 02 cd 21 e2 f8 4b 75 f0 c3</code>
</pre>
<p>
  Here is how we can demonstrate this 40-byte program:
</p>
<pre>
<code>echo fc b3 02 b1 14 be 14 01 ac 92 b4 02 cd 21 e2 f8 4b 75 f0 c3 | xxd -r -p &gt; foo.com
echo fc b3 02 b1 14 be 14 01 ac 92 b4 02 cd 21 e2 f8 4b 75 f0 c3 | xxd -r -p &gt;&gt; foo.com
dosbox -c 'MOUNT C .' -c 'C:\FOO &gt; C:\OUT.COM' -c 'EXIT'
diff foo.com OUT.COM</code>
</pre>
<p>
  Here is the disassembly:
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x100 foo.com</kbd>
00000100  FC                cld
00000101  B302              mov bl,0x2
00000103  B114              mov cl,0x14
00000105  BE1401            mov si,0x114
00000108  AC                lodsb
00000109  92                xchg ax,dx
0000010A  B402              mov ah,0x2
0000010C  CD21              int 0x21
0000010E  E2F8              loop 0x108
00000110  4B                dec bx
00000111  75F0              jnz 0x103
00000113  C3                ret
00000114  FC                cld
00000115  B302              mov bl,0x2
00000117  B114              mov cl,0x14
00000119  BE1401            mov si,0x114
0000011C  AC                lodsb
0000011D  92                xchg ax,dx
0000011E  B402              mov ah,0x2
00000120  CD21              int 0x21
00000122  E2F8              loop 0x11c
00000124  4B                dec bx
00000125  75F0              jnz 0x117
00000127  C3                ret</samp>
</pre>
<p>
  The first 20 bytes is the executable part of the program.  The next
  20 bytes is the data read by the program.  The executable bytes are
  identical to the data bytes.  The executable part of the program has
  an outer loop that iterates twice.  In each iteration, it reads the
  data bytes and writes them to standard output.  Therefore, in two
  iterations of the outer loop, it writes the data bytes twice.  In
  this manner, the output is identical to the program itself.
</p>
<p>
  Here is another simpler 32-byte quine based on this approach:
</p>
<pre>
<code>b8 23 09 fe c0 a2 20 01 ba 10 01 cd 21 cd 21 c3
b8 23 09 fe c0 a2 20 01 ba 10 01 cd 21 cd 21 c3</code>
</pre>
<p>
  Here are the commands to demostrate this quine:
</p>
<pre>
<code>echo b8 23 09 fe c0 a2 20 01 ba 10 01 cd 21 cd 21 c3 | xxd -r -p &gt; foo.com
echo b8 23 09 fe c0 a2 20 01 ba 10 01 cd 21 cd 21 c3 | xxd -r -p &gt;&gt; foo.com
dosbox -c 'MOUNT C .' -c 'C:\FOO &gt; C:\OUT.COM' -c 'EXIT'
diff foo.com OUT.COM</code>
</pre>
<p>
  Here is the disassembly:
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x100 foo.com</kbd>
00000100  B82309            mov ax,0x923
00000103  FEC0              inc al
00000105  A22001            mov [0x120],al
00000108  BA1001            mov dx,0x110
0000010B  CD21              int 0x21
0000010D  CD21              int 0x21
0000010F  C3                ret
00000110  B82309            mov ax,0x923
00000113  FEC0              inc al
00000115  A22001            mov [0x120],al
00000118  BA1001            mov dx,0x110
0000011B  CD21              int 0x21
0000011D  CD21              int 0x21
0000011F  C3                ret</samp>
</pre>
<p>
  This example too has two parts.  The first half has the executable
  bytes and the second half has the data bytes.  Both parts are
  identical.  This example sets AH to 9 in the first instruction and
  then later uses <code>int 0x21</code> to invoke the DOS service that
  prints a dollar-terminated string beginning at the address specifed
  in DS:DX.  When a .COM program starts, DS already points to the
  current code segment, so we don't have to set it explicitly.  The
  dollar symbol has an ASCII code of 0x24 (decimal 36).  We need to be
  careful about not having this value anywhere within the the data
  bytes or this DOS function would prematurely stop printing our data
  bytes as soon as it encounters this value.  That is why we set AL to
  0x23 in the first instruction, then increment it to 0x24 in the
  second instruction and then copy this value to the end of the data
  bytes in the third instruction.  Finally, we execute <code>int
  0x21</code> twice to write the data bytes twice to standard output,
  so that the output matches the program itself.
</p>
<p>
  While both these programs take care not to read the same memory
  region that is being executed by the CPU, the data bytes they read
  look exactly like the executable bytes.  This is what I meant when I
  mentioned earlier that the lines between code and data are blurred
  in an exercise like this.  This is why I don't really see a point in
  keeping the executable bytes separate from the data bytes while
  writing machine code quines.
</p>
<h2 id="a-note-on-dos-services">A Note on DOS Services<a href="#a-note-on-dos-services"></a></h2>
<p>
  The self-printing programs presented above use <code>int 0x21</code>
  which offers DOS services that support various input/output
  functions.  In the first two programs, we selected the function to
  write a character to standard output by setting AH to 2 before
  invoking this software interrupt.  In the next program, we selected
  the function to write a dollar-terminated string to standard output
  by setting AH to 9.
</p>
<p>
  The <code>ret</code> instruction in the end too relies on DOS
  services.  When a .COM program starts, the register SP contains
  0xfffe.  The stack memory locations at offset 0xfffe and 0xffff
  contain 0x00 and 0x00 respectively.  Further, the memory address at
  offset 0x0000 contains the instruction <code>int 0x20</code> which
  is a DOS service that terminates the program.  As a result,
  executing the <code>ret</code> instruction pops 0x0000 off the stack
  at 0xfffe and loads it into IP.  This results in the
  instruction <code>int 0x20</code> at offset 0x0000 getting executed.
  This instruction terminates the program and returns to DOS.
</p>
<p>
  Relying on DOS services gives us a comfortable environment to work
  with.  In particular, DOS implements the notion of <em>standard
  output</em> which lets us redirect standard output to a file.  This
  lets us conveniently compare the original program file and the
  output file with the <code>FC</code> command and confirm that they
  are identical.
</p>
<p>
  But one might wonder if we could avoid relying on DOS services
  completely and still write a program that prints its own bytes to
  screen.  We definitely can.  We could write directly to video memory
  at address 0xb800:0x0000 and show the bytes of the program on
  screen.  We could also forgo DOS completely and let BIOS load our
  program from the boot sector and execute it.  The next two sections
  discuss these things.
</p>
<h2 id="writing-to-video-memory-directly">Writing to Video Memory Directly<a href="#writing-to-video-memory-directly"></a></h2>
<p>
  Here is an example of an 18-byte self-printing program that writes
  directly to the video memory at address 0xb800:0x0000.
</p>
<pre><code>fc b4 b8 8e c0 31 ff b1 12 b4 0a ac ab e2 fc f4 eb fd</code></pre>
<p>
  Here are the commands to create and run this program:
</p>
<pre>
<code>echo fc b4 b8 8e c0 31 ff b1 12 b4 0a ac ab e2 fc f4 eb fd | xxd -r -p &gt; foo.com
dosbox foo.com</code>
</pre>
<p>
  With the default code page active, i.e. with code page 437 active,
  the program should display an output that looks approximately like
  the following and halt:
</p>
<pre><samp>&#x207F;&#x2524;&#x2555;&#xC4;&#x2514;&#x31;&#xA0;&#x2592;&#x2195;&#x2524;&#x25D9;&#xBC;&#xBD;&#x393;&#x207F;&#x2320;&#x3B4;&#xB2;</samp></pre>
<p>
  Now of course this type of output looks gibberish but there is a
  quick and dirty way to confirm that this output indeed represents
  the bytes of our program.  We can use the <code>TYPE</code> command
  of DOS to print the program and check if the symbols that appear in
  its output seem consistent with the output above.  Here is an
  example:
</p>
<pre>
<samp>C:\&gt;<kbd>TYPE FOO.COM</kbd>
&#x207F;&#x2524;&#x2555;&#xC4;&#x2514;&#x31;&#xA0;&#x2592;&#x2195;&#x2524;
          &#xBC;&#xBD;&#x393;&#x207F;&#x2320;&#x3B4;&#xB2;
C:\&gt;</samp>
</pre>
<p>
  This output looks very similar to the previous one except that the
  byte value 0x0a is rendered as a line break in this output whereas
  in the previous output this byte value is represented as a circle in
  a box.  This method of visually inspecting the output would not have
  worked very well if there were any control characters such as
  backspace or carriage return that result in characters being erased
  in the displayed output.
</p>
<p>
  A proper way to verify that the output of the program represents the
  bytes of the program would be to take each symbol from the output of
  the program, then look it up in a chart for code page 437 and
  confirm that the byte value of each symbol matches each byte value
  that makes the program.  Here is one such chart that approximates
  the symbols in code page 437 with Unicode
  symbols: <a href="code/cp437/cp437.html">cp437.html</a>.
</p>
<p>
  Here is the disassembly of the above program:
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x100 foo.com</kbd>
00000100  FC                cld
00000101  B4B8              mov ah,0xb8
00000103  8EC0              mov es,ax
00000105  31FF              xor di,di
00000107  B112              mov cl,0x12
00000109  B40A              mov ah,0xa
0000010B  AC                lodsb
0000010C  AB                stosw
0000010D  E2FC              loop 0x10b
0000010F  F4                hlt
00000110  EBFD              jmp short 0x10f</samp>
</pre>
<p>
  This program sets ES to 0xb800 and DI to 0.  Thus ES:DI points to
  the video memory at address 0xb800:0x0000.  DS:SI points to the
  first instruction of this program by default.  Further AH is set to
  0xa.  This is used to specify the colour attribute of the text to be
  displayed on screen.  Each iteration of the loop in this program
  loads a byte of the program and writes it along with the colour
  attribute to video memory.  The <code>lodsb</code> instruction loads
  a byte of the program from the memory address specified by DS:SI
  into AL and increments SI by 1.  AH is already set to 0xa.  The
  value 0xa (binary 00001010) here specifies black as the background
  colour and bright green as the foreground colour.
  The <code>stosw</code> instruction stores a word from AX to the
  memory address specified by ES:DI and increments DI by 2.  In this
  manner, the byte in AL and its colour attribute in AH gets copied to
  the video memory.
</p>
<p>
  Once again, if you are not happy about the program reading its own
  executable bytes, we can keep the bytes we read separate from the
  bytes the CPU executes.  Here is a 54-byte program that does this:
</p>
<pre>
<code>fc b3 02 b4 b8 8e c0 31 ff be 1b 01 b9 1b 00 b4
0a ac ab e2 fc 4b 75 f1 f4 eb fd fc b3 02 b4 b8
8e c0 31 ff be 1b 01 b9 1b 00 b4 0a ac ab e2 fc
4b 75 f1 f4 eb fd</code>
</pre>
<p>
  Here is how we can create and run this program:
</p>
<pre>
<code>echo fc b3 02 b4 b8 8e c0 31 ff be 1b 01 b9 1b 00 b4 | xxd -r -p &gt; foo.com
echo 0a ac ab e2 fc 4b 75 f1 f4 eb fd fc b3 02 b4 b8 | xxd -r -p &gt;&gt; foo.com
echo 8e c0 31 ff be 1b 01 b9 1b 00 b4 0a ac ab e2 fc | xxd -r -p &gt;&gt; foo.com
echo 4b 75 f1 f4 eb fd | xxd -r -p &gt;&gt; foo.com
dosbox foo.com</code>
</pre>
<p>
  With code page 437 active, the output should look approximately like
  this:
</p>
<pre><samp>&#x207F;&#x2502;&#x263B;&#x2524;&#x2555;&#xC4;&#x2514;&#x31;&#xA0;&#x255B;&#x2190;&#x263A;&#x2563;&#x2190;&#x20;&#x2524;&#x25D9;&#xBC;&#xBD;&#x393;&#x207F;&#x4B;&#x75;&#xB1;&#x2320;&#x3B4;&#xB2;&#x207F;&#x2502;&#x263B;&#x2524;&#x2555;&#xC4;&#x2514;&#x31;&#xA0;&#x255B;&#x2190;&#x263A;&#x2563;&#x2190;&#x20;&#x2524;&#x25D9;&#xBC;&#xBD;&#x393;&#x207F;&#x4B;&#x75;&#xB1;&#x2320;&#x3B4;&#xB2;</samp></pre>
<p>
  We can clearly see in this output that the first 27 bytes of output
  are identical to the next 27 bytes of the output.  Like the proper
  quines discussed earlier, this one too has two halves that are
  identical to each other.  The executable code in the first half
  reads the data bytes from the second half and prints the data bytes
  twice so that the output bytes is an exact copy of all 54 bytes in
  the program.  Here is the disassembly:
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x100 foo.com</kbd>
00000100  FC                cld
00000101  B302              mov bl,0x2
00000103  B4B8              mov ah,0xb8
00000105  8EC0              mov es,ax
00000107  31FF              xor di,di
00000109  BE1B01            mov si,0x11b
0000010C  B91B00            mov cx,0x1b
0000010F  B40A              mov ah,0xa
00000111  AC                lodsb
00000112  AB                stosw
00000113  E2FC              loop 0x111
00000115  4B                dec bx
00000116  75F1              jnz 0x109
00000118  F4                hlt
00000119  EBFD              jmp short 0x118
0000011B  FC                cld
0000011C  B302              mov bl,0x2
0000011E  B4B8              mov ah,0xb8
00000120  8EC0              mov es,ax
00000122  31FF              xor di,di
00000124  BE1B01            mov si,0x11b
00000127  B91B00            mov cx,0x1b
0000012A  B40A              mov ah,0xa
0000012C  AC                lodsb
0000012D  AB                stosw
0000012E  E2FC              loop 0x12c
00000130  4B                dec bx
00000131  75F1              jnz 0x124
00000133  F4                hlt
00000134  EBFD              jmp short 0x133</samp>
</pre>
<p>
  This disassembly is rather long but we can clearly see that the
  bytes from offset 0x100 to offset 0x11a are identical to the bytes
  from offset 0x11b to 0x135.  These are the bytes we see in the
  output of the program too.
</p>
<h2 id="boot-program">Boot Program<a href="#boot-program"></a></h2>
<p>
  The 32-byte program below writes itself to video memory when
  executed from the boot sector:
</p>
<pre><code>ea 05 7c 00 00 fc b8 00 b8 8e c0 8c c8 8e d8 31
ff be 00 7c b9 20 00 b4 0a ac ab e2 fc f4 eb fd</code></pre>
<p>
  We can create a boot image that contains these bytes, write it to
  the boot sector of a drive and boot an IBM PC compatible computer
  with it.  On booting, this program prints its own bytes on the
  screen.
</p>
<p>
  On a Unix or Linux system, the following commands can be used to
  create a boot image with the above program:
</p>
<pre>
<code>echo ea 05 7c 00 00 fc b8 00 b8 8e c0 8c c8 8e d8 31 | xxd -r -p &gt; boot.img
echo ff be 00 7c b9 20 00 b4 0a ac ab e2 fc f4 eb fd | xxd -r -p &gt;&gt; boot.img
echo 55 aa | xxd -r -p | dd seek=510 bs=1 of=boot.img</code>
</pre>
<p>
  Now we can test this boot image using DOSBox with the following
  command:
</p>
<pre><code>dosbox -c cls -c 'boot boot.img'</code></pre>
<p>
  We can also test this image using QEMU x86 system emulator as
  follows:
</p>
<pre><code>qemu-system-i386 -fda boot.img</code></pre>
<p>
  We could also write this image to the boot sector of an actual
  physical storage device, such as a USB flash drive and then boot the
  computer with it.  Here is an example command that writes the boot
  image to the drive represented by the device
  path <code>/dev/sdx</code>.
</p>
<pre><code>cp a.img /dev/sdx</code></pre>
<p>
  <em>
    CAUTION: You need to be absolutely sure of the device path of the
    device being written to.  The device path <code>/dev/sdx</code> is
    only an example here.  If the boot image is written to the wrong
    device, access to the data on that would be lost.
  </em>
</p>
<p>
  On testing this boot image with an emulator or a real computer, the
  output should look approximately like this:
</p>
<pre><samp>&#x3A9;&#x2663;&#x7C;&#x20;&#x20;&#x207F;&#x2555;&#x20;&#x2555;&#xC4;&#x2514;&#xEE;&#x255A;&#xC4;&#x256A;&#x31;&#xA0;&#x255B;&#x20;&#x7C;&#x2563;&#x20;&#x20;&#x2524;&#x25D9;&#xBC;&#xBD;&#x393;&#x207F;&#x2320;&#x3B4;&#xB2;</samp></pre>
<p>
  This looks like gibberish, however every symbol in the above output
  corresponds to a byte of the program mentioned earlier.  For
  example, the first symbol (omega) represents the byte value 0xea,
  the second symbol (club) represents the byte value 0x05 and so on.
  The chart at <a href="code/cp437/cp437.html">cp437.html</a> can be
  used to confirm that every symbol in the output indeed represents
  every byte of the program.
</p>
<p>
  Here is the disassembly of the program:
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x7c00 boot.img</kbd>
00007C00  EA057C0000        jmp 0x0:0x7c05
00007C05  FC                cld
00007C06  B800B8            mov ax,0xb800
00007C09  8EC0              mov es,ax
00007C0B  8CC8              mov ax,cs
00007C0D  8ED8              mov ds,ax
00007C0F  31FF              xor di,di
00007C11  BE007C            mov si,0x7c00
00007C14  B92000            mov cx,0x20
00007C17  B40A              mov ah,0xa
00007C19  AC                lodsb
00007C1A  AB                stosw
00007C1B  E2FC              loop 0x7c19
00007C1D  F4                hlt
00007C1E  EBFD              jmp short 0x7c1d
00007C20  0000              add [bx+si],al
00007C22  0000              add [bx+si],al
...</samp>
</pre>
<p>
  The ellipsis in the end represents the remainder of the bytes that
  contains zeroes and the boot sector magic bytes 0x55 and 0xaa in the
  end.  They have been omitted here for the sake of brevity.
</p>
<p>
  When a computer boots, the BIOS reads the boot sector code from the
  first sector of the boot device into the memory at physical address
  0x7c00 and jumps to this address.  Most BIOS implementations jump to
  0x0000:0x7c00 but there are some implementations that jump to
  0x07c0:0x0000 instead.  Both these jumps are jumps to the same
  physical address 0x7c00 but this difference poses a problem for us
  because the offsets in our program depend on which jump the BIOS
  executed.  In order to ensure that our program can run with both
  types of BIOS implementations, we use a popular trick of having the
  first instruction of our program execute a jump to address
  0x0000:0x7c05 in order to reach the second instruction.  This sets
  the register CS to 0 and IP to 0x7c05 and we don't have to worry
  about the differences between BIOS implementations anymore.  We can
  now pretend as if a BIOS implementation that jumps to 0x0000:0x7c00
  is going to load our program.
</p>
<p>
  The remainder of the program is similar to the one in the previous
  section.  However, there are some small but important differences.
  While the DOS environment guarantees that AH and CH are initialised
  to 0 when a .COM program starts, the BIOS offers no such guarantee
  while loading and executing a boot program.  This is why we use the
  registers AX and CX (as opposed to only AH and CL) in
  the <code>mov</code> instructions to initialise them.  Similarly,
  while DOS initialises SI to 0x100 when a .COM program starts, for a
  boot program, we set the register SI ourselves.
</p>
<p>
  If you feel uncomfortable about calling the above program a quine
  because it reads its own bytes from the memory, we could have the
  program read the bytes it needs to print from a separate place in
  memory.  We do not execute these bytes.  We only read them and copy
  them to video memory.  The following 76-byte program does this:
</p>
<pre>
<code>ea 05 7c 00 00 fc bb 02 00 b8 00 b8 8e c0 8c c8
8e d8 31 ff be 26 7c b9 26 00 b4 0a ac ab e2 fc
4b 75 f1 f4 eb fd ea 05 7c 00 00 fc bb 02 00 b8
00 b8 8e c0 8c c8 8e d8 31 ff be 26 7c b9 26 00
b4 0a ac ab e2 fc 4b 75 f1 f4 eb fd</code>
</pre>
<p>
  Here is how we can create a boot image with this:
</p>
<pre>
<code>echo ea 05 7c 00 00 fc bb 02 00 b8 00 b8 8e c0 8c c8 | xxd -r -p &gt; boot.img
echo 8e d8 31 ff be 26 7c b9 26 00 b4 0a ac ab e2 fc | xxd -r -p &gt;&gt; boot.img
echo 4b 75 f1 f4 eb fd ea 05 7c 00 00 fc bb 02 00 b8 | xxd -r -p &gt;&gt; boot.img
echo 00 b8 8e c0 8c c8 8e d8 31 ff be 26 7c b9 26 00 | xxd -r -p &gt;&gt; boot.img
echo b4 0a ac ab e2 fc 4b 75 f1 f4 eb fd | xxd -r -p &gt;&gt; boot.img
echo 55 aa | xxd -r -p | dd seek=510 bs=1 of=boot.img</code>
</pre>
<p>
  Here are the commands to test this boot image:
</p>
<pre><code>dosbox -c cls -c 'boot boot.img'
qemu-system-i386 -fda boot.img</code></pre>
<p>
  The output should look like this:
</p>
<pre><samp>&#x3A9;&#x2663;&#x7C;&#x20;&#x20;&#x207F;&#x2557;&#x263B;&#x20;&#x2555;&#x20;&#x2555;&#xC4;&#x2514;&#xEE;&#x255A;&#xC4;&#x256A;&#x31;&#xA0;&#x255B;&#x26;&#x7C;&#x2563;&#x26;&#x20;&#x2524;&#x25D9;&#xBC;&#xBD;&#x393;&#x207F;&#x4B;&#x75;&#xB1;&#x2320;&#x3B4;&#xB2;&#x3A9;&#x2663;&#x7C;&#x20;&#x20;&#x207F;&#x2557;&#x263B;&#x20;&#x2555;&#x20;&#x2555;&#xC4;&#x2514;&#xEE;&#x255A;&#xC4;&#x256A;&#x31;&#xA0;&#x255B;&#x26;&#x7C;&#x2563;&#x26;&#x20;&#x2524;&#x25D9;&#xBC;&#xBD;&#x393;&#x207F;&#x4B;&#x75;&#xB1;&#x2320;&#x3B4;&#xB2;</samp></pre>
<p>
  Here is the disassembly of this program:
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x7c00 boot.img</kbd>
00007C00  EA057C0000        jmp 0x0:0x7c05
00007C05  FC                cld
00007C06  BB0200            mov bx,0x2
00007C09  B800B8            mov ax,0xb800
00007C0C  8EC0              mov es,ax
00007C0E  8CC8              mov ax,cs
00007C10  8ED8              mov ds,ax
00007C12  31FF              xor di,di
00007C14  BE267C            mov si,0x7c26
00007C17  B92600            mov cx,0x26
00007C1A  B40A              mov ah,0xa
00007C1C  AC                lodsb
00007C1D  AB                stosw
00007C1E  E2FC              loop 0x7c1c
00007C20  4B                dec bx
00007C21  75F1              jnz 0x7c14
00007C23  F4                hlt
00007C24  EBFD              jmp short 0x7c23
00007C26  EA057C0000        jmp 0x0:0x7c05
00007C2B  FC                cld
00007C2C  BB0200            mov bx,0x2
00007C2F  B800B8            mov ax,0xb800
00007C32  8EC0              mov es,ax
00007C34  8CC8              mov ax,cs
00007C36  8ED8              mov ds,ax
00007C38  31FF              xor di,di
00007C3A  BE267C            mov si,0x7c26
00007C3D  B92600            mov cx,0x26
00007C40  B40A              mov ah,0xa
00007C42  AC                lodsb
00007C43  AB                stosw
00007C44  E2FC              loop 0x7c42
00007C46  4B                dec bx
00007C47  75F1              jnz 0x7c3a
00007C49  F4                hlt
00007C4A  EBFD              jmp short 0x7c49
00007C4C  0000              add [bx+si],al
00007C4E  0000              add [bx+si],al
...</samp></pre>
<p>
  This program has two identical halves.  The first half from offset
  0x7c00 to offset 0x7c25 are executable bytes.  The second half from
  offset 0x7c26 to 0x7c4b are the data bytes read by the executable
  bytes.  The executable part of the code has an outer loop that uses
  the register BX as the counter variable.  It sets BX to 2 so that
  the outer loop iterates twice.  In each iteration, it reads data
  bytes from the second half of the program and prints them.  The code
  to read bytes and print them is very similar to our earlier program.
  Since the data bytes in the second half are identical to the
  executable bytes in the first half, printing the data bytes twice
  amounts to printing all bytes of the program.
</p>
<p>
  While this program does avoid reading the bytes that the CPU
  executes, the data bytes look exactly like the executable bytes.
  Although I do not see any point in trying to avoid reading
  executable bytes in an exercise like, this program serves as an
  example of a self-printing boot program that does not execute the
  bytes it reads.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/self-printing-machine-code.html">Read on website</a> |
  <a href="https://susam.net/tag/assembly.html">#assembly</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/dos.html">#dos</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Vim Sudo Write Trick</title>
<link>https://susam.net/vim-sudo-write-trick.html</link>
<guid isPermaLink="false">qjgnc</guid>
<pubDate>Thu, 25 Aug 2005 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="trick">The Trick<a href="#trick"></a></h2>
<p>
  You open a file, edit it and save it only to get the E45 error
  message that says:
</p>
<pre><samp>E45: 'readonly' option is set (add ! to override)</samp></pre>
<p>
  You now realise that only root can edit the file.  What do you?
  Start over?  No, instead try this:
</p>
<pre><code>:w !sudo tee "%"</code></pre>
<p>
  I learnt this trick recently from the comment section
  of <a href="https://web.archive.org/web/20051120054527/http://www.vim.org/tips/tip.php?tip_id=975">Tip
  #975</a> on the Vim Tips website.
</p>
<h2 id="explanation">Explanation<a href="#explanation"></a></h2>
<p>
  How does the <code>:w !sudo tee "%"</code> trick work?  Let us look
  at the command part-by-part:
</p>
<ul>
  <li>
    <p><code>:w !{cmd}</code></p>
    <p>
      Execute <code>{cmd}</code> with all lines in buffer as standard
      input.
    </p>
  </li>
  <li>
    <p><code>"%"</code></p>
    <p>
      The <code>%</code> is replaced with the current filename.  The
      quotes around it keeps the filename as a single argument even if
      it contains whitespace.
    </p>
  </li>
  <li>
    <p><code>tee {file}</code></p>
    <p>
      The <code>tee</code> command is a Unix command (not a Vim
      command).  It copies standard input to standard output
      and <code>{file}</code>.
    </p>
  </li>
</ul>
<h2 id="more">More Information<a href="#more"></a></h2>
<p>
  For more information on this command, enter the following commands
  in Vim:
</p>
<pre>
<code>:help :w_c
:help current-file
:help :_%</code>
</pre>
<p>
  Also, enter the following command in shell:
</p>
<pre><code>man tee</code></pre>
<p>
  I hope this was fun!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/vim-sudo-write-trick.html">Read on website</a> |
  <a href="https://susam.net/tag/vim.html">#vim</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Cal 9 1752</title>
<link>https://susam.net/cal-9-1752.html</link>
<guid isPermaLink="false">wwltj</guid>
<pubDate>Tue, 14 Sep 2004 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  A very interesting thing I came across recently while learning Unix
  is an apparent gap in the calendar for Sep 1752.  Here is how
  the <code>cal</code> output for this month appears on a Unix or
  Linux system:
</p>
<pre>
<samp>$ <kbd>cal 9 1752</kbd>
   September 1752
Su Mo Tu We Th Fr Sa
       1  2 14 15 16
17 18 19 20 21 22 23
24 25 26 27 28 29 30</samp>
</pre>
<p>
  In the SunOS 5.9 manual page
  for <a href="https://docs.oracle.com/cd/E19683-01/817-3936/6mjgdbv29/index.html">cal(1)</a>,
  this gap is explained as follows:
</p>
<!-- SunOS 5.9 was released on 28 May 2002 -->
<blockquote>
  An unusual calendar is printed for September 1752.  That is the
  month 11 days were skipped to make up for lack of leap year
  adjustments.  To see this calendar, type: <code>cal 9 1752</code>
</blockquote>
<p>
  Similarly, FreeBSD 5.0 has the following note in its manual page
  for <a href="https://www.freebsd.org/cgi/man.cgi?query=cal&amp;sektion=1&amp;manpath=FreeBSD+5.0-RELEASE">cal(1)</a>:
</p>
<!-- FreeBSD 5.0-RELEASE was released in Jan 2003 -->
<blockquote>
  <p>
    -s <em>country_code</em>
  </p>
  <p style="margin-left: 2em">
    Assume the switch from Julian to Gregorian Calendar at the date
    associated with the <em>country_code</em>.  If not
    specified, <strong>ncal</strong> tries to guess the switch date
    from the local environment or falls back to September 2, 1752.
    This was when Great Britain and her colonies switched to the
    Gregorian Calendar.
  </p>
</blockquote>
<p>
  On investigating this switch from Julian to Gregorian calendar, I
  learnt that the Julian calendar was introduced by Julius Caesar in
  46 BC and it remained in effect across most of the Western world
  from 45 BC to 1582.  It assumed an average year to be 365.25 days
  long.  However, the actual solar year has been known to be around
  365.2422 days since the 17th century.  Although the difference
  appears to be too small, it leads to an error of adding 1 extra day
  every 128 years.  To reduce this error, the Gregorian calendar was
  introduced in October 1582 by Pope Gregory XIII.  It assumed an
  average year to be 365.2425 days long.
</p>
<p>
  The new calendar was adopted in some European countries where 4 Oct
  1582 was followed by 15 Oct 1582 thereby skipping 10 days in
  between.  However, it took as long as September 1752 for the new
  calendar to be adopted by Britain.  In Great Britain and the British
  Empire, 2 Sep 1752 was followed by 14 Sep 1752 and that is the gap
  of 11 days we see in the <code>cal 9 1752</code> output.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/cal-9-1752.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Obfuscated Main</title>
<link>https://susam.net/obfuscated-main.html</link>
<guid isPermaLink="false">hdzwp</guid>
<pubDate>Sun, 02 Nov 2003 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I have been running a mailing list called <em>ncoders</em> on Yahoo
  Groups for the past few months.  I created it to host discussions on
  computers, programming and network protocols among university
  students.  There are currently about 150 students from various
  universities across the world on the list.  A few weeks ago, someone
  posted a C programming puzzle to the group.  The puzzle asked
  whether it was possible to write a C program such that the
  <code>main()</code> function <em>does not seem to appear</em> in the
  code.  Here's a solution I came up with, which involves obfuscating
  the identifier <code>main</code> using preprocessor macros and
  the <code>##</code> token-pasting operator.
</p>
<pre>
<code>#include &lt;stdio.h&gt;

#define decode(s,t,u,m,p,e,d) m ## s ## u ## t
#define begin decode(a,n,i,m,a,t,e)

int begin()
{
    printf("Stumped?\n");
}</code>
</pre>
<p>
  This program compiles and runs successfully.  Here is the output:
</p>
<pre><samp>Stumped?</samp></pre>
<p>
  Let me explain how this code works.  When the C preprocessor runs on
  this code, the following preprocessing steps occur:
</p>
<ul>
  <li>
    <code>begin</code> is replaced with <code>decode(a,n,i,m,a,t,e)</code>,
  </li>
  <li>
    <code>decode(a,n,i,m,a,t,e)</code> is replaced with <code>m ## a
    ## i ## n</code> and
  </li>
  <li>
    <code>m ## a ## i ## n</code> is replaced with <code>main</code>.
  </li>
</ul>
<p>
  Thus <code>begin()</code> is replaced with <code>main()</code>.
</p>
<p>
  <strong>Update on 31 Jul 2007:</strong> Although the mailing list
  referred to in this post no longer exists, this tiny piece of code
  seems to have survived on the web.  A
  <a href="https://www.google.com/search?q=%22decode%28s%2Ct%2Cu%2Cm%2Cp%2Ce%2Cd%29%22">quick
  search</a> shows so many occurrences of this code on the web.  It is
  quite surprising to me that a rather silly piece of code written
  during a Sunday afternoon to solve an equally silly puzzle has been
  the subject of much discussion!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/obfuscated-main.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>C Quine</title>
<link>https://susam.net/c-quine.html</link>
<guid isPermaLink="false">psabp</guid>
<pubDate>Sun, 19 Oct 2003 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  A quine is a computer program that produces an exact copy of its own
  source code as its output.  It must not consume any input, so tricks
  involving reading its own source code and printing it are not
  permitted.
</p>
<h2 id="classic-quine">The Classic Quine<a href="#classic-quine"></a></h2>
<p>
  Here is a classic quine I came across a few days ago in a mailing
  list:
</p>
<pre><code>main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}</code></pre>
<p>
  This program is written in K&amp;R C.  The current version of GCC
  compiles it fine.  It is a valid quine on ASCII machines because
  this program uses the integer code <code>34</code> to print the
  quotation mark (<code>"</code>) character.  This will be explained
  further in the next section.  On another implementation of the C
  compiler which does not use ASCII code for the quotation mark
  character, the program needs to be modified to the use the correct
  code.
</p>
<p>
  Here are some commands that demonstrate the quine:
</p>
<pre>
<samp>$ <kbd>printf '%s' 'main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}' &gt; quine.c</kbd>
$ <kbd>cc quine.c &amp;&amp; ./a.out &gt; out.txt &amp;&amp; diff quine.c out.txt</kbd>
$ <kbd>cat quine.c; echo</kbd>
main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}
$ <kbd>./a.out</kbd>
main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}</samp>
</pre>
<p>
  The source code of this quine does not end with a newline.
  The <code>-n</code> option of GNU echo ensures that the source code
  file is created without a terminating newline.
</p>
<h2 id="close-look-at-classic-quine">Close Look at the Classic Quine<a href="#close-look-at-classic-quine"></a></h2>
<p>
  Let us take a close look at how the quine introduced in the previous
  section works.  Let us add some newlines in the source code of this
  quine for the sake of clarity.
</p>
<pre>
<code>main()
{
    char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";
    printf(s,34,s,34);
}</code>
</pre>
<p>
  This is almost the same program presented in the previous section.
  Only a few newlines have been added to it to make the program easier
  to read.
</p>
<p>
  We can see that the <code>printf</code> call uses the
  string <code>s</code> as the format string.  The format string
  contains three conversion specifications:
  <code>%c</code>, <code>%s</code> and <code>%c</code>.  The arguments
  for these conversions are: <code>34</code>, the string
  <code>s</code> itself and <code>34</code> once again.  Note
  that <code>34</code> is the ASCII code for the quotation mark
  character (<code>"</code>).  With that in mind, let us now construct
  the output of the <code>printf</code> call in a step-by-step manner.
</p>
<p>
  The initial portion of the output consists of the format string from
  the beginning up to, but not including, the first conversion
  specification copied unchanged to the output stream.  Here it is:
</p>
<pre><samp>main(){char*s=</samp></pre>
<p>
  Then the first conversion specification <code>%c</code> is
  processed, the corresponnding argument <code>34</code> is taken and
  a quotation mark is printed like this:
</p>
<pre><samp>"</samp></pre>
<p>
  Then the second conversion specification <code>%s</code> is
  processed.  The corresponding argument is the string <code>s</code>
  itself, so the entire string is printed like this:
</p>
<pre><samp>main(){char*s=%c%s%c;printf(s,34,s,34);}</samp></pre>
<p>
  Then the third conversion specification <code>%c</code> is
  processed.  The corresponding argument is <code>34</code> again, so
  once again a quotation mark is printed like this:
</p>
<pre><samp>"</samp></pre>
<p>
  Finally, the rest of the format string is copied unchanged to
  produce the following output:
</p>
<pre><samp>;printf(s,34,s,34);}</samp></pre>
<p>
  Here are all the five parts of the output presented next to each
  other:
</p>
<pre><samp>main(){char*s=</samp></pre>
<pre><samp>"</samp></pre>
<pre><samp>main(){char*s=%c%s%c;printf(s,34,s,34);}</samp></pre>
<pre><samp>"</samp></pre>
<pre><samp>;printf(s,34,s,34);}</samp></pre>
<p>
  Writing them all out in a single line, we get this:
</p>
<pre>
<samp>main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}</samp>
</pre>
<p>
  This output matches the source code of the program thus confirming
  that our program is a quine.
</p>
<h2 id="classic-quine-with-terminating-newline">Classic Quine With Terminating Newline<a href="#classic-quine-with-terminating-newline"></a></h2>
<p>
  The source code of the classic quine presented above does not
  terminate with a newline.  I found that a little bothersome because
  I am used to always terminating my source code with a single
  trailing newline at the end.  So I decided to modify that quine a
  little to ensure that it always ends with a newline.  This is the
  quine I arrived at:
</p>
<pre><samp>main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}</samp></pre>
<p>
  Compared to the quine in the previous sections, this one has an
  additional <code>%c</code> at the end of the formal string and the
  integer <code>10</code> as the corresponding argument to ensure that
  the output ends with a newline.  Here is a demonstration of this
  quine:
</p>
<pre>
<samp>$ <kbd>echo 'main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}' &gt; quine.c</kbd>
$ <kbd>cc quine.c &amp;&amp; ./a.out &gt; out.txt &amp;&amp; diff quine.c out.txt</kbd>
$ <kbd>cat quine.c</kbd>
main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}
$ <kbd>./a.out</kbd>
main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}</samp>
</pre>
<h2 id="c89-quine">C89 Quine<a href="#c89-quine"></a></h2>
<p>
  The classic C quines presented above are written in K&amp;C.  They
  do not conform to the C standard.  However, with some modifications
  to the quines presented above, we can get a quine that conforms to
  the C89 standard:
</p>
<pre>
<code>#include &lt;stdio.h&gt;
int main(){char*s="#include &lt;stdio.h&gt;%cint main(){char*s=%c%s%c;printf(s,10,34,s,34,10);return 0;}%c";printf(s,10,34,s,34,10);return 0;}</code>
</pre>
<p>
  Here is a demonstration of this quine:
</p>
<pre>
<samp>$ <kbd>echo '#include &lt;stdio.h&gt;
int main(){char*s="#include &lt;stdio.h&gt;%cint main(){char*s=%c%s%c;printf(s,10,34,s,34,10);return 0;}%c";printf(s,10,34,s,34,10);return 0;}' &gt; quine.c</kbd>
$ <kbd>cc -std=c89 -Wall -Wextra -pedantic quine.c &amp;&amp; ./a.out &gt; out.txt &amp;&amp; diff quine.c out.txt</kbd>
$ <kbd>cat quine.c</kbd>
#include &lt;stdio.h&gt;
int main(){char*s="#include &lt;stdio.h&gt;%cint main(){char*s=%c%s%c;printf(s,10,34,s,34,10);return 0;}%c";printf(s,10,34,s,34,10);return 0;}
$ <kbd>./a.out</kbd>
#include &lt;stdio.h&gt;
int main(){char*s="#include &lt;stdio.h&gt;%cint main(){char*s=%c%s%c;printf(s,10,34,s,34,10);return 0;}%c";printf(s,10,34,s,34,10);return 0;}</samp>
</pre>
<!-- ### -->
<p>
  <a href="https://susam.net/c-quine.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>Rebooting With JMP Instruction</title>
<link>https://susam.net/rebooting-with-jmp-instruction.html</link>
<guid isPermaLink="false">mqkfs</guid>
<pubDate>Sun, 02 Mar 2003 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  While learning about x86 microprocessors, I realised that it is
  possible to reboot a computer running MS-DOS or Windows 98 by
  jumping to the memory address FFFF:0000.  Here is an
  example <code>DEBUG.EXE</code> session from MS-DOS 6.22:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG</kbd>
<kbd>G =FFFF:0000</kbd></samp>
</pre>
<p>
  In the above example, we start the DOS debugger and then enter
  the <code>G</code> (go) command to execute the program at FFFF:0000.
  Just doing this simple operation should reboot the system
  immediately.
</p>
<p>
  When the computer boots, the x86 microprocessor starts in real mode
  and executes the instruction at FFFF:0000.  This is an address in
  the BIOS ROM that contains a far jump instruction to go to another
  address, typically F000:E05B.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG</kbd>
-<kbd>U FFFF:0000 4</kbd>
FFFF:0000 EA5BE000F0    JMP     F000:E05B</samp>
</pre>
<p>
  The address F000:E05B contains the BIOS start-up program which
  performs a power-on self-test (POST), initialises the peripheral
  devices, loads the boot sector code and executes it.  These
  operations complete the booting sequence.
</p>
<p>
  The important point worth noting here is that the very first
  instruction the microprocessor executes after booting is the
  instruction at FFFF:0000.  We can use this fact to create a tiny
  executable program that can be used to reboot the computer.  Of
  course, we can always perform a soft reboot using the key
  sequence <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>.  However,
  just for fun, let us create a program to reboot the computer with
  a <code>JMP FFFF:0000</code> instruction.
</p>
<h2 id="reboot-program">Reboot Program<a href="#reboot-program"></a></h2>
<p>
  Here is a complete <code>DEBUG.EXE</code> session that shows how we
  could write a simple reboot program:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG</kbd>
-<kbd>A</kbd>
1165:0100 <kbd>JMP FFFF:0000</kbd>
1165:0105
-<kbd>N REBOOT.COM</kbd>
-<kbd>R CX</kbd>
CX 0000
:<kbd>5</kbd>
-<kbd>W</kbd>
Writing 00005 bytes
-<kbd>Q</kbd>

C:\&gt;</samp>
</pre>
<p>
  Note that the <code>N</code> (name) command specifies the name of
  the file where we write the binary machine code to.  Also, note that
  the <code>W</code> (write) command expects the registers BX and CX
  to contain the number of bytes to be written to the file.  When the
  DOS debugger starts, it already initialises BX to 0 automatically,
  so we only set the register CX to 5 with the <code>R CX</code>
  command above.
</p>
<p>
  Now we can execute this 5-byte program like this:
</p>
<pre><samp>C:&gt;<kbd>REBOOT</kbd></samp></pre>
<h2 id="debugger-scripting">Debugger Scripting<a href="#debugger-scripting"></a></h2>
<p>
  In the previous section, we saw how we can start
  <code>DEBUG.EXE</code> and type the debugger commands and the
  assembly language instruction to jump to FFFF:0000.  We can also keep
  these debugger inputs in a separate text file and feed that to the
  debugger.  Here is how the content of such a text file would look:
</p>
<pre>
<code>A
JMP FFFF:0000

N REBOOT.COM
R CX
5
W
Q</code>
</pre>
<p>
  If the above input is saved in a file, say, <code>REBOOT.TXT</code>,
  then we can run the DOS command <code>DEBUG &lt; REBOOT.TXT</code>
  to assemble the program and create the binary executable file.  The
  following DOS session example shows how this command behaves:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG &lt; REBOOT.TXT</kbd>
-A
1165:0100 JMP FFFF:0000
1165:0105
-N REBOOT.COM
-R CX
CX 0000
:5
-W
Writing 00005 bytes
-Q

C:&gt;</samp>
</pre>
<h2 id="disassembly">Disassembly<a href="#disassembly"></a></h2>
<p>
  Here is a quick demonstration of how we can disassemble the
  executable code:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG REBOOT.COM</kbd>
-<kbd>U 100 104</kbd>
117C:0100 EA0000FFFF    JMP     FFFF:0000</samp>
</pre>
<p>
  While we did not really need to disassemble this tiny program, the
  above example shows how we can use the debugger
  command <code>U</code> (unassemble) to translate machine code to
  assembly language mnemonics.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/rebooting-with-jmp-instruction.html">Read on website</a> |
  <a href="https://susam.net/tag/assembly.html">#assembly</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/dos.html">#dos</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Programming With DOS Debugger</title>
<link>https://susam.net/programming-with-dos-debugger.html</link>
<guid isPermaLink="false">tkxiv</guid>
<pubDate>Tue, 11 Feb 2003 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="introduction">Introduction<a href="#introduction"></a></h2>
<p>
  MS-DOS as well as Windows 98 come with a debugger program
  named <code>DEBUG.EXE</code> that can be used to work with assembly
  language instructions and machine code.  In MS-DOS version 6.22, this
  program is named <code>DEBUG.EXE</code> and it is typically present
  at <code>C:\DOS\DEBUG.EXE</code>.  On Windows 98, this program is
  usually present at <code>C:\Windows\Command\Debug.exe</code>.  It is
  a line-oriented debugger that supports various useful features to
  work with and debug binary executable programs consisting of machine
  code.
</p>
<p>
  In this post, we see how we can use this debugger program to
  assemble a few minimal programs that print some characters to
  standard output.  We first create a 7-byte program that prints a
  single character.  Then we create a 23-byte program that prints the
  "hello, world" string.  All the steps provided in this post work well
  with Windows 98 too.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#print-character">Print Character</a></li>
  <li><a href="#hello-world">Hello, World</a></li>
  <li><a href="#debugger-scripting">Debugger Scripting</a></li>
  <li><a href="#disassembly">Disassembly</a></li>
  <li><a href="#int-20-vs-ret">INT 20 vs RET</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>
<h2 id="print-character">Print Character<a href="#print-character"></a></h2>
<p>
  Let us first see how to create a tiny 7-byte program that prints the
  character <code>A</code> to standard output.  The
  following <code>DEBUG.EXE</code> session shows how we do it.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG</kbd>
-<kbd>A</kbd>
1165:0100 <kbd>MOV AH, 2</kbd>
1165:0102 <kbd>MOV DL, 41</kbd>
1165:0104 <kbd>INT 21</kbd>
1165:0106 <kbd>RET</kbd>
1165:0107
-<kbd>G</kbd>
A
Program terminated normally
-<kbd>N A.COM</kbd>
-<kbd>R CX</kbd>
CX 0000
:<kbd>7</kbd>
-<kbd>W</kbd>
Writing 00007 bytes
-<kbd>Q</kbd>

C:\&gt;</samp>
</pre>
<p>
  Now we can execute this program as follows:
</p>
<pre>
<samp>C:\&gt;<kbd>A</kbd>
A
C:\&gt;</samp>
</pre>
<p>
  The debugger command <code>A</code> creates machine executable code
  from assembly language instructions.  The machine code created is
  written to the main memory at address CS:0100 by default.  The first
  three instructions generate the software interrupt 0x21 (decimal 33)
  with AH set to 2 and DL set to 0x41 (decimal 65) which happens to be
  the ASCII code of the character <code>A</code>.  Interrupt 0x21
  offers a wide variety of DOS services.  Setting AH to 2 tells this
  interrupt to invoke the function that prints a single character to
  standard output.  This function expects DL to be set to the ASCII
  code of the character we want to print.
</p>
<p>
  The command <code>G</code> executes the program in memory from the
  current location.  The current location is defined by the current
  value of CS:IP which is CS:0100 by default.  We use this command to
  confirm that the program runs as expected.
</p>
<p>
  Next we prepare to write the machine code to a binary executable
  file.  The command <code>N</code> is used to specify the name of the
  file.  The command <code>W</code> is used to write the machine code
  to the file.  This command expects the registers BX and CX to contain
  the number of bytes to be written to the file.  When the DOS debugger
  starts, BX is already initialised to 0, so we only set the register
  CX to 7 with the <code>R CX</code> command.  Finally, we use the
  command <code>Q</code> to quit the debugger and return to MS-DOS.
</p>
<h2 id="hello-world">Hello, World<a href="#hello-world"></a></h2>
<p>
  The following <code>DEBUG.EXE</code> session shows how to create a
  program that prints a string.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG</kbd>
-<kbd>A</kbd>
1165:0100 <kbd>MOV AH, 9</kbd>
1165:0102 <kbd>MOV DX, 108</kbd>
1165:0105 <kbd>INT 21</kbd>
1165:0107 <kbd>RET</kbd>
1165:0108 <kbd>DB 'hello, world', D, A, '$'</kbd>
1165:0117
-<kbd>G</kbd>
hello, world

Program terminated normally
-<kbd>N HELLO.COM</kbd>
-<kbd>R CX</kbd>
CX 0000
:<kbd>17</kbd>
-<kbd>W</kbd>
Writing 00017 bytes
-<kbd>Q</kbd>

C:\&gt;</samp>
</pre>
<p>
  Now we can execute this 23-byte program like this:
</p>
<pre>
<samp>C:\&gt;<kbd>HELLO</kbd>
hello, world

C:\&gt;</samp>
</pre>
<p>
  In the program above we use the pseudo-instruction <code>DB</code>
  to define the bytes of the string we want to print.  We add the
  trailing bytes 0xD and 0xA to print the carriage return (CR) and the
  line feed (LF) characters so that the string is terminated with a
  newline.  Finally, the string is terminated with the byte for dollar
  sign (<code>'$'</code>) because the software interrupt we generate
  next expects the string to be terminated with this symbol's byte
  value.
</p>
<p>
  We use the software interrupt 0x21 again.  However, this time we set
  AH to 9 to invoke the function that prints a string.  This function
  expects DS:DX to point to the address of a string terminated with
  the byte value of <code>'$'</code>.  The register <code>DS</code> has
  the same value as that of <code>CS</code>, so we only
  set <code>DX</code> to the offset at which the string begins.
</p>
<h2 id="debugger-scripting">Debugger Scripting<a href="#debugger-scripting"></a></h2>
<p>
  We have already seen above how to assemble a "hello, world" program
  in the previous section.  We started the debugger program, typed
  some commands and typed assembly language instructions to create our
  program.  It is also possible to prepare a separate input file with
  all the debugger commands and assembly language instructions in it.
  We then feed this file to the debugger program.  This can be useful
  while writing more complex programs where we cannot afford to lose
  our assembly language source code if we inadvertently crash the
  debugger by executing an illegal instruction.
</p>
<p>
  To create a separate input file that can be fed to the debugger, we
  may use the DOS command <code>EDIT HELLO.TXT</code> to open a new
  file with MS-DOS Editor, then type in the following debugger
  commands and then save and exit the editor.
</p>
<pre>
<code>A
MOV AH, 9
MOV DX, 108
INT 21
RET
DB 'hello, world', D, A, '$'

N HELLO.COM
R CX
17
W
Q</code>
</pre>
<p>
  This is almost the same as the inputs we typed into the debugger in
  the previous section.  The only difference from the previous section
  is that we omit the <code>G</code> command here because we don't
  really need to run the program while assembling it, although we
  could do so if we really wanted to.
</p>
<p>
  Then we can run the DOS command <code>DEBUG &lt; HELLO.TXT</code> to
  assemble the program and create the binary executable file.  Here is
  a DOS session example that shows what the output of this command
  looks like:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG &lt; HELLO.TXT</kbd>
-A
1165:0100 MOV AH, 9
1165:0102 MOV DX, 108
1165:0105 INT 21
1165:0107 RET
1165:0108 DB 'hello, world', D, A, '$'
1165:0117
-N HELLO.COM
-R CX
CX 0000
:17
-W
Writing 00017 bytes
-Q

C:\&gt;</samp>
</pre>
<p>
  The output is in fact very similar to the debugger session in the
  previous section.
</p>
<h2 id="disassembly">Disassembly<a href="#disassembly"></a></h2>
<p>
  Now that we have seen how to assemble simple programs into binary
  executable files using the debugger, we will now briefly see how to
  disassemble the binary executable files.  This could be useful when
  we want to debug an existing program.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG A.COM</kbd>
-<kbd>U 100 106</kbd>
117C:0100 B402          MOV     AH,02
117C:0102 B241          MOV     DL,41
117C:0104 CD21          INT     21
117C:0106 C3            RET</samp>
</pre>
<p>
  The debugger command <code>U</code> (unassemble) is used to
  translate the binary machine code to assembly language mnemonics.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG HELLO.COM</kbd>
-<kbd>U 100 116</kbd>
117C:0100 B409          MOV     AH,09
117C:0102 BA0801        MOV     DX,0108
117C:0105 CD21          INT     21
117C:0107 C3            RET
117C:0108 68            DB      68
117C:0109 65            DB      65
117C:010A 6C            DB      6C
117C:010B 6C            DB      6C
117C:010C 6F            DB      6F
117C:010D 2C20          SUB     AL,20
117C:010F 776F          JA      0180
117C:0111 726C          JB      017F
117C:0113 64            DB      64
117C:0114 0D0A24        OR      AX,240A
-<kbd>D 100 116</kbd>
117C:0100  B4 09 BA 08 01 CD 21 C3-68 65 6C 6C 6F 2C 20 77   ......!.hello, w
117C:0110  6F 72 6C 64 0D 0A 24                              orld..$</samp>
</pre>
<h2 id="int-20-vs-ret">INT 20 vs RET<a href="#int-20-vs-ret"></a></h2>
<p>
  Another way to terminate a .COM program is to simply use the
  instruction <code>INT 20</code>.  This consumes two bytes in the
  machine code: <code>CD 20</code>.  While producing the smallest
  possible executables was not really the goal of this post, the code
  examples above indulge in a little bit of size reduction by using
  the <code>RET</code> instruction to terminate the program.  This
  consumes only one byte: <code>C3</code>.  This works because when a
  .COM file starts, the register SP contains FFFE.  The stack memory
  locations at offset FFFE and FFFF contain 00 and 00 respectively.
  Further, the memory address offset 0000 contains the
  instruction <code>INT 20</code>.  Here is a demonstration of these
  facts using the debugger program:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG HELLO.COM</kbd>
-<kbd>R SP</kbd>
SP FFFE
:
-<kbd>D FFFE</kbd>
117C:FFF0                                            00 00
-<kbd>U 0 1</kbd>
117C:0000 CD20          INT     20</samp>
</pre>
<p>
  As a result, executing the <code>RET</code> instruction pops 0000
  off the stack at FFFE and loads it into IP.  This results in the
  instruction <code>INT 20</code> at offset 0000 getting executed
  which leads to program termination.
</p>
<p>
  While both <code>INT 20</code> and <code>RET</code> lead to
  successful program termination both in DOS as well as while
  debugging with <code>DEBUG.EXE</code>, there is some difference
  between them which affects the debugging experience.  Terminating the
  program with <code>INT 20</code> allows us to run the program
  repeatedly within the debugger by repeated applications of
  the <code>G</code> debugger command.  But when we terminate the
  program with <code>RET</code>, we cannot run the program repeatedly
  in this manner.  The program runs and terminates successfully the
  first time we run it in the debugger but the stack does not get
  reinitialised with zeros to prepare it for another execution of the
  program within the debugger.  Therefore when we try to run the
  program the second time using the <code>G</code> command, the
  program does not terminate successfully.  It hangs instead.  It is
  possible to work around this by reinitialising the stack with the
  debugger command <code>E FFFE 0 0</code> before
  running <code>G</code> again.
</p>
<h2 id="conclusion">Conclusion<a href="#conclusion"></a></h2>
<p>
  Although the DOS debugger is very limited in features in comparison
  with sophisticated assemblers like NASM, MASM, etc., this humble
  program can perform some of the basic operations involved in working
  with assembly language and machine code.  It can read and write
  binary executable files, examine memory, execute machine
  instructions in memory, modify registers, edit binary files, etc.
  The fact that this debugger program is always available with MS-DOS
  or Windows 98 system means that these systems are ready for some
  rudimentary assembly language programming without requiring any
  additional tools.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/programming-with-dos-debugger.html">Read on website</a> |
  <a href="https://susam.net/tag/assembly.html">#assembly</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/dos.html">#dos</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Editing Binaries in DOS</title>
<link>https://susam.net/editing-binaries-in-dos.html</link>
<guid isPermaLink="false">xomdn</guid>
<pubDate>Thu, 18 Jul 2002 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Both MS-DOS and Windows 98 come with a debugger program
  named <code>DEBUG.EXE</code> that make it possible to edit binary
  files without requiring additional tools.  Although the primary
  purpose of this program is to test and debug executable files, it
  can be used to edit binary files too.  Two examples of this are
  shown in this post.  The first example edits a string of bytes in an
  executable file.  The second one edits machine instructions to alter
  the behaviour of the program.  Both examples provided in the next
  two sections can be reproduced on MS-DOS version 6.22.  These
  examples can be performed on Windows 98 too after minor adjustments.
</p>
<h2 id="editing-data">Editing Data<a href="#editing-data"></a></h2>
<p>
  Let us first see an example of editing an error message produced by
  the <code>MODE</code> command.  This DOS command is used for
  displaying and reconfiguring system settings.  For example, the
  following command sets the display to show 40 characters per line:
</p>
<pre><samp>C:\&gt;<kbd>MODE 40</kbd></samp></pre>
<p>
  The following command reverts the display to show 80 characters per
  line:
</p>
<pre><samp>C:\&gt;<kbd>MODE 80</kbd></samp></pre>
<p>
  Here is another example of this command that shows the current
  settings for serial port COM1:
</p>
<pre>
<samp>C:\&gt;<kbd>MODE COM1</kbd>

Status for device COM1:
-----------------------
Retry=NONE

C:\&gt;</samp>
</pre>
<p>
  An invalid parameter leads to an error like this:
</p>
<pre>
<samp>C:\&gt;<kbd>MODE 0</kbd>

Invalid parameter - 0

C:\&gt;</samp>
</pre>
<p>
  We will edit this error message to be slightly more helpful.  The
  following debugger session shows how.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG C:\DOS\MODE.COM</kbd>
-<kbd>S 0 FFFF 'Invalid parameter'</kbd>
117C:19D1
-<kbd>D 19D0 19FF</kbd>
117C:19D0  13 49 6E 76 61 6C 69 64-20 70 61 72 61 6D 65 74   .Invalid paramet
117C:19E0  65 72 0D 0A 20 0D 0A 49-6E 76 61 6C 69 64 20 6E   er.. ..Invalid n
117C:19F0  75 6D 62 65 72 20 6F 66-20 70 61 72 61 6D 65 74   umber of paramet
-<kbd>E 19D0 12 'No soup for you!' D A</kbd>
-<kbd>D 19D0 19FF</kbd>
117C:19D0  12 4E 6F 20 73 6F 75 70-20 66 6F 72 20 79 6F 75   .No soup for you
117C:19E0  21 0D 0A 0A 20 0D 0A 49-6E 76 61 6C 69 64 20 6E   !... ..Invalid n
117C:19F0  75 6D 62 65 72 20 6F 66-20 70 61 72 61 6D 65 74   umber of paramet
-<kbd>N SOUP.COM</kbd>
-<kbd>W</kbd>
Writing 05C11 bytes
-<kbd>Q</kbd>

C:\&gt;</samp>
</pre>
<p>
  We first open <code>MODE.COM</code> with the debugger.  When we do
  so, the entire program is loaded into offset 0x100 of the code
  segment (CS).  Then we use the <code>S</code> debugger command to
  search for the string "Invalid parameter".  This prints the offset
  at which this string occurs in memory.
</p>
<p>
  We use the <code>D</code> command to dump the bytes around that
  offset.  In the first row of the output, the byte value 13 (decimal
  19) represents the length of the string that follows it.  Indeed
  there are 19 bytes in the string composed of the text <code>"Invalid
  parameter"</code> and the following carriage return (CR) and line
  feed (LF) characters.  The CR and LF characters have ASCII codes 0xD
  (decimal 13) and 0xA (decimal 10).  These values can be seen at the
  third and fourth places of the second row of the output of this
  command.
</p>
<p>
  Then we use the <code>E</code> command to enter a new string length
  followed by a new string to replace the existing error message.
  Note that we enter a string length of 0x12 (decimal 18) which is
  indeed the length of the string that follows it.  After entering the
  new string, we dump the memory again with <code>D</code> to verify
  that the new string is now present in memory.
</p>
<p>
  After confirming that the edited string looks good, we use
  the <code>N</code> command to specify the name of the file we want
  to write the edited binary to.  This command starts writing the
  bytes from offset 0x100 to the named file.  It reads the number of
  bytes to be written to the file from the BX and CX registers.  These
  registers are already initialised to the length of the file when we
  load a file in the debugger.  Since we have not modified these
  registers ourselves, we don't need to set them again.  In case you
  do need to set the BX and CX registers in a different situation, the
  commands to do so are <code>R BX</code> and <code>R CX</code>
  respectively.
</p>
<p>
  Finally, the <code>W</code> command writes the file and
  the <code>Q</code> command quits the debugger.  Now we can test the
  new program as follows:
</p>
<pre>
<samp>
C:\&gt;<kbd>SOUP 0</kbd>

No soup for you! - 0

C:\&gt;</samp>
</pre>
<h2 id="editing-machine-instructions">Editing Machine Instructions<a href="#editing-machine-instructions"></a></h2>
<p>
  In this section, we will see how to edit the binary we created in
  the previous section further to add our own machine instructions to
  print a welcome message when the program starts.  Here is an example
  debugger session that shows how to do it.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG SOUP.COM</kbd>
-<kbd>U</kbd>
117C:0100 E99521        JMP     2298
117C:0103 51            PUSH    CX
117C:0104 8ACA          MOV     CL,DL
117C:0106 D0E1          SHL     CL,1
117C:0108 32ED          XOR     CH,CH
117C:010A 80CD03        OR      CH,03
117C:010D D2E5          SHL     CH,CL
117C:010F 2E            CS:
117C:0110 222E7D01      AND     CH,[017D]
117C:0114 2E            CS:
117C:0115 890E6402      MOV     [0264],CX
117C:0119 59            POP     CX
117C:011A 7505          JNZ     0121
117C:011C EA39E700F0    JMP     F000:E739
-<kbd>D 300</kbd>
117C:0300  07 1F C3 18 18 18 18 18-00 00 00 00 00 00 00 00   ................
117C:0310  00 00 FF 00 00 00 00 00-FF 00 00 00 00 00 00 00   ................
117C:0320  00 00 00 00 00 00 00 00-00 00 FF FF 90 00 40 00   ..............@.
117C:0330  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00   ................
117C:0340  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00   ................
117C:0350  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00   ................
117C:0360  00 00 00 FF 00 00 00 00-00 00 00 00 00 00 00 00   ................
117C:0370  02 00 2B C0 8E C0 A0 71-03 A2 BA 07 A2 BC 07 3C   ..+....q.......<
-<kbd>A</kbd>
117C:0100 <kbd>JMP 330</kbd>
117C:0103
-<kbd>A 330</kbd>
117C:0330 <kbd>MOV AH, 9</kbd>
117C:0332 <kbd>MOV DX, 33A</kbd>
117C:0335 <kbd>INT 21</kbd>
117C:0337 <kbd>JMP 2298</kbd>
117C:033A <kbd>DB 'Welcome to Soup Kitchen!', D, A, '$'</kbd>
117C:0355
-<kbd>W</kbd>
Writing 05C11 bytes
-<kbd>Q</kbd>

C:\&gt;</samp>
</pre>
<p>
  At the beginning, we use the debugger command <code>U</code> to
  unassemble (disassemble) some bytes at the top of the program to see
  what they look like.  We see that the very first instruction is a
  jump to offset 0x2298.  The debugger command <code>D 300</code>
  shows that there are contiguous zero bytes around offset 0x330.  We
  replace some of these zero bytes with new machine instructions that
  print our welcome message.  To do this, we first replace the jump
  instruction at the top with a jump instruction to offset 0x330 where
  we then place the machine code for our welcome message.  This new
  machine code prints the welcome message and then jumps to offset
  0x2298 allowing the remainder of the program to execute as usual.
</p>
<p>
  The debugger command <code>A</code> is used to assemble the machine
  code for the altered jump instruction at the top.  By default it
  writes the assembled machine code to CS:0100 which is the address at
  which DOS loads executable programs.  Then we use the debugger
  command <code>A 330</code> to add new machine code at offset 0x330.
  We try not to go beyond the region with contiguous zeroes while
  writing our machine instructions.  Fortunately for us, our entire
  code for the welcome message occupies 37 bytes and and the last byte
  of our code lands at offset 0x354.
</p>
<p>
  Finally, we write the updated program in memory back to the file
  named <code>SOUP.COM</code>.  Since the debugger was used to load
  the file named <code>SOUP.COM</code>, we do not need to use
  the <code>N</code> command to specify the name of the file again.
  When a file has just been loaded into the debugger, by default
  the <code>W</code> command writes the program in memory back to the
  same file that was loaded into the memory.
</p>
<p>
  Now our updated program should behave as shown below:
</p>
<pre>
<samp>C:\&gt;<kbd>SOUP COM1</kbd>
Welcome to Soup Kitchen!

Status for device COM1:
-----------------------
Retry=NONE

C:\&gt;<kbd>SOUP 0</kbd>
Welcome to Soup Kitchen!

No soup for you! - 0

C:\&gt;</samp>
</pre>
<p>
  That's our modified program that prints a welcome message and our
  own error message created with the humble DOS debugger.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/editing-binaries-in-dos.html">Read on website</a> |
  <a href="https://susam.net/tag/assembly.html">#assembly</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/dos.html">#dos</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>WinPopup</title>
<link>https://susam.net/winpopup.html</link>
<guid isPermaLink="false">rnpxg</guid>
<pubDate>Mon, 10 Dec 2001 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  While browsing the <code>C:\Windows</code> directory of the Windows
  98 system in our dorm room, I came across an interesting program
  named <code>Winpopup.exe</code>.  It is a tiny little program that
  can be used to send messages from one Windows system to another on
  the same local area network (LAN).
</p>
<figure class="stretch">
  <img src="files/blog/winpopup-1.png" alt="A screenshot of Windows directory">
  <figcaption>
    Winpopup.exe in C:\Windows of Windows 98
  </figcaption>
</figure>
<p>
  Windows networking supports the notion of workgroups where one or
  more computers may logically belong to a common group.  Computers
  belonging to the same workgroup can share resources such as files,
  printers, etc. with each other.  To see the workgroup your computer
  belongs to, go to Start &gt; Settings &gt; Control Panel &gt;
  Network &gt; Identification and see the value of the field named
  "Workgroup".  By default, this value is "WORKGROUP" but it can be
  changed to create smaller working groups of computers.
</p>
<p>
  Apart from sending messages to a specific computer, WinPopup
  supports sending messages to an entire workgroup of computers too.
  An example of this is shown later in this post.
</p>
<figure class="stretch">
  <img src="files/blog/winpopup-2.png" alt="A screenshot of Windows workgroup configuration">
  <figcaption>
    Workgroup configuration in Windows 98
  </figcaption>
</figure>
<p>
  To start WinPopup, go to My Computer &gt; C: &gt; Windows, then
  click on the link that says "Show Files", then scroll down to the
  bottom to find WinPopup.exe and finally double click on it to start
  it.  Alternatively, you can also type <kbd>win</kbd>+<kbd>r</kbd>,
  type <code>winpopup</code> and type <kbd>enter</kbd>.
</p>
<figure class="stretch">
  <img src="files/blog/winpopup-3.png" alt="A screenshot of WinPopup">
  <figcaption>
    WinPopup running on Windows 98
  </figcaption>
</figure>
<p>
  To send a message, simply click on the envelope icon, select one of
  the radio buttons depending on whether you want to send a message to
  a specific computer or an entire workgroup, then type the name of
  the computer or workgroup you want to send your message to and then
  type the message to be sent.
</p>
<figure class="stretch">
  <img src="files/blog/winpopup-4.png" alt="A screenshot of message being composed in WinPopup">
  <figcaption>
    Composing a message running on WinPopup running on Windows 98
  </figcaption>
</figure>
<p>
  When you are ready to send the message, just click on the OK button.
  If everything goes fine, a message box confirming that the message
  was successfully sent should appear.
</p>
<figure class="stretch">
  <img src="files/blog/winpopup-5.png" alt="A screenshot of a message successfully sent with WinPopup">
  <figcaption>
    Message sent successfully with WinPopup running on Windows 98
  </figcaption>
</figure>
<p>
  It is worth noting here that the recipient also needs to have
  WinPopup running in order to read messages successfully.  I found
  this tool only a few days ago and I already find this tool to be
  very useful for communicating with other users of Windows systems.
</p>
<hr>
<p>
  <em>
    <strong>Update on 30 Oct 2022:</strong> This article was imported
    into this website from an old intranet portal I used to run during
    my university days back in 2001-2005.  While importing this
    article here, I took the liberty of adding a few screenshots taken
    from a Windows 98 system running in an emulator.
  </em>
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/winpopup.html">Read on website</a> |
  <a href="https://susam.net/tag/windows.html">#windows</a> |
  <a href="https://susam.net/tag/networking.html">#networking</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>


</channel>
</rss>
