<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="../feed.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
<title>Susam's Programming Pages</title>
<link>https://susam.net/tag/programming.html</link>
<atom:link rel="self" type="application/rss+xml" href="https://susam.net/tag/programming-full.xml"/>
<description>Feed for Susam's Programming Pages</description>

<item>
<title>QuickQWERTY 1.2.0</title>
<link>https://susam.net/code/news/quickqwerty/1.2.0.html</link>
<guid isPermaLink="false">qqotz</guid>
<pubDate>Sun, 05 Oct 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  QuickQWERTY 1.2.0 is now available.  QuickQWERTY is a web-based
  touch typing tutor for QWERTY keyboards that runs directly in the
  web browser.
</p>
<p>
  This release brings small improvements to make the typing tutor
  smoother and the lessons more accurate.  When you return to the
  application, it no longer needlessly redirects you back to Unit 1.1
  if that was the last lesson you practised.
</p>
<p>
  Several lessons have received minor corrections.  Units 7.2 and 7.3
  no longer include the word "tyre", avoiding a preference for either
  British or American spelling.  Units 9.2 and 9.3 now spell
  "orwellian" correctly.  A factual error in Unit 17.4 has been fixed
  too.  It previously said "89 is one more than 99", which now
  correctly reads "89 is one more than 88".
</p>
<p>
  Finally, switching between the 5-6 and 6-7 split layouts is now more
  reliable.  In the previous release, pressing <kbd>Esc</kbd> to
  cancel the confirmation dialogue still caused the switch to go
  through.  Now pressing <kbd>Esc</kbd> properly cancels the switch as
  expected.
</p>
<p>
  To try out the new release of QuickQWERTY, go to
  <a href="../../../quickqwerty.html">quickqwerty.html</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/quickqwerty/1.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a>
</p>
]]>
</description>
</item>
<item>
<title>QuickQWERTY 1.1.0</title>
<link>https://susam.net/code/news/quickqwerty/1.1.0.html</link>
<guid isPermaLink="false">qqooz</guid>
<pubDate>Sun, 28 Sep 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  There has been a new release of QuickQWERTY after over 10 years!
  QuickQWERTY is a web-based touch typing tutor for QWERTY keyboards
  that runs directly in the web browser.  You can try it out
  here: <a href="../../../quickqwerty.html">quickqwerty.html</a>.
</p>
<p>
  The new release, version 1.1.0 of QuickQWERTY, introduces a new
  input command named <code>reset</code>, which is a synoymn for the
  existing commands <code>restart</code> and <code>rst</code> used to
  restart the current lesson.  Another input command
  named <code>test</code> runs an internal suite of tests to validate
  that no lesson involves keys that have not been introduced in the
  current or prior lessons.  Further, in this release, the application
  has been fully rewritten as a single standalone HTML file with no
  external dependencies and the source code has been greatly
  simplified.
</p>
<p>
  There are a number of other changes too.  Words per minute (WPM)
  calculation has been refined so the first character, which starts
  the timer, is not counted.  The guides have been enhanced.  Keys to
  be pressed are now highlighted more clearly and reminders to return
  fingers to their home positions have been added to each guide.  The
  confirmation dialogue for switching between 6-7 split and 5-6 split
  styles now uses the HTML <code>&lt;dialog&gt;</code> element,
  replacing the dated <code>window.confirm()</code> prompt.  In
  addition, when the application is opened without a fragment
  identifier in the URL, the most recently practised lesson loads
  automatically.
</p>
<p>
  The user interface has been simplified.  The previous and next links
  (<code>&laquo;</code> and <code>&raquo;</code>) for navigating
  lessons have been removed, as they added little value and made the
  layout of the various user interface components more complex.  The
  "Next lesson" advice link remains for moving to the next lesson when
  the current one is completed successfully.  Tooltips showing
  additional typing metrics have also been removed due to limited
  usefulness.
</p>
<p>
  The lessons have been updated to remove spellings specific to
  American English.  Care has been taken to use only words that are
  spelled the same in American and British English with one exception.
  The word "tyre", in its British English spelling, was mistakenly
  left in the lesson.  That will be fixed in the next release.
</p>
<p>
  Finally, QuickQWERTY's license has changed from the BSD-2-Clause
  licence to the MIT licence.  The source code is available at
  <a href="https://github.com/susam/quickqwerty">github.com/susam/quickqwerty</a>.
  To run this release and learn touch typing on a QWERTY keyboard, go
  to <a href="../../../quickqwerty.html">quickqwerty.html</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/quickqwerty/1.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a>
</p>
]]>
</description>
</item>
<item>
<title>My Lobsters Interview</title>
<link>https://susam.net/my-lobsters-interview.html</link>
<guid isPermaLink="false">lbstr</guid>
<pubDate>Fri, 12 Sep 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I recently had an engaging conversation with Alex
  (<a href="https://lobste.rs/~veqq">@veqq</a>) from the
  <a href="https://lobste.rs/">Lobsters</a> community about computing,
  mathematics and a range of related topics.  Our conversation was
  later published on the community website as
  <a href="https://lobste.rs/s/kltoas">Lobsters Interview with
  Susam</a>.
</p>
<p>
  I should mention the sections presented in that post are not in the
  same order in which we originally discussed them.  The sections were
  edited and rearranged by Alex to improve the flow and avoid
  repetition of similar topics too close to each other.
</p>
<p>
  This page preserves a copy of our discussion as edited by Alex, so I
  can keep an archived version on my website.  In my copy, I have
  added a table of contents to make it easier to navigate to specific
  sections.  The interview itself follows the table of contents.  I
  hope you enjoy reading it.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ol>
  <li><a href="#lisp-and-other-things">Lisp and Other Things</a></li>
  <li><a href="#lisp-emacs-and-mathematics">Lisp, Emacs and Mathematics</a></li>
  <li><a href="#interests-and-exploration">Interests and Exploration</a></li>
  <li><a href="#computing-for-fun">Computing for Fun</a></li>
  <li><a href="#computing-activities">Computing Activities</a></li>
  <li><a href="#programming-vs-domains">Programming vs Domains</a></li>
  <li><a href="#old-functionality-and-new-problems">Old Functionality and New Problems</a></li>
  <li><a href="#designing-for-composability">Designing for Composability</a></li>
  <li><a href="#small-vs-large-functions">Small vs Large Functions</a></li>
  <li><a href="#domains-and-projects">Domains and Projects</a></li>
  <li><a href="#double-spacing-and-touch-typing">Double Spacing and Touch Typing</a></li>
  <li><a href="#approach-to-learning">Approach to Learning</a></li>
  <li><a href="#managing-time-and-distractions">Managing Time and Distractions</a></li>
  <li><a href="#blogging">Blogging</a></li>
  <li><a href="#forums">Forums</a></li>
  <li><a href="#mathb-moderation-problems">MathB Moderation Problems</a></li>
  <li><a href="#favourite-mathematics-textbooks">Favourite Mathematics Textbooks</a></li>
  <li><a href="#mathematics-and-computing">Mathematics and Computing</a></li>
</ol>
<h2 id="conversation">Our Conversation<a href="#conversation"></a></h2>
<!-- Lisp and other things -->
<p class="question" id="lisp-and-other-things">
  Hi <a href="https://lobste.rs/~susam">@susam</a>, I primarily know
  you as a Lisper, what other things do you use?
</p>
<p>
  Yes, I use Lisp extensively for my personal projects and much of
  what I do in my leisure is built on it.  I ran
  a <a href="https://github.com/susam/mathb">mathematics pastebin</a>
  for close to thirteen years.  It was quite popular on some IRC
  channels.  The pastebin was written in Common Lisp.
  My <a href="https://susam.net/">personal website</a> and blog are
  generated using a tiny static site generator written in Common Lisp.
  Over the years I have built several other personal tools in it as
  well.
</p>
<p>
  I am an active Emacs Lisp programmer too.  Many of my software tools
  are in fact Emacs Lisp functions that I invoke with convenient key
  sequences.  They help me automate repetitive tasks as well as
  improve my text editing and task management experience.
</p>
<p>
  I use plenty of other tools as well.  In my early adulthood, I spent
  many years working with C, C++, Java and PHP.  My
  <a href="https://issues.apache.org/jira/browse/NUTCH-559">first
  substantial open source contribution</a> was to the Apache Nutch
  project which was in Java and one of my early original open source
  projects was <a href="https://github.com/susam/uncap">Uncap</a>, a C
  program to remap keys on Windows.
</p>
<p>
  These days I use a lot of Python, along with some Go and Rust, but
  Lisp remains important to my personal work.  I also enjoy writing
  small standalone tools directly in HTML and JavaScript, often with
  all the code in a single file in a readable, unminified form.
</p>
<!-- Lisp, Emacs and mathematics -->
<p class="question" id="lisp-emacs-and-mathematics">
  How did you first discover computing, then end up with Lisp, Emacs
  and mathematics?
</p>
<p>
  I got introduced to computers through the Logo programming language
  as a kid.  Using simple arithmetic, geometry, logic and code to
  manipulate a two-dimensional world had a lasting effect on me.
</p>
<p>
  I still vividly remember how I ended up with Lisp.  It was at an
  airport during a long layover in 2007.  I wanted to use the time to
  learn something, so I booted my laptop
  running <a href="https://www.debian.org/">Debian</a> GNU/Linux 4.0
  (Etch) and then started
  <a href="https://www.gnu.org/software/clisp/">GNU CLISP</a> 2.41.
  In those days, Wi-Fi in airports was uncommon.  Smartphones and
  mobile data were also uncommon.  So it was fortunate that I had
  CLISP already installed on my system and my laptop was ready for
  learning Common Lisp.  I had it installed because I had wanted to
  learn Common Lisp for some time.  I was especially attracted by its
  simplicity, by the fact that the entire language can be built up
  from a very small set of special forms.  I
  use <a href="https://www.sbcl.org/">SBCL</a> these days, by the way.
</p>
<p>
  I discovered Emacs through Common Lisp.  Several sources recommended
  using the <a href="https://slime.common-lisp.dev/">Superior Lisp
  Interaction Mode for Emacs (SLIME)</a> for Common Lisp programming,
  so that's where I began.  For many years I continued to use Vim as
  my primary editor, while relying on Emacs and SLIME for Lisp
  development.  Over time, as I learnt more about Emacs itself, I grew
  fond of Emacs Lisp and eventually made Emacs my primary editor and
  computing environment.
</p>
<p>
  I have loved mathematics since my childhood days.  What has always
  fascinated me is how we can prove deep and complex facts using first
  principles and clear logical steps.  That feeling of certainty and
  rigour is unlike anything else.
</p>
<p>
  Over the years, my love for the subject has been rekindled many
  times.  As a specific example, let me share how I got into number
  theory.  One day I decided to learn the RSA cryptosystem.  As I was
  working through the
  <a href="https://people.csail.mit.edu/rivest/Rsapaper.pdf">RSA
  paper</a>, I stumbled upon the Euler totient function
  \( \varphi(n) \) which gives the number of positive integers not
  exceeding n that are relatively prime to n.  The paper first states
  that

  \[
    \varphi(p) = p - 1
  \]

  for prime numbers \( p.  \)  That was obvious since \( p \) has no
  factors other than \( 1 \) and itself, so every integer from \( 1 \)
  up to \( p - 1 \) must be relatively prime to it.  But then it
  presents

  \[
    \varphi(pq) = \varphi(p) \cdot \varphi(q) = (p - 1)(q - 1)
  \]

  for primes \( p \) and \( q.  \)  That was not immediately obvious to
  me back then.  After a few minutes of thinking, I managed to prove
  it from scratch.  By the inclusion-exclusion principle, we count how
  many integers from \( 1 \) up to \( pq \) are not divisible by
  \(p \) or \( q.  \)  There are \( pq \) integers in total.  Among
  them, there are \( q \) integers divisible by \( p \) and \( p \)
  integers divisible by \( q.  \)  So we need to subtract \( p + q \)
  from \(pq.  \)  But since one integer (\( pq \) itself) is counted in
  both groups, we add \( 1 \) back.  Therefore

  \[
    \varphi(pq) = pq - (p + q) + 1 = (p - 1)(q - 1).
  \]

  Next I could also obtain the general formula for \( \varphi(n) \)
  for an arbitrary positive integer \( n \) using the same idea.
  There are several other proofs too, but that is how I derived the
  general formula for \( \varphi(n) \) when I first encountered it.
  And just like that, I had begun to learn number theory!
</p>
<!-- Computing for fun -->
<p class="question" id="computing-for-fun">
  You've said you prefer computing for fun.  What is fun to you?  Do
  you have an idea of what makes something fun or not?
</p>
<p>
  For me, fun in computing began when I first learnt IBM/LCSI PC Logo
  when I was nine years old.  I had very limited access to computers
  back then, perhaps only about two hours per <em>month</em> in the
  computer laboratory at my primary school.  Most of my Logo
  programming happened with pen and paper at home.  I would "test" my
  programs by tracing the results on graph paper.  Eventually I would
  get about thirty minutes of actual computer time in the lab to run
  them for real.
</p>
<p>
  So back then, most of my computing happened without an actual
  computer.  But even with that limited access to computers, a whole
  new world opened up for me: one that showed me the joy of computing
  and more importantly, the joy of sharing my little programs with my
  friends and teachers.  One particular Logo program I still remember
  very well drew a house with animated dashed lines, where the dashes
  moved around the outline of the house.  Everyone around me loved it,
  copied it and tweaked it to change the colours, alter the details
  and add their own little touches.
</p>
<p>
  For me, fun in computing comes from such exploration and sharing.  I
  enjoy asking "what happens if" and then seeing where it leads me.
  My Emacs package
  <a href="https://elpa.nongnu.org/nongnu/devil.html">devil-mode</a>
  comes from such exploration.  It came from asking, "What happens if
  we avoid using the <kbd>ctrl</kbd> and <kbd>meta</kbd> modifier keys
  and use <kbd>,</kbd> (the comma key) or another suitable key as a
  leader key instead?  And can we still have a non-modal editing
  experience?"
</p>
<p>
  Sometimes computing for fun may mean crafting a minimal esoteric
  drawing language, making a small game or building a tool that solves
  an interesting problem elegantly.  It is a bonus if the exploration
  results in something working well enough that I can share with
  others on the World Wide Web and others find it fun too.
</p>
<!-- Pursuits -->
<p class="question" id="interests-and-exploration">
  How do you choose what to investigate?  Which most interest you,
  with what commonalities?
</p>
<p>
  For me, it has always been one exploration leading to another.
</p>
<p>
  For example, I originally built
  <a href="https://github.com/susam/mathb">MathB</a> for my friends
  and myself who were going through a phase in our lives when we used
  to challenge each other with mathematical puzzles.  This tool became
  a nice way to share solutions with each other.  Its use spread from
  my friends to their friends and colleagues, then to schools and
  universities and eventually to IRC channels.
</p>
<p>
  Similarly, I built <a href="https://github.com/susam/texme">TeXMe</a>
  when I was learning neural networks and taking a lot of notes on the
  subject.  I was not ready to share the notes online, but I did want
  to share them with my friends and colleagues who were also learning
  the same topic.  Normally I would write my notes in LaTeX, compile
  them to PDF and share the PDF, but in this case, I wondered, what if
  I took some of the code from MathB and created a tool that would let
  me write plain Markdown
  (<a href="https://github.github.com/gfm/">GFM</a>) + LaTeX
  (<a href="https://www.mathjax.org/">MathJax</a>) in
  a <code>.html</code> file and have the tool render the file as soon
  as it was opened in a web browser?  That resulted in TeXMe, which
  has surprisingly become one of my most popular projects, receiving
  millions of hits in some months according to the CDN statistics.
</p>
<p>
  Another example is <a href="https://susam.github.io/muboard/">Muboard</a>,
  which is a bit like an interactive mathematics chalkboard.  I built
  this when I was hosting an
  <a href="journey-to-prime-number-theorem.html">analytic number
  theory book club</a> and I needed a way to type LaTeX snippets live
  on screen and see them immediately rendered.  That made me wonder:
  what if I took TeXMe, made it interactive and gave it a chalkboard
  look-and-feel?  That led to Muboard.
</p>
<p>
  So we can see that sharing mathematical notes and snippets has been
  a recurring theme in several of my projects.  But that is only a
  small fraction of my interests.  I have a wide variety of interests
  in computing.  I also engage in random explorations, like writing
  IRC clients
  (<a href="https://github.com/susam/nimb">NIMB</a>,
  <a href="https://github.com/susam/tzero">Tzero</a>),
  ray tracing
  (<a href="https://github.com/susam/pov25">POV-Ray</a>,
  <a href="https://github.com/spxy/java-ray-tracing">Java ray tracer</a>),
  writing Emacs guides
  (<a href="https://github.com/susam/emacs4cl">Emacs4CL</a>,
  <a href="https://github.com/susam/emfy">Emfy</a>),
  developing small single-file HTML games
  (<a href="invaders.html">Andromeda Invaders</a>,
  <a href="myrgb.html">Guess My RGB</a>),
  purely recreational programming
  (<a href="fxyt.html">FXYT</a>,
  <a href="https://github.com/susam/may4">may4.fs</a>,
  <a href="self-printing-machine-code.html">self-printing machine code</a>,
  <a href="primegrid.html">prime number grid explorer</a>)
  and so on.  The list goes on.  When it comes to hobby computing, I
  don't think I can pick just one domain and say it interests me the
  most.  I have a lot of interests.
</p>
<!-- What is computing?  -->
<p class="question" id="computing-activities">
  What is computing, to you?
</p>
<p>
  Computing, to me, covers a wide range of activities: programming a
  computer, using a computer, understanding how it works, even
  building one.  For example, I once built a tiny 16-bit CPU along
  with a small main memory that could hold only eight 16-bit
  instructions, using VHDL and a Xilinx CPLD kit.  The design was
  based on the Mano CPU introduced in the book <em>Computer System
  Architecture</em> (3rd ed.) by M. Morris Mano.  It was incredibly
  fun to enter instructions into the main memory, one at a time, by
  pushing DIP switches up and down and then watch the CPU I had built
  execute an entire program.  For someone like me, who usually works
  with software at higher levels of abstraction, that was a thrilling
  experience!
</p>
<p>
  Beyond such experiments, computing also includes more practical and
  concrete activities, such as installing and using my favourite Linux
  distribution (Debian), writing software tools in languages like
  Common Lisp, Emacs Lisp, Python and the shell command language or
  customising my Emacs environment to automate repetitive tasks.
</p>
<p>
  To me, computing also includes the abstract stuff like spending time
  with abstract algebra and number theory and getting a deeper
  understanding of the results pertaining to groups, rings and fields,
  as well as numerous number-theoretic results.  Browsing the
  <a href="https://oeis.org/">On-Line Encyclopedia of Integer
  Sequences</a> (OEIS), writing small programs to explore interesting
  sequences or just thinking about them is computing too.  I think
  many of the interesting results in computer science have deep
  mathematical foundations.  I believe much of computer science is
  really discrete mathematics in action.
</p>
<p>
  And if we dive all the way down from the CPU to the level of
  transistors, we encounter continuous mathematics as well, with
  non-linear voltage-current relationships and analogue behaviour that
  make digital computing possible.  It is fascinating how, as a
  relatively new species on this planet, we have managed to take sand
  and find a way to use continuous voltages and currents in electronic
  circuits built with silicon and convert them into the discrete
  operations of digital logic.  We have machines that can simulate
  themselves!
</p>
<p>
  To me, all of this is fun.  To study and learn about these things,
  to think about them, to understand them better and to accomplish
  useful or amusing results with this knowledge is all part of the
  fun.
</p>
<!-- Programming vs domains -->
<p class="question" id="programming-vs-domains">
  How do you view programming vs. domains?
</p>
<p>
  I focus more on the domain than the tool.  Most of the time it is a
  problem that catches my attention and then I explore it to
  understand the domain and arrive at a solution.  The problem itself
  usually points me to one of the tools I already know.
</p>
<p>
  For example, if it is about working with text files, I might write
  an Emacs Lisp function.  If it involves checking large sets of
  numbers rapidly for patterns, I might choose C++ or Rust.  But if I
  want to share interactive visualisations of those patterns with
  others, I might rewrite the solution in HTML and JavaScript,
  possibly with the use of the Canvas API, so that I can share the
  work as a self-contained file that others can execute easily within
  their web browsers.  When I do that, I prefer to keep the HTML neat
  and readable, rather than bundled or minified, so that people who
  like to 'View Source' can copy, edit and customise the code
  themselves to immediately see their changes take effect.
</p>
<p>
  Let me share a specific example.  While working on a web-based game, I first
  used <code>CanvasRenderingContext2D</code>'s <code>fillText()</code>
  to display text on the game canvas.  However, dissatisfied with the
  text rendering quality, I began looking for IBM PC OEM fonts and
  similar retro fonts online.  After downloading a few font packs, I
  wrote a little Python script to convert them to bitmaps (arrays of
  integers) and then used the bitmaps to draw text on the canvas using
  JavaScript, one cell at a time, to get pixel-perfect results!  These
  tiny Python and JavaScript tools were good enough that I felt
  comfortable sharing them together as a tiny toolkit called
  <a href="https://susam.github.io/pcface/src/demo.html">PCFace</a>.
  This toolkit offers JavaScript bitmap arrays and tiny JavaScript
  rendering functions, so that someone else who wants to display text
  on their game canvas using PC fonts and nothing but plain HTML and
  JavaScript can do so without having to solve the problem from
  scratch!
</p>
<!-- Applicability of old functionality for new problems -->
<p class="question" id="old-functionality-and-new-problems">
  Has the rate of your making new Emacs functions has diminished over
  time (as if everything's covered) or do the widening domains lead to
  more?  I'm curious how applicable old functionality is for new
  problems and how that impacts the APIs!
</p>
<p>
  My rate of making new Emacs functions has definitely decreased.
  There are two reasons.  One is that over the years my computing
  environment has converged into a comfortable, stable setup I am very
  happy with.  The other is that at this stage of life I simply cannot
  afford the time to endlessly tinker with Emacs as I did in my
  younger days.
</p>
<p>
  More generally, when it comes to APIs, I find that well-designed
  functionality tends to remain useful even when new problems appear.
  In Emacs, for example, many of my older functions continue to serve
  me well because they were written in a composable way.  New problems
  can often be solved with small wrappers or combinations of existing
  functions.  I think APIs that consist of functions that are simple,
  orthogonal and flexible age well.  If each function in an API does
  one thing and does it well (the Unix philosophy), it will have
  long-lasting utility.
</p>
<p>
  Of course, new domains and problems do require new functions and
  extensions to an API, but I think it is very important to not give
  in to the temptation of enhancing the existing functions by making
  them more complicated with optional parameters, keyword arguments,
  nested branches and so on.  Personally, I have found that it is much
  better to implement new functions that are small, orthogonal and
  flexible, each doing one thing and doing it well.
</p>
<p class="question" id="designing-for-composability">
  What design methods or tips do you have, to increase composability?
</p>
<p>
  For me, good design starts with good vocabulary.  Clear vocabulary
  makes abstract notions concrete and gives collaborators a shared
  language to work with.  For example, while working on a network
  events database many years ago, we collected data minute by minute
  from network devices.  We decided to call each minute of data from a
  single device a "nugget".  So if we had 15 minutes of data from 10
  devices, that meant 150 nuggets.
</p>
<p>
  Why "nugget"?  Because it was shorter and more convenient than
  repeatedly saying "a minute of data from one device".  Why not
  something less fancy like "chunk"?  Because we reserved "chunk" for
  subdivisions within a nugget.  Perhaps there were better choices,
  but "nugget" was the term we settled on and it quickly became shared
  terminology between the collaborators.  Good terminology naturally
  carries over into code.  With this vocabulary in place, function
  names like <code>collect_nugget()</code>,
  <code>open_nugget()</code>, <code>parse_chunk()</code>,
  <code>index_chunk()</code>, <code>skip_chunk()</code>,
  etc. immediately become meaningful to everyone involved.
</p>
<p>
  Thinking about the vocabulary also ensures that we are thinking
  about the data, concepts and notions we are working with in a
  deliberate manner and that kind of thinking also helps when we
  design the architecture of software.
</p>
<p>
  Too often I see collaborators on software projects jump straight
  into writing functions that take some input and produce some desired
  effect, with variable names and function names decided on the fly.
  To me, this feels backwards.  I prefer the opposite approach.
  Define the terms first and let the code follow from them.
</p>
<p>
  I also prefer developing software in a layered manner, where complex
  functionality is built from simpler, well-named building blocks.  It
  is especially important to avoid <em>layer violations</em>, where
  one complex function invokes another complex function.  That creates
  tight coupling between two complex functions.  If one function
  changes in the future, we have to reason carefully about how it
  affects the other.  Since both are already complex, the cognitive
  burden is high.  A better approach, I think, is to identify the
  common functionality they share and factor that out into smaller,
  simpler functions.
</p>
<p>
  To summarise, I like to develop software with a clear vocabulary,
  consistent use of that vocabulary, a layered design where complex
  functions are built from simpler ones and by avoiding layer
  violations.  I am sure none of this is new to the Lobsters
  community.  Some of these ideas also occur
  in <a href="https://en.wikipedia.org/wiki/Domain-driven_design">domain-driven
  design</a> (DDD).  DDD defines the term <em>ubiquitous language</em>
  to mean, "A language structured around the domain model and used by
  all team members within a bounded context to connect all the
  activities of the team with the software."  If I could call this
  approach of software development something, I would simply call it
  "vocabulary-driven development" (VDD), though of course DDD is the
  more comprehensive concept.
</p>
<p>
  Like I said, none of this is likely new to the Lobsters community.
  In particular, I suspect Forth programmers would find it too
  obvious.  In Forth, it is very difficult to begin with a long,
  poorly thought-out monolithic word and then break it down into
  smaller ones later.  The stack effects quickly become too hard to
  track mentally with that approach.  The only viable way to develop
  software in Forth is to start with a small set of words that
  represent the important notions of the problem domain, test them
  immediately and then compose higher-level words from the lower-level
  ones.  Forth naturally encourages a layered style of development,
  where the programmer thinks carefully about the domain, invents
  vocabulary and expresses complex ideas in terms of simpler ones,
  almost in a mathematical fashion.  In my experience, this kind of
  deliberate design produces software that remains easy to understand
  and reason about even years after it was written.
</p>
<!-- Small vs large functions -->
<p class="question" id="small-vs-large-functions">
  Not enhancing existing functions but adding new small ones seems
  quite lovely, but how do you come back to such a codebase later with
  many tiny functions?  At points, I've advocated for very large
  functions, particularly traumatized by Java-esque 1000 functions in
  1000 files approaches.  When you had time, would you often
  rearchitecture the conceptual space of all of those functions?
</p>
<p>
  The famous quote from Alan J. Perlis comes to mind:
</p>
<blockquote>
  <p>
    It is better to have 100 functions operate on one data structure
    than 10 functions on 10 data structures.
  </p>
</blockquote>
<p>
  Personally, I enjoy working with a codebase that has thousands of
  functions, provided most of them are small, well-scoped and do one
  thing well.  That said, I am not dogmatically opposed to large
  functions.  It is always a matter of taste and judgement.  Sometimes
  one large, cohesive function is clearer than a pile of tiny ones.
</p>
<p>
  For example, when I worked on parser generators, I often found that
  lexers and finite state machines benefited from a single top-level
  function containing the full tokenisation logic or the full state
  transition logic in one place.  That function could call smaller
  helpers for specific tasks, but we still need the overall
  <code>switch</code>-<code>case</code> or
  <code>if</code>-<code>else</code> or <code>cond</code> ladder
  somewhere.  I think trying to split that ladder into smaller
  functions would only make the code harder to follow.
</p>
<p>
  So while I lean towards small, composable functions, the real goal
  is to strike a balance that keeps code maintainable in the long run.
  Each function should be as small as it can reasonably be and no
  smaller.
</p>
<!-- Domains -->
<p class="question" id="domains-and-projects">
  Like you, I program as a tool to explore domains.  Which do you know
  the most about?
</p>
<p>
  For me too, the appeal of computer programming lies especially in
  how it lets me explore different domains.  There are two kinds of
  domains in which I think I have gained good expertise.  The first
  comes from years of developing software for businesses, which has
  included solving problems such as network events parsing, indexing
  and querying, packet decoding, developing parser generators,
  database session management and TLS certificate lifecycle
  management.  The second comes from areas I pursue purely out of
  curiosity or for hobby computing.  This is the kind I am going to
  focus on in our conversation.
</p>
<p>
  Although computing and software are serious business today, for me,
  as for many others, computing is also a hobby.
</p>
<p>
  Personal hobby projects often lead me down various rabbit holes and
  I end up learning new domains along the way.  For example, although
  I am not a web developer, I learnt to build small, interactive
  single-page tools in plain HTML, CSS and JavaScript simply because I
  needed them for my hobby projects over and over again.  An early
  example is <a href="quickqwerty.html">QuickQWERTY</a>, which I built
  to teach myself and my friends touch-typing on QWERTY keyboards.
  Another example is <a href="cfrs.html">CFRS[]</a>, which I created
  because I wanted to make a total (non-Turing complete) drawing
  language that has turtle graphics like Logo but is absolutely
  minimal like P&prime;&prime;.
</p>
<!-- Double spacing -->
<p class="question" id="double-spacing-and-touch-typing">
  You use double spaces after periods which I'd only experienced from
  people who learned touch typing on typewriters, unexpected!
</p>
<p>
  Yes, I do separate sentences by double spaces.  It is interesting
  that you noticed this.
</p>
<p>
  I once briefly learnt touch typing on typewriters as a kid, but
  those lessons did not stick with me.  It was much later, when I used
  a Java applet-based touch typing tutor that I found online about two
  decades ago, that the lessons really stayed with me.  Surprisingly,
  that application taught me to type with a single space between
  sentences.  By the way, I disliked installing Java plugins into the
  web browser, so I wrote <a href="quickqwerty.html">QuickQWERTY</a>
  as a similar touch typing tutor in plain HTML and JavaScript for
  myself and my friends.
</p>
<p>
  I learnt to use double spaces between sentences first with Vim and
  then later again with Emacs.  For example, in Vim,
  the <code>joinspaces</code> option is on by default, so when we join
  sentences with the normal mode command <code>J</code> or format
  paragraphs with <code>gqap</code>, Vim inserts two spaces after full
  stops.  We need to disable that behaviour with <code>:set
  nojoinspaces</code> if we want single spacing.
</p>
<p>
  It is similar in Emacs.  In Emacs, the
  <code>delete-indentation</code> command (<code>M-^</code>) and
  the <code>fill-paragraph</code> command (<code>M-q</code>) both
  insert two spaces between sentences by default.  Single spacing can
  be enabled with <code>(setq sentence-end-double-space nil)</code>.
</p>
<p>
  Incidentally, I spend a good portion of the README for my Emacs
  quick-start DIY kit named
  <a href="https://github.com/susam/emfy">Emfy</a> discussing sentence
  spacing conventions under the section
  <a href="https://github.com/susam/emfy#single-space-for-sentence-spacing">Single
  Space for Sentence Spacing</a>.  There I explain how to configure
  Emacs to use single spaces, although I use double spaces myself.
  That's because many new Emacs users prefer single spacing.
</p>
<p>
  The defaults in Vim and Emacs made me adopt double spacing.  The
  double spacing convention is also widespread across open source
  software.  If we look at the Vim help pages, Emacs built-in
  documentation or the Unix and Linux man pages, double spacing is the
  norm.  Even inline comments in traditional open source projects
  often use it.  For example, see Vim's
  <a href="https://github.com/vim/vim/blob/v9.1.1752/runtime/doc/usr_01.txt">:h usr_01.txt</a>,
  Emacs's
  <a href="https://cgit.git.savannah.gnu.org/cgit/emacs.git/tree/doc/emacs/emacs.texi?h=emacs-30.2#n1556">(info "(emacs) Intro")</a>
  or the comments in the <a href="https://gcc.gnu.org/git/?p=gcc.git;f=gcc/cfg.cc;hb=releases/gcc-15.2.0">GCC source code</a>.
</p>
<!-- Learning -->
<p class="question" id="approach-to-learning">
  How do you approach learning a new domain?
</p>
<p>
  When I take on a new domain, there is of course a lot of reading
  involved from articles, books and documentation.  But as I read, I
  constantly try to test what I learn.  Whenever I see a claim, I ask
  myself, "If this claim were wrong, how could I demonstrate it?"
  Then I design a little experiment, perhaps write a snippet of code
  or run a command or work through a concrete example, with the goal
  of checking the claim in practice.
</p>
<p>
  Now I am not genuinely hoping to prove a claim wrong.  It is just a
  way to engage with the material.  To illustrate, let me share an
  extremely simple and generic example without going into any
  particular domain.  Suppose I learn that Boolean operations in
  Python short-circuit.  I might write out several experimental
  snippets like the following:
</p>
<pre><code class="language-python">def t(): print('t'); return True
def f(): print('f'); return False
f() or t() or f()
</code></pre>
<p>
  And then confirm that the results do indeed confirm short-circuit
  evaluation (<code>f</code> followed by <code>t</code> in this case).
</p>
<p>
  At this point, one could say, "Well, you just confirmed what the
  documentation already told you."  And that's true.  But for me, the
  value lies in trying to test it for myself.  Even if the claim
  holds, the act of checking forces me to see the idea in action.
  That not only reinforces the concept but also helps me build a much
  deeper intuition for it.
</p>
<p>
  Sometimes these experiments also expose gaps in my own
  understanding.  Suppose I didn't properly know what "short-circuit"
  means.  Then the results might contradict my expectations.  That
  contradiction would push me to correct my misconception and that's
  where the real learning happens.
</p>
<p>
  Occasionally, this process even uncovers subtleties I didn't expect.
  For example, while learning socket programming, I discovered that a
  client can successfully receive data using <code>recv()</code> even
  after calling <code>shutdown()</code>, contrary to what I had first
  inferred from the specifications.  See my Stack Overflow post
  <a href="https://stackoverflow.com/q/39698037/303363">Why can recv()
  receive messages after the client has invoked shutdown()?</a> for
  more details if you are curious.
</p>
<p>
  Now this method cannot always be applied, especially if it is very
  expensive or unwieldy to do so.  For example, if I am learning
  something in the finance domain, it is not always possible to
  perform an actual transaction.  One can sometimes use simulation
  software, mock environments or sandbox systems to explore ideas
  safely.  Still, it is worth noting that this method has its
  limitations.
</p>
<p>
  In mathematics, though, I find this method highly effective.  When I
  study a new branch of mathematics, I try to come up with examples
  and counterexamples to test what I am learning.  Often, failing to
  find a counterexample helps me appreciate more deeply why a claim
  holds and why no counterexamples exist.
</p>
<!-- Distraction -->
<p class="question" id="managing-time-and-distractions">
  Do you have trouble not getting distracted with so much on your
  plate?  I'm curious how you balance the time commitments of
  everything!
</p>
<p>
  Indeed, it is very easy to get distracted.  One thing that has
  helped over the years is the increase in responsibilities in other
  areas of my life.  These days I also spend some of my free time
  studying mathematics textbooks.  With growing responsibilities and
  the time I devote to mathematics, I now get at most a few hours each
  week for hobby computing.  This automatically narrows down my
  options.  I can explore perhaps one or at most two ideas in a month
  and that constraint makes me very deliberate about choosing my
  pursuits.
</p>
<p>
  Many of the explorations do not evolve into something solid that I
  can share.  They remain as little experimental code snippets or
  notes archived in a private repository.  But once in a while, an
  exploration grows into something concrete and feels worth sharing on
  the Web.  That becomes a short-term hobby project.  I might work on
  it over a weekend if it is small or for a few weeks if it is more
  complex.  When that happens, the goal of sharing the project helps
  me focus.
</p>
<p>
  I try not to worry too much about making time.  After all, this is
  just a hobby.  Other areas of my life have higher priority.  I also
  want to devote a good portion of my free time to learning more
  mathematics, which is another hobby I am passionate about.  Whatever
  little spare time remains after attending to the higher-priority
  aspects of my life goes into my computing projects, usually a couple
  of hours a week, most of it on weekends.
</p>
<!-- Blogging -->
<p class="question" id="blogging">
  How does blogging mix in?  What's the development like of a single
  piece of curiosity through wrestling with the domain, learning and
  sharing it etc.?
</p>
<p>
  Maintaining my personal website is another aspect of computing that
  I find very enjoyable.  My website began as a loose collection of
  pages on a LAN site during my university days.  Since then I have
  been adding pages to it to write about various topics that I find
  interesting.  It acquired its blog shape and form much later when
  blogging became fashionable.
</p>
<p>
  I usually write a new blog post when I feel like there is some piece
  of knowledge or some exploration that I want to archive in a
  persistent format.  Now what the development of a post looks like
  depends very much on the post.  So let me share two opposite
  examples to describe what the development of a single piece looks
  like.
</p>
<p>
  One of my most frequently visited posts
  is <a href="lisp-in-vim.html">Lisp in Vim</a>.  It started when I
  was hosting a Common Lisp programming club for beginners.  Although
  I have always used Emacs and SLIME for Common Lisp programming
  myself, many in the club used Vim, so I decided to write a short
  guide on setting up something SLIME-like there.  As a former
  long-time Vim user myself, I wanted to make the Lisp journey easier
  for Vim users too.  I thought it would be a 30-minute exercise where
  I write up a README that explains how to install
  <a href="https://github.com/kovisoft/slimv">Slimv</a> and how to set
  it up in Vim.  But then I discovered a newer plugin called
  <a href="https://github.com/vlime/vlime">Vlime</a> that also offered
  SLIME-like features in Vim!  That detail sent me down a very deep
  rabbit hole.  Now I needed to know how the two packages were
  different, what their strengths and weaknesses were, how routine
  operations were performed in both and so on.  What was meant to be a
  short note turned into a nearly 10,000-word article.  As I was
  comparing the two SLIME-like packages for Vim, I also found a few
  bugs in Slimv and contributed fixes for them
  (<a href="https://github.com/kovisoft/slimv/pull/87">#87</a>,
  <a href="https://github.com/kovisoft/slimv/pull/88">#88</a>,
  <a href="https://github.com/kovisoft/slimv/pull/89">#89</a>,
  <a href="https://github.com/kovisoft/slimv/pull/90">#90</a>).
  Writing this blog post turned into a month-long project!
</p>
<p>
  At the opposite extreme is a post like
  <a href="elliptical-python-programming.html">Elliptical
  Python Programming</a>.  I stumbled upon Python's
  <a href="https://docs.python.org/3/library/constants.html#Ellipsis">Ellipsis</a>
  while reviewing someone's code.  It immediately caught my attention.
  I wondered if, combined with some standard obfuscation techniques,
  one could write arbitrary Python programs that looked almost like
  Morse code.  A few minutes of experimentation showed that a
  genuinely Morse code-like appearance was not possible, but something
  close could be achieved.  So I wrote what I hope is a humorous post
  demonstrating that arbitrary Python programs can be written using a
  very restricted set of symbols, one of which is the ellipsis.  It
  took me less than an hour to write this post.  The final result
  doesn't look quite like Morse code as I had imagined, but it is
  quite amusing nevertheless!
</p>
<!-- Forums -->
<p class="question" id="forums">
  What draws you to post and read online forums?  How do you balance
  or allot time for reading technical articles, blogs etc.?
</p>
<p>
  The exchange of ideas!  Just as I enjoy sharing my own
  computing-related thoughts, ideas and projects, I also find joy in
  reading what others have to share.
</p>
<p>
  Other areas of my life take precedence over hobby projects and hobby
  projects take precedence over technical forums.
</p>
<p>
  After I've given time to the higher-priority parts of my life and to
  my own technical explorations, I use whatever spare time remains to
  read articles, follow technical discussions and occasionally add
  comments.
</p>
<!-- MathB.in -->
<p class="question" id="mathb-moderation-problems">
  When you decided to stop with MathB due to moderation burdens, I
  offered to take over/help and you mentioned others had too.  Did
  anyone end up forking it, to your knowledge?
</p>
<p>
  I first thought of shutting down the
  <a href="https://github.com/susam/mathb">MathB</a>-based pastebin
  website in November 2019.  The website had been running for seven
  years at that time.  When I announced my thoughts to the IRC
  communities that would be affected, I received a lot of support and
  encouragement.  A few members even volunteered to help me out with
  moderation.  That support and encouragement kept me going for
  another six years.  However, the volunteers eventually became busy
  with their own lives and moved on.  After all, moderating user
  content for an open pastebin that anyone in the world can post to is
  a thankless and tiring activity.  So most of the moderation activity
  fell back on me.  Finally, in February 2025, I realised that I no
  longer want to spend time on this kind of work.
</p>
<p>
  I developed MathB with a lot of passion for myself and my friends.
  I had no idea at the time that this little project would keep a
  corner of my mind occupied even during weekends and holidays.  There
  was always a nagging worry.  What if someone posted content that
  triggered compliance concerns and my server was taken offline while
  I was away?  I no longer wanted that kind of burden in my life.  So
  I finally decided to shut it down.  I've written more about this
  in <a href="mathbin-is-shutting-down.html">MathB.in Is Shutting
  Down</a>.
</p>
<p>
  To my knowledge, no one has forked it, but others have developed
  alternatives.  Further, the
  <a href="https://wiki.archiveteam.org/">Archive Team</a> has
  <a href="https://web.archive.org/web/*/https://mathb.in/">archived</a>
  all posts from the now-defunct MathB-based website.  A member of the
  Archive Team reached out to me over IRC and we worked together for
  about a week to get everything successfully archived.
</p>
<!-- Textbooks -->
<p class="question" id="favourite-mathematics-textbooks">
  What're your favorite math textbooks?
</p>
<p>
  I have several favourite mathematics books, but let me share three I
  remember especially fondly.
</p>
<p>
  The first is <em>Advanced Engineering Mathematics</em> by Erwin
  Kreyszig.  I don't often see this book recommended online, but for
  me it played a major role in broadening my horizons.  I think I
  studied the 8th edition back in the early 2000s.  It is a hefty book
  with over a thousand pages and I remember reading it cover to cover,
  solving every exercise problem along the way.  It gave me a solid
  foundation in routine areas like differential equations, linear
  algebra, vector calculus and complex analysis.  It also introduced
  me to Fourier transforms and Laplace transforms, which I found
  fascinating.
</p>
<p>
  Of course, the Fourier transform has a wide range of applications in
  signal processing, communications, spectroscopy and more.  But I
  want to focus on the fun and playful part.  In the early 2000s, I
  was also learning to play the piano as a hobby.  I used to record my
  amateur music compositions with
  <a href="https://github.com/audacity/audacity">Audacity</a> by
  connecting my digital piano to my laptop with a line-in cable.  It
  was great fun to plot the spectrum of my music on Audacity, apply
  high-pass and low-pass filters and observe how the Fourier transform
  of the audio changed and then hear the effect on the music.  That
  kind of hands-on tinkering made Fourier analysis intuitive for me
  and I highly recommend it to anyone who enjoys both music and
  mathematics.
</p>
<p>
  The second book is <em>Introduction to Analytic Number Theory</em>
  by Tom M.  Apostol.  As a child I was intrigued by the prime number
  theorem but lacked the mathematical maturity to understand its
  proof.  Years later, as an adult, I finally taught myself the proof
  from Apostol's book.  It was a fantastic journey that began with
  simple concepts like the Möbius function and Dirichlet products and
  ended with quite clever contour integrals that proved the theorem.
  The complex analysis I had learnt from Kreyszig turned out to be
  crucial for understanding those integrals.  Along the way I gained a
  deeper understanding of the Riemann zeta function \( \zeta(s).  \)
  The book discusses zero-free regions where \( \zeta(s) \) does not
  vanish, which I found especially fascinating.  Results like \(
  \zeta(-1) = -1/12, \) which once seemed mysterious, became obvious
  after studying this book.
</p>
<p>
  The third is <em>Galois Theory</em> by Ian Stewart.  It introduced
  me to field extensions, field homomorphisms and solubility by
  radicals.  I had long known that not all quintic equations are
  soluble by radicals, but I didn't know why.  Stewart's book taught
  me exactly why.  In particular, it demonstrated that the polynomial
  \( t^5 - 6t + 3 \) over the field of rational numbers is not soluble
  by radicals.  This particular result, although fascinating, is just
  a small part of a much larger body of work, which is even more
  remarkable.  To arrive at this result, the book takes us through a
  wonderful journey that includes the theory of polynomial rings,
  algebraic and transcendental field extensions, impossibility proofs
  for ruler-and-compass constructions, the Galois correspondence and
  much more.
</p>
<p>
  One of the most rewarding aspects of reading books like these is how
  they open doors to new knowledge, including things I didn't even
  know that I didn't know.
</p>
<!-- Mathematics and computing -->
<p class="question" id="mathematics-and-computing">
  How does the newer math jell with or inform past or present
  computing, compared to much older stuff?
</p>
<p>
  I don't always think explicitly about how mathematics informs
  computing, past or present.  Often the textbooks I pick feel very
  challenging to me, so much so that all my energy goes into simply
  mastering the material.  It is arduous but enjoyable.  I do it
  purely for the fun of learning without worrying about applications.
</p>
<p>
  Of course, a good portion of pure mathematics probably has no
  real-world applications.  As G. H. Hardy famously wrote in <em>A
  Mathematician's Apology</em>:
</p>
<blockquote>
  <p>
    I have never done anything 'useful'.  No discovery of mine has
    made or is likely to make, directly or indirectly, for good or
    ill, the least difference to the amenity of the world.
  </p>
</blockquote>
<p>
  But there is no denying that some of it does find applications.
  Were Hardy alive today, he might be disappointed that number theory,
  his favourite field of "useless" mathematics, is now a crucial part
  of modern cryptography.  Electronic commerce wouldn't likely exist
  without it.
</p>
<p>
  Similarly, it is amusing how something as abstract as abstract
  algebra finds very concrete applications in coding theory.  Concepts
  such as polynomial rings, finite fields and cosets of subspaces in
  vector spaces over finite fields play a crucial role in
  error-correcting codes, without which modern data transmission and
  storage would not be possible.
</p>
<p>
  On a more personal note, some simpler areas of mathematics have been
  directly useful in my own work.  While solving problems for
  businesses, information entropy, combinatorics and probability
  theory were crucial when I worked on gesture-based authentication
  about one and a half decades ago.
</p>
<p>
  Similarly, when I was developing Bloom filter-based indexing and
  querying for a network events database, again, probability theory
  was crucial in determining the parameters of the Bloom filters (such
  as the number of hash functions, bits per filter and elements per
  filter) to ensure that the false positive rate remained below a
  certain threshold.  Subsequent testing with randomly sampled network
  events confirmed that the observed false positive rate matched the
  theoretical estimate quite well.  It was very satisfying to see
  probability theory and the real world agreeing so closely.
</p>
<p>
  Beyond these specific examples, studying mathematics also influences
  the way I think about problems.  Embarking on journeys like analytic
  number theory or Galois theory is humbling.  There are times when I
  struggle to understand a small paragraph of the book and it takes me
  several hours (or even days) to work out the arguments in detail
  with pen and paper (lots of it) before I really grok them.  That
  experience of grappling with dense reasoning teaches humility and
  also makes me sceptical of complex, hand-wavy logic in day-to-day
  programming.
</p>
<p>
  Several times I have seen code that bundles too many decisions into
  one block of logic, where it is not obvious whether it would behave
  correctly in all circumstances.  Explanations may sometimes be
  offered about why it works for reasonable inputs, but the reasoning
  is often not watertight.  The experience of working through
  mathematical proofs, writing my own, making mistakes and then
  correcting them has taught me that if the reasoning for correctness
  is not clear and rigorous, something could be wrong.  In my
  experience, once such code sees real-world usage, a bug is nearly
  always found.
</p>
<p>
  That's why I usually insist either on simplifying the logic or on
  demonstrating correctness in a clear, rigorous way.  Sometimes this
  means doing a case-by-case analysis for different types of inputs or
  conditions and showing that the code behaves correctly in each case.
  There is also a bit of an art to reducing what seem like numerous or
  even infinitely many cases to a small, manageable set of cases by
  spotting structure, such as symmetries, invariants or natural
  partitions of the input space.  Alternatively, one can look for a
  simpler argument that covers all cases.  These are techniques we
  employ routinely in mathematics and I think that kind of thinking
  and reasoning is quite valuable in software development too.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/my-lobsters-interview.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a>
</p>
]]>
</description>
</item>
<item>
<title>Miller-Rabin Speed Test</title>
<link>https://susam.net/code/web/miller-rabin-speed-test.html</link>
<guid isPermaLink="false">mrpst</guid>
<pubDate>Sat, 16 Aug 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  A demo page that implements the Miller-Rabin primality test to
  accurately detect primes for all numbers less than
  318665857834031151167461 and compare its speed against a simple
  division based primality test algorithm.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/web/miller-rabin-speed-test.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Elliptical Python Programming</title>
<link>https://susam.net/elliptical-python-programming.html</link>
<guid isPermaLink="false">tmdms</guid>
<pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  One thing I love about Python is how it comes with its very own
  built-in zen.  In moments of tribulations, when I am wrestling with
  crooked code and tangled thoughts, I often find solace in its
  timeless wisdom.  Here's a glimpse of the clarity it provides:
</p>
<pre>
<samp>$ <kbd>python3 -m this | grep e-</kbd>
There should be one-- and preferably only one --obvious way to do it.</samp>
</pre>
<p>
  Indeed, there is one and only one <em>obvious</em> way to write the
  number 1 in Python, like so:
</p>
<pre><samp>&gt;&gt;&gt; <kbd>--(...==...)</kbd>
1</samp></pre>
<p>
  You may, quite naturally, place several ones adjacently to produce
  larger integers:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>--(...==...)--(...==...)</kbd>
2</samp>
</pre>
<p>
  And so on, ad infinitum, or until your heap collapses like a poorly
  made soufflé.  Now, the "pre-decrement operator" at the beginning is
  entirely optional, much like the plus sign when you write "+5
  biscuits" in a letter to your grandmother.  It's not wrong, but it
  is unnecessary.  So unless you want to look peculiar to your
  colleagues, you would likely want to adopt a more conventional
  style, such as this:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>(...==...)--(...==...)--(...==...)</kbd>
3</samp>
</pre>
<p>
  Now, all computer programs are, in some sense, just a long, earnest
  stream of bits.  It is currently fashionable to bundle these bits
  into groups of eight and write them as integers.  Following this
  trend, we can compute absolutely anything that is computable as long
  as we know exactly what integers to write.  Now, I wouldn't want to
  bore you with the finer details of computer science, not in this day
  and age, fascinating as they may be.  I trust you are quite capable
  of drawing the rest of the f... well, <em>feathered</em>, nocturnal
  bird.  Once you've grasped the basics, a typical first Python
  program might look something like this:
</p>
<pre class="wrap"><code>exec('%ccode></pre>
<p>
  Now you might be wondering if this is <em>really</em> the way one
  ought to write production Python code.  Isn't it too much trouble to
  type those dots over and over again?  Not if you remap your
  <kbd>tab</kbd> key to type three dots, of course.  But I understand
  not everyone likes to remap their keys like this.  In particular,
  there exists a peculiar species of mammal known to remap their
  <kbd>tab</kbd> key to parentheses.  They claim it leads to
  enlightenment.  Such enlightened living forms may find the following
  program more convenient to type:
</p>
<pre class="wrap"><code>exec('%ccode></pre>
<p>
  This program is functionally equivalent to the earlier one.  But
  Python isn't meant for enlightenment.  It's meant for getting things
  done.  And to get things done, code should be readable, maintainable
  and ideally not resemble an ancient summoning ritual.  That's why I
  personally prefer the earlier style, the one with the ellipses.  It
  gracefully avoids the disconcerting void that lurks within the
  parentheses.  After all, programs must be written for people to read
  and only incidentally for machines to execute.
</p>
<p>
  Finally, I must emphasise that you should never deploy code like
  this in production.  If you plan to write code like this for your
  production CGI scripts, I implore you to add some ellipses for
  logging.  When dung inevitably collides with the fan, you'll be
  immensely glad you scattered some useful logs amidst the ellipses
  that hold together your business logic.  With that small piece of
  unsolicited advice, I'll end this brief distraction from scrolling
  through endless arguments on Internet forums.  Happy coding and may
  your parentheses stay balanced (and may your ellipses be the
  punctuation that ...
  <!-- ).  Now, I can sleep peacefully!  -->
</p>
<!--
  For the enlightened folks who are offended by the penultimate
  paragraph, lighten up!  I am no stranger to the fine art of nested
  parentheses.  This very blog is crafted with an abundance of them,
  all forged through the mighty steel and bank machinery.
-->
<!-- ### -->
<p>
  <a href="https://susam.net/elliptical-python-programming.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/humour.html">#humour</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 1.3.0</title>
<link>https://susam.net/code/news/mathb/1.3.0.html</link>
<guid isPermaLink="false">lpjpy</guid>
<pubDate>Sun, 16 Mar 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB 1.3.0 is likely the final update of MathB, a web-based
  mathematics pastebin service.  The online mathematics pastebin
  service previously hosted at <code>https://mathb.in/</code> has been
  shut down today after 13 years of continuous service.  See the post
  <a href="../../../mathbin-is-shutting-down.html">MathB.in Is
  Shutting Down</a> for more details about this.  This release
  captures the state of this project as it was today at the time of
  shutting down the online service.
</p>
<p>
  This update includes a few new features.  For example, there is now
  a configurable runtime property named <code>:expect</code> that can
  be used to enforce the presence of certain tokens in the posts
  submitted by the users.  This feature was used to enforce the
  presence of LaTeX delimiters in the online service, a measure that
  was instrumental in reducing spam to a great extent in the last few
  years.  There are a few other minor changes too.
  See <a href="https://github.com/susam/mathb/blob/main/CHANGES.md">CHANGES.md</a>
  for a detailed changelog.
</p>
<p>
  The source code of MathB remains free and open-source, so anyone
  interested in hosting their own instance can still do so.  To access
  the source code of MathB, please visit
  <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/1.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.5.0</title>
<link>https://susam.net/code/news/fxyt/0.5.0.html</link>
<guid isPermaLink="false">nwtao</guid>
<pubDate>Tue, 11 Feb 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.5.0 is a minor update of FXYT, a tiny, esoteric, stack-based,
  postfix, canvas colouring language with only 36 simple commands.
  This release fixes an annoying bug that has been affecting some
  mobile device users for a while.  On some mobile web browsers, such
  as Chrome on Samsung Galaxy S8, the drawing canvas would appear to
  be larger than the viewport thus overflowing the visible screen on
  the mobile device.  The user would then be required to manually zoom
  out in order to use this tool conveniently.  This issue has been
  fixed in this release.
</p>
<p>
  If you follow my <a href="../../../cfrs.html">CFRS[]</a> project,
  you might have noticed yesterday that a very similar fix has gone
  into CFRS[] too.  For more details about that, see
  the release page for <a href="../cfrs/0.3.0.html">CFRS[] 0.3.0</a>.
</p>
<p>
  Visit <a href="../../../fxyt.html">FXYT</a> to play with FXYT and
  draw some interesting patterns!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.5.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>CFRS[] 0.3.0</title>
<link>https://susam.net/code/news/cfrs/0.3.0.html</link>
<guid isPermaLink="false">ojrjp</guid>
<pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  CFRS[] 0.3.0 is a minor update of CFRS[], an extremely minimal
  drawing language consisting of only 6 simple commands.  This update
  fixes an annoying bug that caused CFRS[] canvas to overflow the
  visible screen on some mobile web browsers.  In particular, this
  issue was observed on Chrome running on Samsung Galaxy S8.
</p>
<p>
  To read more about CFRS[], go to
  <a href="https://github.com/susam/cfrs#readme">github.com/susam/cfrs</a>.
  Also, visit <a href="../../../cfrs.html">cfrs.html</a> to play with CFRS[]
  now and draw some nice patterns!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/cfrs/0.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.4.0</title>
<link>https://susam.net/code/news/fxyt/0.4.0.html</link>
<guid isPermaLink="false">zgrko</guid>
<pubDate>Sun, 09 Feb 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.4.0 is a minor update of FXYT, a tiny, esoteric, stack-based,
  postfix, canvas colouring language with only 36 simple commands.
  This release increases the maximum allowed code length from 256
  bytes to 1024 bytes.  This means there is now more room for writing
  more complex FXYT programs!
</p>
<p>
  Further, the maximum code length for distributable demo links has
  been increased from 64 bytes to 256 bytes.  This allows several more
  impressive demos to have their own distributable links.  As a
  specific example of one such demo, take a look at
  this <a href="https://susam.net/fxyt.html#XTsN128dN3142pN128qDN3142gbN6284dcDN1571gbN3142SdcDNN1571dlbNN3142dSdcDDN166SDpN120000qdSDpN1000qpN1000qN1000SdpN1000qN1100sN3pN25qYgNSbPN255c">animated
  sine wave</a> developed by <a href="https://github.com/ncw">Nick
  Craig-Wood</a>, of Rclone fame!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.4.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Negative Lookahead Assertion</title>
<link>https://susam.net/negative-lookahead-assertion.html</link>
<guid isPermaLink="false">tdawz</guid>
<pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is an example of negative lookahead assertion in regular
  expression using Python:
</p>
<pre>
<code>import re
strings = ['foo', 'bar', 'baz', 'foo-bar', 'bar-baz', 'baz-foo']
matches = [s for s in strings if re.search('^(?!.*foo)', s)]
print(matches)</code>
</pre>
<p>
  The regular expression <code>^(?!.*foo)</code> in the above example
  matches strings that do not contain the pattern <code>foo</code>.
  The above code example produces the following output:
</p>
<pre><samp>['bar', 'baz', 'bar-baz']</samp></pre>
<p>
  Of course, it is much simpler to use an ordinary regular expression
  that matches <code>foo</code> and then invert the result of the
  match to ignore strings that contain <code>foo</code>.  For example,
  consider the following straightforward solution:
</p>
<pre><code>matches = [s for s in strings if not re.search('foo', s)]</code></pre>
<p>
  This example produces the same result as the earlier example but
  with less complexity.  However, there are situations where, as a
  user of certain software tool, we might not have control over how
  the tool applies the regular expression.  Some tools only allow us
  to provide a pattern and then they automatically select strings that
  match the pattern.  In such cases, if we need to select strings
  that <em>do not</em> match a given pattern, negative lookahead
  assertions become quite useful, provided the regular expression
  flavour supported by the tool allows the use of negative lookahead
  assertions.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/negative-lookahead-assertion.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Guess My RGB 0.3.0</title>
<link>https://susam.net/code/news/myrgb/0.3.0.html</link>
<guid isPermaLink="false">shmtq</guid>
<pubDate>Sat, 14 Sep 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  <a href="../../../myrgb.html">Guess My RGB</a>, the little colour
  guessing game, just got a small update.  This update adds a
  "Mode" link to the footer which can be used to toggle the game
  between normal mode and expert mode.
</p>
<p>
  The expert mode was introduced as a hidden feature five months ago
  in the <a href="0.2.0.html">previous release</a>.  With the current
  release, the expert mode no longer remains a hidden feature.  You
  can simply toggle between modes via the new footer link.
</p>
<p>
  Ready to test your colour skills?  Head over to
  <a href="../../../myrgb.html">myrgb.html</a> and start playing
  today!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/myrgb/0.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Guess My RGB 0.2.0</title>
<link>https://susam.net/code/news/myrgb/0.2.0.html</link>
<guid isPermaLink="false">vojtv</guid>
<pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  <a href="../../../myrgb.html">Guess My RGB</a>, the little colour
  guessing game, received a minor update today.  This update adds a
  hidden feature that lets you play the game in <em>expert mode</em>.
  In this mode, the match percentage for your submitted guess is not
  shown on the screen.
</p>
<p>
  Thanks to @steffahn for
  <a href="https://lobste.rs/s/sbcayb/guess_my_rgb#c_gqrj3r">suggesting
  this feature</a> on th Lobsters forum!
</p>
<p>
  Visit <a href="../../../myrgb.html#x">myrgb.html#x</a> now to play
  the game in the expert mode.
</p>
<p>
  Alternatively, visit <a href="../../../myrgb.html">myrgb.html</a> to
  play it in the normal mode like before.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/myrgb/0.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>CFRS[] 0.2.0</title>
<link>https://susam.net/code/news/cfrs/0.2.0.html</link>
<guid isPermaLink="false">ihmkl</guid>
<pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  CFRS[] 0.2.0 is a minor update of CFRS[], an extremely minimal
  drawing language consisting of only 6 simple commands.  This update
  brings minor changes to the built-in help screen that can be invoked
  by typing <code>?</code> in the input pane.  For example, the help
  screen now has a direct links to built-in demos and community demos.
  Further, based on community feedback, the description of
  the <code>]</code> command has been updated with clearer language
  that better clarifies that this command repeats a repeatable block
  once (i.e. executes the repeatable block again).  See
  the <a href="https://github.com/susam/cfrs/blob/main/CHANGES.md">changelog</a>
  for more details.
</p>
<p>
  To read more about CFRS[], go to
  <a href="https://github.com/susam/cfrs#readme">github.com/susam/cfrs</a>.
  Visit <a href="../../../cfrs.html">cfrs.html</a> to play with CFRS[]
  now and draw some nice pictures and animation.  If you end up
  developing any cool demos, do share them by creating a
  <a href="https://github.com/susam/cfrs/issues">new post here</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/cfrs/0.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Guess My RGB 0.1.0</title>
<link>https://susam.net/code/news/myrgb/0.1.0.html</link>
<guid isPermaLink="false">ndivu</guid>
<pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Guess My RGB 0.1.0 is the first stable release
  of <a href="../../../myrgb.html">this tiny colour guessing game</a>.
  The game is available as a single HTML page that runs in a web
  browser.  It presents a page with a randomly chosen background
  colour.  The player then needs to guess the three RGB hexademical
  digits that make the given background colour.  See
  <a href="https://github.com/susam/myrgb">github.com/susam/myrgb</a>
  for more information about this game.
</p>
<p>
  I wrote this game last Saturday afternoon and shared it on my
  website at <a href="../../../myrgb.html">myrgb.html</a> later that
  night.  I had no intention of sharing this with a wide audience yet
  because I had not had sufficient time testing it well.  But somehow
  a Hacker News (HN) user named <em>talonx</em> discovered this game
  on Sunday morning and shared it on HN in this post:
  <a href="https://news.ycombinator.com/item?id=39882018">news.ycombinator.com/item?id=39882018</a>.
</p>
<p>
  Since I had not shared this game with anyone anywhere yet, I was
  quite surprised to wake up Sunday morning and find my game trending
  at the top of HN.  I believe this is where maintaining an RSS feed
  on my website might have helped.  Every new page that I publish on
  this website also appears as an entry in the RSS feed for this
  website.  This feed can be found
  here: <a href="../../../feed.xml">feed.xml</a>.  I have a couple of
  hundred subscribers to this feed.  It is very likely that the HN
  user who shared this game on HN found it through this feed.
</p>
<p>
  Ever since this game was shared on HN, my website has received a
  large number of hits.  In the last three days (excluding today),
  this game has received a total of 166102 hits.  The actual numbers
  for each day look like this:
</p>
<table class="grid center textcenter">
  <tr>
    <th>Date</th>
    <th>Hits</th>
  </tr>
  <tr>
    <td>31 Mar 2024</td>
    <td>95467</td>
  </tr>
  <tr>
    <td>01 Mar 2024</td>
    <td>48330</td>
  </tr>
  <tr>
    <td>02 Mar 2024</td>
    <td>22305</td>
  </tr>
</table>
<p>
  To all visitors of this website who played this game and shared this
  game with others, thank you!  Crafting tiny software tools like this
  is a creative outlet for me.  To know that there are others out
  there who enjoyed this game brings me joy!
</p>
<p>
  To play this game, go to <a href="../../../myrgb.html">myrgb.html</a>
  now and guess some colours!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/myrgb/0.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.3.0</title>
<link>https://susam.net/code/news/fxyt/0.3.0.html</link>
<guid isPermaLink="false">snbrx</guid>
<pubDate>Fri, 29 Mar 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.3.0 is a minor release of FXYT, a tiny, esoteric,
  stack-based, postfix, canvas colouring language with only 36 simple
  commands.  This release comes with minor bug fixes pertaining to
  initialising the input and output from code embedded in
  distributable links.  No change in the language definition or the
  language implementation has been made in this release.
</p>
<p>
  Visit <a href="../../../fxyt.html">fxyt.html</a> to play with FXYT.
  See <a href="https://github.com/susam/fxyt#readme">README</a> for
  more details.  Also, see
  <a href="https://susam.github.io/fxyt/demo.html">this demo page</a>
  for some nice demos developed by the tiny community around FXYT.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Quicksort with Jenkins for Fun and No Profit</title>
<link>https://susam.net/jenkins-quicksort.html</link>
<guid isPermaLink="false">orprj</guid>
<pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I first encountered Jenkins in 2007 while contributing to the Apache
  Nutch project.  It was called Hudson back then.  The nightly builds
  for the project ran on Hudson at that time.  I remember sifting
  through my emails and reviewing build result notifications to keep
  an eye on the patches that got merged into the trunk everyday.  Yes,
  patches and trunk!  We were still using SVN back then.
</p>
<p>
  Hudson was renamed to Jenkins in 2011.  Since version 2.0 (released
  on 20 Apr 2016), Jenkins supports pipeline scripts written in Groovy
  as a first-class entity.  A pipeline script effectively defines the
  build job.  It can define build properties, build stages, build
  steps, etc.  It can even invoke other build jobs, including itself.
</p>
<p>
  Wait a minute!  If a pipeline can invoke itself, can we, perhaps,
  solve a recursive problem with it?  Absolutely!  This is precisely
  what we are going to do in this post.  We are going to implement
  quicksort as a Jenkins pipeline for fun and not a whit of profit!
</p>
<h2 id="run-jenkins">Run Jenkins<a href="#run-jenkins"></a></h2>
<p>
  Before we get started, I need to tell you how to set up Jenkins just
  enough to try the experiments presented later in this post on your
  local system.  This could be useful if you have never used Jenkins
  before or if you do not have a Jenkins instance available with you
  right now.  If you are already well-versed in Jenkins and have an
  instance at your disposal, feel free to skip ahead directly to
  the <a href="#quicksort">Quicksort</a> section.
</p>
<p>
  The steps below assume a Debian GNU/Linux system.  However, it
  should be possible to do this on any operating system as long as you
  can run Docker containers.  Since software evolves over time, let me
  note down the versions of software tools I am using while writing
  this post.  Here they are:
</p>
<ul>
  <li>Debian GNU/Linux 12.4 (bookworm)</li>
  <li>Docker version 20.10.24+dfsg1, build 297e128</li>
  <li>Docker image tagged jenkins/jenkins:2.426.3-lts-jdk17</li>
  <li>Jenkins 2.426.3</li>
</ul>
<p>
  We will perform only quick-and-dirty experiments in this post, so we
  do not need a production-grade Jenkins instance.  We will run
  Jenkins temporarily in a container.  The following steps show how to
  do this and how to configure Jenkins for the upcoming experiments:
</p>
<ol>
  <li>
    <p>
      Install Docker if it is not already present on the system.  For
      example, on a Debian system, the following command installs
      Docker:
    </p>
    <pre><code>sudo apt-get install docker.io</code></pre>
  </li>
  <li>
    <p>
      Now run the Jenkins container with this command:
    </p>
    <pre><code>sudo docker run --rm -p 8080:8080 jenkins/jenkins:lts</code></pre>
  </li>
  <li>
    <p>
      When the container starts, it prints a password towards the
      bottom of the logs.  Copy the password.
    </p>
  </li>
  <li>
    <p>
      Visit <a href="http://localhost:8080/">http://localhost:8080/</a>
      in a web browser.  When the <em>Unlock Jenkins</em> page
      appears, paste the password and click <em>Continue</em>.
    </p>
  </li>
  <li>
    <p>
      On the <em>Customize Jenkins</em> page, click <em>Install
      suggested plugins</em>.  Alternatively, to avoid installing
      unnecessary plugins, click <em>Select plugins to install</em>,
      deselect everything except <em>Pipeline</em> and
      click <em>Install</em>.  We need the pipeline plugin to perform
      rest of the experiment laid out in this post.
    </p>
  </li>
  <!--
    With suggested plugins:
    Completed installation of 84 plugins in 1 min 52 sec
         
    With only pipeline plugin:
    Completed installation of 50 plugins in 44 sec
  -->
  <li>
    <p>
      On the <em>Create First Admin User</em> page, enter the details
      to create a new user.
    </p>
  </li>
  <li>
    <p>
      On the <em>Instance Configuration</em> page, click <em>Save and
      Finish</em>.
    </p>
  </li>
  <li>
    <p>
      The <em>Jenkins is ready!</em> page appears.  Click <em>Start
      using Jenkins</em>.
    </p>
  </li>
  <li>
    <p>
      Go to <em>Build Executor Status</em> &gt; <em>Built-In Node</em>
      &gt; <em>Configure</em> and change <em>Number of executors</em>
      from the default value of <code>2</code> to <code>10</code>.
      Click <em>Save</em>.
    </p>
  </li>
</ol>
<h2 id="hello-world">Hello World<a href="#hello-world"></a></h2>
<p>
  The following steps show how to run your first Jenkins pipeline:
</p>
<ol>
  <li>
    <p>
      Go to <em>Dashboard</em> &gt; <em>New Item</em>.  Enter an item
      name, say, <code>hello</code>, select <em>Pipeline</em> and
      click <em>OK</em>.
    </p>
  </li>
  <li>
    <p>
      On the next page, scroll down to the <em>Pipeline</em> section
      at the bottom and paste the following pipeline script and
      click <em>Save</em>.
    </p>
<pre>
<code>node {
    echo "hello, world"
}</code>
</pre>
  </li>
  <li>
    <p>
      Now click <em>Build Now</em>.  A new build number appears at the
      bottom half of the left sidebar.  Click on the build number,
      then click <em>Console Output</em> to see the output of the
      pipeline.  The <code>hello, world</code> message should be
      present in the output.
    </p>
  </li>
</ol>
<p>
  To edit the pipeline script anytime, go to <em>Dashboard</em>, click
  on the pipeline, then go to <em>Configure</em>, scroll down to
  the <em>Pipeline</em> section, edit the script and
  click <em>Save</em>.
</p>
<p>
  In real world software development, Jenkins is typically configured
  to automatically pull some source code from a project repository
  maintained under a version control system and then build it using
  the pipeline script found in the file named <code>Jenkinsfile</code>
  present at the top-level directory of the project.  But since we
  only intend to perform fun experiments in this post, we will just
  paste our pipeline script directly into the pipeline configuration
  page on Jenkins as explained above in order to keep things simple.
  Jenkins also supports another way of writing pipelines using a
  declarative style.  They are known as <em>declarative
  pipelines</em>.  In this post, however, we will write
  only <em>scripted pipelines</em> so that we can write simple Groovy
  code for our experiments without having to bother about too many
  pipeline-specific notions like stages, steps, etc.
</p>
<h2 id="factorial">Factorial<a href="#factorial"></a></h2>
<p>
  Now let us write a simple pipeline that calculates the factorial of
  a nonnegative integer.  This will help us to demonstrate how a build
  job can recursively call itself.  We are not going to write
  something like the following:
</p>
<pre>
<code>properties([
    parameters([
        string(
            name: 'INPUT',
            defaultValue: '0',
            description: 'A nonnegative integer'
        )
    ])
])

def factorial(n) {
    return n == 0 ? 1 : n * factorial(n - 1)
}

node {
    echo "${factorial(params.INPUT as int)}"
}</code>
</pre>
<p>
  The code above is an example of a function that calls itself
  recursively.  However, we want the <em>build job</em> (not the
  function) to call itself recursively.  So we write the following
  instead:
</p>
<pre>
<code>properties([
    parameters([
        string(
            name: 'INPUT',
            defaultValue: '0',
            description: 'A nonnegative integer'
        )
    ])
])

def MAX_INPUT = 10

node {
    echo "INPUT: ${params.INPUT}"
    currentBuild.description = "${params.INPUT} -&gt; ..."

    def n = params.INPUT as int
    if (n &gt; MAX_INPUT) {
        echo "ERROR: Input must not be greater than ${MAX_INPUT}"
    }

    env.RESULT = n == 0 ? 1 : n * (
        build(
            job: env.JOB_NAME,
            parameters: [string(name: 'INPUT', value: "${n - 1}")]
        ).getBuildVariables().RESULT as int
    )

    echo "RESULT: ${env.RESULT}"
    currentBuild.description = "${params.INPUT} -&gt; ${env.RESULT}"
}</code>
</pre>
<p>
  This code example demonstrates a few things worth noting:
</p>
<ul>
  <li>
    <p>
      The <code>properties</code> step at the top sets up a build
      parameter named <code>INPUT</code> with a default value
      of <code>0</code>.  This will allow us to enter an input number
      while building the job.
    </p>
  </li>
  <li>
    <p>
      Within the <code>node</code> block, we first check that the
      input is not too large.  If the input number is larger than 10,
      the pipeline refuses to run.  This is just a tiny safety check
      to prevent the overzealous among you from inadvertently causing
      havoc in your Jenkins instance by triggering a job with a large
      input and depleting all the executors with an excess of
      recursive jobs.
    </p>
  </li>
  <li>
    <p>
      Then we perform the classic recursion to compute the factorial
      of a given nonnegative integer.  The only thing that may appear
      unusual here is that instead of just writing <code>factorial(n -
      1)</code>, we make a <code>build()</code> call to invoke the job
      itself recursively and pass <code>n - 1</code> as a build
      parameter input to that job.
    </p>
  </li>
  <li>
    <p>
      Each recursively called job writes its output to an environment
      variable named <code>RESULT</code> and exits.  Then the
      higher-level job invocation looks up the environment variables
      in the build result of the job that just finished with
      the <code>getBuildVariables()</code> call, reads the
      <code>RESULT</code> variable and multiplies the value found
      there by <code>n</code>.
    </p>
  </li>
  <li>
    <p>
      The lines that update <code>currentBuild.description</code> are
      there only to show handy descriptions of what is going on (the
      input and the result) in the build history that appears on the
      left sidebar.  A screenshot presented later illustrates this.
    </p>
  </li>
</ul>
<p>
  To run the above pipeline, perform the following steps on the
  Jenkins instance:
</p>
<ol>
  <li>
    <p>
      Go to <em>Dashboard</em> &gt; <em>New Item</em>.  Enter an item
      name, say, <code>factorial</code>, select <em>Pipeline</em> and
      click <em>OK</em>.
    </p>
  </li>
  <li>
    <p>
      On the next page, scroll down to the <em>Pipeline</em> section
      at the bottom and paste the pipeline script presented above.
    </p>
  </li>
  <li>
    <p>
      Click <em>Build Now</em>.  The first build sets
      the <code>INPUT</code> build parameter to <code>0</code> (the
      default value specified in the pipeline script).  The
      result <code>1</code> shoud appear in the <em>Console
      Output</em> page.
    </p>
  </li>
  <li>
    After the first build completes, the <em>Build Now</em> option on
    the left sidebar gets replaced with the <em>Build with
    Parameters</em> option.  Click it, then enter a number,
    say, <code>5</code> and click <em>Build</em>.  Now we should see
    Jenkins recursively triggering a total of 6 build jobs and each
    build job printing the factorial of the integer it receives as
    input.  The top-level build job prints <code>120</code> as its
    result.
  </li>
</ol>
<p>
  Here is a screenshot that shows what the build history looks like on
  the left sidebar:
</p>
<figure class="soft lightshadow">
  <img src="files/blog/jenkins-factorial.png" alt="Screenshot of Jenkins build history that shows the builds that are triggered while computing the factorial of 0 and 5">
  <figcaption>
    The factorial of 0 computed in build 1 and the factorial of 5
    computed in build 2
  </figcaption>
</figure>
<p>
  In the screenshot above, build number 2 is the build we triggered to
  compute the factorial of 5.  This build resulted in recursively
  triggering five more builds which we see as build numbers 3 to 7.
  The little input and output numbers displayed below each build
  number comes from the <code>currentBuild.description</code> value we
  set in the pipeline script.
</p>
<p>
  If we click on build number 7, we find this on the build page:
</p>
<figure class="soft lightshadow">
  <img src="files/blog/jenkins-recursion.png" alt="Screenshot of Jenkins build page that shows build jobs triggered recursively">
  <figcaption>
    Build #7 page
  </figcaption>
</figure>
<p>
  This was a simple pipeline that demonstrates how a build job can
  trigger itself, pass input to the triggered build and retrieve its
  output.  We did not do much error checking or error handling here.
  We have kept the code as simple as reasonably possible.  The focus
  here was only on demonstrating the recursion.
</p>
<h2 id="quicksort">Quicksort<a href="#quicksort"></a></h2>
<p>
  Now we will implement quicksort in Jenkins.  Sorting numbers using
  the standard library is quite straightforward in Groovy.  Here is an
  example in the form of Jenkins pipeline:
</p>
<pre>
<code>properties([
    parameters([
        string(
            name: 'INPUT',
            defaultValue: '4, 3, 5, 4, 5, 8, 7, 9, 1',
            description: 'Comma-separated list of integers'
        )
    ])
])

node {
    def numbers = params.INPUT.split('\\s*,\\s*').collect {it as int}
    echo "${numbers.sort()}"
}</code>
</pre>
<p>
  It can't get simpler than this.  However, we are not here to
  demonstrate the standard library methods.  We are here to
  demonstrate recursion in Jenkins!  We write the following pipeline
  script instead:
</p>
<pre>
<code>properties([
    parameters([
        string(
            name: 'INPUT',
            defaultValue: '4, 3, 5, 4, 5, 8, 7, 9, 1',
            description: 'Comma-separated list of integers'
        )
    ])
])

def MAX_INPUT_SIZE = 10

node {
    echo "INPUT: ${params.INPUT}"
    currentBuild.description = "${params.INPUT} -&gt; ..."

    def numbers = params.INPUT.split('\\s*,\\s*').collect {it as int}
    if (numbers.size() &gt; MAX_INPUT_SIZE) {
        echo "ERROR: Input must not contain more than ${MAX_INPUT_SIZE} integers"
    }

    def pivot = numbers[0]
    def others = numbers.drop(1)
    def lo = others.findAll { it <= pivot }
    def hi = others.findAll { it &gt; pivot }
    def builds = [:]
    def results = [lo: [], hi: []]

    if (lo) {
        builds.lo = {
            results.lo = build(
                job: env.JOB_NAME,
                parameters: [string(name: 'INPUT', value: lo.join(', '))
            ]).getBuildVariables().RESULT.split('\\s*,\\s*') as List
        }
    }
    if (hi) {
        builds.hi = {
            results.hi = build(
                job: env.JOB_NAME,
                parameters: [string(name: 'INPUT', value: hi.join(', '))
            ]).getBuildVariables().RESULT.split('\\s*,\\s*') as List
        }
    }
    parallel builds

    env.RESULT = (results.lo + [pivot] + results.hi).join(', ')
    echo "RESULT: ${env.RESULT}"
    currentBuild.description = "${params.INPUT} -&gt; ${env.RESULT}"
}</code>
</pre>
<p>
  Some of the code is similar to the one in the previous section.  For
  example, the <code>properties</code> step to set up the build
  parameter, the <code>build()</code> call, setting the result
  in <code>env.RESULT</code>, etc. should look familiar.  Let us pay
  attention to what is different.
</p>
<p>
  Firstly, we have two <code>build()</code> calls instead of just one.
  In fact, we have two closures with one <code>build()</code> call in
  each closure.  Then we use the <code>parallel</code> step to execute
  both these closures in parallel.  In each build job, we pick the
  first integer in the input as the pivot, then compare all the
  remaining integers with this pivot and separate them
  into <code>lo</code> (low numbers) and <code>hi</code> (high
  numbers).  Then we call the build job recursively to repeat this
  algorithm twice: once on the low numbers and again on the high
  numbers.
</p>
<figure class="soft lightshadow">
  <img src="files/blog/jenkins-quicksort.png" alt="Screenshot of Jenkins build history that shows the builds that are triggered while performing quicksort on a list of integers">
  <figcaption>
    Quicksort with recursive Jenkins builds
  </figcaption>
</figure>
<p>
  Unlike most textbook implementations of quicksort which lets the
  recursion run all the way to the base case in which an empty list is
  received and the recursive call returns without doing anything, the
  above implementation is slightly optimised to avoid making recursive
  builds when we find that the list of low numbers or the list of high
  numbers is empty.  We lose a little bit of simplicity by doing this
  but it helps in avoiding wasteful build jobs that just receive an
  empty list of numbers as input and exit without doing anything
  meaningful.  Further optimisation could involve avoiding recursion
  for small input sizes, such as 1 or 2, but that is not done here for
  the sake of simplicity and brevity.
</p>
<p>
  I hope this was fun!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/jenkins-quicksort.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>CFRS[] 0.1.0</title>
<link>https://susam.net/code/news/cfrs/0.1.0.html</link>
<guid isPermaLink="false">fmbcp</guid>
<pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  CFRS[] 0.1.0 is the first release of CFRS[], an extremely minimal
  drawing language that consists of only six simple commands.  Ever
  since this new esoteric language and its implementation was
  <a href="https://news.ycombinator.com/item?id=37956065">announced
  about two months ago</a>, a small but enthusiastic community has
  sprung up around it.  Feedback and enhancement requests from the
  community has been crucial in polishing the implementation and
  arriving at the current stable release.  Further, some community
  members have also submitted very interesting and impressive demos.
</p>
<p>
  To play with CFRS[] now, please
  visit <a href="../../../cfrs.html">cfrs.html</a>.
</p>
<p>
  See <a href="https://github.com/susam/cfrs#readme">github.com/susam/cfrs</a>
  for more information about CFRS.  Also, see this
  <a href="https://susam.github.io/cfrs/demo.html">demo page</a> for a
  curated collection of community demos.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/cfrs/0.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>My Coding Adventures in 2023</title>
<link>https://susam.net/code-2023.html</link>
<guid isPermaLink="false">gvday</guid>
<pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  In moments of leisure, I find myself immersed in crafting personal
  tools and exploring the joys of computer programming.  Sometimes a
  few of these endeavors evolve into concrete utilities that I feel
  comfortable sharing with others under a free software license.
  Below, I present some highlights and updates from this year's coding
  adventures:
</p>
<ul>
  <li>
    <p>
      <a href="https://github.com/susam/devil">Devil</a>: This is a
      new Emacs package that intercepts and translates keystrokes to
      provide a modifier-free, non-modal editing experience.  I wrote
      this directly in my <code>~/.emacs</code> several years ago to
      avoid typing key chords.  This tool allowed me to use comma
      (<code>,</code>) as the leader key for invoking key sequences
      involving <kbd>ctrl</kbd> and <kbd>meta</kbd> keys.  I kept it
      private for a long time because I felt that the Emacs community
      may find some of the design decisions and the default choices to
      be outrageous.  However, after extracting it into a separate
      package and sharing it
      on <a href="https://melpa.org/#/devil">MELPA</a> (and later
      on <a href="https://elpa.nongnu.org/nongnu/devil.html">NonGNU
      ELPA</a> too), I was pleasantly surprised by the warm and
      supportive feedback I received from many kind and generous
      community members.  In fact, this package received several
      updates this year in order to address such feedback and
      enhancement requests as well as to integrate contributions from
      the community.  This package has evolved a lot and become much
      better, thanks to the small and supportive community that formed
      around it.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/cfrs">CFRS[]</a>: This is my
      first contribution to the quirky world of esolangs.  CFRS[] is
      an extremely minimal drawing language consisting of only 6
      simple commands: <code>C</code>,
      <code>F</code>, <code>R</code>, <code>S</code>, <code>[</code>
      and <code>]</code>.  See the
      file <a href="https://github.com/susam/cfrs/blob/main/demo.md">demo.md</a>
      for a collection of some nice demos submitted by the small
      community around this language.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/fxyt">FXYT</a>: A tiny,
      stack-based, postfix, canvas colouring language with only 36
      simple commands.  This is one of my very recent creations.
      There is not much of a community around it yet.  Nevertheless, I
      find it a lot of fun to play with.  The README file at the
      preceding link has some interesting demos.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/pcface">PC Face</a>: This is a
      a collection of tools that I wrote early this year to generate
      bitmap arrays for rendering CP437 glyphs using free and open
      source fonts based on the IBM PC OEM fonts.  The bitmaps are
      available in the form of JavaScript arrays and can be used quite
      easily to render glpyhs on an HTML5 Canvas.  Additionally, this
      project offers a few Python and JavaScript functions to create
      similar bitmap arrays from other similar PC fonts and render
      them.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/invaders">Andromeda
      Invaders</a>: I wrote this game last year to fulfill my
      childhood dream of writing my own invaders-style game.  This
      game received several updates this year around text rendering on
      canvas.  In fact, it was the update for rendering text using IBM
      PC OEM fonts that led to the PC Face project mentioned in the
      previous point.  The gameplay has been tweaked too to increase
      the difficulty level.  Further, I wrote an autoplay algorithm
      for fun.  This algorithm automatically moves the player to avoid
      falling boulders and hit the invader ships.  To see the autoplay
      algorithm in action, visit
      <a href="invaders.html#auto">invaders.html#auto</a>.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/nimb">NIMB</a>: NIMB stands
      for NIMB IRC Matrix Bridge.  Yes, a recursive acronym!  ;) This
      is a simple relay client to bridge together different IRC
      channels and Matrix rooms.  Growing dissatisfied with how the
      official bridge from Matrix assumed admin power level in a
      bridged room, removed idle users, etc., I wrote this as a small
      and simple tool for bridging my channels and rooms.  Later when
      Matrix <a href="https://matrix.org/blog/2023/11/28/shutting-down-bridge-to-libera-chat/">announced</a>
      that they would shut down their official bridge, it had almost
      no impact on me because I had already switched over from their
      official bridge to this little tool for my bridging needs.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/clog">Clog</a>: This is a tiny
      IRC chat logger written in Python.  I use it to keep a local
      archive of the chats of some of my favourite IRC channels.  This
      is perhaps my smallest personal tool.  I have shared it at the
      preceding link in case anyone finds it useful but as far as I
      know, I am the only who uses this.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/emacs4cl">Emacs4CL</a>: This
      is an old project that was first released in 2020.  It provides
      a quick-starter-kit to set up Emacs for Common Lisp programming.
      It received a minor update to ensure that it works well with the
      latest version of Paredit.  Apart from that, by popular demand,
      it leaves the menu bar enabled.  Yes, the menu bar used to be
      disabled earlier which later turned out to be misguided.  After
      receiving several suggestions about how the menu bar is
      essential for discovery of new commands relevant to the current
      major mode, the menu bar is enabled now.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/emfy">Emfy</a>: This too is
      another Emacs quick-starter-kit.  However this one is meant to
      set up a general purpose editing and programming environment
      with Emacs.  It was first released in 2021.  It received one
      minor update this year.  The variable
      <code>require-final-newline</code> is now set to <code>t</code>,
      so that files with newlines missing at the end are automatically
      updated with a trailing newline while saving them.  Further, the
      colour scheme of incremental search matches has been updated to
      have more contrast so that the matches are easier to spot and
      navigate through.
    </p>
  </li>
</ul>
<p>
  As I reflect on this year's coding adventures, I am reminded of the
  beauty of exploration and creativity in coding.  The support and
  feedback I have received from the small yet friendly communities
  around some of these projects has been truly heartening.  Here's to
  another year of solving problems with code, collaboration and the
  boundless world of possibilities that computer programming offers!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code-2023.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/retrospective.html">#retrospective</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.2.0</title>
<link>https://susam.net/code/news/fxyt/0.2.0.html</link>
<guid isPermaLink="false">pqtku</guid>
<pubDate>Sun, 24 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.2.0 is a minor update of FXYT, a tiny, stack-oriented, canvas
  colouring language written in postfix notation with only 36 simple
  commands.  This update specifies and implements a much stricter
  definition of the <code>F</code> command that sets the frame
  interval.  The problem with the earlier definition as well as
  implementation was that the <code>F</code> command was evaluated for
  every cell in the canvas and the frame interval was set for every
  such interval.  This meant that the frame interval that would be set
  for the next frame would depend on the order in which the evaluation
  occurred.  See section
  <a href="https://github.com/susam/fxyt#frame-interval">Frame
  Interval</a> of the README for the complete details.
</p>
<p>
  This update now ensures that a coordinate-dependent frame interval
  set with the <code>F</code> command behaves uniformly across any
  implementation of FXYT regardless of the order of evaluation.  This
  is done by ensuring that while the command <code>F</code> is
  evaluated for all cells, it is only the frame interval value found
  during the evaluation of cell (0, 0) that is honoured as the frame
  interval for the next frame.
</p>
<p>
  The new update is now available at
  <a href="../../../fxyt.html">fxyt.html</a>.  You are very welcome to
  try it out and play with it.  If you come up with any interesting
  demos, please do
  <a href="https://github.com/susam/fxyt/issues">share them here</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT</title>
<link>https://susam.net/fxyt.html</link>
<guid isPermaLink="false">kzrxk</guid>
<pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Tiny, stack-based, postfix, canvas colouring language with only 36
  simple commands.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/fxyt.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>FXYT 0.1.0</title>
<link>https://susam.net/code/news/fxyt/0.1.0.html</link>
<guid isPermaLink="false">dtrrv</guid>
<pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  FXYT 0.1.0 is the first release of this project that introduces the
  FXYT canvas colouring language and a reference implementation.  This
  project is inspired by Martin Kleppe's very popular Tixy project.
  While Tixy supports JavaScript expressions to determine the size and
  colour of circles in a 16x16 grid, FXYT comes with its own tiny,
  stack-based language that is written in postfix notation.  Further,
  FXYT provides a 256x256 grid of cells each of which can be painted
  with an arbitrary colour determined by the result of the evaluation
  of the input code.
</p>
<p>
  To see some demos, visit these links:
  <a href="../../../fxyt.html#XYxTN1srN255pTN1sqD">#1</a>,
  <a href="../../../fxyt.html#XYaTN1srN255pTN1sqN0">#2</a>,
  <a href="../../../fxyt.html#XYoTN1srN255pTN1sqDN0S">#3</a>,
  <a href="../../../fxyt.html#XYpTN1srN255pTN1sqD">#4</a> and
  <a href="../../../fxyt.html#XYN256sTdrD">#5</a>.
</p>
<p>
  Also, see
  <a href="https://github.com/susam/fxyt#readme">github.com/susam/fxyt</a>
  for more details about this project.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/fxyt/0.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>CFRS[]</title>
<link>https://susam.net/cfrs.html</link>
<guid isPermaLink="false">toujs</guid>
<pubDate>Thu, 19 Oct 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  An extremely minimal drawing language consisting of only 6 simple
  commands: <code>C</code>, <code>F</code>, <code>R</code>,
  <code>S</code>, <code>[</code> and <code>]</code>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/cfrs.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/graphics.html">#graphics</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 1.2.0</title>
<link>https://susam.net/code/news/mathb/1.2.0.html</link>
<guid isPermaLink="false">ffzvj</guid>
<pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB 1.2.0 is a minor update of MathB, a web-based mathematics
  pastebin service.
</p>
<p>
  This release introduces a number of new customisable properties,
  including the ability to set a minimum title length, minimum code
  length, etc.  The stylesheet for rendered pages has been improved so
  that the print preview displays only the rendered mathematical
  content, allowing users to print beautifully rendered pages to
  paper.  A few rendering bug fixes are included too.
</p>
<p>
  See <a href="https://github.com/susam/mathb/blob/main/CHANGES.md">CHANGES.md</a>
  for a detailed changelog.  To read more about this project, please see
  <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/1.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 1.1.0</title>
<link>https://susam.net/code/news/mathb/1.1.0.html</link>
<guid isPermaLink="false">akquu</guid>
<pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB 1.1.0 is a minor update of MathB, a web-based mathematics
  pastebin service.
</p>
<p>
  This release introduces a few additional features for webmasters
  hosting MathB on their own web servers.  Notably, administrators can
  now ban specific IP addresses, helping mitigate spam attacks from
  known sources.  Additionally, the included Nginx configuration has
  been updated to fix a memory leak issue.  Several other minor fixes
  and improvements are also included.
</p>
<p>
  See <a href="https://github.com/susam/mathb/blob/main/CHANGES.md">CHANGES.md</a>
  for a detailed changelog.  To read more about this project, please see
  <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/1.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 1.0.0</title>
<link>https://susam.net/code/news/mathb/1.0.0.html</link>
<guid isPermaLink="false">wmrtf</guid>
<pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB 1.0.0 is the first major release of MathB since 2012, bringing
  significant updates to this web-based mathematics pastebin service.
</p>
<p>
  The most notable change is a complete rewrite in Common Lisp,
  replacing the original PHP codebase.  This shift reflects my
  preference for Lisp, a language I truly enjoy.  It also makes the
  project easier for me to maintain actively.
</p>
<p>
  This release introduces the use of the
  <a href="https://github.com/susam/texme">TeXMe</a> parser to
  robustly parse and render posts written using Markdown and LaTeX.
  Further, now there is support for dark colour scheme for systems
  that have dark colour scheme enabled.  For those who host this
  service on their web servers, MathB now supports a runtime control
  file named <code>opt.lisp</code> where a number of properties of
  this service can be customised.  These customisable properties
  include maximum title length, maximum code length, minimum time
  interval between two posts, etc.  See
  <a href="https://github.com/susam/mathb/blob/main/CHANGES.md">CHANGES.md</a>
  for a detailed changelog.
</p>
<p>
  To read more about this project, please see
  <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/1.0.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Paredit Slurp and Barf Mnemonics</title>
<link>https://susam.net/paredit-slurp-and-barf-mnemonics.html</link>
<guid isPermaLink="false">bnphd</guid>
<pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Of the several sophisticated Paredit commands to edit s-expressions,
  I believe, the following four commands are the most important ones:
</p>
<ul>
  <li><code>paredit-backward-slurp-sexp</code></li>
  <li><code>paredit-forward-slurp-sexp</code></li>
  <li><code>paredit-backward-barf-sexp</code></li>
  <li><code>paredit-forward-barf-sexp</code></li>
</ul>
<p>
  By default, these commands are bound to the key sequences
  <code>C-(</code>, <code>C-)</code>, <code>C-{</code>
  and <code>C-}</code> respectively in Emacs.  These commands can make
  editing s-expressions very convenient.  However, often on IRC
  networks and other online forums, I come across users who have
  difficulty remembering the key sequence each command is bound to.  I
  will share some mnemonics in this post that make this easier to
  remember.  Before discussing the mnemonics, let us see what these
  commands do.  However, if you already know what these commands do,
  skip right ahead to the
  <em><a href="#mnemonics">Mnemonics</a></em> section.
</p>

<h2 id="slurp-demo">Slurp Demo<a href="#slurp-demo"></a></h2>
<p>
  Say, we have the following Lisp expressions in our editor:
</p>
<pre><code>(* 10 20) (+ 30 40)<span class="cursor"> </span></code></pre>
<p>
  The block above shows where the cursor is placed.  Let us now bring
  the expression <code>(+ 30 40)</code> inside the expression <code>(*
  10 20)</code>.  To do so, we first place the cursor somewhere inside
  the first expression, say, as shown below:
</p>
<pre><code>(* 10 20<span class="cursor">)</span> (+ 30 40)</code></pre>
<p>
  Now type <code>C-)</code> and the closing parenthesis of the first
  expression moves forward to <em>slurp</em> the next expression.  The
  result looks like this:
</p>
<pre><code>(* 10 20<span class="cursor"> </span>(+ 30 40))</code></pre>
<p>
  The key sequence <code>C-)</code> invokes
  the <code>paredit-forward-slurp-sexp</code> command that adds the
  expression following the current list into that list by moving the
  closing delimiter ahead.  Similarly, there is the key
  sequence <code>C-(</code> that invokes
  the <code>paredit-backward-slurp-sexp</code> command which works
  similarly except that it makes the current list consume the
  preceding expression.  Note that the slurp commands expand the
  current list to consume a neighbouring expression.
</p>

<h2 id="barf-demo">Barf Demo<a href="#barf-demo"></a></h2>
<p>
  Say, we have the following Lisp expression in our editor:
</p>
<pre><code>(* 10 20 (+ 30 40))<span class="cursor"> </span></code></pre>
<p>
  We now want to move <code>(+ 30 40)</code> out of the first
  expression.  To do so, we first place the cursor somewhere inside
  the outer expression but not inside the inner expression.  Here is
  an example of where we place the cursor:
</p>
<pre><code>(* 10 20 <span class="cursor">(</span>+ 30 40))</code></pre>
<p>
  Now type <code>C-}</code> and the closing parenthesis of the outer
  expression moves behind to <em>barf</em> the inner expression out.
  The result looks like this:
</p>
<pre><code>(* 10 20) <span class="cursor">(</span>+ 30 40)</code></pre>
<p>
  The key sequence <code>C-}</code> invokes
  the <code>paredit-forward-barf-sexp</code> command that removes the
  last expression in the current list from that list by moving the
  closing delimiter behind.  Similarly, there is the key
  sequence <code>C-{</code> that invokes
  the <code>paredit-backward-slurp-sexp</code> command which works
  similarly except that it removes the first expression from the
  current list.  Note that the barf commands shrinks the current list
  to remove an expression from that list.
</p>

<h2 id="mnemonics">Mnemonics<a href="#mnemonics"></a></h2>
<p>
  When I began using Paredit for the first time, several years ago, I
  could never remember which key sequences <em>slurp</em> and which
  ones <em>barf</em>.  Then I made up these mnemonics:
</p>
<ul>
  <li>
    <code>C-(</code> and <code>C-)</code> have parentheses that look
    nice and round.  They expand the current list to consume another
    expression.  Nom nom!
  </li>
  <li>
    <code>C-{</code> and <code>C-}</code> have braces that look
    squiggly and wiggly.  They shrink the current list and barf an
    expression.
  </li>
</ul>
<p>
  I do not need these mnemonics anymore because after using these key
  sequences a few times, they get burnt into our muscle memory.
  However, in the initial days of using Paredit, these mnemonics were
  quite useful.  Now whenever I find someone complaining about how
  easy it is to forget the key sequences bound to these commands, I
  share these mnemonics with them and they never have any problem
  again with the slurp and barf commands.  These mnemonics have served
  me and many others I know quite well.
</p>
<hr>
<p>
  <em>
    <strong>Update on 01 Mar 2022:</strong> Jon Snader, who maintains
    a very popular blog
    named <a href="http://irreal.org/blog/">Irreal</a>, has discussed
    this blog post on his own blog.  While he did not find my
    mnemonics particularly helpful, he has shared his own way of
    remembering the key sequences.  Quoting Jon below:
  </em>
</p>
<blockquote>
  <em>
    To me, the braces suggest pointing out
    so <kbd>Ctrl</kbd>+<kbd>}</kbd> and <kbd>Ctrl</kbd>+<kbd>{</kbd>
    are clearly for barfing.
  </em>
</blockquote>
<p>
  <em>
    That is quite an interesting and elegant mnemonic.  See his
    post <a href="https://irreal.org/blog/?p=10361">Using Paredit's
    Slurp and Barf</a> to read his complete views on this topic.
  </em>
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/paredit-slurp-and-barf-mnemonics.html">Read on website</a> |
  <a href="https://susam.net/tag/emacs.html">#emacs</a> |
  <a href="https://susam.net/tag/lisp.html">#lisp</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Import Readline</title>
<link>https://susam.net/import-readline.html</link>
<guid isPermaLink="false">ttyjr</guid>
<pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="toy-repl">Toy REPL<a href="#toy-repl"></a></h2>
<p>
  Let us first write a tiny Python program to create a toy
  read-eval-print-loop (REPL) that does only one thing: add all
  integers entered as input into the REPL prompt.  Here is the
  program:
</p>
<pre>
<code>while True:
    try:
        line = input('&gt; ')
        print(sum([int(n) for n in line.split()]))
    except ValueError as e:
        print('error:', e)
    except (KeyboardInterrupt, EOFError):
        break</code>
</pre>
<p>
  Here is how it works:
</p>
<pre>
<samp>$ <kbd>python3 repl.py</kbd>
&gt; <kbd>10 20 30</kbd>
60
&gt; <kbd>40 50 60</kbd>
150
&gt; </samp>
</pre>
<p>
  If we now type <kbd>&uarr;</kbd> (the up arrow key)
  or <kbd>ctrl</kbd>+<kbd>p</kbd> to bring back the previous input, we
  see something like the following instead:
</p>
<pre><samp>&gt; <kbd>^[[A^[[A^P^P</kbd></samp></pre>
<p>
  It shows the keys typed literally rather than bringing up previous
  input like most other interactive programs with a command-line
  interface do.  The other programs that do bring up the previous
  input are able to do so because they provide line editing and
  history capability, often with the help of a line editing and
  history library like GNU Readline (libreadline) or BSD Editline
  (libedit).
</p>
<p>
  Can we have a similar line editing and history capability for our
  toy REPL?  After all, the Python REPL itself offers such a line
  editing facility.  Surely there must be a way to have this facility
  for our own programs too.  Indeed there is!
</p>
<h2 id="line-editing-and-history">Line Editing and History<a href="#line-editing-and-history"></a></h2>
<p>
  To enable line editing and history in our toy REPL, we just need to
  add <code>import readline</code> to our program.  Here is how our
  program would look:
</p>
<pre>
<code>import readline

while True:
    try:
        line = input('&gt; ')
        print(sum([int(n) for n in line.split()]))
    except ValueError as e:
        print('error:', e)
    except (KeyboardInterrupt, EOFError):
        break</code>
</pre>
<p>
  Now <kbd>&uarr;</kbd>, <kbd>ctrl</kbd>+<kbd>p</kbd>, etc. work as
  expected.
</p>
<pre>
<samp>$ <kbd>python3 repl.py</kbd>
&gt; <kbd>10 20 30</kbd>
60
&gt; <kbd>40 50 60</kbd>
150
&gt; <kbd>40 50 60</kbd></samp>
</pre>
<p>
  The last line of input in the example above is obtained by typing
  either <kbd>&uarr;</kbd> or <kbd>ctrl</kbd>+<kbd>p</kbd>.  In fact,
  all of the line editing keys like <kbd>ctrl</kbd>+<kbd>a</kbd> to go
  to the beginning of the line, <kbd>ctrl</kbd>+<kbd>k</kbd> to kill
  the line after the cursor, etc. work as expected.  The exact list of
  default key-bindings supported depends on the underlying line
  editing library being used by the <code>readline</code> module.  The
  underlying library may be either the GNU Readline library or the BSD
  Editline library.  There are some minor differences regarding the
  list of default key-bindings between these two libraries.
</p>
<h2 id="history-file">History File<a href="#history-file"></a></h2>
<p>
  What we have done so far achieves the goal of bringing up previous
  inputs from the history.  However, it does not bring back inputs
  from a previous invocation of the REPL.  For example, if we start
  our toy REPL, enter some inputs, then quit it (say, by
  typing <kbd>ctrl</kbd>+<kbd>c</kbd>), start our toy REPL again and
  type <kbd>&uarr;</kbd> or <kbd>ctrl</kbd>+<kbd>p</kbd>, it does not
  bring back the input from the previous invocation.  For a full-blown
  REPL meant for sophisicated usage, we may want to preserve the
  history between different invocations of the REPL.  This can be
  achieved by using the <code>read_history_file()</code>
  and <code>write_history_file()</code> functions as shown below:
</p>
<pre>
<code>import readline
import os

HISTORY_FILE = os.path.expanduser('~/.repl_history')
if os.path.exists(HISTORY_FILE):
    readline.read_history_file(HISTORY_FILE)

while True:
    try:
        line = input('&gt; ')
        readline.write_history_file(HISTORY_FILE)
        print(sum([int(n) for n in line.split()]))
    except ValueError as e:
        print('error:', e)
    except (KeyboardInterrupt, EOFError):
        break</code>
</pre>
<p>
  For more information on how to use this module, see the
  Python <a href="https://docs.python.org/3/library/readline.html">readline
  documentation</a>.
</p>
<h2 id="rlwrap">Readline Wrapper<a href="#rlwrap"></a></h2>
<p>
  At this point, it is worth mentioning that there are many
  interactive CLI tools that do not have line editing and history
  capabilities.  They behave like our first toy REPL example in this
  post.  Fortunately, there is the wonderful readline wrapper utility
  known as <code>rlwrap</code> that can be used to enable line editing
  and history in such tools.  This utility can often be easily
  installed from package repositories of various operating systems.
  Here is a demonstration of this tool:
</p>
<pre>
<samp>$ <kbd>rlwrap cat</kbd>
<kbd>hello</kbd>
hello
<kbd>world</kbd>
world
<kbd>world</kbd></samp>
</pre>
<p>
  The last line of input in the example above is obtained by typing
  either <kbd>&uarr;</kbd> or <kbd>ctrl</kbd>+<kbd>p</kbd>.  In the
  above example, the input history is automatically saved
  to <code>~/.cat_history</code>, so it is possible to bring back
  inputs from a previous invocation of the command.
</p>
<h2 id="obligatory-joke">Obligatory Joke<a href="#obligatory-joke"></a></h2>
<p>
  Finally, an obligatory XKCD comic to conclude this post:
</p>
<figure class="soft">
  <img src="files/blog/xkcd-353-python.png" alt="XKCD comic on Python"
       title="Original title text: I wrote 20 short programs in Python yesterday.  It was wonderful.  Perl, I'm leaving you.">
  <figcaption>
    <em>Python</em> by Randall Munroe
    (Source: <a href="https://xkcd.com/353/">https://xkcd.com/353/</a>)
  </figcaption>
</figure>
<p>
  While the days of achieving air flight with a
  single <code>import</code> statement might still be a few decades
  away, we do have the luxury to enable line editing and history in
  our REPLs with a single such statement right now.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/import-readline.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>May the Forth Be With You</title>
<link>https://susam.net/may-the-forth-be-with-you.html</link>
<guid isPermaLink="false">icfkw</guid>
<pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I wrote a tiny Forth program today to celebrate the Star Wars Day!
  Today, i.e. 04 May, is the Star Wars Day.  The date (May the fourth)
  is a pun on the popular Star Wars catchphrase, "May the Force be
  with you."  Forth, the programming language, is named so as a
  shortened form of the word "Fourth".  The name stood for "fourth
  generation".  Quoting from
  <a href="https://web.archive.org/web/20160409083846/http://www.colorforth.com/HOPL.html">Forth
  - The Early Years</a>:
</p>
<blockquote>
  The file holding the interpreter was labeled FORTH, for 4th (next)
  generation software - but the operating system restricted file names
  to 5 characters.
</blockquote>
<p>
  So the Forth program presented in this post to print a slightly
  altered Star Wars catchphrase using ASCII stars (asterisks) is like
  a double pun!  Or is that a triple pun?
</p>
<p>
  Also, if Yoda were a programmer, I think Forth would be his most
  favourite programming language.  Yoda would say, "A Forth programmer
  I am.  Hrmmm," and he would add two and two with, <code>2 2
  +</code>.  It just makes a lot of sense to celebrate May the 4th
  with some Forth programming.
</p>
<p>
  Here is the program I wrote to celebrate the day:
</p>
<pre>
<code>: stars
   0  do  [char] * emit  loop  ;

: lines
   0  do  cr  loop  ;

: print
   dup 40 &gt; if  40 - lines  else
   dup 20 &gt; if  20 - spaces  else
      stars
   then then  ;

: start
   0  do  print  loop  ;

                      41 11 37 11 36 5 28 41 5 27 5
                     31 5 27 5 33 5 28 41 5 31 5 27
                    5 31 5 31  5 28 41 5  33 5 25 5
                   33 5 30 5 28 41 5 35 5 23 5 35 5
                  29 5 28 41  5 35 5 23 5 35 5 27 9
                 26 41 5 35  5 23 5 35  5 26 5 21 5
                25 41 5 35 5 23 5 35 5 25 5 23 5 24
               41 5 35 5 24 5 33  5 25 5 25 5 23 41
              5 35 5  25 5 31 5   25 5 27 5 22 41 5
             35 5 27 5 27 5 26    5 29 5 21 41 5 35
            5 30 11 28 5 31 5     43 2 24 2 25 2 25
           2  26 1 26 1 28 8      23 7 33 41 2 24 2
          25 2 25 2 25 3 24       3 33 2  22 1 25 2
         33 41 8 25 2 25 2        24 2 21 2 22 2 21
        2 29 5 23 7 33 41         2 24 2  25 2 25 2
       23 2 24 3 23 2 31          2 22 1 25 2 33 41
      2 24 2  22 8 22 2           22 2 26 1 25 2 24
     8 23 7 22 11 43 3            27 3 27 3 26 3 28
    3 26 8  35 3 41 3             27 3 27 3 27 3 27
   3  24 3 26 3 33 3              41 3 27 3 27 3 28
  3 26 3 23 3  28 3               32 3 41 3 27 3 27
 3 29 3  25 3 22 3                30 3 31  3  41 13
27 3  29 11  22 3 30 3 25 9 41 13 27 3 27 13 22 3 30 3 25 9
41 3 27 3 27 3 26 3 28 3  22 3 30 3 31 3  41 3 27 3 27 3 26
3 28 3 23 3 28 3 32 3 41 3 27 3 22 13 22 13 24 4 25 3 23 13
41 3 27 3 22 13 24 11  26 8 25 13 43 11 22 8 22 2 24 2 25 2
30 2 23 2 25 2 22 2 23 1 23 2 41 2 22 2 24 2 25 2 30 2 24 7
23 2 22 3 22 2 41 5 22 8 25 2 29 4 24 2 21 2 24 2 21 2 21 2
                                  21  2 41 2  22  2
                                  24 2 25 2 28 2 22
                                  2 24 3 25 4 23  4
                                  41  8 22 2  24  2
                                  22 8 24 2 24 2 24
                                  1  26 3 25  3 473
start
bye</code>
</pre>
<p>
  Here is the output:
</p>
<pre>
<samp>***     ***      *    **    **    ********  **    **  ********
****   ****     ***    **  **        **     **    **  **
** ** ** **    ** **    ****         **     ********  *****
**  ***  **   *******    **          **     **    **  **
**   *   **  **     **   **          **     **    **  ********  ***********


*************     ********      ***********    *************  ***       ***
*************   ***     ****    *************  *************  ***       ***
***            ***        ***   ***        ***      ***       ***       ***
***           ***          ***  ***        ***      ***       ***       ***
*********     ***          ***  *************       ***       *************
*********     ***          ***  ***********         ***       *************
***           ***          ***  ***     ***         ***       ***       ***
***            ***        ***   ***      ***        ***       ***       ***
***             ***      ***    ***       ***       ***       ***       ***
***               ********      ***        ***      ***       ***       ***


***********  *******   ********    **     *      **  **  ********  **    **
             **     *  **           **   ***    **   **     **     **    **
             *******   *****         ** **  ** **    **     **     ********
             **     *  **             ***    ***     **     **     **    **
             *******   ********        *      *      **     **     **    **


*****           *****        ***********          *****               *****
 *****         *****      *****       *****       *****               *****
  *****       *****     *****           *****     *****               *****
   *****     *****     *****             *****    *****               *****
    *****   *****     *****               *****   *****               *****
     ***** *****      *****               *****   *****               *****
      *********       *****               *****   *****               *****
        *****         *****               *****   *****               *****
        *****          *****             *****     *****             *****
        *****           *****           *****       *****           *****
        *****             *****       *****           *****       *****
        *****                ***********                 ***********</samp>
</pre>
<p>
  To run this program on your system and obtain the above output,
  follow these steps:
</p>
<ol>
  <li>
    <p>
      Install GForth.  On macOS, enter the following command if you
      have Homebrew:
    </p>
    <pre><code>brew install gforth</code></pre>
    <p>
      On Debian, Ubuntu or another Debian-based Linux system, enter
      the following command:
    </p>
    <pre><code>sudo apt-get install gforth</code></pre>
    <p>
      For other systems or environments,
      see <a href="https://gforth.org/">gforth.org</a>.
    </p>
  </li>
  <li>
    <p>
      Save the above program in a file, say, <code>may4.fs</code> and
      run it with this command:
    </p>
    <pre><code>gforth may4.fs</code></pre>
  </li>
  <li>
    <p>
      Enjoy!
    </p>
  </li>
</ol>
<p>
  If you do not know Forth but found this post fun and want to learn a
  little bit of Forth,
  see <a href="https://www.forth.com/starting-forth/">Starting
  Forth</a>.
</p>
<p>
  The Forth program in this post and the output is also available as a
  Git repository
  here: <a href="https://github.com/susam/may4">github.com/susam/may4</a>.
</p>
<p>
  By the way, Forth brings back the fun in computing for me that I
  once experienced when I began learning to code with Logo.  It is
  simple, distraction-free and fun!  I will conclude this post with a
  famous quote from Alan J. Perlis:
</p>
<blockquote>
  I think that it's extraordinarily important that we in computer
  science keep fun in computing.  When it started out, it was an awful
  lot of fun.  Of course, the paying customers got shafted every now
  and then, and after a while we began to take their complaints
  seriously.  We began to feel as if we really were responsible for
  the successful, error-free perfect use of these machines.  I don't
  think we are.  I think we're responsible for stretching them,
  setting them off in new directions, and keeping fun in the house.  I
  hope the field of computer science never loses its sense of fun.
</blockquote>
<!-- ### -->
<p>
  <a href="https://susam.net/may-the-forth-be-with-you.html">Read on website</a> |
  <a href="https://susam.net/tag/forth.html">#forth</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>My Code from 2020</title>
<link>https://susam.net/code-2020.html</link>
<guid isPermaLink="false">uiucf</guid>
<pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  This is a brief retrospective of my free and open source work this
  year:
</p>
<ul>
  <li>
    <a href="https://github.com/susam/texme">TeXMe</a>: This is an old
    project that creates self-rendering Markdown + LaTeX documents.
    There were two new TeXMe releases last year.  The new releases add
    support for the new and improved MathJax 3 and introduce a new
    pseudo-LaTeX Markdown priority environment.  Version 1.0.0 will be
    coming up next year with more features.
  </li>
  <li>
    <a href="https://github.com/susam/emacs4cl">Emacs4CL</a>: A 35
    line Emacs initialisation file to quickly set up vanilla Emacs for
    Common Lisp programming.  It provides a good middle ground between
    configuring Emacs manually and installing a ready-made package
    like Portacle.
  </li>
  <li>
    <a href="https://github.com/susam/spcss">SPCSS</a>: A distillation
    of writing CSS by hand for 20 years.  I have picked the best
    pieces from my boilerplate stylesheets and shared it here.
  </li>
</ul>
<p>
  That's it for now!  See you next year!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code-2020.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/retrospective.html">#retrospective</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 0.2.0</title>
<link>https://susam.net/code/news/mathb/0.2.0.html</link>
<guid isPermaLink="false">flsrk</guid>
<pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB 0.2.0 is a minor update of MathB, a web-based mathematics
  pastebin service.  The key change in this release is the removal of
  image support.  Image tags are now disallowed in new posts and older
  posts containing images will no longer be rendered.  This update
  aims to mitigate spam on the live service
  at <code>https://mathb.in/</code>.
</p>
<p>
  To read more about this project, please see
  <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<p>
  See the file
  <a href="https://github.com/susam/mathb/blob/main/CHANGES.md">CHANGES.md</a>
  for a detailed changelog.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/0.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Unix Timestamp 1600000000</title>
<link>https://susam.net/unix-timestamp-1600000000.html</link>
<guid isPermaLink="false">wvrcr</guid>
<pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  At 2020-09-13 12:26:40 UTC, the Unix timestamp is going to turn
  1600000000.
</p>
<h2 id="unix-timestamp-conversion">Unix Timestamp Conversion<a href="#unix-timestamp-conversion"></a></h2>
<p>
  The following subsections show a few examples of converting the Unix
  timestamp to a human-readable date.
</p>
<h3 id="python">Python<a href="#python"></a></h3>
<pre>
<samp>$ <kbd>python3 -q</kbd>
&gt;&gt;&gt; <kbd>from datetime import datetime</kbd>
&gt;&gt;&gt; <kbd>datetime.utcfromtimestamp(1_600_000_000)</kbd>
datetime.datetime(2020, 9, 13, 12, 26, 40)</samp>
</pre>
<h3 id="gnu-date">GNU date (Linux)<a href="#gnu-date"></a></h3>
<pre>
<samp>$ <kbd>date -ud @1600000000</kbd>
Sun Sep 13 12:26:40 UTC 2020</samp>
</pre>
<h3 id="bsd-date">BSD date (macOS, FreeBSD, OpenBSD, etc.)<a href="#bsd-date"></a></h3>
<pre>
<samp>$ <kbd>date -ur 1600000000</kbd>
Sun Sep 13 12:26:40 UTC 2020</samp>
</pre>
<h2 id="other-such-dates">Other Such Dates<a href="#other-such-dates"></a></h2>
<p>
  All such dates (in UTC) until the end of the current century:
</p>
<pre>
<samp>$ <kbd>python3 -q</kbd>
&gt;&gt;&gt; <kbd>from datetime import datetime</kbd>
&gt;&gt;&gt; <kbd>for t in range(0, 4_200_000_000, 100_000_000):</kbd>
... <kbd>    print(f'{t:13_d} - {datetime.utcfromtimestamp(t)}')</kbd>
...
            0 - 1970-01-01 00:00:00
  100_000_000 - 1973-03-03 09:46:40
  200_000_000 - 1976-05-03 19:33:20
  300_000_000 - 1979-07-05 05:20:00
  400_000_000 - 1982-09-04 15:06:40
  500_000_000 - 1985-11-05 00:53:20
  600_000_000 - 1989-01-05 10:40:00
  700_000_000 - 1992-03-07 20:26:40
  800_000_000 - 1995-05-09 06:13:20
  900_000_000 - 1998-07-09 16:00:00
1_000_000_000 - 2001-09-09 01:46:40
1_100_000_000 - 2004-11-09 11:33:20
1_200_000_000 - 2008-01-10 21:20:00
1_300_000_000 - 2011-03-13 07:06:40
1_400_000_000 - 2014-05-13 16:53:20
1_500_000_000 - 2017-07-14 02:40:00
1_600_000_000 - 2020-09-13 12:26:40
1_700_000_000 - 2023-11-14 22:13:20
1_800_000_000 - 2027-01-15 08:00:00
1_900_000_000 - 2030-03-17 17:46:40
2_000_000_000 - 2033-05-18 03:33:20
2_100_000_000 - 2036-07-18 13:20:00
2_200_000_000 - 2039-09-18 23:06:40
2_300_000_000 - 2042-11-19 08:53:20
2_400_000_000 - 2046-01-19 18:40:00
2_500_000_000 - 2049-03-22 04:26:40
2_600_000_000 - 2052-05-22 14:13:20
2_700_000_000 - 2055-07-24 00:00:00
2_800_000_000 - 2058-09-23 09:46:40
2_900_000_000 - 2061-11-23 19:33:20
3_000_000_000 - 2065-01-24 05:20:00
3_100_000_000 - 2068-03-26 15:06:40
3_200_000_000 - 2071-05-28 00:53:20
3_300_000_000 - 2074-07-28 10:40:00
3_400_000_000 - 2077-09-27 20:26:40
3_500_000_000 - 2080-11-28 06:13:20
3_600_000_000 - 2084-01-29 16:00:00
3_700_000_000 - 2087-04-01 01:46:40
3_800_000_000 - 2090-06-01 11:33:20
3_900_000_000 - 2093-08-01 21:20:00
4_000_000_000 - 2096-10-02 07:06:40
4_100_000_000 - 2099-12-03 16:53:20</samp>
</pre>
<h2 id="update">Update<a href="#update"></a></h2>
<p>
  Here is a screenshot I took at Unix timestamp 1600000000:
  <a href="https://twitter.com/susam/status/1305120936098627589">twitter.com/susam/status/130512093609862758</a>.
</p>
<p>
  Reproduced as text below:
</p>
<pre>
<samp>$ <kbd>date -u; date; date +%s</kbd>
Sun Sep 13 12:26:39 UTC 2020
Sun Sep 13 17:56:39 IST 2020
1599999999
$ <kbd>date -u; date; date +%s</kbd>
Sun Sep 13 12:26:40 UTC 2020
Sun Sep 13 17:56:40 IST 2020
1600000000</samp>
</pre>
<p>
  An important point worth noting from the POSIX.1-2008 specification:
</p>
<blockquote>
  Coordinated Universal Time (UTC) includes leap seconds.  However, in
  POSIX time (seconds since the Epoch), leap seconds are ignored (not
  applied) to provide an easy and compatible method of computing time
  differences.  Broken-down POSIX time is therefore not necessarily
  UTC, despite its appearance.
</blockquote>
<p>
  See <a href="https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16">&sect; A.4.16</a>
  of the POSIX.1-2008 specification for more details.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/unix-timestamp-1600000000.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Pointers in K&amp;R</title>
<link>https://susam.net/pointers-in-knr.html</link>
<guid isPermaLink="false">iwasp</guid>
<pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I learnt C from the book <em>The C Programming Language, 2nd
  ed.</em> (K&amp;R) written by Brian Kernighan and Dennis Ritchie
  about 18 years ago during my engineering studies.  The subject of
  pointers was generally believed to be scary among fellow students
  and many of them bought pretty fat books that were dedicated solely
  to the topic of pointers.  However, when I reached Chapter 5 of the
  book , I found that it did a wonderful job at teaching pointers in
  merely 34 pages.  The chapter opens with this sentence:
</p>
<blockquote>
  A pointer is a variable that contains the address of a variable.
</blockquote>
<p>
  The exact point at which the whole topic of pointers became crystal
  clear was when I encountered this sentence in &sect; 5.3 Pointers
  and Arrays:
</p>
<blockquote>
  Rather more surprising, at first sight, is the fact that a reference
  to <code>a[i]</code> can also be written as <code>*(a+i)</code>.
</blockquote>
<p>
  Indeed, it was easy to confirm that by compiling and running the
  following program:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main() {
    int a[] = {2, 3, 5, 7, 11};
    printf("%d\n", *(a + 2));
    printf("%d\n", a[2]);
    printf("%d\n", 2[a]);
    return 0;
}</code>
</pre>
<p>
  The output is:
</p>
<pre>
<samp>5
5
5</samp>
</pre>
<p>
  C was the first serious programming language I was learning back
  then and at that time, I don't think I could have come across a
  better book than K&amp;R to learn this subject.  Like many others, I
  too feel that this book is a model for technical writing.  I wish
  more technical books were written like this with clear presentation
  and concise treatment.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/pointers-in-knr.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a>
</p>
]]>
</description>
</item>
<item>
<title>Leap Year Test in K&amp;R</title>
<link>https://susam.net/leap-year-test-in-knr.html</link>
<guid isPermaLink="false">tzjpk</guid>
<pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  About 18 years ago, while learning to program a computer using C, I
  learnt the following test for leap year from the book <em>The C
  Programming Language, 2nd ed.</em> (K&amp;R) written by Brian
  Kernighan and Dennis Ritchie.  Section 2.5 (Arithmetic Operators) of
  the book uses the following test:
</p>
<pre>
<code>(year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0</code>
</pre>
<p>
  It came as a surprise to me.  Prior to reading this, I did not know
  that centurial years are not leap years except for those centurial
  years that are also divisible by 400.  Until then, I always
  incorrectly thought that all years divisible by 4 are leap years.  I
  have witnessed only one centurial year, namely the year 2000, which
  happens to be divisible by 400.  As a result, the year 2000 proved
  to be a leap year and my misconception remained unchallenged for
  another few years until I finally came across the above test in
  K&amp;R.
</p>
<p>
  Now that I understand that centurial years are not leap years unless
  divisible by 400, it is easy to confirm this with the
  Unix <code>cal</code> command.  Enter <code>cal 1800</code>
  or <code>cal 1900</code> and we see calendars of non-leap years.
  But enter <code>cal 2000</code> and we see the calendar of a leap
  year.
</p>
<p>
  By the way, the following leap year test is equally effective:
</p>
<pre>
<code>year % 4 == 0 &amp;&amp; (year % 100 != 0 || year % 400 == 0)</code>
</pre>
<hr>
<p>
  <strong>Update:</strong> In the
  <a href="comments/leap-year-test-in-knr.html">comments section</a>,
  Thaumasiotes explains why both tests work.  Let me take the liberty
  of elaborating that comment further with a truth table.  We use the
  notation <code>A</code>, <code>B</code> and <code>C</code>
  respectively, for the three comparisons in the above expressions.
  Then the two tests above can be expressed as the following boolean
  expressions:
</p>
<ul>
  <li><code>(A &amp;&amp; B) || C</code></li>
  <li><code>A &amp;&amp; (B || C)</code></li>
</ul>
<p>
  Now normally these two boolean expressions are not equivalent.  The
  truth table below shows this:
</p>
<table class="grid center textcenter">
  <tr>
    <th><code>A</code></th>
    <th><code>B</code></th>
    <th><code>C</code></th>
    <th><code>(A &amp;&amp; B) || C</code></th>
    <th><code>A &amp;&amp; (B || C)</code></th>
  </tr>
  <tr>
    <td>F</td>
    <td>F</td>
    <td>F</td>
    <td>F</td>
    <td>F</td>
  </tr>
  <tr>
    <td>F</td>
    <td>F</td>
    <td>T</td>
    <td>T</td>
    <td>F</td>
  </tr>
  <tr>
    <td>F</td>
    <td>T</td>
    <td>F</td>
    <td>F</td>
    <td>F</td>
  </tr>
  <tr>
    <td>F</td>
    <td>T</td>
    <td>T</td>
    <td>T</td>
    <td>F</td>
  </tr>
  <tr>
    <td>T</td>
    <td>F</td>
    <td>F</td>
    <td>F</td>
    <td>F</td>
  </tr>
  <tr>
    <td>T</td>
    <td>F</td>
    <td>T</td>
    <td>T</td>
    <td>T</td>
  </tr>
  <tr>
    <td>T</td>
    <td>T</td>
    <td>F</td>
    <td>T</td>
    <td>T</td>
  </tr>
  <tr>
    <td>T</td>
    <td>T</td>
    <td>T</td>
    <td>T</td>
    <td>T</td>
  </tr>
</table>
<p>
  We see that there are two cases where the last two columns differ.
  This confirms that the two boolean expressions are not equivalent.
  The two cases where the boolean expressions yield different results
  occur when <code>A</code> is false and <code>C</code> is true.  But
  these cases are impossible!  If <code>A</code> is false
  and <code>C</code> is true, it means we have <code>year % 4 !=
  0</code> and <code>year % 400 == 0</code> which is impossible.
</p>
<p>
  If <code>year % 400 == 0</code> is true, then <code>year % 4 ==
  0</code> must also hold true.  In other words, if <code>C</code> is
  true, <code>A</code> must also be true.  Therefore, the two cases
  where the last two columns differ cannot occur and may be ignored.
  The last two columns are equal in all other cases and that is why
  the two tests we have are equivalent.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/leap-year-test-in-knr.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/book.html">#book</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a>
</p>
]]>
</description>
</item>
<item>
<title>Lisp in Vim</title>
<link>https://susam.net/lisp-in-vim.html</link>
<guid isPermaLink="false">bgxhz</guid>
<pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="introduction">Introduction<a href="#introduction"></a></h2>
<p>
  Fifteen years ago, writing Lisp code in Vim was an odd adventure.
  There were no good plugins for Vim that assisted in structured
  editing of Lisp s-expressions or allowed interactive programming by
  embedding a Lisp Read-Eval-Print-Loop (REPL) or a debugger within
  the editor.  The situation has improved a lot since then.  In the
  last ten years, we have seen active development of two Vim plugins
  named <a href="https://github.com/kovisoft/slimv">Slimv</a> and
  <a href="https://github.com/l04m33/vlime">Vlime</a>.  Slimv is over
  10 years old now.  Vlime is more recent and less than 3 years old
  right now.  Both support interactive programming in Lisp.
</p>
<p>
  I am going to discuss and compare both Slimv and Vlime in this
  article.  I will show how to get started with both plugins and
  introduce some of their basic features.  I will not cover everything
  though.  This is not a tutorial.  For tutorials, see
  the <a href="#references"><em>References</em></a> section.
</p>
<p>
  If you are looking only for a comparison of the two plugins or a
  quick recommendation, jump directly to the
  <a href="#comparison-of-slimv-and-vlime"><em>Comparison of Slimv and Vlime</em></a>
  section or the
  <a href="#quick-recommendation"><em>Quick Recommendation</em></a>
  section.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#background">Background</a>
    <ul>
      <li><a href="#lisp">Lisp</a></li>
      <li><a href="#emacs-slime">Emacs: SLIME</a></li>
      <li><a href="#vim-slimv-vlime">Vim: Slimv/Vlime</a></li>
    </ul>
  </li>
  <li><a href="#vim-plugin-management">Vim Plugin Management</a></li>
  <li><a href="#software-versions">Software Versions</a></li>
  <li><a href="#get-started">Get Started</a>
    <ul>
      <li><a href="#get-started-with-slimv-and-sbcl">Get Started with Slimv and SBCL</a></li>
      <li><a href="#get-started-with-vlime-and-sbcl">Get Started with Vlime and SBCL</a></li>
      <li><a href="#get-started-with-paredit">Get Started with Paredit</a></li>
    </ul>
  </li>
  <li><a href="#use-debugger-and-inspector">Use Debugger and Inspector</a>
    <ul>
      <li><a href="#use-debugger-and-inspector-with-slimv">Use Debugger and Inspector with Slimv</a></li>
      <li><a href="#use-debugger-and-inspector-with-vlime">Use Debugger and Inspector with Vlime</a></li>
    </ul>
  </li>
  <li><a href="#trace-function">Trace Function</a>
    <ul>
      <li><a href="#trace-function-in-slimv">Trace Function in Slimv</a></li>
      <li><a href="#trace-function-in-vlime">Trace Function in Vlime</a></li>
    </ul>
  </li>
  <li><a href="#nifty-features">Nifty Features</a>
    <ul>
      <li><a href="#evaluate-top-level-form">Evaluate Top-Level Form</a></li>
      <li><a href="#rainbow-parentheses">Rainbow Parentheses</a></li>
      <li><a href="#argument-list">Argument List</a></li>
      <li><a href="#omni-completion">Omni-Completion</a></li>
      <li><a href="#describe-symbol">Describe Symbol</a></li>
      <li><a href="#expand-macro">Expand Macro</a></li>
      <li><a href="#cross-reference">Cross Reference</a></li>
    </ul>
  </li>
  <li><a href="#other-common-lisp-implementations">Other Common Lisp Implementations</a>
    <ul>
      <li><a href="#use-slimv-with-clisp">Use Slimv with CLISP</a></li>
      <li><a href="#use-slimv-with-ecl">Use Slimv with ECL</a></li>
      <li><a href="#use-vlime-with-clisp">Use Vlime with CLISP</a></li>
      <li><a href="#use-vlime-with-ecl">Use Vlime with ECL</a></li>
    </ul>
  </li>
  <li><a href="#other-lisp-dialects">Other Lisp Dialects</a>
    <ul>
      <li><a href="#use-slimv-with-mit-gnu-scheme">Use Slimv with MIT/GNU Scheme</a></li>
      <li><a href="#use-slimv-with-clojure">Use Slimv with Clojure</a></li>
    </ul>
  </li>
  <li><a href="#comparison-of-slimv-and-vlime">Comparison of Slimv and Vlime</a></li>
  <li><a href="#quick-recommendation">Quick Recommendation</a></li>
  <li><a href="#disclosure">Disclosure</a></li>
  <li><a href="#references">References</a></li>
</ul>
<h2 id="background">Background<a href="#background"></a></h2>
<p>
  Before we get started with Slimv and Vlime, it would be nice to take
  a brief look at the heritage behind these plugins.  These plugins
  provide Lisp development environments for Vim, so their story begins
  with Lisp.
</p>
<h3 id="lisp">Lisp<a href="#lisp"></a></h3>
<p>
  Lisp is a family of programming languages with a distinctive, fully
  parenthesised prefix notation.  It is quite unlike most of the other
  popular programming languages today like C, Python, Ruby, etc.  Its
  homoiconic nature and its powerful macro system that can transform
  arbitrary Lisp expressions make it such a flexible, versatile,
  extensible and introspective language that articles describing Lisp
  often have the word "enlightenment" in them.  For example, see the
  following articles:
</p>
<ul>
  <li>
    <a href="http://www.paulgraham.com/avg.html"><em>Beating the
    Averages</em></a> (by Paul Graham)
  </li>
  <li>
    <a href="https://www.defmacro.org/ramblings/lisp.html"><em>The
    Nature of Lisp</em></a> (by Slava Akhmechet)
  </li>
  <li>
    <a href="https://twobithistory.org/2018/10/14/lisp.html"><em>How
    Lisp Became God's Own Programming Language</em></a> (by Sinclair
    Target)
  </li>
</ul>
<p>
  Lisp has been described in various ways by various eminent
  personalities in the history of computing.  Alan Kay has famously
  described Lisp as:
</p>
<blockquote>
  The greatest single programming language ever designed.
</blockquote>
<p>
  John Foderaro has written this about Lisp:
</p>
<blockquote>
  Lisp is a programmable programming language.
</blockquote>
<p>
  Eric S. Raymond has expressed the enlightenment one experiences by
  learning Lisp in his famous article titled
  <a href="http://www.catb.org/~esr/faqs/hacker-howto.html"><em>How To Become A Hacker</em></a>:
</p>
<blockquote>
  Lisp is worth learning for the profound enlightenment experience you
  will have when you finally get it.  That experience will make you a
  better programmer for the rest of your days, even if you never
  actually use Lisp itself a lot.
</blockquote>
<p>
  Randall Munroe, the creator of the
  <a href="https://xkcd.com/">XKCD</a> webcomic has dedicated two
  comic strips to Lisp:
</p>
<figure class="soft">
  <img src="files/blog/xkcd-224-lisp.jpg" alt="XKCD comic on Lisp"
       title="Original title text: We lost the documentation on quantum mechanics.  You'll have to decode the regexes yourself.">
  <figcaption>
    <em>Lisp</em> by Randall Munroe
    (Source: <a href="https://xkcd.com/224/">https://xkcd.com/224/</a>)
  </figcaption>
</figure>
<figure class="soft">
  <img src="files/blog/xkcd-297-lisp-cycles.png" alt="XKCD comic on Lisp Cycles"
       title="Original title text: I've just received word that the Emperor has dissolved the MIT computer science program permanently.">
  <figcaption>
    <em>Lisp Cycles</em> by Randall Munroe
    (Source: <a href="https://xkcd.com/297/">https://xkcd.com/297/</a>)
  </figcaption>
</figure>
<p>
  Developed in 1958 by John McCarthy, Lisp is the second oldest
  programming language in use today.  Only Fortran is older, by one
  year.  Some of the popular Lisp dialects today include Common Lisp,
  Scheme and Clojure.  Most of this article would focus on Common
  Lisp.  Scheme and Clojure would be discussed briefly towards the end
  of this article.
</p>
<h3 id="emacs-slime">Emacs: SLIME<a href="#emacs-slime"></a></h3>
<p>
  Many Lisp programmers immediately think of Emacs when they think of
  writing Lisp code.  Emacs is a family of text editors.  An Emacs
  editor itself is typically implemented in a dialect of Lisp.  There
  is an Emacs mode named SLIME that provides excellent support for
  programming in Lisp.  SLIME stands for Superior Lisp Interaction
  Mode for Emacs.  First released in August 2003, SLIME was created by
  Eric Marsden and then later developed further by Luke Gorrie and
  Helmut Eller.  It offers a Read-Eval-Print-Loop (REPL), integrated
  debugging and interactive evaluation of expressions, all available
  right within the editor.  There are several nifty key bindings
  available to compile and evaluate parts or whole of the code in the
  current buffer.
</p>
<p>
  SLIME works by launching a Swank TCP server.  Swank is a backend
  server program written in Common Lisp that listens on a socket to
  receive SLIME commands from Emacs and execute them.  SLIME is so
  useful that it is considered to be indispensible by many Lisp
  programmers who write Lisp code in Emacs.
</p>
<h3 id="vim-slimv-vlime">Vim: Slimv/Vlime<a href="#vim-slimv-vlime"></a></h3>
<p>
  Is there anything similar to SLIME for Vim?  Yes, there are two
  popular options:
</p>
<ul>
  <li>
    <p>
      <strong>Slimv:</strong> It stands for Superior Lisp Interaction
      Mode for Vim.  It is a Vim plugin created by Tamas Kovacs that
      was first released in January 2009.
    </p>
  </li>
  <li>
    <p>
      <strong>Vlime:</strong> It is a Vim plugin created by Kay Z that
      was first released in May 2017.  It is much more recent than
      Slimv.  Vlime is younger than Slimv by eight years.
    </p>
  </li>
</ul>
<p>
  Both plugins use a client-server architecture like SLIME does in
  Emacs.  Both plugins rely on Swank server to be started.  In fact,
  Slimv bundles a slightly modified version of Swank with it, so that
  it can launch it and connect to it to send expressions to be
  evaluated.  Vlime does not bundle Swank server with itself but it
  provides a wrapper that automatically downloads Swank server when
  needed.
</p>
<h2 id="vim-plugin-management">Vim Plugin Management<a href="#vim-plugin-management"></a></h2>
<p>
  When I started using Vim fifteen years ago, we used to just download
  a Vim plugin and copy/extract it to <code>~/.vim</code> directory.
  These days, there are a few plugin management tools for Vim such
  as <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>,
  <a href="https://github.com/VundleVim/Vundle.Vim">Vundle</a>,
  <a href="https://github.com/junegunn/vim-plug">vim-plug</a>, etc.  I
  am not going to use any of them because I don't know which one of
  them you use and I don't want to write down steps for each one of
  them.
</p>
<p>
  In fact, I have never used any Vim plugin manager myself.  Until Vim
  7, I used to create a <code>~/.vim/bundle</code> directory, then
  copy each plugin to its own directory within it and add the plugin's
  directory path to Vim's <code>runtimepath</code> option.
</p>
<p>
  Vim 8 has native support for packages which makes installing plugins
  and loading them simpler.  With Vim 8, we can copy each plugin to
  its own directory within <code>~/.vim/pack/plugins/start</code> and
  they are loaded automatically when Vim starts.  The directory name
  <code>plugins</code> in this path is only an example.  It could be
  any arbitrary name and Vim would still load the plugins fine.
</p>
<p>
  In this article, I will use Vim 8's native support for packages to
  set up Vim plugins.  The only exception to this would be installing
  Vlime.  The top-level directory of Vlime is not the plugin
  directory.  The plugin directory is contained in a subdirectory
  named <code>vim</code>.  This does not conform to the directory
  structure of plugins in a Vim package.  Therefore, in this article,
  I will set up Vlime in the old fashioned way by copying it
  to <code>~/.vim/bundle</code> and then adding the path to its plugin
  directory to Vim's <code>runtimepath</code> option.
</p>
<h2 id="software-versions">Software Versions<a href="#software-versions"></a></h2>
<p>
  Since this article involves several layers of software, some of what
  is written here may not hold good in future as these various pieces
  of software change and evolve over time.  Therefore, in this
  section, I will note down the versions of various software tools I
  used while writing this article.  Here they are:
</p>
<ul>
  <li>Debian GNU/Linux 10.1 (buster)</li>
  <li>Vim 8.1</li>
  <li>
    Slimv (Git repo last updated on 30 Nov 2019 with commit
    <a href="https://github.com/kovisoft/slimv/commits/47a0070">47a0070</a>)
  </li>
  <li>
    Vlime (Git repo last updated on 16 Oct 2017 with commit
    <a href="https://github.com/l04m33/vlime/commits/065b95f">065b95f</a>)
  </li>
  <li>
    Paredit (Git repo last updated on 30 Nov 2019 with commit
    <a href="https://github.com/kovisoft/paredit/commits/d99905a">d99905a</a>)
  </li>
  <li>
    Rainbow Parentheses (Git repo last updated on 29 Oct 2015 with commit
    <a href="https://github.com/junegunn/rainbow_parentheses.vim/commits/27e7cd7">27e7cd7</a>)
  </li>
  <li>SBCL 1.4.16.debian</li>
  <li>GNU CLISP 2.49.92</li>
  <li>ECL 16.1.3</li>
  <li>MIT/GNU Scheme 9.1.1 on Debian GNU/Linux 9.11 (stretch)</li>
  <li>Clojure 1.10.1</li>
  <li>Quicklisp beta (libraries last updated on 30 Nov 2019)</li>
  <li>tmux 2.8</li>
</ul>
<p>
  You will probably need only a tiny subset of the tools above
  depending on which sections in this article you would follow.  Just
  pick the sections you want to try out and follow the steps written
  in them.  They will walk you through the procedure to install the
  tools applicable to the sections you have picked.  Regardless of
  which sections you pick, I recommend that you definitely go through
  the three "Get Started" subsections below.  These subsections go
  into detail about some of the prerequisites such as support for
  tmux, Paredit, support for Python interface in Vim, etc. that are
  not covered in the other sections.
</p>
<p>
  The choice of Debian may look like an odd one.  I want the commands
  and steps discussed in this article to be easily reproducible in a
  free and open source operating system.  Debian happens to be my
  favourite.  What works on Debian is easily reproducible on Ubuntu
  and other derivatives, often without any changes to the steps.  I
  believe, it will not be too difficult to translate the steps
  provided for Debian to the steps that would work on another
  operating system.
</p>
<p>
  Note that Quicklisp (a prerequisite for Vlime) is still beta
  software at the time of writing this article.  The actual steps to
  install Quicklisp may change in future.  Check
  <a href="https://www.quicklisp.org/">https://www.quicklisp.org/</a>
  for the most up-to-date instructions to install Quicklisp.
</p>
<h2 id="get-started">Get Started<a href="#get-started"></a></h2>
<h3 id="get-started-with-slimv-and-sbcl">Get Started with Slimv and SBCL<a href="#get-started-with-slimv-and-sbcl"></a></h3>
<p>
  Here are the steps to set up Slimv and use it:
</p>
<ol>
  <li>
    <p>
      Install the tools required to set up a Common Lisp development
      environment with Slimv with this command:
    </p>
    <pre><code>sudo apt-get install vim-nox sbcl tmux git</code></pre>
    <p>
      The default Vim in Debian is <code>vim.basic</code> provided by
      the <code>vim</code> package which does not have support for
      Python interface.  Slimv is written in Vim script, Lisp and
      Python 3, so it does need a Vim package that has support for
      Python interface.  One such package is <code>vim-nox</code> that
      provides the <code>vim.nox</code> command.  Installing it
      automatically updates the <code>vim</code> command to
      run <code>vim.nox</code>.  Another such package
      is <code>vim-gtk</code> which additionally provides GUI support.
      The graphical Vim known as GVim can be launched with
      the <code>gvim</code> command.  It runs in the desktop
      environment.  For the purpose of this article, I will stick
      to <code>vim-nox</code> because it is lightweight.  All steps
      meant for Slimv would run equally well on <code>vim-gtk</code>,
      MacVim and GVim.
    </p>
    <p>
      Installing tmux is optional.  Slimv can launch Swank server
      automatically if Vim is running within tmux, GNU Screen or a
      desktop environment, so if you are using GNU Screen already, you
      don't need to install tmux.  Also, if you are running Slimv in a
      desktop environment, you don't really need to install either
      tmux or GNU Screen, although you could if you would like to see
      Swank running in a separate tmux or GNU Screen window rather
      than a separate terminal window.  In this article, I am going to
      assume that Vim is running within tmux.
    </p>
    <p>
      If you are going to run Slimv in a terminal without a desktop
      environment, tmux or GNU Screen, Swank server has to be run
      manually.  Point 4 below explains how to do it.
    </p>
  </li>
  <li>
    <p>
      Installing Slimv is pretty simple.  Here is one way to do it:
    </p>
<pre>
<code>git clone https://github.com/kovisoft/slimv.git ~/.vim/pack/plugins/start/slimv
vim +'helptags ~/.vim/pack/plugins/start/slimv/doc' +q</code>
</pre>
    <p>
      That is it!  Slimv is set up.  It's that straightforward.  The
      commands above show how to set up Slimv with just two shell
      commands.  You could also use a Vim plugin manager to install
      Slimv for you but I am not going to cover that here.
    </p>
  </li>
  <li>
    <p>
      This is an optional step.  Slimv supports starting Swank server
      automatically if you are running Vim in tmux, GNU Screen or a
      desktop environment.  To start tmux, enter this command:
    </p>
    <pre><code>tmux</code></pre>
    <p>
      If you use GNU screen or a desktop environment, you don't have
      to run tmux.
    </p>
    <p>
      If you do not use tmux, GNU Screen or a desktop environment,
      then you must start Swank server manually as explained in the
      next point.
    </p>
  </li>
  <li>
    <p>
      This step is necessary only if you are not using tmux, GNU
      Screen or a desktop environment.  The following command shows
      how to start Swank server manually:
    </p>
    <pre><code>sbcl --load ~/.vim/pack/plugins/start/slimv/slime/start-swank.lisp</code></pre>
    <p>
      If you are using tmux, GNU Screen or a desktop environment,
      Slimv can start Swank server automatically when needed and you
      don't need to perform this step.
    </p>
  </li>
  <li>
    <p>
      Create a new Lisp source code file, say, <code>foo.lisp</code>
      with this command:
    </p>
    <pre><code>vim foo.lisp</code></pre>
  </li>
  <li>
    <p>
      To connect to Swank server, enter the following command in
      normal mode:
    </p>
    <p>
      <kbd>,</kbd><kbd>c</kbd>
    </p>
    <p>
      If Vim is running within tmux, GNU Screen or desktop
      environment, Slimv would automatically launch Swank server and
      connect to it.
    </p>
    <p>
      After Slimv connects to Swank successfully, Vim window should
      split into two and the following prompt should appear in the new
      split window:
    </p>
    <pre><samp>CL-USER&gt;</samp></pre>
    <p>
      This is the integrated REPL.  It is now alive and ready for
      interactive programming.
    </p>
    <p>
      We assume here that Slimv is using the default Slimv leader
      key <kbd>,</kbd>.  If you have overridden the Vim leader key,
      then the Slimv leader key might be same as the Vim leader key.
      Enter the command <code>:echo g:slimv_leader</code> in Vim
      command-line mode to find the leader key being used by Slimv.
    </p>
  </li>
  <li>
    <p>
      Type some code into the buffer for the new file.  To do so,
      first type <kbd>i</kbd> to enter insert mode and type this code:
    </p>
    <pre><code>(format t "hello, world~%")</code></pre>
    <p>
      Type <kbd>esc</kbd> to return to normal mode.
    </p>
  </li>
  <li>
    <p>
      To evaluate the current expression under the cursor, enter the
      following command in normal mode:
    </p>
    <p>
      <kbd>,</kbd><kbd>e</kbd>
    </p>
    <p>
      Both the current expression and its result should appear in the
      REPL window.
    </p>
  </li>
  <li>
    <p>
      The REPL is interactive.  Type
      <kbd>ctrl</kbd>+<kbd>w</kbd><kbd>w</kbd> to switch to the REPL
      window.  Then type <kbd>i</kbd> to enter insert mode and type
      this code:
    </p>
    <pre><code>(+ 1 2)</code></pre>
    <p>
      Type <kbd>enter</kbd> to evaluate the expression just like you
      would do in a real REPL.  The result should then appear in the
      REPL.
    </p>
    <p>
      Type <kbd>esc</kbd> to return to normal mode again.  Use the
      normal mode command
      <kbd>ctrl</kbd>&nbsp;+&nbsp;<kbd>w</kbd>&nbsp;<kbd>w</kbd> to
      switch between the split windows.
    </p>
  </li>
  <li>
    <p>
      Now that you have got started with Slimv, here is a brief note
      on uninstallation, in case you ever need it.  If Slimv is
      installed as described in point 2 above, enter the following
      command to uninstall it:
    </p>
    <pre><code>rm -rf ~/.vim/pack/plugins/start/slimv</code></pre>
  </li>
</ol>
<p>
  In steps 7 and 9, you may have noticed that as soon as you type an
  opening parenthesis or double quotation mark, a matching closing one
  is automatically inserted.  That is done by the
  <a href="https://github.com/kovisoft/paredit">Paredit</a> plugin
  which is bundled along with Slimv.  Paredit ensures structured
  editing of Lisp s-expressions and keeps all matched characters
  (parentheses, brackets, braces, quotes) balanced.  It also provides
  many new keybindings to edit s-expressions conveniently.  We will
  look into Paredit in a little more detail in
  the <a href="#get-started-with-paredit"><em>Get Started with
  Paredit</em></a> subsection later.
</p>
<h3 id="get-started-with-vlime-and-sbcl">Get Started with Vlime and SBCL<a href="#get-started-with-vlime-and-sbcl"></a></h3>
<p>
  Here are the steps to set up Vlime and use it:
</p>
<ol>
  <li>
    <p>
      Install the tools required to set up a Common Lisp development
      environment with Vlime with this command:
    </p>
    <pre><code>sudo apt-get install vim sbcl git curl</code></pre>
    <p>
      Note that unlike Slimv, Vlime can work with the default Vim in
      Debian, i.e. <code>vim.basic</code>.  Vlime does not require Vim
      with Python interface.
    </p>
  </li>
  <li>
    <p>
      Install Quicklisp with these commands:
    </p>
<pre>
<code>curl -O https://beta.quicklisp.org/quicklisp.lisp
sbcl --load quicklisp.lisp --eval '(quicklisp-quickstart:install)' --eval '(exit)'
sbcl --load ~/quicklisp/setup.lisp --eval '(ql:add-to-init-file)' --eval '(exit)'</code>
</pre>
    <p>
      Type <kbd>enter</kbd> in the end, when prompted, to complete the
      installation.
    </p>
  </li>
  <li>
    <p>
      Install Vlime and Paredit with these commands:
    </p>
<pre>
<code>git clone https://github.com/l04m33/vlime.git ~/.vim/bundle/vlime
git clone https://github.com/kovisoft/paredit ~/.vim/pack/plugins/start/paredit
echo 'set runtimepath^=~/.vim/bundle/vlime/vim' &gt;&gt; ~/.vimrc
vim +'helptags ~/.vim/bundle/vlime/vim/doc' +'helptags ~/.vim/pack/plugins/start/paredit/doc' +q</code>
</pre>
    <p>
      Unlike Slimv, Vlime does not bundle
      <a href="https://github.com/kovisoft/paredit">Paredit</a> along
      with itself.  As explained in the previous section, it helps us
      with structured editing of Lisp s-expressions.
    </p>
    <p>
      I recommend that you install Paredit but in case you choose not
      to, ensure that loading of filetype plugins is enabled by
      entering the <code>:filetype</code> command in command-line
      mode.  The output should contain <code>plugin:ON</code>.  If it
      is off, add the command <code>filetype plugin on</code>
      to <code>~/.vimrc</code> to ensure that this is always on.
      Vlime won't work without this being enabled.  If you install
      Paredit, you don't have to bother about this because Paredit
      takes care of enabling this by default.
    </p>
  </li>
  <li>
    <p>
      Create a new Lisp source code file, say, <code>foo.lisp</code>
      with this command:
    </p>
    <pre><code>vim foo.lisp</code></pre>
  </li>
  <li>
    <p>
      To start Vlime server (a wrapper around Swank server) and
      connect to it automatically, enter the following command in
      normal mode:
    </p>
    <p>
      <kbd>\</kbd><kbd>r</kbd><kbd>r</kbd>
    </p>
    <p>
      We assume here that Vim <code>&lt;LocalLeader&gt;</code> is left
      to its default, i.e. backslash.  If it is mapped to some other
      key combination, then that must be used instead of backslash in
      the above command.
    </p>
    <p>
      The first time this command is run after installing Vlime, it
      installs Swank server using Quicklisp.  Therefore, it can take a
      while for Vlime server to start the first time this command is
      run.  On subsequent use of these commands, it would start faster
      because it would be already installed.
    </p>
    <p>
      The console output from Vlime server is displayed in a split
      window.  After Vlime successfully connects to Swank, the
      following message is displayed at the bottom:
    </p>
    <pre><samp>Vlime Connection 1 established.</samp></pre>
    <p>
      After the above message appears, it is okay to close the split
      window for Vlime server by entering this command in Vim
      command-line mode:
    </p>
    <pre><code>:q</code></pre>
    <p>
      Vlime server would continue to run in background.  The following
      command can be used in normal mode to view the console output of
      Vlime server anytime it is required:
    </p>
    <p>
      <kbd>\</kbd><kbd>r</kbd><kbd>v</kbd>
    </p>
  </li>
  <li>
    <p>
      Type some code into the buffer for the new file.  To do so,
      first type <kbd>i</kbd> to enter insert mode and type this code:
    </p>
    <pre><code>(format t "hello, world~%")</code></pre>
    <p>
      Type <kbd>esc</kbd> to return to normal mode.
    </p>
  <li>
    <p>
      To evaluate, the current expression under the cursor, enter the
      following command in normal mode:
    </p>
    <p>
      <kbd>\</kbd><kbd>s</kbd><kbd>s</kbd>
    </p>
    <p>
      Both the current expression and its result should appear in the
      REPL window.
    </p>
    <p>
      Unlike Slimv, the REPL window of Vlime is <em>not</em>
      interactive.  Its <code>nomodifiable</code> option is set, so we
      cannot type code directly into the REPL window.  This can be a
      bit of a problem if we want to type arbitrary expressions into
      the REPL and execute them.  To mitigate this shortcoming to some
      extent, Vlime provides an alternative way to evaluate the
      current expression known as the interaction mode.  This is
      explained in the next point.
    </p>
  </li>
  <li>
    <p>
      Enable interaction mode by entering this command in normal mode:
    </p>
    <p><kbd>\</kbd><kbd>i</kbd></p>
    <p>
      The same command disables interaction mode, i.e. this command
      toggles the state of interaction mode between on and off.  When
      interaction mode is on, evaluate an expression under the cursor
      by simply pressing <kbd>enter</kbd> in normal mode.
    </p>
  </li>
  <li>
    <p>
      Now that you have got started with Vlime, here is a brief note
      on uninstallation, in case you ever need it.  If Quicklisp and
      Vlime are installed as described in the points 2 and 3 above,
      run these commands to uninstall them:
    </p>
<pre>
<code>rm -rf ~/quicklisp ~/.vim/bundle/vlime ~/.vim/pack/plugins/start/paredit
sed -i.bkp '/runtimepath.*vlime/d' ~/.vimrc</code>
</pre>
    <p>
      Optionally, remove <code>~/.sblrc</code> or edit it to remove
      the code pertaining to loading
      <code>quicklisp/setup.lisp</code>.
  </li>
</ol>
<h3 id="get-started-with-paredit">Get Started with Paredit<a href="#get-started-with-paredit"></a></h3>
<p>
  You have already got started with Paredit when you wrote Lisp code
  while following one of the previous two subsections.  The moment you
  typed an opening parenthesis, Paredit inserted a closing one for you
  automatically.  Paredit keeps all matched characters such as
  parentheses, double quotes, etc. balanced when you edit code.  Here
  is a very brief exercise to quickly get started with some of the
  very basic features of Paredit:
</p>
<ol>
  <li>
    <p>
      Create a new Lisp source code file, say, <code>foo.lisp</code>
      with this command:
    </p>
    <pre><code>vim foo.lisp</code></pre>
  </li>
  <li>
    <p>
      Type <kbd>i</kbd> to enter insert mode and then type only this:
    </p>
    <pre><code>(defun square (x</code></pre>
    <p>
      At this point, Paredit should have inserted the two closing
      parentheses automatically.  The code should look like this:
    </p>
    <pre><code>(defun square (x<span class="cursor">)</span>)</code></pre>
    <p>
      The cursor should be situated just after the parameter
      <code>x</code>.  The block above shows where the cursor should
      be.
    </p>
  </li>
  <li>
    <p>
      While you are still in insert mode, type the first closing
      parenthesis.  Yes, type it even if the closing parenthesis is
      already present.  The cursor should now skip over the first
      closing parenthesis like this:
    </p>
    <pre><code>(defun square (x)<span class="cursor">)</span></code></pre>
    <p>
      Of course, there was no need to type the closing parenthesis
      because it was already present but typing it out to skip over it
      is more efficient than escaping to normal mode, then moving over
      it and then entering insert mode again.  This is, in fact, a
      very nifty feature of Paredit.  We can enter code with the same
      keystrokes as we would without Paredit.
    </p>
  </li>
  <li>
    <p>
      You should still be in insert mode.  Type <kbd>enter</kbd> to
      create a new line below.  Now one of two things is going to
      happen.  If electric return is disabled, then a newline is
      inserted as expected like this:
    </p>
<pre>
<code>(defun square (x))
  <span class="cursor">)</span></code>
</pre>
    <p>
      If electric return is enabled, two newlines are inserted to
      create an empty line in between:
    </p>
<pre>
<code>(defun square (x)
  <span class="cursor"> </span>
  )</code>
</pre>
    <p>
      In both cases, indentation of two spaces is inserted
      automatically.  The new empty line inserted by electric return
      allows linewise editing of the code to be entered in this empty
      line.
    </p>
    <p>
      The electric return feature is enabled by default in both
      Paredit and Slimv.  It works by Paredit remapping the "enter"
      key (<code>&lt;CR&gt;</code>) in insert mode to a function that
      inserts electric return.  Slimv needs to remap the "enter" key
      to present the argument list of the current function but it
      takes care of performing an electric return before showing the
      argument list.  Vlime, however, forgets to perform electric
      return before showing the argument list, so this feature does
      not work in Vlime.
    </p>
    <p>
      For now, we will continue with the assumption that electric
      return is enabled and working fine.  If it is disabled or if it
      is not working for you, ignore the steps that discuss electric
      return.
    </p>
  </li>
  <li>
    <p>
      Now, type only this:
    </p>
    <pre><code>(* x x</code></pre>
    <p>
      Again, Paredit would have inserted the closing parenthesis
      automatically.  The code should look like this now:
    </p>
<pre>
<code>(defun square (x)
  (* x x<span class="cursor">)</span>
  )</code>
</pre>
  </li>
  <li>
    <p>
      Now, type one more closing parenthesis to advance past the
      automatically inserted closing parenthesis like this:
    </p>
<pre>
<code>(defun square (x)
  (* x x)<span class="cursor"> </span>
  )</code>
</pre>
  </li>
  <li>
    <p>
      Then type another closing parenthesis.  Paredit would now pick
      the lone closing parenthesis that is present in its own line and
      move it at the end of the current line like this:
    </p>
<pre>
<code>(defun square (x)
  (* x x))<span class="cursor"> </span></code>
</pre>
    <p>
      This behaviour of consuming the extra newline inserted by an
      electric return on typing a closing parenthesis helps the code
      to conform to the popular Lisp coding convention of putting all
      the consecutive closing parentheses next to each other in the
      same line.  In other words, typing closing parentheses
      re-gathers electric returns when applicable.
    </p>
  </li>
  <li>
    <p>
      Let us see what happens if we try to delete the opening
      parenthesis around the product function (the <code>*</code>
      function).  Type <kbd>esc</kbd> to return to normal mode.  Then
      enter <kbd>h</kbd> in normal mode to move the cursor one place
      left so that the cursor is placed on the parenthesis just after
      the last <code>x</code> in the code like this:
    </p>
<pre>
<code>(defun square (x)
  (* x x<span class="cursor">)</span>)</code>
</pre>
    <p>
      Type <kbd>x</kbd> to delete the closing parenthesis the cursor
      is on.  Nothing gets deleted!  Instead the cursor just skips
      over the parenthesis like this:
    </p>
<pre>
<code>(defun square (x)
  (* x x)<span class="cursor">)</span></code>
</pre>
    <p>
      Paredit refuses to delete the closing parenthesis because it
      encloses a non-empty list.  It would have deleted the closing
      parenthesis along with the opening one if the list were empty.
      This is Paredit trying to ensure that the s-expressions remain
      valid while editing.
    </p>
    <p>
      Note that in this step, <kbd>h</kbd> is a regular Vim motion
      command.  In Vim, by default, <kbd>x</kbd> deletes the character
      under the cursor, but when Paredit is enabled, it remaps this
      command to behave the way it did in this step to ensure that the
      parentheses remain balanced.
    </p>
  </li>
  <li>
    <p>
      Let us now try to delete the current line.  Type
      <kbd>d</kbd><kbd>d</kbd> to do so.  The result looks like this:
    </p>
<pre>
<code>(defun square (x)
  <span class="cursor">)</span></code>
</pre>
    <p>
      Note how the closing parenthesis has been left intact to keep
      the parentheses balanced.  Again, Paredit has remapped the
      <kbd>d</kbd><kbd>d</kbd> command to produce this behaviour.
    </p>
  </li>
  <li>
    <p>
      Now type <kbd>d</kbd><kbd>a</kbd><kbd>(</kbd> to delete the
      entire <code>defun</code> expression.  The buffer should look
      empty now.
    </p>
  </li>
  <li>
    <p>
      Type <kbd>i</kbd> to enter insert mode and type out the
      following code:
    </p>
    <pre><code>(list (* 10 20) (+ 30 40))<span class="cursor"> </span></code></pre>
  </li>
  <li>
    <p>
      Type <kbd>esc</kbd> to return to normal mode.
      Type <kbd>h</kbd><kbd>(</kbd><kbd>h</kbd><kbd>h</kbd> to place
      the cursor on the closing parenthesis of the first expression.
    </p>
    <pre><code>(list (* 10 20<span class="cursor">)</span> (+ 30 40))</code></pre>
    <p>
      Now type <kbd>,</kbd><kbd>&gt;</kbd>.  The closing parenthesis
      of the first expression moves right to <em>slurp</em> the next
      expression.  The buffer looks like this:
    </p>
    <pre><code>(list (* 10 20 (+ 30 40)<span class="cursor">)</span>)</code></pre>
    <p>
      We assume here that Paredit is using the default Paredit leader
      key <kbd>,</kbd>.  If you have overridden the Vim leader key,
      then the Paredit leader key might be same as the Vim leader key.
      Enter the command <code>:echo g:paredit_leader</code> in Vim
      command-line mode to find the leader key being used by Paredit.
    </p>
  </li>
  <li>
    <p>
      Now type <kbd>,</kbd><kbd>&lt;</kbd>.  The closing parenthesis
      of the outer expression moves left to <em>barf</em> the inner
      expression out.  The buffer looks like this again:
    </p>
    <pre><code>(list (* 10 20<span class="cursor">)</span> (+ 30 40))</code></pre>
    <p>
      While the cursor is on a parenthesis, the normal mode
      commands <code>,&lt;</code> or <code>,&gt;</code> can be used in
      this manner to move the parenthesis left or right respectively,
      thereby slurping or barfing expressions.
    </p>
  </li>
</ol>
<p>
  That was a very brief overview of what Paredit can do.  There is a
  lot more to Paredit than what is described above.  Paredit has a
  rich set of keybindings to make editing s-expressions very
  convenient.  Enter <code>:help paredit-keys</code> in command-line
  mode to see the list of the keybindings.
</p>
<p>
  I think it is a good idea to read the entire Paredit documentation.
  Enter <code>:help paredit</code> to do so.  It is about 500 lines
  long and takes about 30 to 40 minutes to read.  The time spent
  reading this documentation is worth it because it makes editing Lisp
  code very pleasant and productive.
</p>
<h2 id="use-debugger-and-inspector">Use Debugger and Inspector<a href="#use-debugger-and-inspector"></a></h2>
<p>
  After getting started with Slimv or Vlime, the very next thing you
  might want to know is how to work with the debugger.  The debugger
  window comes up whenever an error or an unhandled condition occurs.
  It might look quite scary to a beginner, so it is a good idea to
  become comfortable with it as soon as possible.  Fortunately, both
  Slimv and Vlime provide excellent key-bindings to inspect the error
  or dismiss it to return to the source code buffer quickly and
  easily.
</p>
<h3 id="use-debugger-and-inspector-with-slimv">Use Debugger and Inspector with Slimv<a href="#use-debugger-and-inspector-with-slimv"></a></h3>
<p>
  The following steps trigger an error and then show how to work with
  the debugger in Slimv:
</p>
<ol>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
<pre>
<code>(defun square (x)
  (* x x))

(square "foo")</code>
</pre>
  </li>
  <li>
    <p>
      Enter <kbd>,</kbd><kbd>b</kbd> to evaluate the buffer.
    </p>
  </li>
  <li>
    <p>
      As soon as the defective form <code>(square "foo")</code> gets
      evaluated, an error occurs.  The error, possible restarts and
      the backtrace is displayed in a new split window for SLDB.  SLDB
      stands for Slime Debugger.  Here is an example of what may
      appear in the SLDB window:
    </p>
<pre>
<samp>The value
  "foo"
is not of type
  NUMBER
when binding SB-KERNEL::X
   [Condition of type TYPE-ERROR]

Restarts:
  0: [RETRY] Retry SLIME REPL evaluation request.
  1: [*ABORT] Return to SLIME's top level.
  2: [ABORT] abort thread (#&lt;THREAD "repl-thread" RUNNING {1003274E23}&gt;)

Backtrace:
  0: (SB-KERNEL:TWO-ARG-* "foo" "foo") [external]
  1: (SQUARE "foo")
  2: (SB-DEBUG::TRACE-CALL #&lt;SB-DEBUG::TRACE-INFO SQUARE&gt; #&lt;FUNCTION SQUARE&gt; "foo")
  3: (SB-INT:SIMPLE-EVAL-IN-LEXENV (SQUARE "foo") #&lt;NULL-LEXENV&gt;)
  4: (EVAL (SQUARE "foo"))
  5: (SWANK::EVAL-REGION "(defun square (x) ..)
  6: ((LAMBDA NIL :IN SWANK-REPL::REPL-EVAL))
  ...</samp>
</pre>
    <p>
      The ellipsis in the end is added by me to denote that the actual
      output has been truncated in this article for the sake of
      brevity.
    </p>
  </li>
  <li>
    <p>
      In the SLDB window, move the cursor to the second line of
      backtrace, i.e. on the following line:
    </p>
    <pre><samp>  1: (SQUARE "foo")</samp></pre>
    <p>
      Then type <kbd>enter</kbd>.  This line should now unfold to show
      the following details:
    </p>
<pre>
<samp>  1: (SQUARE "foo")
      in "(SB-INT:NAMED-LAMBDA SQUARE-----------------------------------
    Locals:
      X = "foo"</samp>
</pre>
  </li>
  <li>
    <p>
      Move the cursor to the line that begins with <code>in</code>,
      i.e. on this line:
    </p>
    <pre><samp>      in "(SB-INT:NAMED-LAMBDA SQUARE-----------------------------------</samp></pre>
    <p>
      Then type <kbd>enter</kbd>.  Some information about its source
      code should appear like this:
    </p>
<pre>
<samp>  1: (SQUARE "foo")
      in "(SB-INT:NAMED-LAMBDA SQUARE
    (X)
  (BLOCK SQUARE (#:***HERE*** (* X X))))" byte 1
    Locals:
      X = "foo"</samp>
</pre>
  </li>
  <li>
    <p>
      Move the cursor to the following line:
    </p>
    <pre><samp>      X = "foo"</samp></pre>
    <p>
      Then type <kbd>,</kbd><kbd>i</kbd> to inspect this variable.  A
      prompt would appear to confirm the variable name.  Type
      <kbd>enter</kbd> to confirm.  An inspector window should now
      appear with more details about this variable.  This window should
      look like this:
    </p>
<pre>
<samp>Inspecting #&lt;(SIMPLE-ARRAY CHARACTER (3)) {100478AFAF}&gt;
--------------------
Press &lt;F1&gt; for Help

Dimensions: (3)
Element type: CHARACTER
Total size: 3
Adjustable: NIL
Fill pointer: NIL
Contents:
0: #\f
1: #\o
2: #\o


[&lt;&lt;] Exit Inspector</samp>
</pre>
  </li>
  <li>
    <p>
      Type <kbd>enter</kbd> to inspect any object under the cursor and
      drill down further.
    </p>
  </li>
  <li>
    <p>
      Type <kbd>backspace</kbd> in normal mode to return to the
      previous object.
    </p>
  </li>
  <li>
    <p>
      Enter <kbd>,</kbd><kbd>q</kbd> in normal mode to quit the
      inspector.
    </p>
  </li>
  <li>
    <p>
      Finally, move the cursor to the following line in the SLDB
      window:
    </p>
    <pre><samp>  1: [*ABORT] Return to SLIME's top level.</samp></pre>
    <p>
      Then type <kbd>enter</kbd> to execute this restart.
      Alternatively, enter <kbd>,</kbd><kbd>a</kbd> in normal mode to
      select the abort restart and quit to the previous level or
      <kbd>,</kbd><kbd>q</kbd> to quit to top level.
    </p>
  </li>
</ol>
<p>
  Most of the times when an error occurs, I quickly take a look at the
  stack trace to realise that I have made a silly mistake and enter
  the <kbd>,</kbd><kbd>q</kbd> command to abort and quit to top level.
  This can be quite convenient because it allows returning from
  debugging to coding very quickly with only two keystrokes.
</p>
<h3 id="use-debugger-and-inspector-with-vlime">Use Debugger and Inspector with Vlime<a href="#use-debugger-and-inspector-with-vlime"></a></h3>
<p>
  The following steps trigger an error and then show how to work with
  the debugger in Vlime:
</p>
<ol>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
<pre>
<code>(defun square (x)
  (* x x))

(square "foo")</code>
</pre>
  </li>
  <li>
    <p>
      Save the file, connect to Vlime server and enter
      <kbd>\</kbd><kbd>o</kbd><kbd>f</kbd> in normal mode to compile
      the entire buffer.
    </p>
  </li>
  <li>
    <p>
      As soon as the defective form <code>(square "foo")</code> gets
      evaluated, an error occurs.  The error, possible restarts and
      the backtrace is displayed in a new split window for SLDB.  SLDB
      stands for Slime Debugger.  Here is an example of what may
      appear in the SLDB window:
    </p>
<pre>
<samp>Thread: 1; Level: 1

The value
  "foo"
is not of type
  NUMBER
when binding SB-KERNEL::X
   [Condition of type TYPE-ERROR]

Restarts:
  0. *ABORT - Return to SLIME's top level.
  1.  ABORT - abort thread (#&lt;THREAD "worker" RUNNING {10045D6F83}&gt;)

Frames:
  0.  (SB-KERNEL:TWO-ARG-* "foo" "foo") [external]
  1.  (SQUARE "foo")
  2.  (SB-FASL::LOAD-FASL-GROUP #S(SB-FASL::FASL-INPUT :STREAM #&lt;SB-SYS:FD-STREAM for "file /home/susam/foo.fasl" {10045E76A3}&gt; :TABLE #(41 #&lt;PACKAGE "SB-IMPL"&gt; SB-IMPL::%DEFUN #&lt;PACKAGE "COMMON-LISP-USER"&gt;..
  3.  (SB-FASL::LOAD-AS-FASL #&lt;SB-SYS:FD-STREAM for "file /home/susam/foo.fasl" {10045E76A3}&gt; NIL NIL)
  4.  ((FLET SB-FASL::THUNK :IN LOAD))
  5.  (SB-FASL::CALL-WITH-LOAD-BINDINGS #&lt;CLOSURE (FLET SB-FASL::THUNK :IN LOAD) {7F7B9B0B60BB}&gt; #&lt;SB-SYS:FD-STREAM for "file /home/susam/foo.fasl" {10045E76A3}&gt;)
  ...</samp>
</pre>
    <p>
      The ellipsis in the end is added by me to denote that the actual
      output has been truncated in this article for the sake of
      brevity.
    </p>
  </li>
  <li>
    <p>
      In the SLDB window, move the cursor to the second line of
      backtrace, i.e. on the following line:
    </p>
    <pre><samp>  1.  (SQUARE "foo")</samp></pre>
    <p>
      Then type <kbd>d</kbd>.  A new split window should appear with
      the following details about this frame:
    </p>
<pre>
<samp>Frame: 1 (Restartable)

Locals:
  X: "foo"

Location:
  File: /home/susam/foo.lisp
  Position: 20
  Snippet:
    (* x x))

    (square "foo")</samp>
</pre>
  </li>
  <li>
	<p>
      While the cursor is on the same line as mentioned in the
      previous point, type <kbd>i</kbd> to bring up the inspector
      window for this frame.
	</p>
  </li>
  <li>
    <p>
      In the inspector window, type <kbd>i</kbd> to enter insert mode.
      Enter the following variable name in insert mode:
    </p>
    <pre><code>x</code></pre>
    <p>
      Then type <kbd>esc</kbd> to return to normal mode.  Then type
      <kbd>enter</kbd>.  The following details about the variable
      <code>x</code> should now appear in the inspector window:
    </p>
<pre>
<samp>#&lt;(SIMPLE-ARRAY CHARACTER (3)) {1004617ABF}&gt;
============================================

Dimensions: (3)
Element type: CHARACTER
Total size: 3
Adjustable: NIL
Fill pointer: NIL
Contents:
0: #\f
1: #\o
2: #\o</samp></pre>
  </li>
  <li>
    <p>
      Type <kbd>enter</kbd> to inspect any object under the cursor and
      drill down further.
    </p>
  </li>
  <li>
    <p>
      Type <kbd>p</kbd> to return to the previous object.
    </p>
  </li>
  <li>
    <p>
      Enter the regular Vim command <code>:q</code> in command-line
      mode to quit the inspector window.
    </p>
  </li>
  <li>
    <p>
      Finally, move the cursor to the following line in the SLDB
      window:
    </p>
    <pre><samp>  1: [*ABORT] Return to SLIME's top level.</samp></pre>
    <p>
      Then type <kbd>enter</kbd> to execute this restart.
      Alternatively, we can enter <kbd>a</kbd> in normal mode to
      select the abort restart to return to the previous level.  At
      this time, there is no command to return to SLIME's top level.
    </p>
  </li>
</ol>
<h2 id="trace-function">Trace Function<a href="#trace-function"></a></h2>
<h3 id="trace-function-in-slimv">Trace Function in Slimv<a href="#trace-function-in-slimv"></a></h3>
<p>
  The following steps show how to get started with tracing functions
  in Slimv:
</p>
<ol>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
<pre>
<code>(defun square (x)
  (* x x))

(square (square 2))</code>
</pre>
  </li>
  <li>
    <p>
      Enter <kbd>,</kbd><kbd>b</kbd> in normal mode to evaluate the
      entire buffer.
    </p>
  </li>
  <li>
    <p>
      Place the cursor on the function name, i.e. on
      <code>square</code> and enter <kbd>,</kbd><kbd>t</kbd> in normal
      mode to toggle tracing for this function.  A prompt appears to
      confirm the function name.  Type <kbd>enter</kbd> to confirm.
    </p>
  </li>
  <li>
    <p>
      While the cursor is on the last expression, enter
      <kbd>,</kbd><kbd>d</kbd> in normal mode to evaluate the top-level
      form.  The following output appears in the REPL buffer.
    </p>
<pre>
<code>(square (square 2))
  0: (SQUARE 2)
  0: SQUARE returned 4
  0: (SQUARE 4)
  0: SQUARE returned 16
16</code>
</pre>
    <p>
      This output contains information about each call to the traced
      function, arguments passed to it and the return values.
    </p>
  </li>
</ol>
<h3 id="trace-function-in-vlime">Trace Function in Vlime<a href="#trace-function-in-vlime"></a></h3>
<p>
  It takes a little more work to start tracing functions in Vlime.
  The following steps show how to do it:
</p>
<ol>
  <li>
    <p>
      Add the following statement to <code>~/.vimrc</code>:
    </p>
<pre>
<code>let g:vlime_contribs = ['SWANK-ASDF', 'SWANK-PACKAGE-FU',
                      \ 'SWANK-PRESENTATIONS', 'SWANK-FANCY-INSPECTOR',
                      \ 'SWANK-C-P-C', 'SWANK-ARGLISTS', 'SWANK-REPL',
                      \ 'SWANK-FUZZY', 'SWANK-TRACE-DIALOG']</code>
</pre>
    <p>
      The above variable defines the list of Swank contrib modules to
      load while initialising a Vlime connection.  All modules
      mentioned above except the last one are loaded by default.  The
      <code>SWANK-TRACE-DIALOG</code> module is not loaded by default
      but this module is necessary for tracing functions, so in order
      to load it, we define this variable to load this module in
      addition to all the other modules that are loaded by default.
    </p>
  </li>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
<pre>
<code>(defun square (x)
  (* x x))

(square (square 2))</code>
</pre>
  </li>
  <li>
    <p>
      Save the file, connect to Vlime server and enter
      <kbd>\</kbd><kbd>o</kbd><kbd>f</kbd> in normal mode to compile
      the entire buffer.
    </p>
  </li>
  <li>
    <p>
      Enter <kbd>\</kbd><kbd>T</kbd><kbd>D</kbd> in normal mode to
      show the trace dialog in a split window.
    </p>
  </li>
  <li>
    <p>
      Enter <kbd>ctrl</kbd>&nbsp;+&nbsp;<kbd>w</kbd>&nbsp;<kbd>w</kbd>
      in normal mode to go back to the source code window.
    </p>
  </li>
  <li>
    <p>
      Place the cursor on the function name, i.e. on
      <code>square</code> and enter
      <kbd>\</kbd><kbd>T</kbd><kbd>T</kbd> in normal mode to toggle
      tracing for this function.
    </p>
  </li>
  <li>
    <p>
      While the cursor is on the last expression, enter
      <kbd>\</kbd><kbd>s</kbd><kbd>t</kbd> in normal mode to evaluate
      the top-level form.
    </p>
  </li>
  <li>
    <p>
      Enter <kbd>ctrl</kbd>&nbsp;+&nbsp;<kbd>w</kbd>&nbsp;<kbd>w</kbd>
      in normal mode twice to go to the trace window.
    </p>
  </li>
  <li>
    <p>
      Under <code>Trace Entries</code>, place the cursor on
      <code>[refresh]</code> and type <kbd>enter</kbd>.
    </p>
  </li>
  <li>
    <p>
      Then place the cursor on <code>[fetch next batch]</code> and
      type <kbd>enter</kbd>.  Two results should appear for the two
      <code>square</code> calls that were made due to step 7.  The trace
      information would be folded under each call.
    </p>
  </li>
  <li>
    <p>
      Move the cursor to each fold line and enter
      <kbd>z</kbd><kbd>o</kbd> in normal mode to open the fold.  After
      opening both the folds, the following result should be visible:
    </p>
    <pre>
<code>0 - COMMON-LISP-USER::SQUARE
    &gt; 2
    &lt; 4
1 - COMMON-LISP-USER::SQUARE
    &gt; 4
    &lt; 16
    16</code>
</pre>
    <p>
      The lines starting with <code>&gt;</code> show the arguments and
      the ones starting with <code>&lt;</code> show the return values.
    </p>
  </li>
</ol>
<h2 id="nifty-features">Nifty Features<a href="#nifty-features"></a></h2>
<p>
  In this section, we will go over some of the nifty features that
  these plugins offer.  Not all features will be covered here.  I have
  chosen only a few features for the discussion here that I felt would
  be useful to beginners and at the same time also demonstrate the
  versatility of these plugins.
</p>
<h3 id="evaluate-top-level-form">Evaluate Top-Level Form<a href="#evaluate-top-level-form"></a></h3>
<p>
  In the previous sections, we saw how to evaluate the current
  expression under the cursor.  In this section, we will see how to
  evaluate the top-level expression around the current cursor
  position.  Let us do a small exercise to see this:
</p>
<ol>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
    <pre><code>(+ 1 (* 2 (/ 6 <span class="cursor">2</span>)))</code></pre>
  </li>
  <li>
    <p>
      With Slimv or Vlime connected to Swank, let us do a quick recap
      of how to evaluate the current expression.
    </p>
    <p>
      With Slimv, enter the normal mode
      command <kbd>,</kbd><kbd>e</kbd> to evaluate the current
      expression.
    </p>
    <p>
      With Vlime, enter the normal mode command
      <kbd>\</kbd><kbd>s</kbd><kbd>s</kbd> to evaluate the current
      expression.
    </p>
    <p>
      The current expression, i.e. <code>(/ 6 2)</code> should get
      evaluated and the result <code>3</code> should appear in the
      REPL buffer.
    </p>
  </li>
  <li>
    <p>
      Let us now see how to evaluate the top-level expression.
    </p>
    <p>
      With Slimv, enter the normal mode
      command <kbd>,</kbd><kbd>d</kbd> to evaluate the top-level
      expression.
    </p>
    <p>
      With Vlime, enter the normal mode command
      <kbd>\</kbd><kbd>s</kbd><kbd>t</kbd> to evaluate the top-level
      expression.
    </p>
    <p>
      The top-level expression should get evaluated and the result
      <code>7</code> should appear in the REPL buffer.
    </p>
  </li>
</ol>
<h3 id="rainbow-parentheses">Rainbow Parentheses<a href="#rainbow-parentheses"></a></h3>
<p>
  Rainbow parentheses make it easy to see matching parentheses by
  colouring different levels of parentheses with different colours.
  Matching parentheses have the same colour.  To enable this feature
  in Slimv, add this command to <code>~/.vimrc</code>:
</p>
<pre><code>let g:lisp_rainbow=1</code></pre>
<p>
  This feature is not available in Vlime.  But there are several Vim
  plugins that support rainbow parentheses.  Here are the steps to
  install one such plugin that is quite popular:
</p>
<pre>
<code>git clone https://github.com/junegunn/rainbow_parentheses.vim.git ~/.vim/pack/plugins/start/rainbow_parentheses
echo 'autocmd FileType lisp,scheme,clojure RainbowParentheses' &gt;&gt; ~/.vimrc</code>
</pre>
<p>
  In case you ever want to uninstall it, enter these commands:
</p>
<pre>
<code>rm -rf ~/.vim/pack/plugins/start/rainbow_parentheses
sed -i.bkp '/autocmd.*RainbowParentheses/d' ~/.vimrc</code>
</pre>
<h3 id="argument-list">Argument List<a href="#argument-list"></a></h3>
<p>
  You must have seen this feature already while trying out the
  sections earlier.  While editing a Lisp source file, after typing a
  function name, as soon as a space is typed or the enter key is
  typed, the argument list for the function appears to serve as a
  reference.  In Slimv, the argument list appears in the status line
  at the bottom.  In Vlime, the argument list appears in a split
  window at the top.
</p>
<h3 id="omni-completion">Omni-Completion<a href="#omni-completion"></a></h3>
<p>
  Type a function name partially, e.g. <code>form</code> and type
  <kbd>tab</kbd> while still in insert mode.  The omni-completion menu
  should appear with the list of completions if there are multiple
  choices.  Type <kbd>ctrl</kbd>+<kbd>n</kbd> to select the next choice
  and <kbd>ctrl</kbd>+<kbd>p</kbd> to select the previous choice.
  Selecting a choice also immediately inserts that choice in the
  buffer.  This works in both Slimv and Vlime.  In Slimv, we can also
  type <kbd>tab</kbd> to select the next choice.
</p>
<p>
  By default, omni-completion is fuzzy.  For example,
  type <code>wl</code> and type <kbd>tab</kbd> and omni-complete
  should insert <code>write-line</code> automatically as well as show
  other matching choices.
</p>
<h3 id="describe-symbol">Describe Symbol<a href="#describe-symbol"></a></h3>
<p>
  With Slimv, enter the normal mode command <kbd>,</kbd><kbd>s</kbd>
  to describe the symbol under the cursor.  This brings up the
  documentation of the symbol in the Vim message area.  This feature
  works while editing Common Lisp and Clojure source files but not
  while editing Scheme source file.  This feature is not supported for
  Scheme at this time.  See
  the <a href="#other-lisp-dialects"><em>Other Lisp Dialects</em></a>
  section for details on how to set up Slimv with Clojure and MIT/GNU
  Scheme.
</p>
<p>
  With Vlime, enter <kbd>\</kbd><kbd>d</kbd><kbd>a</kbd> in normal
  mode to describe the symbol under the cursor.  This brings up the
  documentation of the symbol in a split window.
</p>
<h3 id="expand-macro">Expand Macro<a href="#expand-macro"></a></h3>
<p>
  Here is an excercise that shows how to expand macros interactively
  while editing a Lisp source file:
</p>
<ol>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
<pre>
<code>(defmacro calc (a op b)
  (list op a b))

(defmacro square (x)
  (list 'calc x '* x))

(square 2)</code>
</pre>
  </li>
  <li>
    <p>
      With Slimv, enter <kbd>,</kbd><kbd>b</kbd> in normal mode to
      evaluate the entire buffer.
    </p>
    <p>
      With Vlime, save the file, connect to Vlime server and type
      <kbd>\</kbd><kbd>o</kbd><kbd>f</kbd> in normal mode to compile the
      entire buffer.
    </p>
  </li>
  <li>
    <p>
      With Slimv, while the cursor is on the last expression, enter
      <kbd>,</kbd><kbd>1</kbd> in normal mode to expand the macro form
      once.
    </p>
    <p>
      With Vlime, enter <kbd>\</kbd><kbd>m</kbd><kbd>1</kbd> in normal
      mode to do the same thing.
    </p>
    <p>
      The following expansion should appear as the result:
    </p>
    <pre><code>(CALC 2 * 2)</code></pre>
    <p>
      Slimv displays the expansion in the REPL buffer whereas Vlime
      displays it in a new split window.
    </p>
  </li>
  <li>
    <p>
      With Slimv, enter <kbd>,</kbd><kbd>m</kbd> in normal mode to
      recursively expand the current expression until it is no longer
      a macro.
    </p>
    <p>
      With Vlime, enter <kbd>\</kbd><kbd>m</kbd><kbd>a</kbd> in normal
      mode to do the same thing.
    </p>
    <p>
      The following expansion should appear as the result:
    </p>
    <pre><code>(* 2 2)</code></pre>
  </li>
</ol>
<h3 id="cross-reference">Cross Reference<a href="#cross-reference"></a></h3>
<p>
  Here is an exercise that shows how to use the cross-reference
  commands in Slimv and Vlime:
</p>
<ol>
  <li>
    <p>
      Create a file with Vim, say <code>foo.lisp</code> and enter the
      following code into it:
    </p>
<pre>
<code>(defun square (x)
  (* x x))

(defun square-of-sum (x y)
  (square (+ x y)))

(defun sum-of-squares (x y)
  (+ (square x) (square y)))

(square-of-sum 2 3)
(sum-of-squares 2 3)</code>
</pre>
  </li>
  <li>
    <p>
      With Slimv, enter <kbd>,</kbd><kbd>b</kbd> in normal mode to
      evaluate the entire buffer.
    </p>
    <p>
      With Vlime, save the file, connect to Vlime server and type
      <kbd>\</kbd><kbd>o</kbd><kbd>f</kbd> in normal mode to compile the
      entire buffer.
    </p>
  </li>
  <li>
    <p>
      With Slimv, place the cursor on any occurrence of the symbol
      <code>square</code> and enter
      <kbd>,</kbd><kbd>x</kbd><kbd>l</kbd> in normal mode.  A prompt
      would appear to confirm the symbol name.  Type <kbd>enter</kbd>
      to confirm.  The list of all callers should now appear in the
      REPL buffer.
    </p>
    <p>
      With Vlime, place the cursor on any occurrence of the symbol
      <code>square</code> and enter <kbd>\</kbd><kbd>x</kbd><kbd>c</kbd>
      in normal mode to list all callers of the function.  The output
      appears in a split window containing the cross reference (xref)
      buffer.  Type <kbd>enter</kbd> on any item in the xref buffer and
      Vlime will take you directly to the referenced location.
    </p>
  </li>
</ol>
<h2 id="other-common-lisp-implementations">Other Common Lisp Implementations<a href="#other-common-lisp-implementations"></a></h2>
<p>
  The previous sections used SBCL as the implementation of Common
  Lisp.  How well do Slimv and Vlime work with other Common Lisp
  implementations?
</p>
<p>
  I have found that both plugins are pretty well tested with SBCL.
  However, they may not be so well tested with other implementations.
  Due to the lack of sufficient testing with Common Lisp
  implementations other than SBCL, certain errors may occur while
  using other implementations.  Sometimes it is possible to work
  around these errors and sometimes it isn't.  We will see an example
  of this in an upcoming section when we try to start Swank server
  automatically using Vlime and CLISP.
</p>
<p>
  For this section, I choose CLISP and Embeddable Common-Lisp (ECL) as
  two other implementations of Common Lisp that will be used with
  Slimv and Vlime.  After following the upcoming subsections, you
  should get the hang of how to make Slimv or Vlime work with other
  implementations of Common Lisp.
</p>
<h3 id="use-slimv-with-clisp">Use Slimv with CLISP<a href="#use-slimv-with-clisp"></a></h3>
<p>
  If you have read and tried the steps in the
  <a href="#get-started-with-slimv-and-sbcl"><em>Get Started with
  Slimv and SBCL</em></a> section, it is going to be quite easy to use
  Slimv with CLISP.  The steps are similar with a few minor
  modifications.  They are explained below:
</p>
<ol>
  <li>
    <p>
      Uninstall SBCL and install CLISP with these commands:
    </p>
    <pre>
<code>sudo apt-get remove sbcl
sudo apt-get install clisp</code></pre>
  </li>
  <li>
    <p>
      To start Swank server manually, enter this command:
    </p>
    <pre><code>clisp ~/.vim/pack/plugins/start/slimv/slime/start-swank.lisp</code></pre>
    <p>
      Then edit a Lisp source file and enter the normal command
      <kbd>,</kbd><kbd>c</kbd> to connect to it and bring up the REPL
      window.
    </p>
  </li>
  <li>
    <p>
      To start Swank automatically from Slimv, there is nothing more
      to be done.  Just edit a Lisp source file and enter the normal
      mode command <kbd>,</kbd><kbd>c</kbd>.  While running in GNU
      Screen, tmux or a desktop environment, Slimv can automatically
      detect CLISP and start Swank server with it.
    </p>
  </li>
</ol>
<p>
  In general, to start Swank server manually with another Common Lisp
  implementation, we need to figure out how to load
  <code>start-swank.lisp</code> with it.
</p>
<h3 id="use-slimv-with-ecl">Use Slimv with ECL<a href="#use-slimv-with-ecl"></a></h3>
<p>
  The steps to use Slimv with Embeddable Common-Lisp (ECL) are very
  similar too.  Once again, only if we need to start Swank server
  manually, we need to figure out the command to do so.  Otherwise,
  there is no other difference.  Here are the steps:
</p>
<ol>
  <li>
    <p>
      Ensure that SBCL and CLISP are uninstalled and ECL is installed.
    </p>
    <pre>
<code>sudo apt-get remove sbcl clisp
sudo apt-get install ecl</code></pre>
  </li>
  <li>
    <p>
      To start Swank server manually, enter this command:
    </p>
    <pre><code>ecl --load ~/.vim/pack/plugins/start/slimv/slime/start-swank.lisp</code></pre>
    <p>
      Then edit a Lisp source file and enter the normal command
      <kbd>,</kbd><kbd>c</kbd> to connect to it and bring up the REPL
      window.
    </p>
  </li>
  <li>
    <p>
      To start Swank automatically from Slimv, there is nothing more
      to be done.  Just edit a Lisp source file and enter the normal
      mode command <kbd>,</kbd><kbd>c</kbd>.  While running in GNU
      Screen, tmux or a desktop environment, Slimv can automatically
      detect CLISP and start Swank server with it.
    </p>
    <p>
      There is a possible timeout issue to be aware of though.  ECL
      can take a minute or two to compile the code it loads the first
      time Swank server is started.  However, Slimv has a default
      timeout period of 20 seconds, so Slimv may fail with the
      following error message:
    </p>
    <pre><samp>SWANK server is not running.  Press ENTER to continue.</samp></pre>
    <p>
      If this happens, just wait for ECL to complete compiling Swank
      server.  Once it starts Swank server, enter the normal mode
      command <kbd>,</kbd><kbd>c</kbd> again and it should connect
      immediately.
    </p>
  </li>
</ol>
<h3 id="use-vlime-with-clisp">Use Vlime with CLISP<a href="#use-vlime-with-clisp"></a></h3>
<p>
  This subsection assumes that you have already read and tried the
  <a href="#get-started-with-vlime-and-sbcl"><em>Get Started with
  Vlime and SBCL</em></a> section, so you are familiar with Vlime
  basics.  Now we will see what more it takes to use Vlime with CLISP
  in the steps below:
</p>
<ol>
  <li>
    <p>
      Let us assume we want to start afresh with CLISP, i.e. we do not
      have previous artefacts created by SBCL.  To clean up old
      artefacts, enter these commands:
    </p>
<pre>
<code>rm -rf ~/.sbclrc ~/quicklisp
sudo apt-get remove sbcl</code>
</pre>
  </li>
  <li>
    <p>
      Install CLISP with this command:
    </p>
    <pre><code>sudo apt-get install clisp</code></pre>
  </li>
  <li>
    <p>
      Install Quicklisp using CLISP with these commands:
    </p>
    <pre>
<code>curl -O https://beta.quicklisp.org/quicklisp.lisp
clisp -i quicklisp.lisp -x '(quicklisp-quickstart:install)'
clisp -i ~/quicklisp/setup.lisp -x '(ql:add-to-init-file)'</code>
</pre>
    <p>
      Type <kbd>enter</kbd> in the end, when prompted, to complete the
      installation.
    </p>
  </li>
  <li>
    <p>
      Add the following code to <code>~/.vimrc</code>:
    </p>
<pre>
<code>let g:vlime_cl_impl = 'clisp'
function! VlimeBuildServerCommandFor_clisp(vlime_loader, vlime_eval)
    return ['clisp', '-i', a:vlime_loader,
                   \ '-x', a:vlime_eval,
                   \ '-repl']
endfunction</code>
</pre>
    <p>
      Unlike Slimv, automatic start of Swank server with Common Lisp
      implementations other than SBCL are not supported out of the
      box, so the above Vim script tells Vlime how to start Swank
      server with CLISP.  The <code>-repl</code> option is used to
      work around an issue that is explained in the next point.
    </p>
  </li>
  <li>
    <p>
      Vlime is now ready to be used with CLISP.  Just edit a Lisp
      source file and enter the normal mode command
      <kbd>\</kbd><kbd>r</kbd><kbd>r</kbd> to start Swank server and
      connect to it automatically.
    </p>
    <p>
      You may see the following error in the SLIME debugger
      (<code>sldb</code>) split window:
    </p>
    <pre><samp>SOCKET-STATUS on #1=#&lt;INPUT STRING-INPUT-STREAM&gt; is illegal</samp></pre>
    <p>
      Despite the above error, the following message should appear at
      the bottom:
    </p>
    <pre><samp>Vlime Connection 1 established.</samp></pre>
    <p>
      If the above message occurs, you can ignore this error, close
      the debugger window as well as the console output window and
      continue to use Vlime normally.
    </p>
    <p>
      The <code>-repl</code> option used in the previous step ensures
      that the REPL starts despite this error.  Without it, this step
      would not have succeeded.  This is what I meant when I said
      earlier that we may need to work around certain errors while
      using these plugins with a Common Lisp implementation other than
      SBCL.
    </p>
  </li>
</ol>
<h3 id="use-vlime-with-ecl">Use Vlime with ECL<a href="#use-vlime-with-ecl"></a></h3>
<p>
  Here are the steps to use Vlime with ECL:
</p>
<ol>
  <li>
    <p>
      Let us assume we want to start afresh with ECL, i.e. we do not
      have previous artefacts created by SBCL or ECL.  To clean up old
      artefacts, enter these commands:
    </p>
<pre>
<code>rm -rf ~/.sbclrc ~/.clisprc.lisp ~/quicklisp
sudo apt-get remove sbcl clisp</code>
</pre>
  </li>
  <li>
    <p>
      Install ECL with this command:
    </p>
    <pre><code>sudo apt-get install ecl</code></pre>
  </li>
  <li>
    <p>
      Install Quicklisp using ECL with these commands:
    </p>
    <pre>
<code>curl -O https://beta.quicklisp.org/quicklisp.lisp
ecl --load quicklisp.lisp --eval '(quicklisp-quickstart:install)' --eval '(quit)'
ecl --load ~/quicklisp/setup.lisp --eval '(ql:add-to-init-file)' --eval '(quit)'</code>
</pre>
    <p>
      Type <kbd>enter</kbd> in the end, when prompted, to complete the
      installation.
    </p>
  </li>
  <li>
    <p>
      Add the following code to <code>~/.vimrc</code>:
    </p>
<pre>
<code>let g:vlime_cl_impl = 'ecl'
function! VlimeBuildServerCommandFor_ecl(vlime_loader, vlime_eval)
    return ['ecl', '--load', a:vlime_loader,
                 \ '--eval', a:vlime_eval]
endfunction</code>
</pre>
  </li>
  <li>
    <p>
      Edit a Lisp source file and enter the normal mode command
      <kbd>\</kbd><kbd>r</kbd><kbd>r</kbd> to start Swank server and
      connect to it automatically.
    </p>
  </li>
</ol>
<h2 id="other-lisp-dialects">Other Lisp Dialects<a href="#other-lisp-dialects"></a></h2>
<p>
  So far, we have seen how to use Slimv or Vlime with a Common Lisp
  implementation.  Now let us see how well these plugins work with
  other Lisp dialects.  Vlime does not support other Lisp dialects.
  It supports Common Lisp only.  Slimv supports two other popular
  dialects of Lisp: Scheme and Clojure.  In the next two subsections,
  we see how
</p>
<h3 id="use-slimv-with-mit-gnu-scheme">Use Slimv with MIT/GNU Scheme<a href="#use-slimv-with-mit-gnu-scheme"></a></h3>
<p>
  Slimv is documented to work with MIT/GNU Scheme on Linux only.
  Enter
  <code>:help slimv-installation</code> in Vim to read more about it.
  It says the following under the "Prerequisites" section.
</p>
<blockquote>
  Lisp or Clojure or MIT/GNU Scheme (Linux only) installed.
</blockquote>
<p>
  Further, the Swank loader script for MIT/GNU Scheme named
  <code>swank-mit-scheme.scm</code> says the following in its source code
  comments:
</p>
<blockquote>
  You need MIT/GNU Scheme 9.2
</blockquote>
<p>
  At the time of writing this article, I have confirmed that both
  these requirements indeed need to be met to use Slimv with MIT/GNU
  Scheme.  Here are the steps to use Slimv with MIT/GNU Scheme:
</p>
<ol>
  <li>
    <p>
      Install MIT/GNU Scheme with this command:
    </p>
    <pre><code>sudo apt-get mit-scheme</code></pre>
    <p>
      Ensure that <code>vim-nox</code>, tmux and Slimv are installed
      as explained in the
      <a href="#get-started-with-slimv-and-sbcl"><em>Get Started with
      Slimv and SBCL</em></a> subsection earlier.
    </p>
  </li>
  <li>
    <p>
      This is an optional step.  To start Swank server automatically
      from Slimv, run Vim in tmux, GNU Screen or a desktop
      environment.  In this article, we use tmux, so start tmux with
      this command:
    </p>
    <pre><code>tmux</code></pre>
  </li>
  <li>
    <p>
      This step is necessary only if you are not using tmux, GNU
      Screen or a desktop environment.  In such a case, enter this
      command to start Swank server manually:
    </p>
    <pre><code>scheme --load ~/.vim/pack/plugins/start/slimv/slime/contrib/swank-mit-scheme.scm</code></pre>
  </li>
  <li>
    <p>
      Create a new Scheme source code file, say, <code>foo.scm</code>
      with this command:
    </p>
    <pre><code>vim foo.scm</code></pre>
  </li>
  <li>
    <p>
      To connect to Swank server, enter the following command in Vim
      normal mode:
    </p>
    <p>
      <kbd>,</kbd><kbd>c</kbd>
    </p>
  </li>
  <li>
    <p>
      Type some code into the buffer for the new file.  To do so,
      first type <kbd>i</kbd> to enter insert mode and type this code:
    </p>
    <pre><code>(display "hello, world\n")</code></pre>
    <p>
      Type <kbd>esc</kbd> to return to normal mode.  To evaluate, the
      current expression under the cursor, enter the following command
      in normal mode:
    </p>
    <p>
      <kbd>,</kbd><kbd>e</kbd>
    </p>
    <p>
      Both the current expression and its result should appear in the
      REPL window.
    </p>
  </li>
</ol>
<p>
  I have confirmed that the steps above work fine with MIT/GNU Scheme
  9.1.1 on Debian GNU/Linux 9.11 (stretch).  Like I mentioned before,
  Slimv requires Linux to work with MIT/GNU Scheme.  For example,
  trying to start Swank server with MIT/GNU Scheme 9.2 on macOS High
  Sierra 10.13.6 fails with this error:
</p>
<pre>
<samp>; /usr/local/Cellar/mit-scheme/9.2_2/lib/mit-scheme-c/include/config.h:879:10:
fatal error: 'sys/types.h' file not found</samp>
</pre>
<p>
  Further, the version of MIT/GNU Scheme really needs to be 9.x.  For
  example, when I try to start Swank with MIT/GNU Scheme 10.1.5 on
  Debian GNU/Linux 10.1 (buster), the following error occurs:
</p>
<pre><samp>;The object #[package 12 (user)], passed as an argument to -&gt;environment, is not an environment.</samp></pre>
<h3 id="use-slimv-with-clojure">Use Slimv with Clojure<a href="#use-slimv-with-clojure"></a></h3>
<p>
  Slimv works fine with Clojure too.  However, it may have some
  trouble locating Clojure on the system if we attempt to start Swank
  server automatically with Clojure.  That is because where and how
  Clojure is installed varies from operating system to operating
  system and also depends on the installation procedure chosen to set
  up Clojure.
</p>
<p>
  On Unix-like systems, Slimv looks for JAR files that match the glob
  pattern <code>clojure*.jar</code> at paths that match the glob
  pattern <code>/usr/local/bin/*clojure*</code>
  and <code>~/*clojure</code>, in that order.  On Windows, it looks
  for the JAR files at directory paths that match the glob
  pattern <code>C:\*clojure*</code> and <code>C:\*clojure*\lib</code>.
  Additionally, Slimv also looks for the JAR files at the paths
  mentioned in the <code>PATH</code> environment variable.  There are
  a few more strategies too to locate Clojure but we will not get into
  that here.
</p>
<p>
  In this section, I will show how to build Clojure from source with
  Maven and install it at <code>~/clojure/clojure.jar</code>, a path
  Slimv can easily find, so installing it here would mean that the
  steps below would work everywhere regardless of the operating
  system.  If you are on Windows, install Clojure
  at <code>C:\clojure\clojure.jar</code> instead.
</p>
<p>
  Here are the steps to install Clojure at
  <code>~/clojure/clojure.jar</code> and use it with Slimv:
</p>
<ol>
  <li>
    <p>
      Choose one of the two sets of commands below to install Maven:
    </p>
<pre>
<code># On Debian, Ubuntu, etc.
sudo apt-get install maven

# On macOS
brew install openjdk maven
export JAVA_HOME=/usr/local/opt/openjdk
export PATH="$JAVA_HOME/bin:$PATH"</code>
</pre>
  </li>
  <li>
    <p>
      Enter these commands to install Clojure:
    </p>
<pre>
<code>git clone https://github.com/clojure/clojure.git ~/clojure
git -C ~/clojure checkout clojure-1.10.1
mvn -f ~/clojure/pom.xml -Plocal -Dmaven.test.skip=true package</code>
</pre>
  </li>
  <li>
    <p>
      Ensure that <code>vim-nox</code>, tmux and Slimv are installed
      as explained in
      the <a href="#get-started-with-slimv-and-sbcl"><em>Get Started
      with Slimv and SBCL</em></a> subsection earlier.
    </p>
  </li>
  <li>
    <p>
      This is an optional step.  To start Swank server automatically
      from Slimv, run Vim in tmux, GNU Screen or a desktop
      environment.  In this article, we use tmux, so start tmux with
      this command:
    </p>
    <pre><code>tmux</code></pre>
  </li>
  <li>
    <p>
      This step is necessary only if you are not using tmux, GNU
      Screen or a desktop environment.  In such a case, enter these
      commands to start Swank server manually:
    </p>
<pre>
<code>SWANK_DIR=~/.vim/pack/plugins/start/slimv/swank-clojure
java -cp "$HOME/clojure/clojure.jar:$SWANK_DIR" clojure.main -i "$SWANK_DIR/swank/swank.clj" -e '(swank.swank/start-repl)' -r</code>
</pre>
  </li>
  <li>
    <p>
      Create a new Clojure source code file, say, <code>foo.clj</code>
      with this command:
    </p>
    <pre><code>vim foo.clj</code></pre>
  </li>
  <li>
    <p>
      To connect to Swank server, enter the following command in Vim
      normal mode:
    </p>
    <p>
      <kbd>,</kbd><kbd>c</kbd>
    </p>
  </li>
  <li>
    <p>
      Type some code into the buffer for the new file.  To do so,
      first type <kbd>i</kbd> to enter insert mode and type this code:
    </p>
<pre><code>(println "hello, world")</code></pre>
    <p>
      Type <kbd>esc</kbd> to return to normal mode.  To evaluate, the
      current expression under the cursor, enter the following command
      in normal mode:
    </p>
    <p>
      <kbd>,</kbd><kbd>e</kbd>
    </p>
    <p>
      Both the current expression and its result should appear in the
      REPL window.
    </p>
  </li>
</ol>
<h2 id="comparison-of-slimv-and-vlime">Comparison of Slimv and Vlime<a href="#comparison-of-slimv-and-vlime"></a></h2>
<p>
  Finally, let me provide a comparison of both Slimv and Vlime side by
  side.  This comparison table below is not exhaustive.  There are
  more differences between the tools than what is mentioned below.
</p>
<table class="grid top">
  <thead>
    <tr>
      <th>Slimv</th>
      <th>Vlime</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="width: 50%">
        <p>
          Slimv's directory structure conforms to the directory
          structure of plugins in a Vim package as well as the default
          directory structure expected by popular Vim plugin managers,
          so installing Slimv is quite straightforward.
        </p>
      </td>
      <td style="width: 50%">
        <p>
          Vlime's directory structure does not conform to the
          directory structure of plugins in a Vim package or the
          default directory structure expected by popular Vim plugin
          managers.  As a result, Vim's native support for packages
          cannot be used to install Vlime.  Installing it via a plugin
          manager requires fiddling with
          Vim's <code>runtimepath</code> option in order to load it
          successfully.
        </p>
      </td>
    </tr>
    <tr>
      <td style="width: 50%">
        <p>
          Slimv requires a Vim package that is compiled with support
          for Python interface.
        </p>
      </td>
      <td style="width: 50%">
        <p>
          Vlime does not have this requirement.  It can work with
          basic Vim that does not have Python interface.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv requires Vim to be running within tmux, GNU Screen or
          a desktop environment to be able to start Swank server
          automatically.  If you have none of these, Swank server
          needs to be started manually.
        </p>
      </td>
      <td>
        <p>
          Vlime does not require tmux, GNU Screen or a desktop
          environment in order to start Vlime server automatically.
          It can start Vlime server on its own.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv does not require Quicklisp to install Swank.  Slimv
          bundles the Swank server code with itself.
        </p>
      </td>
      <td>
        <p>
          Vlime requires Quicklisp to be installed.  It relies on
          Quicklisp to install Swank the first time it is needed.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv bundles Paredit with itself.  Installing Slimv also
          provides Paredit.
        </p>
      </td>
      <td>
        <p>
          Vlime does not bundle Paredit with itself.  Paredit needs to
          be installed separately.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          The buffer for REPL is interactive in Slimv.  We can type
          code directly into the REPL window and type <kbd>enter</kbd>
          to execute it.
        </p>
      </td>
      <td>
        <p>
          The buffer for REPL is not interactive in Vlime.  Its
          <code>nomodifiable</code> option is set, so we cannot type
          code directly into the REPL window.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Paredit electric returns work fine with Slimv.  Slimv remaps
          the "enter" key to show argument list of the current
          function after inserting electric returns.  It takes care of
          preserving the electric return functionality of Paredit.
        </p>
      </td>
      <td>
        <p>
          Paredit electric returns do not work fine with Vlime.  Vlime
          remaps the "enter" key to show argument list of the current
          function without inserting electric returns.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv shows argument list of a function, symbol description,
          etc. in the status line or message area at the bottom.
        </p>
      </td>
      <td>
        <p>
          Vlime shows argument list of a function, symbol description,
          etc. in separate split windows.  These are extra windows to
          skip over while cycling between windows with the normal mode
          <kbd>ctrl</kbd>&nbsp;+&nbsp;<kbd>w</kbd>&nbsp;<kbd>w</kbd>
          command which could feel inconvenient.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv shows trace results, macro expansion, cross reference,
          etc. in the REPL buffer.
        </p>
      </td>
      <td>
        <p>
          Vlime shows resultions of trace results, macro expansion,
          cross reference, etc. in split windows.  These are extra
          windows to skip over while cycling between windows.  This
          could feel inconvenient.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv supports programming in Common Lisp, MIT/GNU Scheme
          and Clojure.
        </p>
      </td>
      <td>
        <p>
          Vlime supports programming in Common Lisp only.  It does not
          support Scheme or Clojure.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv supports rainbow parentheses by adding
          <code>let g:lisp_rainbow=1</code> to <code>~/.vimrc</code>.
          With this feature, parentheses at different levels have
          different colours and matching parentheses have the same
          colour.
        </p>
      </td>
      <td>
        <p>
          Vlime does not have rainbow parentheses.  However, this is
          not a major problem because there are several independent
          plugins available that provide rainbow parentheses.
        </p>
      </td>
    </tr>
    <tr>
      <td>
        <p>
          Slimv cross-reference commands do not help us to jump
          directly to a function listed in the results.
        </p>
      </td>
      <td>
        <p>
          Vlime cross-reference commands create a xref buffer that
          allows us to jump directly to a function listed in the
          results by moving the cursor to the function name in the
          xref buffer and typing <code>enter</code>.
        </p>
      </td>
    </tr>
  </tbody>
</table>
<h2 id="quick-recommendation">Quick Recommendation<a href="#quick-recommendation"></a></h2>
<p>
  If you are looking for a quick recommendation on which plugin to
  use, I am going to recommend Slimv.  It has been around for much
  longer.  It supports a wider variety of Lisp implementations.  I
  find its default key bindings more convenient.  A truly interactive
  REPL buffer is also a bonus.  Also, Slimv supports Scheme and
  Clojure whereas Vlime does not.  Having said that, I think it is a
  good idea to try out both the plugins on your own and then find out
  which one suits you more.
</p>
<h2 id="disclosure">Disclosure<a href="#disclosure"></a></h2>
<p>
  Four bugs were harmed while writing this article!
</p>
<p>
  While writing this article, I found the following four bugs in Slimv
  which were then promptly squashed:
  <a href="https://github.com/kovisoft/slimv/pull/87">#87</a>,
  <a href="https://github.com/kovisoft/slimv/pull/88">#88</a>,
  <a href="https://github.com/kovisoft/slimv/pull/89">#89</a> and
  <a href="https://github.com/kovisoft/slimv/pull/90">#90</a>.
</p>
<h2 id="references">References<a href="#references"></a></h2>
<ul>
  <li>
    <a href="https://web.archive.org/web/20160303225220/http://osdir.com/ml/lisp.cmucl.devel/2003-08/msg00302.html">Couple of Emacs hacks</a>
  </li>
  <li>
    <a href="https://groups.google.com/forum/#!topic/vim_announce/EKTuhjF3ET0">Vim 8.0 Released</a>
  </li>
  <li>
    <a href="https://kovisoft.github.io/slimv-tutorial/tutorial.html">Slimv Tutorial</a>
  </li>
  <li>
    <a href="https://github.com/l04m33/vlime/blob/master/vim/doc/vlime-tutor.txt">A Tutorial for Vlime</a>
  </li>
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/lisp-in-vim.html">Read on website</a> |
  <a href="https://susam.net/tag/lisp.html">#lisp</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/vim.html">#vim</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>FD 100</title>
<link>https://susam.net/fd-100.html</link>
<guid isPermaLink="false">qzsnh</guid>
<pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I learnt how to write computer programs in IBM/LCSI PC Logo.  That
  was back in the year 1992.  Computers were much simpler in those
  days.  The ones in our school were IBM PC compatible computers with
  mostly monochrome displays.  The ability to boot a computer using a
  5¼-inch floppy disk containing MS-DOS, load a Logo interpreter and
  then write some programs without any distraction had its own charm
  that I find missing from modern day computing.
</p>
<h2 id="the-first-line-of-code">The First Line of Code<a href="#the-first-line-of-code"></a></h2>
<p>
  The first line of code I ever wrote was:
</p>
<!--
 K   4  88-89
 1   5  89-90
 2   6  90-91
 3   7  91-92
 4   8  92-93
 5   9  93-94
 6  10  94-95
 7  11  95-96
 8  12  96-97
 9  13  97-98
10  14  98-99
-->
<pre><code>FD 100</code></pre>
<p>
  Here is how the output looks:
</p>
<figure>
  <a href="files/blog/logo-line.png"><img
      src="files/blog/logo-line.png"
      alt="A vertical line drawn with Logo along with Logo source code for it"></a>
  <figcaption>
    The first Logo program
  </figcaption>
</figure>
<p>
  That is the "hello, world" of turtle graphics in Logo.  That simple
  line of code changed my world.  I could make stuff happen in an
  otherwise mostly blank monochrome CRT display.  Until then I had
  seen CRTs in televisions where I had very little control on what I
  see on the screen.  But now, I had control!  The turtle became my
  toy and I could make it draw anything on a 320 &times; 250 canvas.
</p>
<h2 id="polygons">Polygons<a href="#polygons"></a></h2>
<p>
  With a little knowledge of geometry, one could draw polygons.  Often
  the first polygon one would learn to draw was a square.  It involves
  making the turtle walk forward 100 steps, then turn right 90&deg;
  and repeat these two operations four times in a loop.  Here is the
  code:
</p>
<pre><code>REPEAT 4 [FD 100 RT 90]</code></pre>
<p>
  Here is the output:
</p>
<figure>
  <a href="files/blog/logo-square.png"><img
      src="files/blog/logo-square.png"
      alt="A square drawn with Logo along with source code"></a>
  <figcaption>
    A square drawn with IBM Personal Computer Logo
  </figcaption>
</figure>
<p>
  Similarly, one could draw other polygons.  The only thing my
  nine-year-old self then needed to understand was that after drawing
  an entire polygon, the turtle is back to its original position
  having completed one full turn.  Therefore to draw a polygon with \(
  n \) sides, the turtle needs to turn by \( 360 / n \) degrees after
  drawing each side.  Drawing a pentagon is as simple as:
</p>
<pre><code>REPEAT 5 [FD 80 RT 72]</code></pre>
<p>
  Here is the output:
</p>
<figure>
  <a href="files/blog/logo-pentagon.png"><img
      src="files/blog/logo-pentagon.png"
      alt="A pentagon drawn with Logo along with source code"></a>
  <figcaption>
    A pentagon drawn with IBM Personal Computer Logo
  </figcaption>
</figure>
<p>
  The same approach works for drawing a regular five-pointed star too.
  The only new thing we need to consider here is that as the turtle
  draws the shape, it makes two full turns.  Therefore, it must turn
  by \( 720 / 5 \) degrees after drawing each side.  Here is the code:
</p>
<pre><code>REPEAT 5 [FD 100 RT 144]</code></pre>
<p>
  Here is the output:
</p>
<figure>
  <a href="files/blog/logo-star.png"><img
      src="files/blog/logo-star.png"
      alt="A pentagram drawn with Logo along with source code"></a>
  <figcaption>
    A pentagram drawn with IBM Personal Computer Logo
  </figcaption>
</figure>
<p>
  I remember feeling uneasy about the lopsided appearance of the
  polygons above and then trying to please my sense of aesthetics by
  centring these polygons horizontally on the screen and having them
  stand firmly on an imaginary horizontal line so that they look
  balanced.  I won't include the code and output for that on this page
  for the sake of brevity of this post but here are links to some
  screenshots I have kept that show a few of several ways to do it:
  <a href="files/blog/logo-square-centre.png">logo-square-centre.png</a>,
  <a href="files/blog/logo-pentagon-centre.png">logo-pentagon-centre.png</a>
  and <a href="files/blog/logo-star-centre.png">logo-star-centre.png</a>.
</p>
<h2 id="circles">Circles<a href="#circles"></a></h2>
<p>
  Going from polygons to circles was especially fun.  Here is the
  first piece of code one would normally write to learn to draw a
  circle:
</p>
<pre><code>REPEAT 360 [FD 1 RT 1]</code></pre>
<p>
  Here is the output:
</p>
<figure>
  <a href="files/blog/logo-circle.png"><img
      src="files/blog/logo-circle.png"
      alt="A circle drawn with Logo along with source code"></a>
  <figcaption>
    A circle drawn with IBM Personal Computer Logo
  </figcaption>
</figure>
<p>
  Now precisely speaking, this is not exactly a circle.  This is a
  triacosiahexeacontagon, i.e. a 360-gon.  It is an approximation of a
  circle with 360 very short line segments.  Nevertheless it was
  enough to get a young child who had just begun to learn using the
  computer excited about programming.  It showed me how control flow
  could be used elegantly to express complex ideas in a simple
  expression.  By the way, here is one way to centre that circle
  horizontally on the
  screen: <a href="files/blog/logo-circle-centre.png">logo-circle-centre.png</a>.
</p>
<p>
  Soon after learning to draw a circle, I learnt to write this:
</p>
<pre><code>REPEAT 20 [REPEAT 180 [FD 1 RT 2] RT 18]</code></pre>
<p>
  This code draws 20 overlapping circles.  The output looks like this:
</p>
<figure>
  <a href="files/blog/logo-circles.png"><img
      src="files/blog/logo-circles.png"
      alt="A grid made with 20 circles along with Logo source code for it"></a>
  <figcaption>
    Grid of circles drawn with IBM Personal Computer Logo
  </figcaption>
</figure>
<h2 id="a-lasting-effect">A Lasting Effect<a href="#a-lasting-effect"></a></h2>
<p>
  There is a lot more to Logo than turtle graphics.  Logo gave me a
  brief taste of functional programming even though back then I did
  not know the term "functional programming".  I discovered the same
  simplicity and elegance in Lisp about 15 years later.  After all,
  Logo can be thought of as a dialect of Lisp without parentheses that
  controls a turtle.
</p>
<p>
  At an impressionable age of nine, reading and writing code like this
  and using simple arithmetic, geometry, logic and code to manipulate
  a two-dimensional world had a lasting effect on me.  Back in those
  days, I used to find joy in sharing some of my interesting Logo
  programs with my teachers and friends.  I like to believe that my
  passion for software engineering as well as my love for writing
  code, sharing code and open source development are a result of
  coming across these beautiful code examples early in my life.
</p>
<p>
  FD 100&mdash;it is a tiny piece of code, but it changed my world!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/fd-100.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/dos.html">#dos</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Peculiar Self-References</title>
<link>https://susam.net/peculiar-self-references.html</link>
<guid isPermaLink="false">svacn</guid>
<pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="self-referential-lists">Peculiar Results<a href="#self-referential-lists"></a></h2>
<p>
  Here is a tiny Python example that creates a self-referential list
  and demonstrates the self-reference:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a[0] = [0]</kbd>
&gt;&gt;&gt; <kbd>a</kbd>
[[...]]
&gt;&gt;&gt; <kbd>a[0]</kbd>
[[...]]
&gt;&gt;&gt; <kbd>a[0][0]</kbd>
[[...]]
&gt;&gt;&gt; <kbd>a is a[0]</kbd>
True</samp>
</pre>
<p>
  The output shows that <code>a[0]</code> refers to <code>a</code>
  itself which makes it a self-referential list.  Why does this simple
  code create a self-referential list?  Should it not have failed
  with <code>NameError</code> because <code>a</code> is not yet
  defined while assigning the list <code>[0]</code>
  to <code>a[0]</code>?
</p>
<p>
  Here is another similar example that creates a self-referential list
  too:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a[0] = [0, 0]</kbd>
&gt;&gt;&gt; <kbd>a</kbd>
[[...], 0]</samp>
</pre>
<p>
  Here is a similar example for dictionary:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a[0] = {}</kbd>
&gt;&gt;&gt; <kbd>a</kbd>
{0: {...}}</samp>
</pre>
<p>
   Note that <code>0</code> is used as a dictionary key in the above
  example.  Here is another very simple example that uses a string
  key:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a['k'] = {}</kbd>
&gt;&gt;&gt; <kbd>a</kbd>
{'k': {...}}</samp>
</pre>
<h2 id="language-reference">The Language Reference<a href="#language-reference"></a></h2>
<p>
  My first guess was that the statement
</p>
<pre><code>a = a[0] = [0]</code></pre>
<p>
  behaves like
</p>
<pre>
<code>new = [0]
a = new
a[0] = new</code>
</pre>
<p>
  which would indeed create a self-referential list.
</p>
<p>
  <a href="https://docs.python.org/3.7/reference/simple_stmts.html#assignment-statements">Section
  7.2 (Assignment statements)</a> of <em>The Python Language
  Reference</em> confirms this behaviour.  Quoting the relevant part
  from this section here:
</p>
<blockquote>
  <p>
    Assignment statements are used to (re)bind names to values and to
    modify attributes or items of mutable objects:
  </p>
  <pre>
<code>assignment_stmt ::=  (target_list "=")+ (starred_expression | yield_expression)
target_list     ::=  target ("," target)* [","]
target          ::=  identifier
                     | "(" [target_list] ")"
                     | "[" [target_list] "]"
                     | attributeref
                     | subscription
                     | slicing
                     | "*" target</code>
</pre>
  <p>
    (See section
    <a href="https://docs.python.org/3.7/reference/expressions.html#primaries">Primaries</a>
    for the syntax definitions for attributeref, subscription and
    slicing.)
  </p>
  <p>
    An assignment statement evaluates the expression list (remember
    that this can be a single expression or a comma-separated list,
    the latter yielding a tuple) and assigns the single resulting
    object to each of the target lists, from left to right.
  </p>
</blockquote>
<p>
  We see that the assignment statement is defined as follows:
</p>
<pre><code>assignment_stmt ::=  (target_list "=")+ (starred_expression | yield_expression)</code></pre>
<p>
  Thus the statement
</p>
<pre><code>a = a[0] = [0]</code></pre>
<p>
  has two <code>target_list</code> elements (<code>a</code>
  and <code>a[0]</code>) and a <code>starred_expression</code> element
  (<code>[0]</code>).  As a result, the same list on the
  right-hand-side is assigned to both <code>a</code>
  and <code>a[0]</code>, from left to right, i.e. the
  list <code>[0]</code> is first assigned to <code>a</code>,
  then <code>a[0]</code> is set to the <em>same</em> list.  As a
  result, <code>a[0]</code> is set to <code>a</code> itself.
</p>
<p>
  The behaviour of the statement
</p>
<pre><code>a = a[0] = {}</code></pre>
<p>
  can be explained in a similar way.  The dictionary object on the
  right-hand-side is first assigned to <code>a</code>.  Then a
  key <code>0</code> is inserted within the <em>same</em> dictionary.
  Finally the value of <code>a[0]</code> is set to the <em>same</em>
  dictionary.  In other words, <code>a[0]</code> is set
  to <code>a</code> itself.
</p>
<h2 id="more-experiments">More Experiments<a href="#more-experiments"></a></h2>
<p>
  The evaluation of the expression list on the right hand side first
  and then assigning the result to each target list from left to right
  explains the behaviour we observed in the previous sections.  This
  left-to-right assignment is quite uncommon among mainstream
  programming languages.  For example, in C, C++, Java and JavaScript
  the simple assignment operator (<code>=</code>) has right-to-left
  associativity.  The left-to-right assignment in Python can be
  further demonstrated with some intentional errors.  Here is an
  example:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a[0] = a = [0]</kbd>
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'a' is not defined</samp>
</pre>
<p>
  In this example, when the assignment to <code>a[0]</code> occurs,
  the variable named <code>a</code> is not defined yet, so it leads
  to <code>NameError</code>.
</p>
<p>
  Here is another example:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a[0] = 0</kbd>
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object does not support item assignment</samp>
</pre>
<p>
  In this example, <code>0</code> is first assigned to <code>a</code>.
  Then <code>a[0]</code> needs to be evaluated before <code>0</code>
  can be assigned to it but this evaluation fails
  because <code>a</code> is an <code>int</code>, a type that does not
  support
  <a href="https://docs.python.org/3.7/reference/expressions.html#subscriptions">subscription</a>
  (also known as indexing), so it fails with <code>TypeError</code>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/peculiar-self-references.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>C Standard Terms for Behaviour</title>
<link>https://susam.net/c-standard-terms-for-behaviour.html</link>
<guid isPermaLink="false">dfqke</guid>
<pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here are some excerpts from the final drafts of the C99 and C11
  standards <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf">n1256.pdf</a>
  and <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf">n1570.pdf</a>
  respectively.
</p>
<ul>
  <li>
    <p>
      <strong>§3.4.0: behavior:</strong> external appearance or action
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.1: implementation-defined behavior:</strong>
      unspecified behavior where each implementation documents how the
      choice is made.
    </p>
    <p>
      EXAMPLE: An example of implementation-defined behavior is the
      propagation of the high-order bit when a signed integer is
      shifted right.
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.2: locale-specific behavior:</strong> behavior that
      depends on local conventions of nationality, culture, and
      language that each implementation documents.
    </p>
    <p>
      EXAMPLE: An example of locale-specific behavior is whether the
      <code>islower</code> function returns true for characters other
      than the 26 lowercase Latin letters.
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.3: undefined behavior:</strong> behavior, upon use
      of a nonportable or erroneous program construct or of erroneous
      data, for which this International Standard imposes no
      requirements.
    </p>
    <p>
      NOTE: Possible undefined behavior ranges from ignoring the
      situation completely with unpredictable results, to behaving
      during translation or program execution in a documented manner
      characteristic of the environment (with or without the issuance
      of a diagnostic message), to terminating a translation or
      execution (with the issuance of a diagnostic message).
    </p>
    <p>
      EXAMPLE: An example of undefined behavior is the behavior on
      integer overflow.
    </p>
  </li>
  <li>
    <p>
      <strong>§3.4.4: unspecified behavior:</strong> use of an
      unspecified value, or other behavior where this International
      Standard provides two or more possibilities and imposes no
      further requirements on which is chosen in any instance.
    </p>
    <p>
      EXAMPLE: An example of unspecified behavior is the order in
      which the arguments to a function are evaluated.
    </p>
  </li>
</ul>
<!-- ### -->
<p>
  <a href="https://susam.net/c-standard-terms-for-behaviour.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Building Common Lisp Executables</title>
<link>https://susam.net/building-common-lisp-executables.html</link>
<guid isPermaLink="false">nwdzf</guid>
<pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Since Common Lisp is a language standard (not an implementation) it
  is hard to provide a single set of instructions or guidelines that
  would work for all implementations.  There are various
  implementations of Common Lisp that target native machine code, C
  code, bytecode, JVM, etc.  So the build instructions, project
  structure, etc. depend on the target.
</p>
<h2 id="using-sbcl">Using SBCL<a href="#using-sbcl"></a></h2>
<p>
  Here is a minimal example that builds a Lisp program into a binary
  executable with SBCL:
</p>
<pre>
<code>(defun main ()
  (format t "hello, world~%"))
(sb-ext:save-lisp-and-die "hello" :executable t :toplevel #'main)</code>
</pre>
<p>
  The SBCL-specific <code>save-lisp-and-die</code> function saves the
  Lisp process as a core image.  The <code>:executable t</code>
  keyword argument includes the SBCL runtime in the image to ensure
  that the image is a standalone executable.  This is why the
  executable for even a simple hello-world program tends to be quite
  large (30 MB to 50 MB)!  The <code>:toplevel</code> argument
  specifies the function to run when the core file is run.
</p>
<p>
  Here are some example commands to get you started:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main ()
  (format t "hello, world~%"))
(sb-ext:save-lisp-and-die "hello" :executable t :toplevel #'main)
$ <kbd>sbcl --load hello.lisp</kbd>
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>

<h2 id="moving-unportable-code-to-command-line-argument">Moving Unportable Code to Command Line Argument<a href="#moving-unportable-code-to-command-line-argument"></a></h2>
<p>
  If you would rather not have SBCL specific code in the Lisp source
  code file, then you could move
  the <code>sb-ext:save-lisp-and-die</code> call out of your source
  file to the SBCL command invocation.  The source code now looks like
  this:
</p>
<pre>
<code>(defun main ()
  (format t "hello, world~%"))</code>
</pre>
<p>
  The shell commands now look like this:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main ()
  (format t "hello, world~%"))
$ <kbd>sbcl --load hello.lisp --eval "(sb-ext:save-lisp-and-die \"hello\" :executable t :toplevel #'main)"</kbd>
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>

<h2 id="using-buildapp">Using Buildapp<a href="#using-buildapp"></a></h2>
<p>
  By the way, there is also
  <a href="https://www.xach.com/lisp/buildapp/">Buildapp</a> that
  provides a layer of abstraction for building executables from Lisp
  programs.  It works with SBCL and CCL.  It requires the toplevel
  function to be called with an argument though.  Therefore the source
  code needs to be modified to the following:
</p>
<pre>
<code>(defun main (argv)
  (declare (ignore argv))
  (format t "hello, world~%"))</code>
</pre>
<p>
Then Buildapp can be invoked like this:
</p>
<pre>
<samp>$ <kbd>cat hello.lisp</kbd>
(defun main (argv)
  (declare (ignore argv))
  (format t "hello, world~%"))
$ <kbd>buildapp --load hello.lisp --entry main --output hello</kbd>
;; loading file #P"/Users/susam/hello.lisp"
$ <kbd>./hello</kbd>
hello, world</samp>
</pre>  
<!-- ### -->
<p>
  <a href="https://susam.net/building-common-lisp-executables.html">Read on website</a> |
  <a href="https://susam.net/tag/lisp.html">#lisp</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>QuickQWERTY 1.0.0</title>
<link>https://susam.net/code/news/quickqwerty/1.0.0.html</link>
<guid isPermaLink="false">qqozz</guid>
<pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Version 1.0.0 of QuickQWERTY is now available.  This is the first
  release of this touch typing tutor on GitHub.  With this release,
  source code and release management has been moved from SVN and
  SourceForge to Git and GitHub.  You can now run QuickQWERTY
  here: <a href="../../../quickqwerty.html">quickqwerty.html</a>.
</p>
<p>
  Apart from changes in source code and release management, this
  release introduces input commands like <code>restart</code>
  and <code>rst</code> to quickly restart the current lesson.
  Further, in this release, the license was changed from the GNU
  General Public License, version 3 to the Simplified BSD License
  (BSD-2-Clause).
</p>
<p>
  With these updates, QuickQWERTY reaches its first major release.
  The source code of QuickQWERTY is now available on GitHub
  at <a href="https://github.com/susam/quickqwerty">github.com/susam/quickqwerty</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/quickqwerty/1.0.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a>
</p>
]]>
</description>
</item>
<item>
<title>Fixed Bits of Version 4 UUID</title>
<link>https://susam.net/fixed-bits-of-version-4-uuid.html</link>
<guid isPermaLink="false">axzhy</guid>
<pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  <em>Universally Unique Identifiers</em> or UUIDs are a popular way
  of creating identifiers that are unique for <em>practical</em>
  purposes.  Quoting from
  <a href="https://www.rfc-editor.org/rfc/rfc4122">RFC 4122</a>
  below:
</p>
<blockquote>
  This specification defines a Uniform Resource Name namespace for
  UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally
  Unique IDentifier).  A UUID is 128 bits long and requires no central
  registration process.
</blockquote>
<p>
  These 128-bit identifiers are typically represented as 32
  hexadecimal digits, displayed in five groups separated by hyphens.
  There are various variants and versions of UUIDs which differ in how
  the identifiers are encoded in binary and how they are generated.
  In this post, we are going to focus only on variant 1 of version 4
  UUIDs, also known simply as version 4 UUIDs or random UUIDs.  Here
  are a couple examples of version 4 UUIDs generated using Python:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>import uuid</kbd>
&gt;&gt;&gt; <kbd>str(uuid.uuid4())</kbd>
'980ddc6a-2c56-44da-ac71-9e6bfc924e25'
&gt;&gt;&gt; <kbd>str(uuid.uuid4())</kbd>
'10c3fcde-96a0-4c9e-905b-443b00ceeb01'</samp>
</pre>
<p>
  Version 4 UUID is one of the most popular type of UUIDs in use
  today.  Unlike the other versions, this version does not require
  external inputs like MAC address, sequence number, current time,
  etc.  All except six bits are generated randomly in version 4 UUIDs.
  The six non-random bits are fixed.  They represent the version and
  variant of the UUID.  Here is a tiny Python program that
  demonstrates the first set of fixed bits:
</p>
<pre><code>while str(uuid.uuid4())[14] == '4': pass</code></pre>
<p>
  The above program is an infinite loop.  So is this:
</p>
<pre><code>while str(uuid.uuid4())[19] in ['8', '9', 'a', 'b']: pass</code></pre>
<p>
  The above infinite loops show that the hexademical digit at index 14
  must always be 4.  Similarly, the hexadecimal digit at index 19 must
  always be one of 8, 9, a and b.  We can see the two examples of
  version 4 UUIDs mentioned earlier and confirm that this is indeed
  the case.  Here are a few more examples that illustrate this
  pattern:
</p>
<pre>
<code>527218be-a09e-<span class="hl">4</span>d0e-<span class="hl">8</span>6ce-c39d1348d953
14163389-2eea-<span class="hl">4</span>e30-<span class="hl">9</span>124-fcf2451eb9fc
c21b57cc-2a4e-<span class="hl">4</span>425-<span class="hl">a</span>2f4-129256562599
37700270-6deb-<span class="hl">4</span>a73-<span class="hl">b</span>bcd-d47c6e20b567</code>
</pre>
<p>
  The digit after the second hyphen is at index 14 and indeed this
  digit is always 4.  Similarly, the hexadecimal digit after the third
  hyphen is at index 19 and indeed it is always one of 8, 9, a and b.
</p>
<p>
  If we number the octets in the identifiers as 0, 1, 2, etc. where 0
  represents the most significant octet (the leftmost pair of
  hexadecimal digits in the string representations above), then with a
  careful study of
  <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.1.1">section
  4.1.1</a> of RFC 4122 we know that the first two most significant
  bits of octet 8 represent the variant number.  Since we are working
  with variant 1 of version 4 UUIDs, these two bits must be 1 and 0.
  As a result, octet 8 must be of the form 10xx xxxx in binary where
  each x represents an independent random bit.  Thus, in binary, the
  four most significant bits of octet 8 must be one of 1000, 1001,
  1010 and 1011.  This explains why we always see the hexadecimal
  digit 8, 9, a or b at this position.
</p>
<p>
  Similarly, a study of
  <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.1.2">section 4.1.2</a>
  and <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.1.3">section 4.1.3</a>
  of the RFC shows that the four most significant bits of octet 6 must
  be set to 0100 to represent the version number 4.  This explains why
  we always see the hexadecimal digit 4 here.
</p>
<p>
  <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.4">Section
  4.4</a> of RFC 4122 further summarises these points.  To summarise,
  version 4 UUIDs, although 128 bits in length, have 122 bits of
  randomness.  They have six fixed bits that represent its version and
  variant.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/fixed-bits-of-version-4-uuid.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>MathB 0.1.0</title>
<link>https://susam.net/code/news/mathb/0.1.0.html</link>
<guid isPermaLink="false">pskny</guid>
<pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  MathB is a web-based mathematics pastebin service.  It was developed
  on Sunday, 25 March 2022, as a weekend project to share mathematical
  notes with friends.  After more than one and a half years of
  development and tweaks, this is the first stable release of the
  software.  To read more about this project, please
  see <a href="http://github.com/susam/mathb">github.com/susam/mathb</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/mathb/0.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/release.html">#release</a>
</p>
]]>
</description>
</item>
<item>
<title>Loopy C Puzzle</title>
<link>https://susam.net/loopy-c-puzzle.html</link>
<guid isPermaLink="false">yuzqb</guid>
<pubDate>Sat, 01 Oct 2011 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="integer-underflow">Integer Underflow<a href="#integer-underflow"></a></h2>
<p>
  Let us talk a little bit about integer underflow and undefined
  behaviour in C before we discuss the puzzle I want to share in this
  post.
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main()
{
    int i;
    for (i = 0; i &lt; 6; i--) {
        printf(".");
    }
    return 0;
}</code>
</pre>
<p>
  This code invokes undefined behaviour.  The value in variable
  <code>i</code> decrements to <code>INT_MIN</code> after
  <code>|INT_MIN|</code> iterations.  In the next iteration, there is a
  negative overflow which is undefined for signed integers in C.  On
  many implementations though, <code>INT_MIN - 1</code> wraps around
  to <code>INT_MAX</code>.  Since <code>INT_MAX</code> is not less than
  <code>6</code>, the loop terminates.  With such implementations, this
  code prints print <code>|INT_MIN| + 1</code> dots.  With 32-bit integers,
  that amounts to 2147483649 dots.  Here is one such example output:
</p>
<pre>
<samp>$ <kbd>gcc -std=c89 -Wall -Wextra -pedantic foo.c &amp;&amp; ./a.out | wc -c</kbd>
2147483649</samp>
</pre>
<p>
  It is worth noting that the above behaviour is only one of the many
  possible ones.  The code invokes undefined behaviour and the ISO
  standard imposes no requirements on a specific implementation of the
  compiler regarding what the behaviour of such code should be.  For
  example, an implementation could also exploit the undefined
  behaviour to turn the loop into an infinite loop.  In fact, GCC does
  optimise it to an infinite loop if we compile the code with
  the <code>-O2</code> option.
</p>
<pre>
<samp><kbd># This never terminates!</kbd>
$ <kbd>gcc -O2 -std=c89 -Wall -Wextra -pedantic foo.c &amp;&amp; ./a.out</kbd></samp>
</pre>
<h2 id="puzzle">Puzzle<a href="#puzzle"></a></h2>
<p>
  Let us take a look at the puzzle now.
</p>
<div class="highlight">
<p>
  Add or modify exactly one operator in the following code such that
  it prints exactly 6 dots.
</p>
<pre>
<code>for (i = 0; i &lt; 6; i--) {
    printf(".");
}</code>
</pre>
</div>
<p>
  An obvious solution is to change <code>i--</code>
  to <code>i++</code>.
</p>
<pre>
<code>for (i = 0; i &lt; 6; i++) {
    printf(".");
}</code>
</pre>
<p>
  There are a few more solutions to this puzzle.  One of the solutions
  is very interesting.  We will discuss the interesting solution in
  detail below.
</p>
<h2 id="solutions">Solutions<a href="#solutions"></a></h2>
<p>
  <em><strong>Update on 02 Oct 2011:</strong> The puzzle has been
  solved in the <a href="comments/loopy-c-puzzle.html">comments</a>
  section.  We will discuss the solutions now.  If you want to think
  about the problem before you see the solutions, this is a good time
  to pause and think about it.  There are spoilers ahead.</em>
</p>
<p>
  Here is a list of some solutions:
</p>
<ul>
  <li>
    <code>for (i = 0; i &lt; 6; i++)</code>
  </li>
  <li>
    <code>for (i = 0; i &lt; 6; ++i)</code>
  </li>
  <li>
    <code>for (i = 0; -i &lt; 6; i--)</code>
  </li>
  <li>
    <code>for (i = 0; i + 6; i--)</code>
  </li>
  <li>
    <code>for (i = 0; i ^= 6; i--)</code>
  </li>
</ul>
<p>
  The last solution involving the bitwise XOR operation is not
  immediately obvious.  A little analysis is required to understand
  why it works.
</p>
<h2 id="generalisation">Generalisation<a href="#generalisation"></a></h2>
<p>
  Let us generalise the puzzle by replacing \( 6 \) in the loop with
  an arbitrary positive integer \( n.  \)  The loop in the last
  solution now becomes:
</p>
<pre>
<code>for (i = 0; i ^= n; i--) {
    printf(".");
}</code>
</pre>
<p>
  If we denote the value of the variable <code>i</code> set by the
  execution of <code>i ^= n</code> after \( k \) dots are printed as
  \( f(k), \) then

  \[
    f(k) =
      \begin{cases}
        0                       &amp; \text{if } k = 0, \\
        n \oplus (f(k - 1) - 1) &amp; \text{if } k \gt 1
      \end{cases}
  \]

  where \( k \) is a nonnegative integer, \( n \) is a positive
  integer and the symbol \( \oplus \) denotes bitwise XOR operation on
  two nonnegative integers.
</p>
<p>
  Note that \( f(0) \) represents the value of <code>i</code> set by
  the execution of <code>i ^= n</code> when no dots have been printed
  yet.
</p>
<p>
  If we can show that \( n \) is the least value of \( k \) for which
  \( f(k) = 0, \) it would prove that the loop terminates after
  printing \( n \) dots.
</p>
<p>
  We will see in the next section that for odd values of \( n, \)

  \[
    f(k) =
      \begin{cases}
        n &amp; \text{if } k \text{ is even}, \\
        1 &amp; \text{if } k \text{ is odd}.
      \end{cases}
  \]

  Therefore there is no value of \( k \) for which \( f(k) = 0 \) when
  \( n \) is odd.  As a result, the loop never terminates when \( n \)
  is odd.
</p>
<p>
  We will then see that for even values of \( n \) and \( 0 \leq k
  \leq n, \)

  \[
    f(k) = 0 \iff k = n.
  \]

  Therefore the loop terminates after printing \( n \) dots when
  \( n \) is even.
</p>
<h2 id="lemmas">Lemmas<a href="#lemmas"></a></h2>
<p>
  We will first prove a few lemmas about some interesting properties
  of the bitwise XOR operation.  We will then use it to prove the
  claims made in the previous section.
</p>
<!-- Lemma 1 -->
<p>
<strong>Lemma 1.</strong>
<em>
  For an odd positive integer \( n, \)

  \[
    n \oplus (n - 1) = 1
  \]

  where the symbol \( \oplus \) denotes bitwise XOR operation on two
  nonnegative integers.
</em>
</p>
<p>
  <em>Proof.</em>  Let the binary representation of \( n \) be \( b_m
  \dots b_1 b_0 \) where \( m \) is a nonnegative integer and
  \( b_m \) represents the most significant nonzero bit of \( n.  \)
  Since \( n \) is an odd number, \( b_0 = 1.  \)

  Thus \( n \) may be written as

  \[
    b_m \dots b_1 1.
  \]

  As a result \( n - 1 \) may be written as

  \[
    b_m \dots b_1 0.
  \]

  The bitwise XOR of both binary representations is \( 1.  \)
</p>
<!-- Lemma 2 -->
<p>
  <strong>Lemma 2.</strong>
  <em>
    For a nonnegative integer \( n, \)

    \[
      n \oplus 1 =
      \begin{cases}
      n + 1 &amp; \text{if } n \text{ is even}, \\
      n - 1 &amp; \text{if } n \text{ is odd}.
      \end{cases}
    \]

    where the symbol \( \oplus \) denotes bitwise XOR operation on two
    nonnegative integers.
  </em>
</p>
<p>
  <em>Proof.</em>  Let the binary representation of \( n \) be \( b_m
  \dots b_1 b_0 \) where \( m \) is a nonnegative integer and
  \( b_m \) represents the most significant nonzero bit of \( n.  \)
</p>
<p>
  If \( n \) is even, \( b_0 = 0.  \)  In this case, \( n \) may be
  written as \( b_m \dots b_1 0.  \)  Thus \( n \oplus 1 \) may be
  written as \( b_m \dots b_1 1.  \)  Therefore \( n \oplus 1 = n + 1.  \)
</p>
<p>
  If \( n \) is odd, \( b_0 = 1.  \)  In this case, \( n \) may be
  written as \( b_m \dots b_1 1.  \)  Thus \( n \oplus 1 \) may be
  written as \( b_m \dots b_1 0.  \)  Therefore \( n \oplus 1 = n - 1.  \)
</p>
<p>
  Note that for odd \( n, \) lemma 1 can also be derived as a
  corollary of lemma 2 in this manner:

  \[
    k \oplus (k - 1)
    = k \oplus (k \oplus 1)
    = (k \oplus k) \oplus 1
    = 0 \oplus 1
    = 1.
  \]
</p>
<!-- Lemma 3 -->
<p>
  <strong>Lemma 3.</strong>
  <em>
    If \( x \) is an even nonnegative integer and \( y \) is an odd
    positive integer, then \( x \oplus y \) is odd, where the symbol
    \( \oplus \) denotes bitwise XOR operation on two nonnegative
    integers.
  </em>
</p>
<p>
  <em>Proof.</em>  Let the binary representation of \( x \) be \(
  b_{xm_x} \dots b_{x1} b_{x0} \) and that of \( y \) be \( b_{ym_y}
  \dots b_{y1} b_{y0} \) where \( m_x \) and \( m_y \) are nonnegative
  integers and \( b_{xm_x} \) and \( b_{xm_y} \) represent the most
  significant nonzero bits of \( x \) and \( y \) respectively.
</p>
<p>
  Since \( x \) is even, \( b_{x0} = 0.  \)  Since \( y \) is odd, \(
  b_{y0} = 1.  \)
</p>
<p>
  Let \( z = x \oplus y \) with a binary representation of \( b_{zm_z}
  \dots b_{z1} b_{z0} \) where \( m_{zm_z} \) is a nonnegative integer
  and \( b_{zm_z} \) is the most significant nonzero bit of \( z.  \)
</p>
<p>
  We get \( b_{z0} = b_{x0} \oplus b_{y0} = 0 \oplus 1 = 1.  \)
  Therefore \( z \) is odd.
</p>
<h2 id="theorems">Theorems<a href="#theorems"></a></h2>
<!-- Theorem 1 -->
<p>
<strong>Theorem 1.</strong>
<em>
  Let \( \oplus \) denote bitwise XOR operation on two nonnegative
  integers and

  \[
    f(k) =
    \begin{cases}
    n                        &amp; \text{if } n = 0, \\
    n \oplus (f(n - 1) - 1)  &amp; \text{if } n \gt 1.
    \end{cases}
  \]

  where \( k \) is a nonnegative integer and \( n \) is an odd
  positive integer.  Then

  \[
    f(k) =
    \begin{cases}
    n &amp; \text{if } k \text{ is even}, \\
    1 &amp; \text{if } k \text{ is odd}.
    \end{cases}
  \]
</em>
</p>
<p>
  <em>Proof.</em>  This is a proof by mathematical induction.  We have
  \( f(0) = n \) by definition.  Therefore the base case holds good.
</p>
<p>
  Let us assume that \( f(k) = n \) for any even \( k \) (induction
  hypothesis).  Let \( k' = k + 1 \) and \( k'' = k + 2.  \)
</p>
<p>
  If \( k \) is even, we get

  \begin{align*}
    f(k')  &amp; = n \oplus (f(k) - 1)  &amp;&amp; \text{(by definition)} \\
           &amp; = n \oplus (n - 1)     &amp;&amp; \text{(by induction hypothesis)} \\
           &amp; = 1                    &amp;&amp; \text{(by lemma 1)},\\
    f(k'') &amp; = n \oplus (f(k') - 1) &amp;&amp; \text{(by definition)} \\
           &amp; = n \oplus (1 - 1)     &amp;&amp; \text{(since \( f(k') = 1 \))} \\
           &amp; = n \oplus 0 \\
           &amp; = n.
  \end{align*}
</p>
<p>
  Since \( f(k'') = n \) and \( k'' \) is the next even number after
  \( k, \) the induction step is complete.  The induction step shows
  that for every even \( k, \) \( f(k) = n \) holds good.  It also
  shows that as a result of \( f(k) = n \) for every even \( k, \) we
  get \( f(k') = 1 \) for every odd \( k'.  \)
</p>
<!-- Theorem 2 -->
<p>
  <strong>Theorem 2.</strong>
  <em>
    Let \( \oplus \) denote bitwise XOR operation on two nonnegative
    integers and

    \[
      f(k) =
        \begin{cases}
          n                        &amp; \text{if } n = 0, \\
          n \oplus (f(n - 1) - 1)  &amp; \text{if } n \gt 1.
        \end{cases}
    \]

    where \( k \) is a nonnegative integer, \( n \) is an even
    positive integer and \( 0 \leq k \leq n.  \)  Then

   \[
     f(k) = 0 \iff k = n.
   \]
</em>
</p>
<p>
  <em>Proof.</em>  We will first show by the principle of mathematical
  induction that for even \( k, \) \( f(k) = n - k.  \)  We have \(
  f(0) = n \) by definition, so the base case holds good.  Now let us
  assume that \( f(k) = n - k \) holds good for any even \( k \) where
  \( 0 \leq k \leq n \) (induction hypothesis).
</p>
<p>
  Since \( n \) is even (by definition) and \( k \) is even (by
  induction hypothesis), \( f(k) = n - k \) is even.  As a result, \(
  f(k) - 1 \) is odd.  By lemma 3, we conclude that \( f(k + 1) = n
  \oplus (f(k) - 1) \) is odd.
</p>
<p>
  Now we perform the induction step as follows:

  \begin{align*}
    f(k + 2) &amp; = n \oplus (f(k + 1) - 1)
                     &amp;&amp; \text{(by definition)} \\
             &amp; = n \oplus (f(k + 1) \oplus 1)
                     &amp;&amp; \text{(by lemma 2 for odd \( n \))} \\
             &amp; = n \oplus ((n \oplus (f(k) - 1)) \oplus 1)
                     &amp;&amp; \text{(by definition)} \\
             &amp; = (n \oplus n ) \oplus ((f(k) - 1) \oplus 1)
                     &amp;&amp; \text{(by associativity of XOR)} \\
             &amp; = 0 \oplus ((f(k) - 1) \oplus 1) \\
             &amp; = (f(k) - 1) \oplus 1 \\
             &amp; = (f(k) - 1) - 1
                     &amp;&amp; \text{(from lemma 2 for odd \( n \))} \\
             &amp; = f(k) - 2 \\
             &amp; = n - k - 2
                     &amp;&amp; \text{(by induction hypothesis).}
  \end{align*}

  This completes the induction step and proves that \( f(k) = n - k \)
  for even \( k \) where \( 0 \leq k \leq n.  \)
</p>
<p>
  We have shown above that \( f(k) \) is even for every even \( k \)
  where \( 0 \leq k \leq n \) which results in \( f(k + 1) \) as odd
  for every odd \( k + 1.  \)  This means that \( f(k) \) cannot be \(
  0 \) for any odd \( k.  \)  Therefore \( f(k) = 0 \) is possible only
  even \( k.  \)  Solving \( f(k) = n - k = 0, \) we conclude that \(
  f(k) = 0 \) if and only if \( k = n.  \)
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/loopy-c-puzzle.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>URL in C</title>
<link>https://susam.net/url-in-c.html</link>
<guid isPermaLink="false">vnjtr</guid>
<pubDate>Fri, 03 Jun 2011 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is an interesting C puzzle I created recently.  It is a silly
  one but you might find it amusing.
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main()
{
    https://susam.net/
    printf("hello, world\n");
    return 0;
}</code>
</pre>
<p>
  This code compiles and runs successfully.
</p>
<pre>
<samp>$ <kbd>c99 hello.c &amp;&amp; ./a.out</kbd>
hello, world</samp>
</pre>
<p>
  However, the
  <a href="http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf">C99
  standard</a> does not mention anywhere that a URL is a valid
  syntactic element in C.  How does this code work then?
</p>
<p>
  <em><strong>Update on 04 Jun 2011:</strong> The puzzle has been
  solved in the <a href="comments/url-in-c.html">comments</a> section.
  If you want to think about the problem before you see the solutions,
  this is a good time to pause and think about it.  There are spoilers
  ahead.</em>
</p>
<p>
  The code works fine because <code>https:</code> is a label and
  <code>//</code> following it begins a comment.  In case, you are
  wondering if <code>//</code> is indeed a valid comment in C, yes, it
  is, since C99.  Download the
  <a href="http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf">C99
  standard</a>, go to section 6.4.9 (Comments) and read the second
  point which mentions this:
</p>
<blockquote>
  Except within a character constant, a string literal, or a comment,
  the characters <code>//</code> introduce a comment that includes all
  multibyte characters up to, but not including, the next new-line
  character.  The contents of such a comment are examined only to
  identify multibyte characters and to find the terminating new-line
  character.
</blockquote>
<!-- ### -->
<p>
  <a href="https://susam.net/url-in-c.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>Ternary Operator Puzzle</title>
<link>https://susam.net/ternary-operator-puzzle.html</link>
<guid isPermaLink="false">kaibc</guid>
<pubDate>Wed, 06 Apr 2011 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  What is the shortest statement you can write in the C or C++
  programming language to express the following statement?
</p>
<pre><code>a = (a == 0 ? 0 : 1);</code></pre>
<p>
  See the comments page for the solution.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/ternary-operator-puzzle.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>Clumsy Pointers</title>
<link>https://susam.net/clumsy-pointers.html</link>
<guid isPermaLink="false">kwnco</guid>
<pubDate>Mon, 29 Nov 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="pointer-declarator">Pointer Declarator<a href="#pointer-declarator"></a></h2>
<p>
  Here is a fun puzzle that involves complex type declarations in C:
</p>
<div class="highlight">
  <p>
    Without using <code>typedef</code>, declare <code>x</code> as a
    pointer to a function that takes one argument which is an array of
    10 pointers to functions which in turn take <code>int *</code> as
    their only argument and returns a pointer to a function which
    has <code>int *</code> argument and <code>void</code> return type.
  </p>
</div>
<p>
  Here is a simpler way to state this puzzle:
</p>
<div class="highlight">
  <p>
    Without using <code>typedef</code>, declare <code>x</code> as a
    pointer that is equivalent to the following declaration
    of <code>x</code>:
  </p>
<pre>
<code>typedef void (*func_t)(int *);
func_t (*x)(func_t [10]);</code>
</pre>
</div>
<p>
  <em>If you want to think about this puzzle, this is a good time to
  pause and think about it.  There are spoilers ahead.</em>
</p>
<p>
  Let me describe how I solve such problems.  Let us start from the
  right end of the problem and work our way to the left end defining
  each part one by one.
</p>
<div style="text-align: center">
  <p>
    <code>void x(int *)</code><br>
    A function that has <code>int *</code> argument and
    <code>void</code> return type.
  </p>
  <p>
    <code>void (*x)(int *)</code><br>
    A pointer to a function that has <code>int *</code> argument
    and <code>void</code> return type.
  </p>
  <p>
    <code>void (*x())(int *)</code><br>
    A function that returns a pointer to a function that has <code>int
    *</code> argument and <code>void</code> return type.
  </p>
  <p>
    <code>void (*x(void (*)(int *)))(int *)</code><br>
    A function that has a pointer to a function that has <code>int
    *</code> argument and <code>void</code> return type as argument
    and returns a pointer to a function which has <code>int *</code>
    argument and <code>void</code> return type.
  </p>
  <p>
    <code>void (*x(void (*[10])(int *)))(int *)</code><br>
    A function that has an array of 10 pointers to functions that has
    <code>int *</code> argument and <code>void</code> return type as
    argument and returns a pointer to a function which has <code>int
    *</code> argument and <code>void</code> return type.
  </p>
  <p>
    <code>void (*(*x)(void (*[10])(int *)))(int *)</code><br>
    A pointer to a function that has an array of 10 pointers to
    functions that has <code>int *</code> argument and
    <code>void</code> return type as argument and returns a pointer to
    a function which has <code>int *</code> argument and
    <code>void</code> return type.
  </p>
</div>
<h2 id="example-code">Example Code<a href="#example-code"></a></h2>
<p>
  Here is an example that uses the above pointer declaration in a
  program in order to verify that it works as expected:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

/* A function which has int * argument and void return type.  */
void g(int *a)
{
    printf("g(): a = %d\n", *a);
}

/* A function which has an array of 10 pointers to g()-like functions
   and returns a pointer to a g()-like funciton.  */
void (*f(void (*a[10])(int *)))(int *)
{
    int i;
    for (i = 0; i &lt; 10; i++)
        a[i](&amp;i);
    return g;
}

int main()
{
    /* An array of 10 pointers to g().  */
    void (*a[10])(int *) = {g, g, g, g, g, g, g, g, g, g};

    /* A pointer to function f().  */
    void (*(*x)(void (*[10])(int *)))(int *) = f;

    /* A pointer to function g() returned by f().  */
    void (*y)(int *a) = x(a);

    int i = 10;
    y(&amp;i);
    return 0;
}</code>
</pre>
<p>
  Here is the output of this program:
</p>
<pre>
<samp>$ gcc -Wall -Wextra -pedantic -std=c99 foo.c &amp;&amp; ./a.out
g(): a = 0
g(): a = 1
g(): a = 2
g(): a = 3
g(): a = 4
g(): a = 5
g(): a = 6
g(): a = 7
g(): a = 8
g(): a = 9
g(): a = 10</samp>
</pre>
<h2 id="further-reading">Further Reading<a href="#further-reading"></a></h2>
<p>
  The book
  <em><a href="https://en.wikipedia.org/wiki/The_C_Programming_Language_(book)">The
  C Programming Language</a></em>, Second Edition has some good
  examples of complicated declarations of pointers in Section 5.12
  (Complicated Declarations).  Here are a couple of them:
</p>
<p>
  <code>char (*(*x())[])()</code><br>
  x: function returning pointer to array[] of pointer to function
  returning char
</p>
<p>
  <code>char (*(*x[3])())[5]</code><br>
  x: array[3] of pointer to function returning pointer to array[5] of
  char
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/clumsy-pointers.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Stack Overwriting Function</title>
<link>https://susam.net/stack-overwriting-function.html</link>
<guid isPermaLink="false">oijgw</guid>
<pubDate>Wed, 28 Jul 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="skipping-over-a-function-call">Skipping Over a Function Call<a href="#skipping-over-a-function-call"></a></h2>
<p>
  Here is a C puzzle that involves some analysis of the machine code
  generated from it followed by manipulation of the runtime stack.
  The solution to this puzzle is <em>implementation-dependent</em>.
  Here is the puzzle:
</p>
<div class="highlight">
<p>
  Consider this C code:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

void f()
{
}

int main()
{
    printf("1\n");
    f();
    printf("2\n");
    printf("3\n");
    return 0;
}</code>
</pre>
<p>
  Define the function <code>f()</code> such that the output of the
  above code is:
</p>
<pre>
<samp>1
3</samp>
</pre>
<p>
  Printing <code>3</code> in <code>f()</code> and exiting is not
  allowed as a solution.
</p>
</div>
<p>
  <em>If you want to think about this problem, this is a good time to
  pause and think about it.  There are spoilers ahead.</em>
</p>
<p>
  The solution essentially involves figuring out what code we can
  place in the body of <code>f()</code> such that it causes the
  program to skip over the machine code generated for
  the <code>printf("2\n")</code> operation.  I'll share two solutions
  for two different implementations:
</p>
<ol>
  <li>
    gcc 4.3.2 on 64-bit Debian 5.0.3 running on 64-bit Intel Core 2
    Duo.
  </li>
  <li>
    Microsoft Visual Studio 2005 on 32-bit Windows XP running on
    64-bit Intel Core 2 Duo.
  </li>
</ol>
<h2 id="solution-for-gcc">Solution for GCC<a href="#solution-for-gcc"></a></h2>
<p>
  Let us first see step by step how I approached this problem for GCC.
  We add a statement <code>char a = 7;</code> to the function
  <code>f()</code>.  The code looks like this:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

void f()
{
    char a = 7;
}

int main()
{
    printf("1\n");
    f();
    printf("2\n");
    printf("3\n");
    return 0;
}</code>
</pre>
<p>
  There is nothing special about the number <code>7</code> here.  We
  just want to define a variable in <code>f()</code> and assign some
  value to it.
</p>
<p>
  Then we compile the code and analyse the machine code generated for
  <code>f()</code> and <code>main()</code> functions.
</p>
<pre>
<samp>$ <kbd>gcc -c overwrite.c &amp;&amp; objdump -d overwrite.o</kbd>

overwrite.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &lt;f&gt;:
   0:   55                      push   %rbp
   1:   48 89 e5                mov    %rsp,%rbp
   <span class="hl">4:   c6 45 ff 07             movb   $0x7,-0x1(%rbp)</span>
   8:   c9                      leaveq
   9:   c3                      retq

000000000000000a &lt;main&gt;:
   a:   55                      push   %rbp
   b:   48 89 e5                mov    %rsp,%rbp
   e:   bf 00 00 00 00          mov    $0x0,%edi
  13:   e8 00 00 00 00          callq  18 &lt;main+0xe&gt;
  18:   b8 00 00 00 00          mov    $0x0,%eax
  1d:   e8 00 00 00 00          callq  22 &lt;main+0x18&gt;
  <span class="hl">22:   bf 00 00 00 00          mov    $0x0,%edi
  27:   e8 00 00 00 00          callq  2c &lt;main+0x22&gt;</span>
  2c:   bf 00 00 00 00          mov    $0x0,%edi
  31:   e8 00 00 00 00          callq  36 &lt;main+0x2c&gt;
  36:   b8 00 00 00 00          mov    $0x0,%eax
  3b:   c9                      leaveq
  3c:   c3                      retq</samp>
</pre>
<p>
  When <code>main()</code> calls <code>f()</code>, the microprocessor
  saves the return address (where the control must return to after
  <code>f()</code> is executed) in stack.  The line at offset
  <samp>1d</samp> in the listing above for <code>main()</code> is the
  call to <code>f()</code>.  After <code>f()</code> is executed, the
  instruction at offset <samp>22</samp> is executed.  Therefore the
  return address that is saved on stack is the address at which the
  instruction at offset
  <samp>22</samp> would be present at runtime.
</p>
<p>
  The instructions at offsets <samp>22</samp> and <samp>27</samp> are
  the instructions for the <code>printf("2\n")</code> call.  These are
  the instructions we want to skip over.  In other words, we want to
  modify the return address in the stack from the address of the
  instruction at offset <samp>22</samp> to that of the instruction at
  offset <samp>2c</samp>.  This is equivalent to skipping 10 bytes
  (0x2c - 0x22 = 10) of machine code or adding 10 to the return
  address saved in the stack.
</p>
<p>
  Now how do we get hold of the return address saved in the stack when
  <code>f()</code> is being executed?  This is where the variable
  <code>a</code> we defined in <code>f()</code> helps.  The instruction
  at offset <samp>4</samp> is the instruction generated for
  assigning <code>7</code> to the variable <code>a</code>.
</p>
<p>
  From the knowledge of how microprocessor works and from the machine
  code generated for <code>f()</code>, we find that the following
  sequence of steps are performed during the call to <code>f()</code>:
</p>
<ol>
  <li>
    The microprocessor saves the return address by pushing the content
    of RIP (instruction pointer) register into the stack.
  </li>
  <li>
    The function <code>f()</code> pushes the content of the RBP (base
    pointer) register into the stack.
  </li>
  <li>
    The function <code>f()</code> copies the content of the RSP (stack
    pointer) register to the RBP register.
  </li>
  <li>
    The function <code>f()</code> stores the byte value <code>7</code>
    at the memory address specified by the content of RBP minus 1.
    This achieves the assignment of the value <code>7</code> to the
    variable <code>a</code>.
  </li>
</ol>
<p>
  After <code>7</code> is assigned to the variable <code>a</code>, the
  stack is in the following state:
</p>
<table class="grid center textcenter">
  <tr>
    <th>Address</th>
    <th>Content</th>
    <th>Size (in bytes)</th>
  </tr>
  <tr>
    <td><code>&amp;a + 5</code></td>
    <td>Return address (old RIP)</td>
    <td>8</td>
  </tr>
  <tr>
    <td><code>&amp;a + 1</code></td>
    <td>Old base pointer (old RBP)</td>
    <td>8</td>
  </tr>
  <tr>
    <td><code>&amp;a</code></td>
    <td>Variable <code>a</code></td>
    <td>1</td>
  </tr>
</table>
<p>
  If we add 9 to the address of the variable <code>a</code>, i.e.
  <code>&amp;a</code>, we get the address where the return address is
  stored.  We saw earlier that if we increment this return address by
  10 bytes, it solves the problem.  Therefore here is the solution
  code:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

void f()
{
    char a;
    (&amp;a)[9] += 10;
}

int main()
{
    printf("1\n");
    f();
    printf("2\n");
    printf("3\n");
    return 0;
}</code>
</pre>
<p>
  Finally, we compile and run this code and confirm that the solution
  works fine:
</p>
<pre>
<samp>$ <kbd>gcc overwrite.c &amp;&amp; ./a.out</kbd>
1
3</samp>
</pre>
<h2 id="solution-for-visual-studio">Solution for Visual Studio<a href="#solution-for-visual-studio"></a></h2>
<p>
  Now we will see another example solution, this time for Visual
  Studio 2005.
</p>
<p>
  Like before we define a variable <code>a</code> in <code>f()</code>.
  The code now looks like this:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

void f()
{
    char a = 7;
}

int main()
{
    printf("1\n");
    f();
    printf("2\n");
    printf("3\n");
    return 0;
}</code>
</pre>
<p>
  Then we compile the code and analyse the machine code generated from
  it.
</p>
<pre>
<samp>C:\&gt;<kbd>cl overwrite.c</kbd>
Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.42
for 80x86
Copyright (C) Microsoft Corporation.  All rights reserved.

overwrite.c
Microsoft (R) Incremental Linker Version 8.00.50727.42
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:overwrite.exe
overwrite.obj

C:\&gt;<kbd>dumpbin /disasm overwrite.obj</kbd>
Microsoft (R) COFF/PE Dumper Version 8.00.50727.42
Copyright (C) Microsoft Corporation.  All rights reserved.


Dump of file overwrite.obj

File Type: COFF OBJECT

_f:
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  <span class="hl">00000004: C6 45 FF 07        mov         byte ptr [ebp-1],7</span>
  00000008: 8B E5              mov         esp,ebp
  0000000A: 5D                 pop         ebp
  0000000B: C3                 ret
  0000000C: CC                 int         3
  0000000D: CC                 int         3
  0000000E: CC                 int         3
  0000000F: CC                 int         3
_main:
  00000010: 55                 push        ebp
  00000011: 8B EC              mov         ebp,esp
  00000013: 68 00 00 00 00     push        offset $SG2224
  00000018: E8 00 00 00 00     call        _printf
  0000001D: 83 C4 04           add         esp,4
  00000020: E8 00 00 00 00     call        _f
  <span class="hl">00000025: 68 00 00 00 00     push        offset $SG2225
  0000002A: E8 00 00 00 00     call        _printf
  0000002F: 83 C4 04           add         esp,4</span>
  00000032: 68 00 00 00 00     push        offset $SG2226
  00000037: E8 00 00 00 00     call        _printf
  0000003C: 83 C4 04           add         esp,4
  0000003F: 33 C0              xor         eax,eax
  00000041: 5D                 pop         ebp
  00000042: C3                 ret

  Summary

           B .data
          57 .debug$S
          2F .drectve
          43 .text</samp>
</pre>
<p>
  Just like in the previous <code>objdump</code> listing, in this
  listing too, the instruction at offset <code>4</code> shows where
  the variable <code>a</code> is allocated and the instructions at
  offsets <code>25</code>, <code>2A</code> and <code>2F</code> show
  the instructions we want to skip, i.e. instead of returning to the
  instruction at offset <code>25</code>, we want the microprocessor to
  return to the instruction at offset <code>32</code>.  This involves
  skipping 13 bytes (0x32 - 0x25 = 13) of machine code.
</p>
<p>
  Unlike the previous <code>objdump</code> listing, in this listing we
  see that the Visual Studio I am using is a 32-bit on, so it
  generates machine code to use 32-bit registers like EBP, ESP, etc.
  Thus the stack looks like this after <code>7</code> is assigned to
  the variable
  <code>a</code>:
</p>
<table class="grid center textcenter">
  <tr>
    <th>Address</th>
    <th>Content</th>
    <th>Size (in bytes)</th>
  </tr>
  <tr>
    <td><code>&amp;a + 5</code></td>
    <td>Return address (old EIP)</td>
    <td>4</td>
  </tr>
  <tr>
    <td><code>&amp;a + 1</code></td>
    <td>Old base pointer (old EBP)</td>
    <td>4</td>
  </tr>
  <tr>
    <td><code>&amp;a</code></td>
    <td>Variable <code>a</code></td>
    <td>1</td>
  </tr>
</table>
<p>
  If we add 5 to the address of the variable <code>a</code>, i.e.
  <code>&amp;a</code>, we get the address where the return address is
  stored.  Here is the solution code:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

void f()
{
    char a;
    (&amp;a)[5] += 13;
}

int main()
{
    printf("1\n");
    f();
    printf("2\n");
    printf("3\n");
    return 0;
}</code>
</pre>
<p>
  Finally, we compile and run this code and confirm that the solution
  works fine:
</p>
<pre>
<samp>C:\&gt;<kbd>cl /w overwrite.c</kbd>
Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 14.00.50727.42
for 80x86
Copyright (C) Microsoft Corporation.  All rights reserved.

overwrite.c
Microsoft (R) Incremental Linker Version 8.00.50727.42
Copyright (C) Microsoft Corporation.  All rights reserved.

/out:overwrite.exe
overwrite.obj

C:\&gt;<kbd>overwrite.exe</kbd>
1
3</samp>
</pre>
<h2 id="conclusion">Conclusion<a href="#conclusion"></a></h2>
<p>
  The machine code that the compiler generates for a given C code is
  highly dependent on the implementation of the compiler.  In the two
  examples above, we have two different solutions for two different
  compilers.
</p>
<p>
  Even with the same brand of compiler, the way it generates machine
  code for a given code may change from one version of the compiler to
  another.  Therefore, it is very likely that the above solution would
  not work on another system (such as your system) even if you use the
  same compiler that I am using in the examples above.
</p>
<p>
  However, we can arrive at the solution for an implementation of the
  compiler by determining what number to add to <code>&amp;a</code> to
  get the address where the return address is saved on stack and what
  number to add to this return address to make it point to the
  instruction we want to skip to after <code>f()</code> returns.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/stack-overwriting-function.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>Big-Endian on Little-Endian</title>
<link>https://susam.net/big-endian-on-little-endian.html</link>
<guid isPermaLink="false">fclnd</guid>
<pubDate>Sun, 20 Jun 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  In this post, I will share how I set up big-endian emulation on my
  little-endian Intel machine to tets a program for byte order related
  issues.  I used the QEMU PowerPC emulator to set up the big-endian
  emulation.  The steps to do so are documented in the list below.
</p>
<ol>
  <li>
    <p>
      Install QEMU.
    </p>
    <pre><code>apt-get update &amp;&amp; apt-get install qemu</code></pre>
  </li>
  <li>
    <p>
      Download <code>mol-0.9.72.1.tar.bz2</code> from
      <a href="http://sourceforge.net/projects/mac-on-linux/files/">http://sourceforge.net/projects/mac-on-linux/files/</a>
      and copy the file named <code>video.x</code> from the downloaded
      tarball to
      <code>/usr/share/qemu/</code>.  This is necessary to
      prevent <code>qemu-system-ppc</code> from complaining about it.
    </p>
    <pre>
<code>wget https://sourceforge.net/projects/mac-on-linux/files/mac-on-linux/mol-0.9.72.1/mol-0.9.72.1.tar.bz2
tar -xjf mol-0.9.72.1.tar.bz2
sudo cp mol-0.9.72.1/mollib/drivers/video.x /usr/share/qemu/</code>
</pre>
  </li>
  <li>
    <p>
      Create a QEMU hard disk image.
    </p>
    <pre><code>qemu-img create powerpc.img 2G</code></pre>
  </li>
  <li>
    <p>
      Download Debian for PowerPC and install it on the QEMU hard disk
      image.
    </p>
    <pre>
<code>wget http://cdimage.debian.org/debian-cd/5.0.4/powerpc/iso-cd/debian-504-powerpc-CD-1.iso
qemu-system-ppc -m 512 -boot d -hda powerpc.img -cdrom debian-504-powerpc-CD-1.iso</code>
</pre>
  </li>
  <li>
    <p>
      Boot the QEMU PowerPC emulator with the new hard disk image.
    </p>
    <pre><code>qemu-system-ppc -m 512 -hda powerpc.img</code></pre>
  </li>
  <li>
    <p>
      Write a small program inside the new Debian system,
      say, <code>endian.c</code> like this:
    </p>
    <pre>
<code>#include &lt;stdio.h&gt;

int main()
{
    int n = 1;
    printf(*((char *) &amp;n) ? "little-endian\n" : "big-endian\n");
    return 0;
}</code>
</pre>
  </li>
  <li>
    <p>
      Compile and execute the C program.
    </p>
    <pre>
<code>$ <kbd>gcc endian.c &amp;&amp; ./a.out</kbd>
big-endian</code>
</pre>
  </li>
</ol>
<!-- ### -->
<p>
  <a href="https://susam.net/big-endian-on-little-endian.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Correctly Printing STAFString</title>
<link>https://susam.net/correctly-printing-stafstring.html</link>
<guid isPermaLink="false">dzrqs</guid>
<pubDate>Fri, 04 Jun 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  At RSA, we use <a href="http://staf.sourceforge.net/">Software
  Testing Automation Framework (STAF)</a> to automate testing our
  products.  Recently, I ran into a bug that occurred due
  to <code>STAFResult::STAFString</code> not being null-terminated.
  Here is an example C++ program that demonstrates the issue:
</p>
<pre>
<code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;

#include "STAF.h"
#include "STAFString.h"

int main(int argc, char **argv)
{
    STAFString name("foo");
    STAFHandlePtr handle;

    int rc = STAFHandle::create(name, handle);
    if (rc != 0) {
        std::cerr &lt;&lt; "Could not create STAF handle; error code: "
                  &lt;&lt; rc &lt;&lt; endl;
        return 1;
    }

    STAFResultPtr result = handle-&gt;submit("127.0.0.1", "VAR",
                                          "RESOLVE STRING {STAF/Env/DUMMY}");
    if (result-&gt;rc != 0) {
        std::cerr &lt;&lt; "Could not run STAF command; error code: "
                  &lt;&lt; rc &lt;&lt; "\n";
        return 1;
    }

    STAFString output = result-&gt;result;
    std::cout &lt;&lt; "Output: " &lt;&lt; output.buffer() &lt;&lt; "\n";
}</code>
</pre>
<p>
  Here is an example output of the above program:
</p>
<pre>
<samp>C:\&gt;<kbd>echo %DUMMY%</kbd>
Why__does__it__break
C:\&gt;<kbd>STAFExperiments.exe</kbd>
Output: Why__does__it__break/Env/DUMMY}}</samp>
</pre>
<p>
  The substring <code>/Env/DUMMY</code> at the end of the output is
  garbage.  The result is not null-terminated in the output buffer.
  Here is the correct way to print the output:
</p>
<pre><code>std::cout &lt;&lt; "Output: " &lt;&lt; string(output.buffer(), output.length()) &lt;&lt; "\n";</code></pre>
<!-- ### -->
<p>
  <a href="https://susam.net/correctly-printing-stafstring.html">Read on website</a> |
  <a href="https://susam.net/tag/c++.html">#c++</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Sequence Points</title>
<link>https://susam.net/sequence-points.html</link>
<guid isPermaLink="false">moksh</guid>
<pubDate>Wed, 26 May 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="code-examples">Code Examples<a href="#code-examples"></a></h2>
<p>
  A particular type of question comes up often in C programming
  forums.  Here is an example of such a question:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main()
{
    int i = 5;
    printf("%d %d %d\n", i, i--, ++i);
    return 0;
}</code>
</pre>
<p>
  The output is <code>5 6 5</code> when compiled with GCC and
  <code>6 6 6</code> when compiled with the C compiler that comes with
  Microsoft Visual Studio.  The versions of the compilers with which I
  got these results are:
</p>
<ul>
  <li>
    gcc (Debian 4.3.2-1.1) 4.3.2
  </li>
  <li>
    Microsoft Visual Studio 2005 32-Bit C/C++ Optimizing Compiler
    Version 14.00.50727.42 for 80x86
  </li>
</ul>
<p>
  Here is another example of such a question:
</p>
<pre>
<code>#include &lt;stdio.h&gt;

int main()
{
    int a = 5;
    a += a++ + a++;
    printf("%d\n", a);
    return 0;
}</code>
</pre>
<p>
  In this case, I got the output <code>17</code> with both the
  compilers.
</p>
<p>
  The behaviour of such C programs is undefined.  Consider the
  following two statements:
</p>
<ul>
  <li><code>printf("%d %d %d\n", i, i--, ++i);</code></li>
  <li><code>a += a++ + a++;</code></li>
</ul>
<p>
  We will see below that in both the statements, the variable is
  modified twice between two consecutive sequence points.  If the
  value of a variable is modified more than once between two
  consecutive sequence points, the behaviour is undefined.  Such code
  may behave differently when compiled with different compilers.
</p>
<h2 id="knr">K&amp;R<a href="#knr"></a></h2>
<p>
  Before looking at the relevant sections of the C99 standard, let us
  see what the book
  <em><a href="https://en.wikipedia.org/wiki/The_C_Programming_Language_(book)">The
  C Programming Language</a></em>, Second Edition says about such C
  statements.  In Section 2.12 (Precedence and Order of Evaluation) of
  the book, the authors write:
</p>
<blockquote>
  <p>
    C, like most languages, does not specify the order in which the
    operands of an operator are evaluated.  (The exceptions are
    <code>&amp;&amp;</code>, <code>||</code>, <code>?:</code>, and
    '<code>,</code>'.)  For example, in a statement like
  </p>
  <pre><code>x = f() + g();</code></pre>
  <p>
    <code>f</code> may be evaluated before <code>g</code> or vice
    versa; thus if either <code>f</code> or <code>g</code> alters a
    variable on which the other depends, <code>x</code> can depend on
    the order of evaluation.  Intermediate results can be stored in
    temporary variables to ensure a particular sequence.
  </p>
</blockquote>
<p>
  In the next paragraph, they write,
</p>
<blockquote>
  <p>
    Similarly, the order in which function arguments are evaluated is
    not specified, so the statement
  </p>
  <pre><code>printf("%d %d\n", ++n, power(2, n));    /* WRONG */</code></pre>
  <p>
    can produce different results with different compilers, depending
    on whether <code>n</code> is incremented before <code>power</code>
    is called.  The solution, of course, is to write
  </p>
<pre>
<code>++n;
printf("%d %d\n", n, power(2, n));</code>
</pre>
</blockquote>
<p>
  They provide one more example in this section:
</p>
<blockquote>
  <p>
    One unhappy situation is typified by the statement
  </p>
<pre>
<code>a[i] = i++;</code>
</pre>
  <p>
    The question is whether the subscript is the old value
    of <code>i</code> or the new.  Compilers can interpret this in
    different ways and generate different answers depending on their
    interpretation.
  </p>
</blockquote>
<h2 id="c99">C99<a href="#c99"></a></h2>
<p>
  To read more about this, download the
  <a href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf">C99
  standard</a>, go to section 5.1.2.3 (Program execution) and see the
  second point which mentions:
</p>
<blockquote>
  Accessing a volatile object, modifying an object, modifying a file,
  or calling a function that does any of those operations are
  all <em>side effects</em>,<sup>11)</sup> which are changes in the
  state of the execution environment.  Evaluation of an expression may
  produce side effects.  At certain specified points in the execution
  sequence called <em>sequence points</em>, all side effects of
  previous evaluations shall be complete and no side effects of
  subsequent evaluations shall have taken place.  (A summary of the
  sequence points is given in annex C.)
</blockquote>
<p>
  Then go to section 6.5 and see the second point which mentions:
</p>
<blockquote>
  Between the previous and next sequence point an object shall have
  its stored value modified at most once by the evaluation of an
  expression.<sup>72)</sup> Furthermore, the prior value shall be read
  only to determine the value to be stored.<sup>73)</sup>
</blockquote>
<p>
  Finally go to Annex C (Sequence Points).  It lists all the sequence
  points.  For example, the following is mentioned as a sequence point:
</p>
<blockquote>
  The call to a function, after the arguments have been evaluated
  (6.5.2.2).
</blockquote>
<p>
  This means that in the statement
</p>
<pre><code>printf("%d %d %d\n", i, i--, ++i);</code></pre>
<p>
  there is a sequence point after the evaluation of the three
  arguments (<code>i</code>, <code>i--</code> and <code>++i</code>)
  and before the <code>printf()</code> function is called.  But none
  of the items specified in Annex C implies that there is a sequence
  point between the evaluation of the arguments.  Yet the value
  of <code>i</code> is modified more than once during the evaluation
  of these arguments.  This makes the behaviour of this statement
  undefined.  Further, the value of <code>i</code> is being read not
  only for determining what it must be updated to but also for using
  as arguments to the <code>printf()</code> call.  This also makes the
  behaviour of this code undefined.
</p>
<p>
  Let us see another example of a sequence point from Annex C.
</p>
<blockquote>
  The end of a full expression: an initializer (6.7.8); the expression
  in an expression statement (6.8.3); the controlling expression of a
  selection statement (<code>if</code> or <code>switch</code>)
  (6.8.4); the controlling expression of a <code>while</code>
  or <code>do</code> statement (6.8.5); each of the expressions of
  a <code>for</code> statement (6.8.5.3); the expression in
  a <code>return</code> statement (6.8.6.4).
</blockquote>
<p>
  Therefore in the statement
</p>
<pre><code>a += a++ + a++;</code></pre>
<p>
  there is a sequence point at the end of the complete expression
  (marked with a semicolon) but there is no other sequence point
  before it.  Yet the value of <code>a</code> is modified twice before
  the sequence point.  Thus the behaviour of this statement is
  undefined.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/sequence-points.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>QuickQWERTY 0.4.0</title>
<link>https://susam.net/code/news/quickqwerty/0.4.0.html</link>
<guid isPermaLink="false">qqzfz</guid>
<pubDate>Sun, 23 May 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Version 0.4.0 of QuickQWERTY is now available.  This release marks
  the final version hosted on SourceForge.
</p>
<p>
  Several issues have been addressed in this update.  Lessons now
  avoid using characters that have not yet been introduced and a
  problem that caused the lessons bar to shrink in Google Chrome has
  been fixed.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/quickqwerty/0.4.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a>
</p>
]]>
</description>
</item>
<item>
<title>QuickQWERTY 0.3.0</title>
<link>https://susam.net/code/news/quickqwerty/0.3.0.html</link>
<guid isPermaLink="false">qqzth</guid>
<pubDate>Sun, 09 May 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Version 0.3.0 of QuickQWERTY is now available.  This release adds
  support for both 5-6 split and 6-7 split typing styles.  With this
  addition, learners can choose where the number keys split between
  the two hands that best matches their preference or training
  requirements.
</p>

<!-- ### -->
<p>
  <a href="https://susam.net/code/news/quickqwerty/0.3.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a>
</p>
]]>
</description>
</item>
<item>
<title>Zero Length Regular Expression</title>
<link>https://susam.net/zero-length-regular-expression.html</link>
<guid isPermaLink="false">ywxjf</guid>
<pubDate>Mon, 03 May 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  This post presents a list of how zero length regular expression is
  handled in various tools and programming languages.  All of them
  compile the zero length regular expression pattern and the regular
  expression matches all strings.
</p>
<h2 id="gnu-grep">GNU grep<a href="#gnu-grep"></a></h2>
<pre>
<samp>$ <kbd>printf "foo\nbar\n" | grep ""</kbd>
foo
bar</samp>
</pre>
<h2 id="bsd-grep">BSD grep<a href="#bsd-grep"></a></h2>
<pre>
<samp>$ <kbd>printf "foo\nbar\n" | grep ""</kbd>
foo
bar</samp>
</pre>
<h2 id="perl">Perl<a href="#perl"></a></h2>
<pre>
<samp>$ <kbd>perl -e 'print(("foo" =~ //) . "\n")'</kbd>
1</samp>
</pre>
<h2 id="python">Python<a href="#python"></a></h2>
<pre>
<samp>$ <kbd>python</kbd>
Python 2.5.2 (r252:60911, Jan  4 2009, 21:59:32)
[GCC 4.3.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <kbd>import re; re.compile('').search('foo')</kbd>
&lt;_sre.SRE_Match object at 0x7fc6c5a2c510&gt;</samp>
</pre>
<h2 id="java">Java<a href="#java"></a></h2>
<pre>
<samp>$ <kbd>cat RegexExperiment.java</kbd>
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class RegexExperiment
{
    public static void main(String[] args)
    {
        System.out.println(Pattern.compile("").matcher("foo").find());
    }
}
$ <kbd>javac RegexExperiment.java &amp;&amp; java RegexExperiment</kbd>
true</samp>
</pre>
<h2 id="mzscheme">MzScheme<a href="#mzscheme"></a></h2>
<pre>
<samp>$ <kbd>mzscheme</kbd>
Welcome to MzScheme v4.0.1 [3m], Copyright (c) 2004-2008 PLT Scheme Inc.
&gt; <kbd>(regexp-match "" "foo")</kbd>
("")</samp>
</pre>
<h2 id="clisp">CLISP<a href="#clisp"></a></h2>
<pre>
<samp>$ <kbd>clisp</kbd>
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.44.1 (2008-02-23) &lt;http://clisp.cons.org/&gt;

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

[1]&gt; <kbd>(regexp:match "" "foo")</kbd>
#S(REGEXP:MATCH :START 0 :END 0)</samp>
</pre>
<h2 id="c">C<a href="#c"></a></h2>
<pre>
<samp>$ <kbd>ls -l /usr/lib/libpcre.so*</kbd>
lrwxrwxrwx 1 root root     17 May  3 15:15 /usr/lib/libpcre.so -&gt; libpcre.so.3.12.1
lrwxrwxrwx 1 root root     17 Jan  6 14:57 /usr/lib/libpcre.so.3 -&gt; libpcre.so.3.12.1
-rw-r--r-- 1 root root 162816 Jul 14  2008 /usr/lib/libpcre.so.3.12.1
susam@swift:~$ <kbd>cat pcre.c</kbd>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;pcre.h&gt;

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;pcre.h&gt;

int main(int argc, char **argv)
{
    pcre *p;
    char *re = "";
    char *s  = "foo";
    const char *errmsg;
    int errpos;
    int ovector[10];
    int ret;

    p = pcre_compile(re, 0, &amp;errmsg, &amp;errpos, NULL);
    ret = pcre_exec(p, NULL, s, strlen(s), 0, 0,
                    ovector, sizeof ovector / sizeof *ovector);

    printf(ret &lt; 0 ? "no match\n" : "match\n");
}
$ <kbd>cc -lpcre pcre.c &amp;&amp; ./a.out</kbd>
match</samp>
</pre>
<!-- ### -->
<p>
  <a href="https://susam.net/zero-length-regular-expression.html">Read on website</a> |
  <a href="https://susam.net/tag/perl.html">#perl</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/java.html">#java</a> |
  <a href="https://susam.net/tag/lisp.html">#lisp</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Minimal Installation of WinHTTP API</title>
<link>https://susam.net/minimal-installation-of-winhttp-api.html</link>
<guid isPermaLink="false">draiq</guid>
<pubDate>Wed, 14 Apr 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here are the steps to perform for a minimal download and
  installation of WinHTTP API for C++ so that we have the
  the <code>winhttp.lib</code> and <code>winhttp.h</code> files while
  writing C++ programs using the WinHTTP API:
</p>
<ol>
  <li>Download PSDK-x86.exe
  from <a href="https://web.archive.org/web/20100507044252/http://www.microsoft.com/downloads/details.aspx?familyid=0BAF2B35-C656-4969-ACE8-E4C0C0716ADB&amp;displaylang=en">Microsoft
      ® Windows Server® 2003 R2 Platform SDK Web Install</a>.
  </li>
  <li>
    Run the installer, select <em>Custom</em> installation type, clear
    all categories and select <em>Microsoft Windows Core SDK</em> &gt;
    <em>Build Environment</em> &gt; <em>Build Environment (x86
    32-bit)</em>.
  </li>
</ol>
<p>
  After the installation is complete, the <code>winhttp.h</code> file
  can be found at <code>C:\Program Files\Microsoft Platform SDK Server
    2003 R2\Include</code>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/minimal-installation-of-winhttp-api.html">Read on website</a> |
  <a href="https://susam.net/tag/c++.html">#c++</a> |
  <a href="https://susam.net/tag/windows.html">#windows</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Lucene Java Example</title>
<link>https://susam.net/lucene-java-example.html</link>
<guid isPermaLink="false">cvlmk</guid>
<pubDate>Sat, 10 Apr 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is a simple program I wrote that makes use of Lucene Java
  3.0.1:
</p>

<pre>
<code>package in.susam;

import java.io.File;
import java.io.IOException;

import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.util.Version;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;

public class LuceneDemo
{
    static final String INDEX_DIR = "index1";

    public static void main(String[] args) throws Exception {
        write();
        search("content", "integer");
        search("tags", "rhyme");
    }

    static void write() throws IOException {
        // Create index
        IndexWriter writer = new IndexWriter(
                FSDirectory.open(new File(INDEX_DIR)),
                new StandardAnalyzer(Version.LUCENE_30),
                true,
                IndexWriter.MaxFieldLength.UNLIMITED);

        Document doc;
        String field;
        String text;

        // Add first document
        doc = new Document();

        field = "title";
        text = "Humpty Dumpty sat on a wall";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "content";
        text = "Humpty Dumpty sat on a wall.\n" +
               "Humpty Dumpty had a great fall;\n" +
               "All the King's horses and all the King's men,\n" +
               "Couldn't put Humpty together again.";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "tags";
        text = "rhyme";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        writer.addDocument(doc);

        // Add second document
        doc = new Document();

        field = "title";
        text = "Jack and Jill went up the hill";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "content";
        text = "Jack and Jill went up the hill\n" +
               "To fetch a pail of water.\n" +
               "Jack fell down and broke his crown,\n" +
               "And Jill came tumbling after.\n";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "tags";
        text = "rhyme";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        writer.addDocument(doc);

        // Add third document
        doc = new Document();

        field = "title";
        text = "Fermat's Last Theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "content";
        text = "In number theory, Fermat's Last Theorem states that no " +
               "three positive integers a, b and c can satisfy the " +
               "equation for a^n + b^n = c^n for any integer value of n " +
               "greater than two.";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "tags";
        text = "math, theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        writer.addDocument(doc);

        // Add fourth document
        doc = new Document();

        field = "title";
        text = "Euler's theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "content";
        text = "Euler's theorem states that if n is a positive integer and " +
               "a is a positive integer coprime to n, then a^phi(n) = 1 " +
               "(mod n) where phi(n) is Euler's totient function.";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        field = "tags";
        text = "math, theorem";
        doc.add(new Field(field, text, Field.Store.YES, Field.Index.ANALYZED));

        writer.addDocument(doc);

        writer.close();
    }

    static void search(String field, String query) throws IOException,
                                                          ParseException {
        IndexSearcher searcher = new IndexSearcher(
                FSDirectory.open(new File(INDEX_DIR)), true);
        QueryParser parser = new QueryParser(
                Version.LUCENE_30, field,
                new StandardAnalyzer(Version.LUCENE_30));
        TopDocs docs = searcher.search(parser.parse(query), 10);
        System.out.println("Query: '" + query + "' in '" + field + "'");
        System.out.println("Total hits: " + docs.totalHits);
        System.out.println("");
        for (int i = 0; i &lt; docs.scoreDocs.length; i++) {
            ScoreDoc hit = docs.scoreDocs[i];
            Document doc = searcher.doc(hit.doc);
            System.out.println("#" + i);
            System.out.println("title: " + doc.get("title"));
            System.out.println("content: " + doc.get("content"));
            System.out.println("tags: " + doc.get("tags"));
            System.out.println("id: " + hit.doc);
            System.out.println("score: " + hit.score);
            System.out.println();
        }
    }
}</code>
</pre>
<p>
  Here is the output when the above code is compiled and run:
</p>
<pre>
<samp>Query: 'integer' in 'content'
Total hits: 2

#0
title: Euler's theorem
content: Euler's theorem states that if n is a positive integer and a is a positive integer coprime to n, then a^phi(n) = 1 (mod n) where phi(n) is Euler's totient function.
tags: math, theorem
id: 3
score: 0.34144828

#1
title: Fermat's Last Theorem
content: In number theory, Fermat's Last Theorem states that no three positive integers a, b and c can satisfy the equation for a^n + b^n = c^n for any integer value of n greater than two.
tags: math, theorem
id: 2
score: 0.24144039

Query: 'rhyme' in 'tags'
Total hits: 2

#0
title: Humpty Dumpty sat on a wall
content: Humpty Dumpty sat on a wall.
Humpty Dumpty had a great fall;
All the King's horses and all the King's men,
Couldn't put Humpty together again.
tags: rhyme
id: 0
score: 1.287682

#1
title: Jack and Jill went up the hill
content: Jack and Jill went up the hill
To fetch a pail of water.
Jack fell down and broke his crown,
And Jill came tumbling after.

tags: rhyme
id: 1
score: 1.287682
</samp></pre>
<!-- ### -->
<p>
  <a href="https://susam.net/lucene-java-example.html">Read on website</a> |
  <a href="https://susam.net/tag/java.html">#java</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>ResizableDoubleArray contract() and expand()</title>
<link>https://susam.net/resizabledoublearray-contract-and-expand.html</link>
<guid isPermaLink="false">xlpxy</guid>
<pubDate>Tue, 23 Mar 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is a diff of the changes I made to Apache Common Math's
  <code>ResizableDoubleArray</code> class to investigate how it
  contracts or expands its internal capacity.
</p>
<pre>
<code>Index: src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java
===================================================================
--- src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java (revision 925455)
+++ src/main/java/org/apache/commons/math/util/ResizableDoubleArray.java (working copy)
@@ -157,6 +157,14 @@
     public ResizableDoubleArray(int initialCapacity) {
         setInitialCapacity(initialCapacity);
         internalArray = new double[this.initialCapacity];
+        System.out.println(":::: initialCapacity: " + initialCapacity);
+        System.out.println(":::: expansionMode: " +
+                           (expansionMode == 0 ? "MULTIPLICATIVE_MODE"
+                                               : "ADDITIVE_MODE" ));
+        System.out.println(":::: expansionFactor: " + expansionFactor);
+        System.out.println(":::: contractionCriteria: " +
+                           contractionCriteria);
+        System.out.println();
     }

     /**
@@ -264,14 +272,33 @@
      * @param value to be added to end of array
      */
     public synchronized void addElement(double value) {
+        System.out.println(":::: addElement(" + value + ")");
+        System.out.println(":::: startIndex: " + startIndex);
+        System.out.println(":::: internalArray.length: " +
+                           internalArray.length);
         numElements++;
+        System.out.println(":::: numElements incremented to: " +
+                           numElements);
+
         if ((startIndex + numElements) &gt; internalArray.length) {
+            System.out.println(":::: expanding ...");
             expand();
+            System.out.println(":::: expanded; internalArray.length: " +
+                               internalArray.length);
         }
         internalArray[startIndex + (numElements - 1)] = value;
+        System.out.print(":::: internalArray: ");
+        for (int i = 0; i &lt; startIndex + numElements; i++) {
+            System.out.print(internalArray[i] + ", ");
+        }
+        System.out.println();
         if (shouldContract()) {
+            System.out.println(":::: contracting ...");
             contract();
+            System.out.println(":::: contracted; internalArray.length: " +
+                               internalArray.length);
         }
+        System.out.println();
     }

     /**</code>
</pre>
<p>
  Here is a tiny test program to use <code>ResizableDoubleArray</code>.
</p>
<pre>
<code>import org.apache.commons.math.util.ResizableDoubleArray;

public class RDAContractExpand
{
    public static void main(String[] args)
    {
        ResizableDoubleArray rda = new ResizableDoubleArray(10);
        for (int i = 0; i &lt; 10; i++)
            rda.addElement(i);
    }
}</code>
</pre>
<p>
  Here is the output of the above program:
</p>
<pre>
<samp>:::: initialCapacity: 10
:::: expansionMode: MULTIPLICATIVE_MODE
:::: expansionFactor: 2.0
:::: contractionCriteria: 2.5

:::: addElement(0.0)
:::: startIndex: 0
:::: internalArray.length: 10
:::: numElements incremented to: 1
:::: internalArray: 0.0,
:::: contracting ...
:::: contracted; internalArray.length: 2

:::: addElement(1.0)
:::: startIndex: 0
:::: internalArray.length: 2
:::: numElements incremented to: 2
:::: internalArray: 0.0, 1.0,

:::: addElement(2.0)
:::: startIndex: 0
:::: internalArray.length: 2
:::: numElements incremented to: 3
:::: expanding ...
:::: expanded; internalArray.length: 4
:::: internalArray: 0.0, 1.0, 2.0,

:::: addElement(3.0)
:::: startIndex: 0
:::: internalArray.length: 4
:::: numElements incremented to: 4
:::: internalArray: 0.0, 1.0, 2.0, 3.0,

:::: addElement(4.0)
:::: startIndex: 0
:::: internalArray.length: 4
:::: numElements incremented to: 5
:::: expanding ...
:::: expanded; internalArray.length: 8
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0,

:::: addElement(5.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 6
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0,

:::: addElement(6.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 7
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0,

:::: addElement(7.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 8
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,

:::: addElement(8.0)
:::: startIndex: 0
:::: internalArray.length: 8
:::: numElements incremented to: 9
:::: expanding ...
:::: expanded; internalArray.length: 16
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,

:::: addElement(9.0)
:::: startIndex: 0
:::: internalArray.length: 16
:::: numElements incremented to: 10
:::: internalArray: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,</samp>
</pre>
<!-- ### -->
<p>
  <a href="https://susam.net/resizabledoublearray-contract-and-expand.html">Read on website</a> |
  <a href="https://susam.net/tag/java.html">#java</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>QuickQWERTY 0.2.0</title>
<link>https://susam.net/code/news/quickqwerty/0.2.0.html</link>
<guid isPermaLink="false">qqztz</guid>
<pubDate>Sun, 07 Mar 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Version 0.2.0 of QuickQWERTY is now available.  The number row has
  been adjusted so that keys <code>1</code> to
  <code>5</code> are now typed with the left hand and keys
  <code>6</code> to <code>0</code> with the right hand.  In addition,
  the minimum speed requirement for moving to the next lesson has been
  removed, giving learners greater flexibility in their practice.
</p>
<p>
  These changes make QuickQWERTY more consistent with standard typing
  conventions and more adaptable to different learning speeds.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/quickqwerty/0.2.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a>
</p>
]]>
</description>
</item>
<item>
<title>QuickQWERTY 0.1.0</title>
<link>https://susam.net/code/news/quickqwerty/0.1.0.html</link>
<guid isPermaLink="false">qqzoz</guid>
<pubDate>Sat, 09 May 2009 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Version 0.1.0 of QuickQWERTY, a touch typing tutor that runs in the
  web browser, is now available.  This is the first release with the
  complete set of 21 units with a total of 101 lessons.
</p>
<p>
  The lesson progression has also been improved.  A new lesson is now
  suggested only when the current one is completed at a speed of at
  least 50 characters per minute.
</p>
<p>
  This release is available under the terms of the GNU General Public
  License, version 3.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/quickqwerty/0.1.0.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a>
</p>
]]>
</description>
</item>
<item>
<title>QuickQWERTY 0.0.6</title>
<link>https://susam.net/code/news/quickqwerty/0.0.6.html</link>
<guid isPermaLink="false">qqzzs</guid>
<pubDate>Sun, 21 Dec 2008 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Version 0.0.6 of QuickQWERTY, a touch typing tutor that runs in the
  web browser, is now available.  This update focuses on improving
  compatibility with Internet Explorer.
</p>
<p>
  In this release, trailing commas were removed from
  <code>db.js</code>, as they caused errors in Internet Explorer 6 and
  7.  An issue was also fixed that led to an extra unit appearing in
  the unit list when the tutor was used in Internet Explorer.
</p>
<p>
  With these fixes, QuickQWERTY should now run more smoothly across
  different browsers.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/quickqwerty/0.0.6.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a>
</p>
]]>
</description>
</item>
<item>
<title>QuickQWERTY 0.0.5</title>
<link>https://susam.net/code/news/quickqwerty/0.0.5.html</link>
<guid isPermaLink="false">qqzzf</guid>
<pubDate>Sat, 22 Nov 2008 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  An initial draft of QuickQWERTY, a touch typing tutor that runs in
  the web browser, is now available on SourceForge at
  <a href="https://sourceforge.net/projects/quickqwerty/">sourceforge.net/projects/quickqwerty/</a>.
  This release includes 15 units with a total of 73 typing lessons
  designed for QWERTY keyboards.
</p>
<p>
  This draft is version 0.5.0 of the tutor.  As the version number
  suggests, it is the fifth revision of the software.  The first four
  were internal releases shared only with friends, who tested the
  software for several months.  Their feedback helped uncover and fix
  a number of issues.  Version 0.5.0 marks the first public release of
  QuickQWERTY.
</p>
<p>
  Over the coming months, I plan to expand the software with
  additional typing lessons.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code/news/quickqwerty/0.0.5.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a>
</p>
]]>
</description>
</item>
<item>
<title>From Perl to Pi</title>
<link>https://susam.net/from-perl-to-pi.html</link>
<guid isPermaLink="false">jelap</guid>
<pubDate>Tue, 15 Apr 2008 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I was learning Perl last weekend from the book <em>Learning
  Perl</em>, 3rd Edition by Randal L. Schwartz and Tom Phoenix.  While
  reading the book, I came across these lines:
</p>
<blockquote>
  It's easier to type <code>$pi</code> than \( \pi, \) especially if
  you don't have Unicode.  And it will be easy to maintain the program
  in case the value of \( \pi \) ever changes.<sup>379</sup>
</blockquote>
<p>
  The corresponding footnote mentions:
</p>
<blockquote>
  <em>
    <sup>379</sup> It nearly did change by a legislative act in the
    state of Indiana.
    <a href="http://www.urbanlegends.com/legal/pi_indiana.htm">http://www.urbanlegends.com/legal/pi_indiana.htm</a>
  </em>
</blockquote>
<p>
  I searched the web and found that the original urbanlegends.com
  website is no longer there.  However while searching for it, I came
  across this brilliant piece of humour archived in the article titled
  <a href="https://www.snopes.com/fact-check/alabamas-slice-of-pi/">Alabama's
  Slice of Pi</a> on Snopes.  It is a fictitious report on a state
  legislature redefining the value of \( \pi \) to 3.
</p>
<p>
  The Snopes artile mentions that this piece of humour was first
  posted in a newsgroup.  Then people started circulating it as hoax
  from there.  Here are some of the intriguing and funny bits from it:
</p>
<blockquote>
  Lawson called into question the usefulness of any number that cannot
  be calculated exactly, and suggested that never knowing the exact
  answer could harm students' self-esteem.
</blockquote>
<blockquote>
  Scientists have arbitrarily assumed that space is Euclidean, he
  says.  He points out that a circle drawn on a spherical surface has
  a different value for the ratio of circumfence to diameter.
</blockquote>
<p>
  In fact, with a little geometry we can see that if a
  <a href="https://en.wikipedia.org/wiki/Flatland">flatlander</a>
  living on a globe with diameter \( D \) draws a circle of diameter
  \( d \) assuming that he is on a flat surface, then the ratio of the
  circumference \( c \) to the diameter \( d \) is

  \[
    \frac{c}{d} = \frac{\pi D}{d} \sin{\frac{d}{D}}.
  \]

  Here are a few more excerpts from the Snopes article:
</p>
<blockquote>
  "These nabobs waltzed into the capital with an arrogance that was
  breathtaking," Learned said.  "Their prefatorial deficit resulted in
  a polemical stance at absolute contraposition to the legislature's
  puissance."
</blockquote>
<blockquote>
  One member of the state school board, Lily Ponja, is anxious to get
  the new value of pi into the state's math textbooks, but thinks that
  the old value should be retained as an alternative.  She said, "As
  far as I am concerned, the value of pi is only a theory, and we
  should be open to all interpretations."  She looks forward to
  students having the freedom to decide for themselves what value pi
  should have.
</blockquote>
<p>
  By the way, the real event that the footnote in the
  <em>Learning Perl</em> book mentioned is
  the <a href="http://en.wikipedia.org/wiki/Indiana_Pi_Bill">Indiana
  Pi Bill</a>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/from-perl-to-pi.html">Read on website</a> |
  <a href="https://susam.net/tag/mathematics.html">#mathematics</a> |
  <a href="https://susam.net/tag/book.html">#book</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/quote.html">#quote</a>
</p>
]]>
</description>
</item>
<item>
<title>Writing Boot Sector Code</title>
<link>https://susam.net/writing-boot-sector-code.html</link>
<guid isPermaLink="false">qtplr</guid>
<pubDate>Mon, 19 Nov 2007 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="introduction">Introduction<a href="#introduction"></a></h2>
<p>
  In this article, we discuss how to write our own
  <code>"hello, world"</code> program into the boot sector.  At the
  time of this writing, most such code examples available on the web
  were meant for the Netwide Assembler (NASM).  Very little material
  was available that could be tried with the readily available GNU
  tools like the GNU assembler (as) and the GNU linker (ld).  This
  article is an effort to fill this gap.
</p>
<h2 id="boot-sector">Boot Sector<a href="#boot-sector"></a></h2>
<p>
  When the computer starts, the processor starts executing
  instructions at the memory address 0xffff:0x0000 (CS:IP).  This is
  an address in the BIOS ROM.  The machine instructions at this
  address begins the boot sequence.  In practice, this memory address
  contains a <code>JMP</code> instruction to another address,
  typically 0xf000:0xe05b.  This latter address contains the code to
  perform power-on self test (POST), perform several initialisations,
  find the boot device, load the code from the boot sector into memory
  and execute it.  From here, the code in the boot sector takes
  control.  In IBM-compatible PCs, the boot sector is the first sector
  of a data storage device.  This is 512 bytes in length.  The
  following table shows what the boot sector contains.
</p>
<table class="grid center textcenter">
  <tr>
    <th colspan="2">Address</th>
    <th rowspan="2">Description</th>
    <th rowspan="2">Size in bytes</th>
  </tr>
  <tr>
    <th>Hex</th><th>Dec</th>
  </tr>
  <tr>
    <td>000</td><td>0</td><td>Code</td><td>440</td>
  </tr>
  <tr>
    <td>1b8</td><td>440</td><td>Optional disk signature</td><td>4</td>
  </tr>
  <tr>
    <td>1bc</td><td>444</td><td>0x0000</td><td>2</td>
  </tr>
  <tr>
    <td>1be</td><td>446</td>
    <td>Four 16-byte entries for primary partitions</td><td>64</td>
  </tr>
  <tr>
    <td>1fe</td><td>510</td><td>0xaa55</td><td>2</td>
  </tr>
</table>
<p>
  This type of boot sector found in IBM-compatible PCs is also known
  as master boot record (MBR).  The next two sections explain how to
  write executable code into the boot sector.  Two programs are
  discussed in the these two sections: one that merely prints a
  character and another that prints a string.
</p>
<p>
  The reader is expected to have a working knowledge of x86 assembly
  language programming using GNU assembler.  The details of assembly
  language won't be discussed here.  Only how to write code for boot
  sector will be discussed.
</p>
<p>
  The code examples were verified by using the following tools while
  writing this article:
</p>
<ol>
  <li>Debian GNU/Linux 4.0 (etch)</li>
  <li>GNU assembler (GNU Binutils for Debian) 2.17</li>
  <li>GNU ld (GNU Binutils for Debian) 2.17</li>
  <li>dd (coreutils) 5.97</li>
  <li>DOSBox 0.65</li>
  <li>QEMU 0.8.2</li>
</ol>
<!--
Version information available here:
http://archive.debian.org/debian/dists/etch/main/binary-i386/Packages.gz
-->
<h2 id="print-character">Print Character<a href="#print-character"></a></h2>
<p>
  The following code prints the character 'A' in yellow on a blue
  background:
</p>
<pre>
<code>.code16
.section .text
.globl _start
_start:
  mov $0xb800, %ax
  mov %ax, %ds
  mov $0x1e41, %ax
  xor %di, %di
  mov %ax, (%di)
idle:
  hlt
  jmp idle</code>
</pre>
<p>
  We save the above code in a file, say <code>a.s</code>, then
  assemble and link this code with the following commands:
</p>
<pre>
<code>as -o a.o a.s
ld --oformat binary -o a.com a.o</code>
</pre>
<p>
  The above commands should generate a 15-byte output file
  named <code>a.com</code>.  The <code>.code16</code> directive in the
  source code tells the assembler that this code is meant for 16-bit
  mode.  The <code>_start</code> label is meant to tell the linker
  that this is the entry point in the program.
</p>
<p>
  The video memory of the VGA is mapped to various segments between
  0xa000 and 0xc000 in the main memory.  The colour text mode is
  mapped to the segment 0xb800.  The first two instructions copy
  0xb800 into the data segment register, so that any data offsets
  specified is an offset in this segment.  Then the ASCII code for the
  character 'A' (i.e. 0x41 or 65) is copied into the first location in
  this segment and the attribute (0x1e) of this character to the
  second location.  The higher nibble (0x1) is the attribute for
  background colour and the lower nibble (0xe) is that of the
  foreground colour.  The highest bit of each nibble is the
  intensifier bit.  Depending on the video mode setup, the highest bit
  may also represent a blinking character.  The other three bits
  represent red, green and blue.  This is represented in a tabular
  form below.
</p>
<table class="grid center textcenter">
  <tr>
    <td colspan="8">Attribute</td>
  </tr>
  <tr>
    <td colspan="4">Background</td>
    <td colspan="4">Foreground</td>
  </tr>
  <tr>
    <td>I</td>
    <td>R</td>
    <td>G</td>
    <td>B</td>
    <td>I</td>
    <td>R</td>
    <td>G</td>
    <td>B</td>
  </tr>
  <tr>
    <td>0</td>
    <td>0</td>
    <td>0</td>
    <td>1</td>
    <td>1</td>
    <td>1</td>
    <td>1</td>
    <td>0</td>
  </tr>
  <tr>
    <td colspan="4">0x1</td>
    <td colspan="4">0xe</td>
  </tr>
</table>
<p>
  We can be see from the table that the background colour is dark blue
  and the foreground colour is bright yellow.  We assemble and link
  the code with the <code>as</code> and <code>ld</code> commands
  mentioned earlier and generate an executable binary consisting of
  machine code.
</p>
<p>
  Before writing the executable binary into the boot sector, we might
  want to verify whether the code works correctly with an emulator.
  DOSBox is a pretty good emulator for this purpose.  It is available
  as the <code>dosbox</code> package in Debian.  Here is one way to
  run the executable binary file using DOSBox:
</p>
<pre><code>dosbox -c cls a.com</code></pre>
<p>
  The letter <code>A</code> printed in yellow on a blue foreground
  should appear in the first column of the first row of the screen.
</p>
<p>
  In the <code>ld</code> command earlier to generate the executable
  binary, we used the extension name <code>com</code> for the binary
  file to make DOSBox believe that it is a DOS COM file, i.e. merely
  machine code and data with no headers.  In fact, the <code>--oformat
  binary</code> option in the <code>ld</code> command ensures that the
  output file contains only machine code.  This is why we are able to
  run the binary with DOSBox for verification.  If we do not use
  DOSBox, any extension name or no extension name for the binary would
  suffice.
</p>
<p>
  Once we are satisfied with the output of <code>a.com</code> running
  in DOSBox, we create a boot image file with this command: sector
  with these commands:
</p>
<pre>
<code>cp a.com a.img
echo 55 aa | xxd -r -p | dd seek=510 bs=1 of=hello.img</code>
</pre>
<p>
  This boot image can be tested with DOSBox using the following
  command:
</p>
<pre><code>dosbox -c cls -c 'boot a.img'</code></pre>
<p>
  Yet another way to test this image would be to make QEMU x86 system
  emulator boot using this image.  Here is the command to do so:
</p>
<pre><code>qemu-system-i386 -fda a.img</code></pre>
<p>
  Finally, if you are feeling brave enough, you could write this image
  to the boot sector of an actual physical storage device, such as a
  USB flash drive and then boot your computer with it.  To do so, you
  first need to determine the device file that represents the storage
  device.  There are many ways to do this.  A couple of commands that
  may be helpful to locate the storage device are <code>mount</code>
  and <code>fdisk -l</code>.  Assuming that there is a USB flash drive
  at <code>/dev/sdx</code>, the boot image can be written to its boot
  sector using this command:
</p>
<pre><code>cp a.img /dev/sdx</code></pre>
<p>
  <em>
    CAUTION: You need to be absolutely sure of the device path of the
    device being written to.  The device path <code>/dev/sdx</code> is
    only an example here.  If the boot image is written to the wrong
    device, access to the data on that would be lost.
  </em>
</p>
<p>
  Now booting the computer with this device should show display the
  letter 'A' in yellow on a blue background.
</p>
<h2 id="print-string">Print String<a href="#print-string"></a></h2>
<p>
  The following code prints the string "hello, world" in yellow on a
  blue background:
</p>
<pre>
<code>.code16

.section .text
.globl _start
_start:
  ljmp $0, $start
start:
  mov $0xb800, %ax
  mov %ax, %ds
  xor %di, %di
  mov $message, %si
  mov $0x1e, %ah
print:
  mov %cs:(%si), %al
  mov %ax, (%di)
  inc %si
  inc %di
  inc %di
  cmp $24, %di
  jne print
idle:
  hlt
  jmp idle

.section .data
message:
  .ascii "hello, world"</code>
</pre>
<p>
  The BIOS reads the code from the first sector of the boot device
  into the memory at physical address 0x7c00 and jumps to that
  address.  While most BIOS implementations jump to 0x0000:0x7c00
  (CS:IP) to execute the boot sector code loaded at this address,
  unfortunately there are some BIOS implementations that jump to
  0x07c0:0x0000 instead to reach this address.  We will soon see that
  we are going to use offsets relative to the code segment to locate
  our string and copy it to video memory.  While the physical address
  of the string is always going to be the same regardless of which of
  the two types of BIOS implementations run our program, the offset of
  the string is going to differ based on the BIOS implementation.  If
  the register CS is set to 0 and the register IP is set to 0x7c00
  when the BIOS jumps to our program, the offset of the string is
  going to be greater than 0x7c00.  But if CS and IP are set to 0x07c0
  and 0 respectively, when the BIOS jumps to our program, the offset
  of the string is going to be much smaller.
</p>
<p>
  We cannot know in advance which type of BIOS implementation is going
  to load our program into memory, so we need to prepare our program
  to handle both scenarios: one in which the BIOS executes our program
  by jumping to 0x0000:0x7c00 as well as the other in which the BIOS
  jumps to 0x07c0:0x0000 to execute our program.  We do this by using
  a very popular technique of setting the register CS to 0 ourselves
  by executing a far jump instruction to the code segment 0.  The very
  first instruction in this program that performs <code>ljmp $0,
  $start</code> accomplishes this.
</p>
<p>
  There are two sections in this code.  The text section has the
  executable instructions.  The data section has the string we want to
  print.  The code copies the first byte of the string to the memory
  location 0xb800:0x0000, its attribute to 0xb800:0x0001, the second
  byte of the string to 0xb800:0x0002, its attribute to 0xb800:0x0003
  and so on until it has advanced to 0xb800:0x0018 after having
  written 24 bytes for the 12 characters we need to print.  The
  instruction <code>movb %cs:(%si), %al</code> copies one character
  from the string indexed by the SI register in the code segment into
  the AL register.  We are reading the characters from the code
  segment because we will place the string in the code segment using
  the linker commands discussed later.
</p>
<p>
  However, while testing with DOSBox, things are a little different.
  In DOS, the text section is loaded at an offset 0x0100 in the code
  segment.  This should be specified to the linker while linking so
  that it can correctly resolve the value of the label
  named <code>message</code>.  Therefore we will assemble and link our
  program twice: once for testing it with DOSBox and once again for
  creating the boot image.
</p>
<p>
  To understand the offset at which the data section can be put, it is
  worth looking at how the binary code looks like with a trial linking
  with the following commands:
</p>
<pre>
<code>as -o hello.o hello.s
ld --oformat binary -Ttext 0 -Tdata 40 -o hello.com hello.o
objdump -bbinary -mi8086 -D hello.com
xxd -g1 hello.com</code>
</pre>
<p>
  The <code>-Ttext 0</code> option tells the linker to assume that the
  text section should be loaded at offset 0x0 in the code segment.
  Similarly, the <code>-Tdata 40</code> tells the linker to assume
  that the data section is at offset 0x40.
</p>
<p>
  The <code>objdump</code> command mentioned above disassembles the
  generated binary file.  This shows where the text section and data
  section are placed.
</p>
<pre>
<samp>$ <kbd>objdump -bbinary -mi8086 -D hello.com</kbd>

hello.com:     file format binary


Disassembly of section .data:

00000000 &lt;.data&gt;:
   0:   ea 05 00 00 00          ljmp   $0x0,$0x5
   5:   b8 00 b8                mov    $0xb800,%ax
   8:   8e d8                   mov    %ax,%ds
   a:   31 ff                   xor    %di,%di
   c:   be 40 00                mov    $0x40,%si
   f:   b4 1e                   mov    $0x1e,%ah
  11:   2e 8a 04                mov    %cs:(%si),%al
  14:   89 05                   mov    %ax,(%di)
  16:   46                      inc    %si
  17:   47                      inc    %di
  18:   47                      inc    %di
  19:   83 ff 18                cmp    $0x18,%di
  1c:   75 f3                   jne    0x11
  1e:   f4                      hlt
  1f:   eb fd                   jmp    0x1e
        ...
  3d:   00 00                   add    %al,(%bx,%si)
  3f:   00 68 65                add    %ch,0x65(%bx,%si)
  42:   6c                      insb   (%dx),%es:(%di)
  43:   6c                      insb   (%dx),%es:(%di)
  44:   6f                      outsw  %ds:(%si),(%dx)
  45:   2c 20                   sub    $0x20,%al
  47:   77 6f                   ja     0xb8
  49:   72 6c                   jb     0xb7
  4b:   64                      fs</samp>
</pre>
<p>
  Note that the <samp>...</samp> above indicates zero bytes skipped
  by <code>objdump</code>.  The text section is above these zero bytes
  and the data section is below them.  Let us also see the output of
  the <code>xxd</code> command:
</p>
<pre>
<samp>$ <kbd>xxd -g1 hello.com</kbd>
00000000: ea 05 00 00 00 b8 00 b8 8e d8 31 ff be 40 00 b4  ..........1..@..
00000010: 1e 2e 8a 04 89 05 46 47 47 83 ff 18 75 f3 f4 eb  ......FGG...u...
00000020: fd 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
00000040: 68 65 6c 6c 6f 2c 20 77 6f 72 6c 64              hello, world</samp>
</pre>
<p>
  Both outputs above show that the text section occupies the first
  0x21 bytes (33 bytes).  The data section is 0xc bytes (12 bytes) in
  length.  Let us create a binary where the region from offset 0x0 to
  offset 0x20 contains the text section and the region from offset
  0x21 to offset 0x2c contains the data section.  The total length of
  the binary would then be 0x2d bytes (45 bytes).  We will create a
  new binary as per this plan.
</p>
<p>
  However while creating the new binary, we should remember that DOS
  would load the binary at offset 0x100, so we need to tell the linker
  to assume 0x100 as the offset of the text section and 0x121 as the
  offset of the data section, so that it resolves the value of the
  label named <code>message</code> accordingly.  Moreover while
  testing with DOS, we must remove the far jump instruction at the top
  of our program because DOS does not load our program at physical
  address 0x7c00 of the memory.  We create a new binary in this manner
  and test it with DOSBox with these commands:
</p>
<pre>
<code>grep -v ljmp hello.s &gt; dos-hello.s
as -o hello.o dos-hello.s
ld --oformat binary -Ttext 100 -Tdata 121 -o hello.com hello.o</code>
</pre>
<p>
  Now we can test this program with DOSBox with the following command:
</p>
<pre><code>dosbox -c cls hello.com</code></pre>
<p>
  If everything looks fine, we assemble and link our program once
  again for boot sector and create a boot image with these commands:
</p>
<pre>
<code>as -o hello.o hello.s
ld --oformat binary -Ttext 7c00 -Tdata 7c21 -o hello.img hello.o
echo 55 aa | xxd -r -p | dd seek=510 bs=1 of=hello.img</code>
</pre>
<p>
  Now we can test this image with DOSBox like this:
</p>
<pre><code>dosbox -c cls -c 'boot hello.img'</code></pre>
<p>
  We can also test the image with QEMU with the following command:
</p>
<pre><code>qemu-system-i386 -fda hello.img</code></pre>
<p>
  Finally, this image can be written to the boot sector as follows:
</p>
<pre><code>cp hello.img /dev/sdx</code></pre>
<p>
  <em>
    CAUTION: Again, one needs to be very careful with the commands
    here.  The device path <code>/dev/sdx</code> is only an example.
    This path must be changed to the path of the actual device one
    wants to write the boot sector binary to.
  </em>
</p>
<p>
  Once written to the device successfully, the computer may be booted
  with this device to display the "hello, world" string on the screen.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/writing-boot-sector-code.html">Read on website</a> |
  <a href="https://susam.net/tag/assembly.html">#assembly</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/linux.html">#linux</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Very Remote Debugging</title>
<link>https://susam.net/very-remote-debugging.html</link>
<guid isPermaLink="false">gsoqd</guid>
<pubDate>Mon, 03 Sep 2007 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  There is a wonderful story about a legendary Lisp debugging story in
  the <a href="https://gigamonkeys.com/book/lather-rinse-repeat-a-tour-of-the-repl.html">second
  chapter</a> of the book <em>Practical Common Lisp</em> by Peter
  Seibel.  Quoting the story here:
</p>
<blockquote>
  <p>
    An even more impressive instance of remote debugging occurred on
    NASA's 1998 Deep Space 1 mission.  A half year after the space
    craft launched, a bit of Lisp code was going to control the
    spacecraft for two days while conducting a sequence of
    experiments.  Unfortunately, a subtle race condition in the code
    had escaped detection during ground testing and was already in
    space.  When the bug manifested in the wild--100 million miles
    away from Earth--the team was able to diagnose and fix the running
    code, allowing the experiments to complete.  One of the
    programmers described it as follows:
  </p>
  <blockquote>
    <p>
      Debugging a program running on a $100M piece of hardware that is
      100 million miles away is an interesting experience.  Having a
      read-eval-print loop running on the spacecraft proved invaluable
      in finding and fixing the problem.
    </p>
  </blockquote>
</blockquote>
<p>
  The original source of this story is an article
  called <a href="https://flownet.com/gat/jpl-lisp.html">Lisping at
  JPL</a> written by Ron Garret in 2002.  This story occurs in the
  section called <em>1994-1999 - Remote Agent</em> of the article.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/very-remote-debugging.html">Read on website</a> |
  <a href="https://susam.net/tag/lisp.html">#lisp</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/quote.html">#quote</a>
</p>
]]>
</description>
</item>
<item>
<title>Self-Printing Machine Code</title>
<link>https://susam.net/self-printing-machine-code.html</link>
<guid isPermaLink="false">uabwv</guid>
<pubDate>Thu, 27 Oct 2005 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  The following 12-byte program composed of pure x86 machine code
  writes itself to standard output when executed in a DOS environment:
</p>
<pre><code>fc b1 0c ac 92 b4 02 cd 21 e2 f8 c3</code></pre>
<p>
  We can write these bytes to a file with the .COM extension and
  execute it in DOS.  It runs successfully in MS-DOS 6.22, Windows 98,
  as well as in DOSBox and writes a copy of itself to standard output.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#demo">Demo</a></li>
  <li><a href="#quine-conundrums">Quine Conundrums</a></li>
  <li><a href="#proper-quines">Proper Quines</a></li>
  <li><a href="#a-note-on-dos-services">A Note on DOS Services</a></li>
  <li><a href="#writing-to-video-memory-directly">Writing to Video Memory Directly</a></li>
  <li><a href="#boot-program">Boot Program</a></li>
</ul>
<h2 id="demo">Demo<a href="#demo"></a></h2>
<p>
  On a Unix or Linux system, the following commands demonstrate this
  program with the help of DOSBox:
</p>
<pre>
<code>echo fc b1 0c ac 92 b4 02 cd 21 e2 f8 c3 | xxd -r -p &gt; foo.com
dosbox -c 'MOUNT C .' -c 'C:\FOO &gt; C:\OUT.COM' -c 'EXIT'
diff foo.com OUT.COM</code>
</pre>
<p>
  The <code>diff</code> command should produce no output confirming
  that the output of the program is identical to the program itself.
  On an actual MS-DOS 6.22 system or a Windows 98 system, we can
  demonstrate this program in the following manner:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG</kbd>
-<kbd>E 100 fc b1 0c ac 92 b4 02 cd 21 e2 f8 c3</kbd>
-<kbd>N</kbd> FOO.COM
-<kbd>R CX</kbd>
CX 0000
:<kbd>C</kbd>
-<kbd>W</kbd>
Writing 0000C bytes
-<kbd>Q</kbd>

C:\&gt;<kbd>FOO &gt; OUT.COM</kbd>

C:\&gt;<kbd>FC FOO.COM OUT.COM</kbd>
Comparing files FOO.COM and OUT.COM
FC: no differences encountered</samp>
</pre>
<p>
  In the <code>DEBUG</code> session shown above, we use the debugger
  command <code>E</code> to enter the machine code at offset 0x100 of
  the code segment.  Then we use the <code>N</code> command to name
  the file we want to write this machine code to.  The command <code>R
  CX</code> is used to specify that we want to write 0xC (decimal 12)
  bytes to this file.  The <code>W</code> command writes the 12 bytes
  entered at offset 0x100.  The <code>Q</code> command quits the
  debugger.  Then we run the new <code>FOO.COM</code> program while
  redirecting its output to <code>OUT.COM</code>.  Finally, we use
  the <code>FC</code> command to compare the two files and confirm
  that they are exactly the same.
</p>
<p>
  Let us disasssemble this program now and see what it does.  The
  output below is generated using the Netwide Disassembler (NDISASM),
  a tool that comes with Netwide Assembler (NASM):
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x100 foo.com</kbd>
00000100  FC                cld
00000101  B10C              mov cl,0xc
00000103  AC                lodsb
00000104  92                xchg ax,dx
00000105  B402              mov ah,0x2
00000107  CD21              int 0x21
00000109  E2F8              loop 0x103
0000010B  C3                ret</samp>
</pre>
<p>
  When DOS executes a program in .COM file, it loads the machine code
  in the file at offset 0x100 of the code segment chosen by DOS.  That
  is why we ask the disassembler to assume a load address of 0x100
  with the <code>-o</code> command line option.  The first instruction
  clears the direction flag.  The purpose of this instruction is
  explained later.  The next instruction sets the register CL to 0xc
  (decimal 12).  The register CH is already set to 0 by default when a
  .COM program starts.  Thus setting the register CL to 0xc
  effectively sets the entire register CX to 0xc.  The register CX is
  used as a loop counter for the <code>loop 0x103</code> instruction
  that comes later.  Everytime this loop instruction executes, it
  decrements CX and makes a near jump to offset 0x103 if CX is not 0.
  This results in 12 iterations of the loop.
</p>
<p>
  In each iteration of the loop, the instructions from offset 0x103 to
  offset 0x109 are executed.  The <code>lodsb</code> instruction loads
  a byte from address DS:SI into AL.  When DOS starts executing this
  program, DS and SI are set to CS and 0x100 by default, so at the
  beginning DS:SI points to the first byte of the program.
  The <code>xchg</code> instruction exchanges the values in AX and DX.
  Thus the byte we just loaded into AL ends up in DL.  Then we set AH
  to 2 and generate the software interrupt 0x21 (decimal 33) to write
  the byte in DL to standard output.  This is how each iteration reads
  a byte of this program and writes it to standard output.
</p>
<p>
  The <code>lodsb</code> instruction increments or decrements SI
  depending on the state of the direction flag (DF).  When DF is
  cleared, it increments SI.  If DF is set, it decrements SI.  We use
  the <code>cld</code> instruction at the beginning to clear DF, so
  that in each iteration of the loop, SI moves forward to point to the
  next byte of the program.  This is how the 12 iterations of the loop
  write 12 bytes of the program to standard output.  In many DOS
  environments, the DF flag is already in cleared state when a .COM
  program starts, so the CLD instruction could be omitted in such
  environments.  However, there are some environments where DF may not
  be in cleared state when our program starts, so it is a best
  practice to clear DF before relying on it.
</p>
<p>
  Finally, when the loop terminates, we execute the <code>RET</code>
  instruction to terminate the program.
</p>
<h2 id="quine-conundrums">Quine Conundrums<a href="#quine-conundrums"></a></h2>
<p>
  While reading the description of the self-printing program presented
  earlier, one might wonder if it is a quine.  While there is no
  standardised definition of the term <em>quine</em>, it is generally
  accepted that a quine is a computer program that takes no input and
  produces an exact copy of its own source code as its output.  Since
  a quine cannot take any input, tricks involving reading its own
  source code or evaluating itself are ruled out.
</p>
<p>
  For example, this shell script is a valid quine:
</p>
<pre><code>s='s=\47%s\47;printf "$s" "$s"\n';printf "$s" "$s"</code></pre>
<p>
  However, the following shell script is not considered a proper
  quine:
</p>
<pre><code>cat $0</code></pre>
<p>
  The shell script above reads its own source code which is considered
  cheating.  Improper quines like this are often called <em>cheating
  quines</em>.
</p>
<p>
  Is our 12-byte x86 program a quine?  It turns out that we have a
  conundrum.  There is no notion of source code for our program.
  There would have been one if we had written out the source code of
  this program in assembly language.  In such a case we would first
  need to choose an assembler and a proper quine would need to produce
  an exact copy of the assembly language source code (not the machine
  code bytes) for the chosen assembler.  But we are not doing that
  here.  We want the machine code to produce an exact copy of itself.
  There is no source code involved.  We only have machine code.  So we
  could argue that the whole notion of machine code quine is nonsense.
  No machine code quine can exist because there is no source code to
  produce as output.
</p>
<p>
  However, we could also argue that the machine code is the input for
  the CPU that the CPU fetches, decodes and converts to a sequence of
  state changes in the CPU.  If we define a machine code quine to be a
  machine code program that writes its own bytes, then we could say
  that we have a machine code quine here.
</p>
<p>
  Let us now entertain the thought that our 12-byte program is indeed
  a machine code quine.  Now we have a new conundrum.  Is it a proper
  quine?  This program reads its own bytes from memory and writes
  them.  Does that make it a cheating quine?  What would a proper
  quine written in pure machine code even look like?  If we look at
  the shell script quine above, we see that it contains parts of the
  executable part of the script code embedded in a string as data.
  Then we format the string cleverly to produce a new string that
  looks exactly like the entire shell script.  It is a common pattern
  followed in many quines.  The quine does not read its own code but
  it reads some data defined by the code and formats that data to look
  like its own code.  However, in pure machine code like this the
  lines between data and code are blurred.  Even if we try to keep the
  bytes we want to read at a separate place in the memory and treat it
  like data, they would look exactly like machine instructions, so one
  might wonder if there is any point in trying to make a machine quine
  that does not read its own bytes.  Nevertheless the next section
  shows how to accomplish this.
</p>
<h2 id="proper-quines">Proper Quines<a href="#proper-quines"></a></h2>
<p>
  If the thought of a machine code quine program reading its own bytes
  from the memory makes you uncomfortable, here is an adapation of the
  previous program that keeps the machine instructions to be executed
  separate from the data bytes to be read by the program.
</p>
<pre>
<code>fc b3 02 b1 14 be 14 01 ac 92 b4 02 cd 21 e2 f8 4b 75 f0 c3
fc b3 02 b1 14 be 14 01 ac 92 b4 02 cd 21 e2 f8 4b 75 f0 c3</code>
</pre>
<p>
  Here is how we can demonstrate this 40-byte program:
</p>
<pre>
<code>echo fc b3 02 b1 14 be 14 01 ac 92 b4 02 cd 21 e2 f8 4b 75 f0 c3 | xxd -r -p &gt; foo.com
echo fc b3 02 b1 14 be 14 01 ac 92 b4 02 cd 21 e2 f8 4b 75 f0 c3 | xxd -r -p &gt;&gt; foo.com
dosbox -c 'MOUNT C .' -c 'C:\FOO &gt; C:\OUT.COM' -c 'EXIT'
diff foo.com OUT.COM</code>
</pre>
<p>
  Here is the disassembly:
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x100 foo.com</kbd>
00000100  FC                cld
00000101  B302              mov bl,0x2
00000103  B114              mov cl,0x14
00000105  BE1401            mov si,0x114
00000108  AC                lodsb
00000109  92                xchg ax,dx
0000010A  B402              mov ah,0x2
0000010C  CD21              int 0x21
0000010E  E2F8              loop 0x108
00000110  4B                dec bx
00000111  75F0              jnz 0x103
00000113  C3                ret
00000114  FC                cld
00000115  B302              mov bl,0x2
00000117  B114              mov cl,0x14
00000119  BE1401            mov si,0x114
0000011C  AC                lodsb
0000011D  92                xchg ax,dx
0000011E  B402              mov ah,0x2
00000120  CD21              int 0x21
00000122  E2F8              loop 0x11c
00000124  4B                dec bx
00000125  75F0              jnz 0x117
00000127  C3                ret</samp>
</pre>
<p>
  The first 20 bytes is the executable part of the program.  The next
  20 bytes is the data read by the program.  The executable bytes are
  identical to the data bytes.  The executable part of the program has
  an outer loop that iterates twice.  In each iteration, it reads the
  data bytes and writes them to standard output.  Therefore, in two
  iterations of the outer loop, it writes the data bytes twice.  In
  this manner, the output is identical to the program itself.
</p>
<p>
  Here is another simpler 32-byte quine based on this approach:
</p>
<pre>
<code>b8 23 09 fe c0 a2 20 01 ba 10 01 cd 21 cd 21 c3
b8 23 09 fe c0 a2 20 01 ba 10 01 cd 21 cd 21 c3</code>
</pre>
<p>
  Here are the commands to demostrate this quine:
</p>
<pre>
<code>echo b8 23 09 fe c0 a2 20 01 ba 10 01 cd 21 cd 21 c3 | xxd -r -p &gt; foo.com
echo b8 23 09 fe c0 a2 20 01 ba 10 01 cd 21 cd 21 c3 | xxd -r -p &gt;&gt; foo.com
dosbox -c 'MOUNT C .' -c 'C:\FOO &gt; C:\OUT.COM' -c 'EXIT'
diff foo.com OUT.COM</code>
</pre>
<p>
  Here is the disassembly:
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x100 foo.com</kbd>
00000100  B82309            mov ax,0x923
00000103  FEC0              inc al
00000105  A22001            mov [0x120],al
00000108  BA1001            mov dx,0x110
0000010B  CD21              int 0x21
0000010D  CD21              int 0x21
0000010F  C3                ret
00000110  B82309            mov ax,0x923
00000113  FEC0              inc al
00000115  A22001            mov [0x120],al
00000118  BA1001            mov dx,0x110
0000011B  CD21              int 0x21
0000011D  CD21              int 0x21
0000011F  C3                ret</samp>
</pre>
<p>
  This example too has two parts.  The first half has the executable
  bytes and the second half has the data bytes.  Both parts are
  identical.  This example sets AH to 9 in the first instruction and
  then later uses <code>int 0x21</code> to invoke the DOS service that
  prints a dollar-terminated string beginning at the address specifed
  in DS:DX.  When a .COM program starts, DS already points to the
  current code segment, so we don't have to set it explicitly.  The
  dollar symbol has an ASCII code of 0x24 (decimal 36).  We need to be
  careful about not having this value anywhere within the the data
  bytes or this DOS function would prematurely stop printing our data
  bytes as soon as it encounters this value.  That is why we set AL to
  0x23 in the first instruction, then increment it to 0x24 in the
  second instruction and then copy this value to the end of the data
  bytes in the third instruction.  Finally, we execute <code>int
  0x21</code> twice to write the data bytes twice to standard output,
  so that the output matches the program itself.
</p>
<p>
  While both these programs take care not to read the same memory
  region that is being executed by the CPU, the data bytes they read
  look exactly like the executable bytes.  This is what I meant when I
  mentioned earlier that the lines between code and data are blurred
  in an exercise like this.  This is why I don't really see a point in
  keeping the executable bytes separate from the data bytes while
  writing machine code quines.
</p>
<h2 id="a-note-on-dos-services">A Note on DOS Services<a href="#a-note-on-dos-services"></a></h2>
<p>
  The self-printing programs presented above use <code>int 0x21</code>
  which offers DOS services that support various input/output
  functions.  In the first two programs, we selected the function to
  write a character to standard output by setting AH to 2 before
  invoking this software interrupt.  In the next program, we selected
  the function to write a dollar-terminated string to standard output
  by setting AH to 9.
</p>
<p>
  The <code>ret</code> instruction in the end too relies on DOS
  services.  When a .COM program starts, the register SP contains
  0xfffe.  The stack memory locations at offset 0xfffe and 0xffff
  contain 0x00 and 0x00 respectively.  Further, the memory address at
  offset 0x0000 contains the instruction <code>int 0x20</code> which
  is a DOS service that terminates the program.  As a result,
  executing the <code>ret</code> instruction pops 0x0000 off the stack
  at 0xfffe and loads it into IP.  This results in the
  instruction <code>int 0x20</code> at offset 0x0000 getting executed.
  This instruction terminates the program and returns to DOS.
</p>
<p>
  Relying on DOS services gives us a comfortable environment to work
  with.  In particular, DOS implements the notion of <em>standard
  output</em> which lets us redirect standard output to a file.  This
  lets us conveniently compare the original program file and the
  output file with the <code>FC</code> command and confirm that they
  are identical.
</p>
<p>
  But one might wonder if we could avoid relying on DOS services
  completely and still write a program that prints its own bytes to
  screen.  We definitely can.  We could write directly to video memory
  at address 0xb800:0x0000 and show the bytes of the program on
  screen.  We could also forgo DOS completely and let BIOS load our
  program from the boot sector and execute it.  The next two sections
  discuss these things.
</p>
<h2 id="writing-to-video-memory-directly">Writing to Video Memory Directly<a href="#writing-to-video-memory-directly"></a></h2>
<p>
  Here is an example of an 18-byte self-printing program that writes
  directly to the video memory at address 0xb800:0x0000.
</p>
<pre><code>fc b4 b8 8e c0 31 ff b1 12 b4 0a ac ab e2 fc f4 eb fd</code></pre>
<p>
  Here are the commands to create and run this program:
</p>
<pre>
<code>echo fc b4 b8 8e c0 31 ff b1 12 b4 0a ac ab e2 fc f4 eb fd | xxd -r -p &gt; foo.com
dosbox foo.com</code>
</pre>
<p>
  With the default code page active, i.e. with code page 437 active,
  the program should display an output that looks approximately like
  the following and halt:
</p>
<pre><samp>&#x207F;&#x2524;&#x2555;&#xC4;&#x2514;&#x31;&#xA0;&#x2592;&#x2195;&#x2524;&#x25D9;&#xBC;&#xBD;&#x393;&#x207F;&#x2320;&#x3B4;&#xB2;</samp></pre>
<p>
  Now of course this type of output looks gibberish but there is a
  quick and dirty way to confirm that this output indeed represents
  the bytes of our program.  We can use the <code>TYPE</code> command
  of DOS to print the program and check if the symbols that appear in
  its output seem consistent with the output above.  Here is an
  example:
</p>
<pre>
<samp>C:\&gt;<kbd>TYPE FOO.COM</kbd>
&#x207F;&#x2524;&#x2555;&#xC4;&#x2514;&#x31;&#xA0;&#x2592;&#x2195;&#x2524;
          &#xBC;&#xBD;&#x393;&#x207F;&#x2320;&#x3B4;&#xB2;
C:\&gt;</samp>
</pre>
<p>
  This output looks very similar to the previous one except that the
  byte value 0x0a is rendered as a line break in this output whereas
  in the previous output this byte value is represented as a circle in
  a box.  This method of visually inspecting the output would not have
  worked very well if there were any control characters such as
  backspace or carriage return that result in characters being erased
  in the displayed output.
</p>
<p>
  A proper way to verify that the output of the program represents the
  bytes of the program would be to take each symbol from the output of
  the program, then look it up in a chart for code page 437 and
  confirm that the byte value of each symbol matches each byte value
  that makes the program.  Here is one such chart that approximates
  the symbols in code page 437 with Unicode
  symbols: <a href="code/cp437/cp437.html">cp437.html</a>.
</p>
<p>
  Here is the disassembly of the above program:
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x100 foo.com</kbd>
00000100  FC                cld
00000101  B4B8              mov ah,0xb8
00000103  8EC0              mov es,ax
00000105  31FF              xor di,di
00000107  B112              mov cl,0x12
00000109  B40A              mov ah,0xa
0000010B  AC                lodsb
0000010C  AB                stosw
0000010D  E2FC              loop 0x10b
0000010F  F4                hlt
00000110  EBFD              jmp short 0x10f</samp>
</pre>
<p>
  This program sets ES to 0xb800 and DI to 0.  Thus ES:DI points to
  the video memory at address 0xb800:0x0000.  DS:SI points to the
  first instruction of this program by default.  Further AH is set to
  0xa.  This is used to specify the colour attribute of the text to be
  displayed on screen.  Each iteration of the loop in this program
  loads a byte of the program and writes it along with the colour
  attribute to video memory.  The <code>lodsb</code> instruction loads
  a byte of the program from the memory address specified by DS:SI
  into AL and increments SI by 1.  AH is already set to 0xa.  The
  value 0xa (binary 00001010) here specifies black as the background
  colour and bright green as the foreground colour.
  The <code>stosw</code> instruction stores a word from AX to the
  memory address specified by ES:DI and increments DI by 2.  In this
  manner, the byte in AL and its colour attribute in AH gets copied to
  the video memory.
</p>
<p>
  Once again, if you are not happy about the program reading its own
  executable bytes, we can keep the bytes we read separate from the
  bytes the CPU executes.  Here is a 54-byte program that does this:
</p>
<pre>
<code>fc b3 02 b4 b8 8e c0 31 ff be 1b 01 b9 1b 00 b4
0a ac ab e2 fc 4b 75 f1 f4 eb fd fc b3 02 b4 b8
8e c0 31 ff be 1b 01 b9 1b 00 b4 0a ac ab e2 fc
4b 75 f1 f4 eb fd</code>
</pre>
<p>
  Here is how we can create and run this program:
</p>
<pre>
<code>echo fc b3 02 b4 b8 8e c0 31 ff be 1b 01 b9 1b 00 b4 | xxd -r -p &gt; foo.com
echo 0a ac ab e2 fc 4b 75 f1 f4 eb fd fc b3 02 b4 b8 | xxd -r -p &gt;&gt; foo.com
echo 8e c0 31 ff be 1b 01 b9 1b 00 b4 0a ac ab e2 fc | xxd -r -p &gt;&gt; foo.com
echo 4b 75 f1 f4 eb fd | xxd -r -p &gt;&gt; foo.com
dosbox foo.com</code>
</pre>
<p>
  With code page 437 active, the output should look approximately like
  this:
</p>
<pre><samp>&#x207F;&#x2502;&#x263B;&#x2524;&#x2555;&#xC4;&#x2514;&#x31;&#xA0;&#x255B;&#x2190;&#x263A;&#x2563;&#x2190;&#x20;&#x2524;&#x25D9;&#xBC;&#xBD;&#x393;&#x207F;&#x4B;&#x75;&#xB1;&#x2320;&#x3B4;&#xB2;&#x207F;&#x2502;&#x263B;&#x2524;&#x2555;&#xC4;&#x2514;&#x31;&#xA0;&#x255B;&#x2190;&#x263A;&#x2563;&#x2190;&#x20;&#x2524;&#x25D9;&#xBC;&#xBD;&#x393;&#x207F;&#x4B;&#x75;&#xB1;&#x2320;&#x3B4;&#xB2;</samp></pre>
<p>
  We can clearly see in this output that the first 27 bytes of output
  are identical to the next 27 bytes of the output.  Like the proper
  quines discussed earlier, this one too has two halves that are
  identical to each other.  The executable code in the first half
  reads the data bytes from the second half and prints the data bytes
  twice so that the output bytes is an exact copy of all 54 bytes in
  the program.  Here is the disassembly:
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x100 foo.com</kbd>
00000100  FC                cld
00000101  B302              mov bl,0x2
00000103  B4B8              mov ah,0xb8
00000105  8EC0              mov es,ax
00000107  31FF              xor di,di
00000109  BE1B01            mov si,0x11b
0000010C  B91B00            mov cx,0x1b
0000010F  B40A              mov ah,0xa
00000111  AC                lodsb
00000112  AB                stosw
00000113  E2FC              loop 0x111
00000115  4B                dec bx
00000116  75F1              jnz 0x109
00000118  F4                hlt
00000119  EBFD              jmp short 0x118
0000011B  FC                cld
0000011C  B302              mov bl,0x2
0000011E  B4B8              mov ah,0xb8
00000120  8EC0              mov es,ax
00000122  31FF              xor di,di
00000124  BE1B01            mov si,0x11b
00000127  B91B00            mov cx,0x1b
0000012A  B40A              mov ah,0xa
0000012C  AC                lodsb
0000012D  AB                stosw
0000012E  E2FC              loop 0x12c
00000130  4B                dec bx
00000131  75F1              jnz 0x124
00000133  F4                hlt
00000134  EBFD              jmp short 0x133</samp>
</pre>
<p>
  This disassembly is rather long but we can clearly see that the
  bytes from offset 0x100 to offset 0x11a are identical to the bytes
  from offset 0x11b to 0x135.  These are the bytes we see in the
  output of the program too.
</p>
<h2 id="boot-program">Boot Program<a href="#boot-program"></a></h2>
<p>
  The 32-byte program below writes itself to video memory when
  executed from the boot sector:
</p>
<pre><code>ea 05 7c 00 00 fc b8 00 b8 8e c0 8c c8 8e d8 31
ff be 00 7c b9 20 00 b4 0a ac ab e2 fc f4 eb fd</code></pre>
<p>
  We can create a boot image that contains these bytes, write it to
  the boot sector of a drive and boot an IBM PC compatible computer
  with it.  On booting, this program prints its own bytes on the
  screen.
</p>
<p>
  On a Unix or Linux system, the following commands can be used to
  create a boot image with the above program:
</p>
<pre>
<code>echo ea 05 7c 00 00 fc b8 00 b8 8e c0 8c c8 8e d8 31 | xxd -r -p &gt; boot.img
echo ff be 00 7c b9 20 00 b4 0a ac ab e2 fc f4 eb fd | xxd -r -p &gt;&gt; boot.img
echo 55 aa | xxd -r -p | dd seek=510 bs=1 of=boot.img</code>
</pre>
<p>
  Now we can test this boot image using DOSBox with the following
  command:
</p>
<pre><code>dosbox -c cls -c 'boot boot.img'</code></pre>
<p>
  We can also test this image using QEMU x86 system emulator as
  follows:
</p>
<pre><code>qemu-system-i386 -fda boot.img</code></pre>
<p>
  We could also write this image to the boot sector of an actual
  physical storage device, such as a USB flash drive and then boot the
  computer with it.  Here is an example command that writes the boot
  image to the drive represented by the device
  path <code>/dev/sdx</code>.
</p>
<pre><code>cp a.img /dev/sdx</code></pre>
<p>
  <em>
    CAUTION: You need to be absolutely sure of the device path of the
    device being written to.  The device path <code>/dev/sdx</code> is
    only an example here.  If the boot image is written to the wrong
    device, access to the data on that would be lost.
  </em>
</p>
<p>
  On testing this boot image with an emulator or a real computer, the
  output should look approximately like this:
</p>
<pre><samp>&#x3A9;&#x2663;&#x7C;&#x20;&#x20;&#x207F;&#x2555;&#x20;&#x2555;&#xC4;&#x2514;&#xEE;&#x255A;&#xC4;&#x256A;&#x31;&#xA0;&#x255B;&#x20;&#x7C;&#x2563;&#x20;&#x20;&#x2524;&#x25D9;&#xBC;&#xBD;&#x393;&#x207F;&#x2320;&#x3B4;&#xB2;</samp></pre>
<p>
  This looks like gibberish, however every symbol in the above output
  corresponds to a byte of the program mentioned earlier.  For
  example, the first symbol (omega) represents the byte value 0xea,
  the second symbol (club) represents the byte value 0x05 and so on.
  The chart at <a href="code/cp437/cp437.html">cp437.html</a> can be
  used to confirm that every symbol in the output indeed represents
  every byte of the program.
</p>
<p>
  Here is the disassembly of the program:
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x7c00 boot.img</kbd>
00007C00  EA057C0000        jmp 0x0:0x7c05
00007C05  FC                cld
00007C06  B800B8            mov ax,0xb800
00007C09  8EC0              mov es,ax
00007C0B  8CC8              mov ax,cs
00007C0D  8ED8              mov ds,ax
00007C0F  31FF              xor di,di
00007C11  BE007C            mov si,0x7c00
00007C14  B92000            mov cx,0x20
00007C17  B40A              mov ah,0xa
00007C19  AC                lodsb
00007C1A  AB                stosw
00007C1B  E2FC              loop 0x7c19
00007C1D  F4                hlt
00007C1E  EBFD              jmp short 0x7c1d
00007C20  0000              add [bx+si],al
00007C22  0000              add [bx+si],al
...</samp>
</pre>
<p>
  The ellipsis in the end represents the remainder of the bytes that
  contains zeroes and the boot sector magic bytes 0x55 and 0xaa in the
  end.  They have been omitted here for the sake of brevity.
</p>
<p>
  When a computer boots, the BIOS reads the boot sector code from the
  first sector of the boot device into the memory at physical address
  0x7c00 and jumps to this address.  Most BIOS implementations jump to
  0x0000:0x7c00 but there are some implementations that jump to
  0x07c0:0x0000 instead.  Both these jumps are jumps to the same
  physical address 0x7c00 but this difference poses a problem for us
  because the offsets in our program depend on which jump the BIOS
  executed.  In order to ensure that our program can run with both
  types of BIOS implementations, we use a popular trick of having the
  first instruction of our program execute a jump to address
  0x0000:0x7c05 in order to reach the second instruction.  This sets
  the register CS to 0 and IP to 0x7c05 and we don't have to worry
  about the differences between BIOS implementations anymore.  We can
  now pretend as if a BIOS implementation that jumps to 0x0000:0x7c00
  is going to load our program.
</p>
<p>
  The remainder of the program is similar to the one in the previous
  section.  However, there are some small but important differences.
  While the DOS environment guarantees that AH and CH are initialised
  to 0 when a .COM program starts, the BIOS offers no such guarantee
  while loading and executing a boot program.  This is why we use the
  registers AX and CX (as opposed to only AH and CL) in
  the <code>mov</code> instructions to initialise them.  Similarly,
  while DOS initialises SI to 0x100 when a .COM program starts, for a
  boot program, we set the register SI ourselves.
</p>
<p>
  If you feel uncomfortable about calling the above program a quine
  because it reads its own bytes from the memory, we could have the
  program read the bytes it needs to print from a separate place in
  memory.  We do not execute these bytes.  We only read them and copy
  them to video memory.  The following 76-byte program does this:
</p>
<pre>
<code>ea 05 7c 00 00 fc bb 02 00 b8 00 b8 8e c0 8c c8
8e d8 31 ff be 26 7c b9 26 00 b4 0a ac ab e2 fc
4b 75 f1 f4 eb fd ea 05 7c 00 00 fc bb 02 00 b8
00 b8 8e c0 8c c8 8e d8 31 ff be 26 7c b9 26 00
b4 0a ac ab e2 fc 4b 75 f1 f4 eb fd</code>
</pre>
<p>
  Here is how we can create a boot image with this:
</p>
<pre>
<code>echo ea 05 7c 00 00 fc bb 02 00 b8 00 b8 8e c0 8c c8 | xxd -r -p &gt; boot.img
echo 8e d8 31 ff be 26 7c b9 26 00 b4 0a ac ab e2 fc | xxd -r -p &gt;&gt; boot.img
echo 4b 75 f1 f4 eb fd ea 05 7c 00 00 fc bb 02 00 b8 | xxd -r -p &gt;&gt; boot.img
echo 00 b8 8e c0 8c c8 8e d8 31 ff be 26 7c b9 26 00 | xxd -r -p &gt;&gt; boot.img
echo b4 0a ac ab e2 fc 4b 75 f1 f4 eb fd | xxd -r -p &gt;&gt; boot.img
echo 55 aa | xxd -r -p | dd seek=510 bs=1 of=boot.img</code>
</pre>
<p>
  Here are the commands to test this boot image:
</p>
<pre><code>dosbox -c cls -c 'boot boot.img'
qemu-system-i386 -fda boot.img</code></pre>
<p>
  The output should look like this:
</p>
<pre><samp>&#x3A9;&#x2663;&#x7C;&#x20;&#x20;&#x207F;&#x2557;&#x263B;&#x20;&#x2555;&#x20;&#x2555;&#xC4;&#x2514;&#xEE;&#x255A;&#xC4;&#x256A;&#x31;&#xA0;&#x255B;&#x26;&#x7C;&#x2563;&#x26;&#x20;&#x2524;&#x25D9;&#xBC;&#xBD;&#x393;&#x207F;&#x4B;&#x75;&#xB1;&#x2320;&#x3B4;&#xB2;&#x3A9;&#x2663;&#x7C;&#x20;&#x20;&#x207F;&#x2557;&#x263B;&#x20;&#x2555;&#x20;&#x2555;&#xC4;&#x2514;&#xEE;&#x255A;&#xC4;&#x256A;&#x31;&#xA0;&#x255B;&#x26;&#x7C;&#x2563;&#x26;&#x20;&#x2524;&#x25D9;&#xBC;&#xBD;&#x393;&#x207F;&#x4B;&#x75;&#xB1;&#x2320;&#x3B4;&#xB2;</samp></pre>
<p>
  Here is the disassembly of this program:
</p>
<pre>
<samp>$ <kbd>ndisasm -o 0x7c00 boot.img</kbd>
00007C00  EA057C0000        jmp 0x0:0x7c05
00007C05  FC                cld
00007C06  BB0200            mov bx,0x2
00007C09  B800B8            mov ax,0xb800
00007C0C  8EC0              mov es,ax
00007C0E  8CC8              mov ax,cs
00007C10  8ED8              mov ds,ax
00007C12  31FF              xor di,di
00007C14  BE267C            mov si,0x7c26
00007C17  B92600            mov cx,0x26
00007C1A  B40A              mov ah,0xa
00007C1C  AC                lodsb
00007C1D  AB                stosw
00007C1E  E2FC              loop 0x7c1c
00007C20  4B                dec bx
00007C21  75F1              jnz 0x7c14
00007C23  F4                hlt
00007C24  EBFD              jmp short 0x7c23
00007C26  EA057C0000        jmp 0x0:0x7c05
00007C2B  FC                cld
00007C2C  BB0200            mov bx,0x2
00007C2F  B800B8            mov ax,0xb800
00007C32  8EC0              mov es,ax
00007C34  8CC8              mov ax,cs
00007C36  8ED8              mov ds,ax
00007C38  31FF              xor di,di
00007C3A  BE267C            mov si,0x7c26
00007C3D  B92600            mov cx,0x26
00007C40  B40A              mov ah,0xa
00007C42  AC                lodsb
00007C43  AB                stosw
00007C44  E2FC              loop 0x7c42
00007C46  4B                dec bx
00007C47  75F1              jnz 0x7c3a
00007C49  F4                hlt
00007C4A  EBFD              jmp short 0x7c49
00007C4C  0000              add [bx+si],al
00007C4E  0000              add [bx+si],al
...</samp></pre>
<p>
  This program has two identical halves.  The first half from offset
  0x7c00 to offset 0x7c25 are executable bytes.  The second half from
  offset 0x7c26 to 0x7c4b are the data bytes read by the executable
  bytes.  The executable part of the code has an outer loop that uses
  the register BX as the counter variable.  It sets BX to 2 so that
  the outer loop iterates twice.  In each iteration, it reads data
  bytes from the second half of the program and prints them.  The code
  to read bytes and print them is very similar to our earlier program.
  Since the data bytes in the second half are identical to the
  executable bytes in the first half, printing the data bytes twice
  amounts to printing all bytes of the program.
</p>
<p>
  While this program does avoid reading the bytes that the CPU
  executes, the data bytes look exactly like the executable bytes.
  Although I do not see any point in trying to avoid reading
  executable bytes in an exercise like, this program serves as an
  example of a self-printing boot program that does not execute the
  bytes it reads.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/self-printing-machine-code.html">Read on website</a> |
  <a href="https://susam.net/tag/assembly.html">#assembly</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/dos.html">#dos</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Obfuscated Main</title>
<link>https://susam.net/obfuscated-main.html</link>
<guid isPermaLink="false">hdzwp</guid>
<pubDate>Sun, 02 Nov 2003 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  I have been running a mailing list called <em>ncoders</em> on Yahoo
  Groups for the past few months.  I created it to host discussions on
  computers, programming and network protocols among university
  students.  There are currently about 150 students from various
  universities across the world on the list.  A few weeks ago, someone
  posted a C programming puzzle to the group.  The puzzle asked
  whether it was possible to write a C program such that the
  <code>main()</code> function <em>does not seem to appear</em> in the
  code.  Here's a solution I came up with, which involves obfuscating
  the identifier <code>main</code> using preprocessor macros and
  the <code>##</code> token-pasting operator.
</p>
<pre>
<code>#include &lt;stdio.h&gt;

#define decode(s,t,u,m,p,e,d) m ## s ## u ## t
#define begin decode(a,n,i,m,a,t,e)

int begin()
{
    printf("Stumped?\n");
}</code>
</pre>
<p>
  This program compiles and runs successfully.  Here is the output:
</p>
<pre><samp>Stumped?</samp></pre>
<p>
  Let me explain how this code works.  When the C preprocessor runs on
  this code, the following preprocessing steps occur:
</p>
<ul>
  <li>
    <code>begin</code> is replaced with <code>decode(a,n,i,m,a,t,e)</code>,
  </li>
  <li>
    <code>decode(a,n,i,m,a,t,e)</code> is replaced with <code>m ## a
    ## i ## n</code> and
  </li>
  <li>
    <code>m ## a ## i ## n</code> is replaced with <code>main</code>.
  </li>
</ul>
<p>
  Thus <code>begin()</code> is replaced with <code>main()</code>.
</p>
<p>
  <strong>Update on 31 Jul 2007:</strong> Although the mailing list
  referred to in this post no longer exists, this tiny piece of code
  seems to have survived on the web.  A
  <a href="https://www.google.com/search?q=%22decode%28s%2Ct%2Cu%2Cm%2Cp%2Ce%2Cd%29%22">quick
  search</a> shows so many occurrences of this code on the web.  It is
  quite surprising to me that a rather silly piece of code written
  during a Sunday afternoon to solve an equally silly puzzle has been
  the subject of much discussion!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/obfuscated-main.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>C Quine</title>
<link>https://susam.net/c-quine.html</link>
<guid isPermaLink="false">psabp</guid>
<pubDate>Sun, 19 Oct 2003 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  A quine is a computer program that produces an exact copy of its own
  source code as its output.  It must not consume any input, so tricks
  involving reading its own source code and printing it are not
  permitted.
</p>
<h2 id="classic-quine">The Classic Quine<a href="#classic-quine"></a></h2>
<p>
  Here is a classic quine I came across a few days ago in a mailing
  list:
</p>
<pre><code>main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}</code></pre>
<p>
  This program is written in K&amp;R C.  The current version of GCC
  compiles it fine.  It is a valid quine on ASCII machines because
  this program uses the integer code <code>34</code> to print the
  quotation mark (<code>"</code>) character.  This will be explained
  further in the next section.  On another implementation of the C
  compiler which does not use ASCII code for the quotation mark
  character, the program needs to be modified to the use the correct
  code.
</p>
<p>
  Here are some commands that demonstrate the quine:
</p>
<pre>
<samp>$ <kbd>printf '%s' 'main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}' &gt; quine.c</kbd>
$ <kbd>cc quine.c &amp;&amp; ./a.out &gt; out.txt &amp;&amp; diff quine.c out.txt</kbd>
$ <kbd>cat quine.c; echo</kbd>
main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}
$ <kbd>./a.out</kbd>
main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}</samp>
</pre>
<p>
  The source code of this quine does not end with a newline.
  The <code>-n</code> option of GNU echo ensures that the source code
  file is created without a terminating newline.
</p>
<h2 id="close-look-at-classic-quine">Close Look at the Classic Quine<a href="#close-look-at-classic-quine"></a></h2>
<p>
  Let us take a close look at how the quine introduced in the previous
  section works.  Let us add some newlines in the source code of this
  quine for the sake of clarity.
</p>
<pre>
<code>main()
{
    char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";
    printf(s,34,s,34);
}</code>
</pre>
<p>
  This is almost the same program presented in the previous section.
  Only a few newlines have been added to it to make the program easier
  to read.
</p>
<p>
  We can see that the <code>printf</code> call uses the
  string <code>s</code> as the format string.  The format string
  contains three conversion specifications:
  <code>%c</code>, <code>%s</code> and <code>%c</code>.  The arguments
  for these conversions are: <code>34</code>, the string
  <code>s</code> itself and <code>34</code> once again.  Note
  that <code>34</code> is the ASCII code for the quotation mark
  character (<code>"</code>).  With that in mind, let us now construct
  the output of the <code>printf</code> call in a step-by-step manner.
</p>
<p>
  The initial portion of the output consists of the format string from
  the beginning up to, but not including, the first conversion
  specification copied unchanged to the output stream.  Here it is:
</p>
<pre><samp>main(){char*s=</samp></pre>
<p>
  Then the first conversion specification <code>%c</code> is
  processed, the corresponnding argument <code>34</code> is taken and
  a quotation mark is printed like this:
</p>
<pre><samp>"</samp></pre>
<p>
  Then the second conversion specification <code>%s</code> is
  processed.  The corresponding argument is the string <code>s</code>
  itself, so the entire string is printed like this:
</p>
<pre><samp>main(){char*s=%c%s%c;printf(s,34,s,34);}</samp></pre>
<p>
  Then the third conversion specification <code>%c</code> is
  processed.  The corresponding argument is <code>34</code> again, so
  once again a quotation mark is printed like this:
</p>
<pre><samp>"</samp></pre>
<p>
  Finally, the rest of the format string is copied unchanged to
  produce the following output:
</p>
<pre><samp>;printf(s,34,s,34);}</samp></pre>
<p>
  Here are all the five parts of the output presented next to each
  other:
</p>
<pre><samp>main(){char*s=</samp></pre>
<pre><samp>"</samp></pre>
<pre><samp>main(){char*s=%c%s%c;printf(s,34,s,34);}</samp></pre>
<pre><samp>"</samp></pre>
<pre><samp>;printf(s,34,s,34);}</samp></pre>
<p>
  Writing them all out in a single line, we get this:
</p>
<pre>
<samp>main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34);}";printf(s,34,s,34);}</samp>
</pre>
<p>
  This output matches the source code of the program thus confirming
  that our program is a quine.
</p>
<h2 id="classic-quine-with-terminating-newline">Classic Quine With Terminating Newline<a href="#classic-quine-with-terminating-newline"></a></h2>
<p>
  The source code of the classic quine presented above does not
  terminate with a newline.  I found that a little bothersome because
  I am used to always terminating my source code with a single
  trailing newline at the end.  So I decided to modify that quine a
  little to ensure that it always ends with a newline.  This is the
  quine I arrived at:
</p>
<pre><samp>main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}</samp></pre>
<p>
  Compared to the quine in the previous sections, this one has an
  additional <code>%c</code> at the end of the formal string and the
  integer <code>10</code> as the corresponding argument to ensure that
  the output ends with a newline.  Here is a demonstration of this
  quine:
</p>
<pre>
<samp>$ <kbd>echo 'main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}' &gt; quine.c</kbd>
$ <kbd>cc quine.c &amp;&amp; ./a.out &gt; out.txt &amp;&amp; diff quine.c out.txt</kbd>
$ <kbd>cat quine.c</kbd>
main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}
$ <kbd>./a.out</kbd>
main(){char*s="main(){char*s=%c%s%c;printf(s,34,s,34,10);}%c";printf(s,34,s,34,10);}</samp>
</pre>
<h2 id="c89-quine">C89 Quine<a href="#c89-quine"></a></h2>
<p>
  The classic C quines presented above are written in K&amp;C.  They
  do not conform to the C standard.  However, with some modifications
  to the quines presented above, we can get a quine that conforms to
  the C89 standard:
</p>
<pre>
<code>#include &lt;stdio.h&gt;
int main(){char*s="#include &lt;stdio.h&gt;%cint main(){char*s=%c%s%c;printf(s,10,34,s,34,10);return 0;}%c";printf(s,10,34,s,34,10);return 0;}</code>
</pre>
<p>
  Here is a demonstration of this quine:
</p>
<pre>
<samp>$ <kbd>echo '#include &lt;stdio.h&gt;
int main(){char*s="#include &lt;stdio.h&gt;%cint main(){char*s=%c%s%c;printf(s,10,34,s,34,10);return 0;}%c";printf(s,10,34,s,34,10);return 0;}' &gt; quine.c</kbd>
$ <kbd>cc -std=c89 -Wall -Wextra -pedantic quine.c &amp;&amp; ./a.out &gt; out.txt &amp;&amp; diff quine.c out.txt</kbd>
$ <kbd>cat quine.c</kbd>
#include &lt;stdio.h&gt;
int main(){char*s="#include &lt;stdio.h&gt;%cint main(){char*s=%c%s%c;printf(s,10,34,s,34,10);return 0;}%c";printf(s,10,34,s,34,10);return 0;}
$ <kbd>./a.out</kbd>
#include &lt;stdio.h&gt;
int main(){char*s="#include &lt;stdio.h&gt;%cint main(){char*s=%c%s%c;printf(s,10,34,s,34,10);return 0;}%c";printf(s,10,34,s,34,10);return 0;}</samp>
</pre>
<!-- ### -->
<p>
  <a href="https://susam.net/c-quine.html">Read on website</a> |
  <a href="https://susam.net/tag/c.html">#c</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/puzzle.html">#puzzle</a>
</p>
]]>
</description>
</item>
<item>
<title>Rebooting With JMP Instruction</title>
<link>https://susam.net/rebooting-with-jmp-instruction.html</link>
<guid isPermaLink="false">mqkfs</guid>
<pubDate>Sun, 02 Mar 2003 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  While learning about x86 microprocessors, I realised that it is
  possible to reboot a computer running MS-DOS or Windows 98 by
  jumping to the memory address FFFF:0000.  Here is an
  example <code>DEBUG.EXE</code> session from MS-DOS 6.22:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG</kbd>
<kbd>G =FFFF:0000</kbd></samp>
</pre>
<p>
  In the above example, we start the DOS debugger and then enter
  the <code>G</code> (go) command to execute the program at FFFF:0000.
  Just doing this simple operation should reboot the system
  immediately.
</p>
<p>
  When the computer boots, the x86 microprocessor starts in real mode
  and executes the instruction at FFFF:0000.  This is an address in
  the BIOS ROM that contains a far jump instruction to go to another
  address, typically F000:E05B.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG</kbd>
-<kbd>U FFFF:0000 4</kbd>
FFFF:0000 EA5BE000F0    JMP     F000:E05B</samp>
</pre>
<p>
  The address F000:E05B contains the BIOS start-up program which
  performs a power-on self-test (POST), initialises the peripheral
  devices, loads the boot sector code and executes it.  These
  operations complete the booting sequence.
</p>
<p>
  The important point worth noting here is that the very first
  instruction the microprocessor executes after booting is the
  instruction at FFFF:0000.  We can use this fact to create a tiny
  executable program that can be used to reboot the computer.  Of
  course, we can always perform a soft reboot using the key
  sequence <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>.  However,
  just for fun, let us create a program to reboot the computer with
  a <code>JMP FFFF:0000</code> instruction.
</p>
<h2 id="reboot-program">Reboot Program<a href="#reboot-program"></a></h2>
<p>
  Here is a complete <code>DEBUG.EXE</code> session that shows how we
  could write a simple reboot program:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG</kbd>
-<kbd>A</kbd>
1165:0100 <kbd>JMP FFFF:0000</kbd>
1165:0105
-<kbd>N REBOOT.COM</kbd>
-<kbd>R CX</kbd>
CX 0000
:<kbd>5</kbd>
-<kbd>W</kbd>
Writing 00005 bytes
-<kbd>Q</kbd>

C:\&gt;</samp>
</pre>
<p>
  Note that the <code>N</code> (name) command specifies the name of
  the file where we write the binary machine code to.  Also, note that
  the <code>W</code> (write) command expects the registers BX and CX
  to contain the number of bytes to be written to the file.  When the
  DOS debugger starts, it already initialises BX to 0 automatically,
  so we only set the register CX to 5 with the <code>R CX</code>
  command above.
</p>
<p>
  Now we can execute this 5-byte program like this:
</p>
<pre><samp>C:&gt;<kbd>REBOOT</kbd></samp></pre>
<h2 id="debugger-scripting">Debugger Scripting<a href="#debugger-scripting"></a></h2>
<p>
  In the previous section, we saw how we can start
  <code>DEBUG.EXE</code> and type the debugger commands and the
  assembly language instruction to jump to FFFF:0000.  We can also keep
  these debugger inputs in a separate text file and feed that to the
  debugger.  Here is how the content of such a text file would look:
</p>
<pre>
<code>A
JMP FFFF:0000

N REBOOT.COM
R CX
5
W
Q</code>
</pre>
<p>
  If the above input is saved in a file, say, <code>REBOOT.TXT</code>,
  then we can run the DOS command <code>DEBUG &lt; REBOOT.TXT</code>
  to assemble the program and create the binary executable file.  The
  following DOS session example shows how this command behaves:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG &lt; REBOOT.TXT</kbd>
-A
1165:0100 JMP FFFF:0000
1165:0105
-N REBOOT.COM
-R CX
CX 0000
:5
-W
Writing 00005 bytes
-Q

C:&gt;</samp>
</pre>
<h2 id="disassembly">Disassembly<a href="#disassembly"></a></h2>
<p>
  Here is a quick demonstration of how we can disassemble the
  executable code:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG REBOOT.COM</kbd>
-<kbd>U 100 104</kbd>
117C:0100 EA0000FFFF    JMP     FFFF:0000</samp>
</pre>
<p>
  While we did not really need to disassemble this tiny program, the
  above example shows how we can use the debugger
  command <code>U</code> (unassemble) to translate machine code to
  assembly language mnemonics.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/rebooting-with-jmp-instruction.html">Read on website</a> |
  <a href="https://susam.net/tag/assembly.html">#assembly</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/dos.html">#dos</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Programming With DOS Debugger</title>
<link>https://susam.net/programming-with-dos-debugger.html</link>
<guid isPermaLink="false">tkxiv</guid>
<pubDate>Tue, 11 Feb 2003 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="introduction">Introduction<a href="#introduction"></a></h2>
<p>
  MS-DOS as well as Windows 98 come with a debugger program
  named <code>DEBUG.EXE</code> that can be used to work with assembly
  language instructions and machine code.  In MS-DOS version 6.22, this
  program is named <code>DEBUG.EXE</code> and it is typically present
  at <code>C:\DOS\DEBUG.EXE</code>.  On Windows 98, this program is
  usually present at <code>C:\Windows\Command\Debug.exe</code>.  It is
  a line-oriented debugger that supports various useful features to
  work with and debug binary executable programs consisting of machine
  code.
</p>
<p>
  In this post, we see how we can use this debugger program to
  assemble a few minimal programs that print some characters to
  standard output.  We first create a 7-byte program that prints a
  single character.  Then we create a 23-byte program that prints the
  "hello, world" string.  All the steps provided in this post work well
  with Windows 98 too.
</p>
<h2 id="contents">Contents<a href="#contents"></a></h2>
<ul>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#print-character">Print Character</a></li>
  <li><a href="#hello-world">Hello, World</a></li>
  <li><a href="#debugger-scripting">Debugger Scripting</a></li>
  <li><a href="#disassembly">Disassembly</a></li>
  <li><a href="#int-20-vs-ret">INT 20 vs RET</a></li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>
<h2 id="print-character">Print Character<a href="#print-character"></a></h2>
<p>
  Let us first see how to create a tiny 7-byte program that prints the
  character <code>A</code> to standard output.  The
  following <code>DEBUG.EXE</code> session shows how we do it.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG</kbd>
-<kbd>A</kbd>
1165:0100 <kbd>MOV AH, 2</kbd>
1165:0102 <kbd>MOV DL, 41</kbd>
1165:0104 <kbd>INT 21</kbd>
1165:0106 <kbd>RET</kbd>
1165:0107
-<kbd>G</kbd>
A
Program terminated normally
-<kbd>N A.COM</kbd>
-<kbd>R CX</kbd>
CX 0000
:<kbd>7</kbd>
-<kbd>W</kbd>
Writing 00007 bytes
-<kbd>Q</kbd>

C:\&gt;</samp>
</pre>
<p>
  Now we can execute this program as follows:
</p>
<pre>
<samp>C:\&gt;<kbd>A</kbd>
A
C:\&gt;</samp>
</pre>
<p>
  The debugger command <code>A</code> creates machine executable code
  from assembly language instructions.  The machine code created is
  written to the main memory at address CS:0100 by default.  The first
  three instructions generate the software interrupt 0x21 (decimal 33)
  with AH set to 2 and DL set to 0x41 (decimal 65) which happens to be
  the ASCII code of the character <code>A</code>.  Interrupt 0x21
  offers a wide variety of DOS services.  Setting AH to 2 tells this
  interrupt to invoke the function that prints a single character to
  standard output.  This function expects DL to be set to the ASCII
  code of the character we want to print.
</p>
<p>
  The command <code>G</code> executes the program in memory from the
  current location.  The current location is defined by the current
  value of CS:IP which is CS:0100 by default.  We use this command to
  confirm that the program runs as expected.
</p>
<p>
  Next we prepare to write the machine code to a binary executable
  file.  The command <code>N</code> is used to specify the name of the
  file.  The command <code>W</code> is used to write the machine code
  to the file.  This command expects the registers BX and CX to contain
  the number of bytes to be written to the file.  When the DOS debugger
  starts, BX is already initialised to 0, so we only set the register
  CX to 7 with the <code>R CX</code> command.  Finally, we use the
  command <code>Q</code> to quit the debugger and return to MS-DOS.
</p>
<h2 id="hello-world">Hello, World<a href="#hello-world"></a></h2>
<p>
  The following <code>DEBUG.EXE</code> session shows how to create a
  program that prints a string.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG</kbd>
-<kbd>A</kbd>
1165:0100 <kbd>MOV AH, 9</kbd>
1165:0102 <kbd>MOV DX, 108</kbd>
1165:0105 <kbd>INT 21</kbd>
1165:0107 <kbd>RET</kbd>
1165:0108 <kbd>DB 'hello, world', D, A, '$'</kbd>
1165:0117
-<kbd>G</kbd>
hello, world

Program terminated normally
-<kbd>N HELLO.COM</kbd>
-<kbd>R CX</kbd>
CX 0000
:<kbd>17</kbd>
-<kbd>W</kbd>
Writing 00017 bytes
-<kbd>Q</kbd>

C:\&gt;</samp>
</pre>
<p>
  Now we can execute this 23-byte program like this:
</p>
<pre>
<samp>C:\&gt;<kbd>HELLO</kbd>
hello, world

C:\&gt;</samp>
</pre>
<p>
  In the program above we use the pseudo-instruction <code>DB</code>
  to define the bytes of the string we want to print.  We add the
  trailing bytes 0xD and 0xA to print the carriage return (CR) and the
  line feed (LF) characters so that the string is terminated with a
  newline.  Finally, the string is terminated with the byte for dollar
  sign (<code>'$'</code>) because the software interrupt we generate
  next expects the string to be terminated with this symbol's byte
  value.
</p>
<p>
  We use the software interrupt 0x21 again.  However, this time we set
  AH to 9 to invoke the function that prints a string.  This function
  expects DS:DX to point to the address of a string terminated with
  the byte value of <code>'$'</code>.  The register <code>DS</code> has
  the same value as that of <code>CS</code>, so we only
  set <code>DX</code> to the offset at which the string begins.
</p>
<h2 id="debugger-scripting">Debugger Scripting<a href="#debugger-scripting"></a></h2>
<p>
  We have already seen above how to assemble a "hello, world" program
  in the previous section.  We started the debugger program, typed
  some commands and typed assembly language instructions to create our
  program.  It is also possible to prepare a separate input file with
  all the debugger commands and assembly language instructions in it.
  We then feed this file to the debugger program.  This can be useful
  while writing more complex programs where we cannot afford to lose
  our assembly language source code if we inadvertently crash the
  debugger by executing an illegal instruction.
</p>
<p>
  To create a separate input file that can be fed to the debugger, we
  may use the DOS command <code>EDIT HELLO.TXT</code> to open a new
  file with MS-DOS Editor, then type in the following debugger
  commands and then save and exit the editor.
</p>
<pre>
<code>A
MOV AH, 9
MOV DX, 108
INT 21
RET
DB 'hello, world', D, A, '$'

N HELLO.COM
R CX
17
W
Q</code>
</pre>
<p>
  This is almost the same as the inputs we typed into the debugger in
  the previous section.  The only difference from the previous section
  is that we omit the <code>G</code> command here because we don't
  really need to run the program while assembling it, although we
  could do so if we really wanted to.
</p>
<p>
  Then we can run the DOS command <code>DEBUG &lt; HELLO.TXT</code> to
  assemble the program and create the binary executable file.  Here is
  a DOS session example that shows what the output of this command
  looks like:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG &lt; HELLO.TXT</kbd>
-A
1165:0100 MOV AH, 9
1165:0102 MOV DX, 108
1165:0105 INT 21
1165:0107 RET
1165:0108 DB 'hello, world', D, A, '$'
1165:0117
-N HELLO.COM
-R CX
CX 0000
:17
-W
Writing 00017 bytes
-Q

C:\&gt;</samp>
</pre>
<p>
  The output is in fact very similar to the debugger session in the
  previous section.
</p>
<h2 id="disassembly">Disassembly<a href="#disassembly"></a></h2>
<p>
  Now that we have seen how to assemble simple programs into binary
  executable files using the debugger, we will now briefly see how to
  disassemble the binary executable files.  This could be useful when
  we want to debug an existing program.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG A.COM</kbd>
-<kbd>U 100 106</kbd>
117C:0100 B402          MOV     AH,02
117C:0102 B241          MOV     DL,41
117C:0104 CD21          INT     21
117C:0106 C3            RET</samp>
</pre>
<p>
  The debugger command <code>U</code> (unassemble) is used to
  translate the binary machine code to assembly language mnemonics.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG HELLO.COM</kbd>
-<kbd>U 100 116</kbd>
117C:0100 B409          MOV     AH,09
117C:0102 BA0801        MOV     DX,0108
117C:0105 CD21          INT     21
117C:0107 C3            RET
117C:0108 68            DB      68
117C:0109 65            DB      65
117C:010A 6C            DB      6C
117C:010B 6C            DB      6C
117C:010C 6F            DB      6F
117C:010D 2C20          SUB     AL,20
117C:010F 776F          JA      0180
117C:0111 726C          JB      017F
117C:0113 64            DB      64
117C:0114 0D0A24        OR      AX,240A
-<kbd>D 100 116</kbd>
117C:0100  B4 09 BA 08 01 CD 21 C3-68 65 6C 6C 6F 2C 20 77   ......!.hello, w
117C:0110  6F 72 6C 64 0D 0A 24                              orld..$</samp>
</pre>
<h2 id="int-20-vs-ret">INT 20 vs RET<a href="#int-20-vs-ret"></a></h2>
<p>
  Another way to terminate a .COM program is to simply use the
  instruction <code>INT 20</code>.  This consumes two bytes in the
  machine code: <code>CD 20</code>.  While producing the smallest
  possible executables was not really the goal of this post, the code
  examples above indulge in a little bit of size reduction by using
  the <code>RET</code> instruction to terminate the program.  This
  consumes only one byte: <code>C3</code>.  This works because when a
  .COM file starts, the register SP contains FFFE.  The stack memory
  locations at offset FFFE and FFFF contain 00 and 00 respectively.
  Further, the memory address offset 0000 contains the
  instruction <code>INT 20</code>.  Here is a demonstration of these
  facts using the debugger program:
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG HELLO.COM</kbd>
-<kbd>R SP</kbd>
SP FFFE
:
-<kbd>D FFFE</kbd>
117C:FFF0                                            00 00
-<kbd>U 0 1</kbd>
117C:0000 CD20          INT     20</samp>
</pre>
<p>
  As a result, executing the <code>RET</code> instruction pops 0000
  off the stack at FFFE and loads it into IP.  This results in the
  instruction <code>INT 20</code> at offset 0000 getting executed
  which leads to program termination.
</p>
<p>
  While both <code>INT 20</code> and <code>RET</code> lead to
  successful program termination both in DOS as well as while
  debugging with <code>DEBUG.EXE</code>, there is some difference
  between them which affects the debugging experience.  Terminating the
  program with <code>INT 20</code> allows us to run the program
  repeatedly within the debugger by repeated applications of
  the <code>G</code> debugger command.  But when we terminate the
  program with <code>RET</code>, we cannot run the program repeatedly
  in this manner.  The program runs and terminates successfully the
  first time we run it in the debugger but the stack does not get
  reinitialised with zeros to prepare it for another execution of the
  program within the debugger.  Therefore when we try to run the
  program the second time using the <code>G</code> command, the
  program does not terminate successfully.  It hangs instead.  It is
  possible to work around this by reinitialising the stack with the
  debugger command <code>E FFFE 0 0</code> before
  running <code>G</code> again.
</p>
<h2 id="conclusion">Conclusion<a href="#conclusion"></a></h2>
<p>
  Although the DOS debugger is very limited in features in comparison
  with sophisticated assemblers like NASM, MASM, etc., this humble
  program can perform some of the basic operations involved in working
  with assembly language and machine code.  It can read and write
  binary executable files, examine memory, execute machine
  instructions in memory, modify registers, edit binary files, etc.
  The fact that this debugger program is always available with MS-DOS
  or Windows 98 system means that these systems are ready for some
  rudimentary assembly language programming without requiring any
  additional tools.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/programming-with-dos-debugger.html">Read on website</a> |
  <a href="https://susam.net/tag/assembly.html">#assembly</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/dos.html">#dos</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Editing Binaries in DOS</title>
<link>https://susam.net/editing-binaries-in-dos.html</link>
<guid isPermaLink="false">xomdn</guid>
<pubDate>Thu, 18 Jul 2002 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Both MS-DOS and Windows 98 come with a debugger program
  named <code>DEBUG.EXE</code> that make it possible to edit binary
  files without requiring additional tools.  Although the primary
  purpose of this program is to test and debug executable files, it
  can be used to edit binary files too.  Two examples of this are
  shown in this post.  The first example edits a string of bytes in an
  executable file.  The second one edits machine instructions to alter
  the behaviour of the program.  Both examples provided in the next
  two sections can be reproduced on MS-DOS version 6.22.  These
  examples can be performed on Windows 98 too after minor adjustments.
</p>
<h2 id="editing-data">Editing Data<a href="#editing-data"></a></h2>
<p>
  Let us first see an example of editing an error message produced by
  the <code>MODE</code> command.  This DOS command is used for
  displaying and reconfiguring system settings.  For example, the
  following command sets the display to show 40 characters per line:
</p>
<pre><samp>C:\&gt;<kbd>MODE 40</kbd></samp></pre>
<p>
  The following command reverts the display to show 80 characters per
  line:
</p>
<pre><samp>C:\&gt;<kbd>MODE 80</kbd></samp></pre>
<p>
  Here is another example of this command that shows the current
  settings for serial port COM1:
</p>
<pre>
<samp>C:\&gt;<kbd>MODE COM1</kbd>

Status for device COM1:
-----------------------
Retry=NONE

C:\&gt;</samp>
</pre>
<p>
  An invalid parameter leads to an error like this:
</p>
<pre>
<samp>C:\&gt;<kbd>MODE 0</kbd>

Invalid parameter - 0

C:\&gt;</samp>
</pre>
<p>
  We will edit this error message to be slightly more helpful.  The
  following debugger session shows how.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG C:\DOS\MODE.COM</kbd>
-<kbd>S 0 FFFF 'Invalid parameter'</kbd>
117C:19D1
-<kbd>D 19D0 19FF</kbd>
117C:19D0  13 49 6E 76 61 6C 69 64-20 70 61 72 61 6D 65 74   .Invalid paramet
117C:19E0  65 72 0D 0A 20 0D 0A 49-6E 76 61 6C 69 64 20 6E   er.. ..Invalid n
117C:19F0  75 6D 62 65 72 20 6F 66-20 70 61 72 61 6D 65 74   umber of paramet
-<kbd>E 19D0 12 'No soup for you!' D A</kbd>
-<kbd>D 19D0 19FF</kbd>
117C:19D0  12 4E 6F 20 73 6F 75 70-20 66 6F 72 20 79 6F 75   .No soup for you
117C:19E0  21 0D 0A 0A 20 0D 0A 49-6E 76 61 6C 69 64 20 6E   !... ..Invalid n
117C:19F0  75 6D 62 65 72 20 6F 66-20 70 61 72 61 6D 65 74   umber of paramet
-<kbd>N SOUP.COM</kbd>
-<kbd>W</kbd>
Writing 05C11 bytes
-<kbd>Q</kbd>

C:\&gt;</samp>
</pre>
<p>
  We first open <code>MODE.COM</code> with the debugger.  When we do
  so, the entire program is loaded into offset 0x100 of the code
  segment (CS).  Then we use the <code>S</code> debugger command to
  search for the string "Invalid parameter".  This prints the offset
  at which this string occurs in memory.
</p>
<p>
  We use the <code>D</code> command to dump the bytes around that
  offset.  In the first row of the output, the byte value 13 (decimal
  19) represents the length of the string that follows it.  Indeed
  there are 19 bytes in the string composed of the text <code>"Invalid
  parameter"</code> and the following carriage return (CR) and line
  feed (LF) characters.  The CR and LF characters have ASCII codes 0xD
  (decimal 13) and 0xA (decimal 10).  These values can be seen at the
  third and fourth places of the second row of the output of this
  command.
</p>
<p>
  Then we use the <code>E</code> command to enter a new string length
  followed by a new string to replace the existing error message.
  Note that we enter a string length of 0x12 (decimal 18) which is
  indeed the length of the string that follows it.  After entering the
  new string, we dump the memory again with <code>D</code> to verify
  that the new string is now present in memory.
</p>
<p>
  After confirming that the edited string looks good, we use
  the <code>N</code> command to specify the name of the file we want
  to write the edited binary to.  This command starts writing the
  bytes from offset 0x100 to the named file.  It reads the number of
  bytes to be written to the file from the BX and CX registers.  These
  registers are already initialised to the length of the file when we
  load a file in the debugger.  Since we have not modified these
  registers ourselves, we don't need to set them again.  In case you
  do need to set the BX and CX registers in a different situation, the
  commands to do so are <code>R BX</code> and <code>R CX</code>
  respectively.
</p>
<p>
  Finally, the <code>W</code> command writes the file and
  the <code>Q</code> command quits the debugger.  Now we can test the
  new program as follows:
</p>
<pre>
<samp>
C:\&gt;<kbd>SOUP 0</kbd>

No soup for you! - 0

C:\&gt;</samp>
</pre>
<h2 id="editing-machine-instructions">Editing Machine Instructions<a href="#editing-machine-instructions"></a></h2>
<p>
  In this section, we will see how to edit the binary we created in
  the previous section further to add our own machine instructions to
  print a welcome message when the program starts.  Here is an example
  debugger session that shows how to do it.
</p>
<pre>
<samp>C:\&gt;<kbd>DEBUG SOUP.COM</kbd>
-<kbd>U</kbd>
117C:0100 E99521        JMP     2298
117C:0103 51            PUSH    CX
117C:0104 8ACA          MOV     CL,DL
117C:0106 D0E1          SHL     CL,1
117C:0108 32ED          XOR     CH,CH
117C:010A 80CD03        OR      CH,03
117C:010D D2E5          SHL     CH,CL
117C:010F 2E            CS:
117C:0110 222E7D01      AND     CH,[017D]
117C:0114 2E            CS:
117C:0115 890E6402      MOV     [0264],CX
117C:0119 59            POP     CX
117C:011A 7505          JNZ     0121
117C:011C EA39E700F0    JMP     F000:E739
-<kbd>D 300</kbd>
117C:0300  07 1F C3 18 18 18 18 18-00 00 00 00 00 00 00 00   ................
117C:0310  00 00 FF 00 00 00 00 00-FF 00 00 00 00 00 00 00   ................
117C:0320  00 00 00 00 00 00 00 00-00 00 FF FF 90 00 40 00   ..............@.
117C:0330  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00   ................
117C:0340  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00   ................
117C:0350  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00   ................
117C:0360  00 00 00 FF 00 00 00 00-00 00 00 00 00 00 00 00   ................
117C:0370  02 00 2B C0 8E C0 A0 71-03 A2 BA 07 A2 BC 07 3C   ..+....q.......<
-<kbd>A</kbd>
117C:0100 <kbd>JMP 330</kbd>
117C:0103
-<kbd>A 330</kbd>
117C:0330 <kbd>MOV AH, 9</kbd>
117C:0332 <kbd>MOV DX, 33A</kbd>
117C:0335 <kbd>INT 21</kbd>
117C:0337 <kbd>JMP 2298</kbd>
117C:033A <kbd>DB 'Welcome to Soup Kitchen!', D, A, '$'</kbd>
117C:0355
-<kbd>W</kbd>
Writing 05C11 bytes
-<kbd>Q</kbd>

C:\&gt;</samp>
</pre>
<p>
  At the beginning, we use the debugger command <code>U</code> to
  unassemble (disassemble) some bytes at the top of the program to see
  what they look like.  We see that the very first instruction is a
  jump to offset 0x2298.  The debugger command <code>D 300</code>
  shows that there are contiguous zero bytes around offset 0x330.  We
  replace some of these zero bytes with new machine instructions that
  print our welcome message.  To do this, we first replace the jump
  instruction at the top with a jump instruction to offset 0x330 where
  we then place the machine code for our welcome message.  This new
  machine code prints the welcome message and then jumps to offset
  0x2298 allowing the remainder of the program to execute as usual.
</p>
<p>
  The debugger command <code>A</code> is used to assemble the machine
  code for the altered jump instruction at the top.  By default it
  writes the assembled machine code to CS:0100 which is the address at
  which DOS loads executable programs.  Then we use the debugger
  command <code>A 330</code> to add new machine code at offset 0x330.
  We try not to go beyond the region with contiguous zeroes while
  writing our machine instructions.  Fortunately for us, our entire
  code for the welcome message occupies 37 bytes and and the last byte
  of our code lands at offset 0x354.
</p>
<p>
  Finally, we write the updated program in memory back to the file
  named <code>SOUP.COM</code>.  Since the debugger was used to load
  the file named <code>SOUP.COM</code>, we do not need to use
  the <code>N</code> command to specify the name of the file again.
  When a file has just been loaded into the debugger, by default
  the <code>W</code> command writes the program in memory back to the
  same file that was loaded into the memory.
</p>
<p>
  Now our updated program should behave as shown below:
</p>
<pre>
<samp>C:\&gt;<kbd>SOUP COM1</kbd>
Welcome to Soup Kitchen!

Status for device COM1:
-----------------------
Retry=NONE

C:\&gt;<kbd>SOUP 0</kbd>
Welcome to Soup Kitchen!

No soup for you! - 0

C:\&gt;</samp>
</pre>
<p>
  That's our modified program that prints a welcome message and our
  own error message created with the humble DOS debugger.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/editing-binaries-in-dos.html">Read on website</a> |
  <a href="https://susam.net/tag/assembly.html">#assembly</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/dos.html">#dos</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>


</channel>
</rss>
