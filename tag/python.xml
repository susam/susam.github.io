<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="../feed.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
<title>Susam's Python Pages</title>
<link>https://susam.net/tag/python.html</link>
<atom:link rel="self" type="application/rss+xml" href="https://susam.net/tag/python.xml"/>
<description>Feed for Susam's Python Pages</description>

<item>
<title>Elliptical Python Programming</title>
<link>https://susam.net/elliptical-python-programming.html</link>
<guid isPermaLink="false">tmdms</guid>
<pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  One thing I love about Python is how it comes with its very own
  built-in zen.  In moments of tribulations, when I am wrestling with
  crooked code and tangled thoughts, I often find solace in its
  timeless wisdom.  Here's a glimpse of the clarity it provides:
</p>
<pre>
<samp>$ <kbd>python3 -m this | grep e-</kbd>
There should be one-- and preferably only one --obvious way to do it.</samp>
</pre>
<p>
  Indeed, there is one and only one <em>obvious</em> way to write the
  number 1 in Python, like so:
</p>
<pre><samp>&gt;&gt;&gt; <kbd>--(...==...)</kbd>
1</samp></pre>
<p>
  You may, quite naturally, place several ones adjacently to produce
  larger integers:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>--(...==...)--(...==...)</kbd>
2</samp>
</pre>
<p>
  And so on, ad infinitum, or until your heap collapses like a poorly
  made souffl√©.  Now, the "pre-decrement operator" at the beginning is
  entirely optional, much like the plus sign when you write "+5
  biscuits" in a letter to your grandmother.  It's not wrong, but it
  is unnecessary.  So unless you want to look peculiar to your
  colleagues, you would likely want to adopt a more conventional
  style, such as this:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>(...==...)--(...==...)--(...==...)</kbd>
3</samp>
</pre>
<p>
  Now, all computer programs are, in some sense, just a long, earnest
  stream of bits.  It is currently fashionable to bundle these bits
  into groups of eight and write them as integers.  Following this
  trend, we can compute absolutely anything that is computable as long
  as we know exactly what integers to write.  Now, I wouldn't want to
  bore you with the finer details of computer science, not in this day
  and age, fascinating as they may be.  I trust you are quite capable
  of drawing the rest of the f... well, <em>feathered</em>, nocturnal
  bird.  Once you've grasped the basics, a typical first Python
  program might look something like this:
</p>
<pre class="wrap"><code>exec('%ccode></pre>
<p>
  Now you might be wondering if this is <em>really</em> the way one
  ought to write production Python code.  Isn't it too much trouble to
  type those dots over and over again?  Not if you remap your
  <kbd>tab</kbd> key to type three dots, of course.  But I understand
  not everyone likes to remap their keys like this.  In particular,
  there exists a peculiar species of mammal known to remap their
  <kbd>tab</kbd> key to parentheses.  They claim it leads to
  enlightenment.  Such enlightened living forms may find the following
  program more convenient to type:
</p>
<pre class="wrap"><code>exec('%ccode></pre>
<p>
  This program is functionally equivalent to the earlier one.  But
  Python isn't meant for enlightenment.  It's meant for getting things
  done.  And to get things done, code should be readable, maintainable
  and ideally not resemble an ancient summoning ritual.  That's why I
  personally prefer the earlier style, the one with the ellipses.  It
  gracefully avoids the disconcerting void that lurks within the
  parentheses.  After all, programs must be written for people to read
  and only incidentally for machines to execute.
</p>
<p>
  Finally, I must emphasise that you should never deploy code like
  this in production.  If you plan to write code like this for your
  production CGI scripts, I implore you to add some ellipses for
  logging.  When dung inevitably collides with the fan, you'll be
  immensely glad you scattered some useful logs amidst the ellipses
  that hold together your business logic.  With that small piece of
  unsolicited advice, I'll end this brief distraction from scrolling
  through endless arguments on Internet forums.  Happy coding and may
  your parentheses stay balanced (and may your ellipses be the
  punctuation that ...
  <!-- ).  Now, I can sleep peacefully!  -->
</p>
<!--
  For the enlightened folks who are offended by the penultimate
  paragraph, lighten up!  I am no stranger to the fine art of nested
  parentheses.  This very blog is crafted with an abundance of them,
  all forged through the mighty steel and bank machinery.
-->
<!-- ### -->
<p>
  <a href="https://susam.net/elliptical-python-programming.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/humour.html">#humour</a>
</p>
]]>
</description>
</item>
<item>
<title>Negative Lookahead Assertion</title>
<link>https://susam.net/negative-lookahead-assertion.html</link>
<guid isPermaLink="false">tdawz</guid>
<pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  Here is an example of negative lookahead assertion in regular
  expression using Python:
</p>
<pre>
<code>import re
strings = ['foo', 'bar', 'baz', 'foo-bar', 'bar-baz', 'baz-foo']
matches = [s for s in strings if re.search('^(?!.*foo)', s)]
print(matches)</code>
</pre>
<p>
  The regular expression <code>^(?!.*foo)</code> in the above example
  matches strings that do not contain the pattern <code>foo</code>.
  The above code example produces the following output:
</p>
<pre><samp>['bar', 'baz', 'bar-baz']</samp></pre>
<p>
  Of course, it is much simpler to use an ordinary regular expression
  that matches <code>foo</code> and then invert the result of the
  match to ignore strings that contain <code>foo</code>.  For example,
  consider the following straightforward solution:
</p>
<pre><code>matches = [s for s in strings if not re.search('foo', s)]</code></pre>
<p>
  This example produces the same result as the earlier example but
  with less complexity.  However, there are situations where, as a
  user of certain software tool, we might not have control over how
  the tool applies the regular expression.  Some tools only allow us
  to provide a pattern and then they automatically select strings that
  match the pattern.  In such cases, if we need to select strings
  that <em>do not</em> match a given pattern, negative lookahead
  assertions become quite useful, provided the regular expression
  flavour supported by the tool allows the use of negative lookahead
  assertions.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/negative-lookahead-assertion.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Import Readline</title>
<link>https://susam.net/import-readline.html</link>
<guid isPermaLink="false">ttyjr</guid>
<pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="toy-repl">Toy REPL<a href="#toy-repl"></a></h2>
<p>
  Let us first write a tiny Python program to create a toy
  read-eval-print-loop (REPL) that does only one thing: add all
  integers entered as input into the REPL prompt.  Here is the
  program:
</p>
<pre>
<code>while True:
    try:
        line = input('&gt; ')
        print(sum([int(n) for n in line.split()]))
    except ValueError as e:
        print('error:', e)
    except (KeyboardInterrupt, EOFError):
        break</code>
</pre>
<p>
  Here is how it works:
</p>
<pre>
<samp>$ <kbd>python3 repl.py</kbd>
&gt; <kbd>10 20 30</kbd>
60
&gt; <kbd>40 50 60</kbd>
150
&gt; </samp>
</pre>
<p>
  If we now type <kbd>&uarr;</kbd> (the up arrow key)
  or <kbd>ctrl</kbd>+<kbd>p</kbd> to bring back the previous input, we
  see something like the following instead:
</p>
<pre><samp>&gt; <kbd>^[[A^[[A^P^P</kbd></samp></pre>
<p>
  It shows the keys typed literally rather than bringing up previous
  input like most other interactive programs with a command-line
  interface do.  The other programs that do bring up the previous
  input are able to do so because they provide line editing and
  history capability, often with the help of a line editing and
  history library like GNU Readline (libreadline) or BSD Editline
  (libedit).
</p>
<p>
  Can we have a similar line editing and history capability for our
  toy REPL?  After all, the Python REPL itself offers such a line
  editing facility.  Surely there must be a way to have this facility
  for our own programs too.  Indeed there is!
</p>
<h2 id="line-editing-and-history">Line Editing and History<a href="#line-editing-and-history"></a></h2>
<p>
  To enable line editing and history in our toy REPL, we just need to
  add <code>import readline</code> to our program.  Here is how our
  program would look:
</p>
<pre>
<code>import readline

while True:
    try:
        line = input('&gt; ')
        print(sum([int(n) for n in line.split()]))
    except ValueError as e:
        print('error:', e)
    except (KeyboardInterrupt, EOFError):
        break</code>
</pre>
<p>
  Now <kbd>&uarr;</kbd>, <kbd>ctrl</kbd>+<kbd>p</kbd>, etc. work as
  expected.
</p>
<pre>
<samp>$ <kbd>python3 repl.py</kbd>
&gt; <kbd>10 20 30</kbd>
60
&gt; <kbd>40 50 60</kbd>
150
&gt; <kbd>40 50 60</kbd></samp>
</pre>
<p>
  The last line of input in the example above is obtained by typing
  either <kbd>&uarr;</kbd> or <kbd>ctrl</kbd>+<kbd>p</kbd>.  In fact,
  all of the line editing keys like <kbd>ctrl</kbd>+<kbd>a</kbd> to go
  to the beginning of the line, <kbd>ctrl</kbd>+<kbd>k</kbd> to kill
  the line after the cursor, etc. work as expected.  The exact list of
  default key-bindings supported depends on the underlying line
  editing library being used by the <code>readline</code> module.  The
  underlying library may be either the GNU Readline library or the BSD
  Editline library.  There are some minor differences regarding the
  list of default key-bindings between these two libraries.
</p>
<h2 id="history-file">History File<a href="#history-file"></a></h2>
<p>
  What we have done so far achieves the goal of bringing up previous
  inputs from the history.  However, it does not bring back inputs
  from a previous invocation of the REPL.  For example, if we start
  our toy REPL, enter some inputs, then quit it (say, by
  typing <kbd>ctrl</kbd>+<kbd>c</kbd>), start our toy REPL again and
  type <kbd>&uarr;</kbd> or <kbd>ctrl</kbd>+<kbd>p</kbd>, it does not
  bring back the input from the previous invocation.  For a full-blown
  REPL meant for sophisicated usage, we may want to preserve the
  history between different invocations of the REPL.  This can be
  achieved by using the <code>read_history_file()</code>
  and <code>write_history_file()</code> functions as shown below:
</p>
<pre>
<code>import readline
import os

HISTORY_FILE = os.path.expanduser('~/.repl_history')
if os.path.exists(HISTORY_FILE):
    readline.read_history_file(HISTORY_FILE)

while True:
    try:
        line = input('&gt; ')
        readline.write_history_file(HISTORY_FILE)
        print(sum([int(n) for n in line.split()]))
    except ValueError as e:
        print('error:', e)
    except (KeyboardInterrupt, EOFError):
        break</code>
</pre>
<p>
  For more information on how to use this module, see the
  Python <a href="https://docs.python.org/3/library/readline.html">readline
  documentation</a>.
</p>
<h2 id="rlwrap">Readline Wrapper<a href="#rlwrap"></a></h2>
<p>
  At this point, it is worth mentioning that there are many
  interactive CLI tools that do not have line editing and history
  capabilities.  They behave like our first toy REPL example in this
  post.  Fortunately, there is the wonderful readline wrapper utility
  known as <code>rlwrap</code> that can be used to enable line editing
  and history in such tools.  This utility can often be easily
  installed from package repositories of various operating systems.
  Here is a demonstration of this tool:
</p>
<pre>
<samp>$ <kbd>rlwrap cat</kbd>
<kbd>hello</kbd>
hello
<kbd>world</kbd>
world
<kbd>world</kbd></samp>
</pre>
<p>
  The last line of input in the example above is obtained by typing
  either <kbd>&uarr;</kbd> or <kbd>ctrl</kbd>+<kbd>p</kbd>.  In the
  above example, the input history is automatically saved
  to <code>~/.cat_history</code>, so it is possible to bring back
  inputs from a previous invocation of the command.
</p>
<h2 id="obligatory-joke">Obligatory Joke<a href="#obligatory-joke"></a></h2>
<p>
  Finally, an obligatory XKCD comic to conclude this post:
</p>
<figure class="soft">
  <img src="files/blog/xkcd-353-python.png" alt="XKCD comic on Python"
       title="Original title text: I wrote 20 short programs in Python yesterday.  It was wonderful.  Perl, I'm leaving you.">
  <figcaption>
    <em>Python</em> by Randall Munroe
    (Source: <a href="https://xkcd.com/353/">https://xkcd.com/353/</a>)
  </figcaption>
</figure>
<p>
  While the days of achieving air flight with a
  single <code>import</code> statement might still be a few decades
  away, we do have the luxury to enable line editing and history in
  our REPLs with a single such statement right now.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/import-readline.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Unix Timestamp 1600000000</title>
<link>https://susam.net/unix-timestamp-1600000000.html</link>
<guid isPermaLink="false">wvrcr</guid>
<pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  At 2020-09-13 12:26:40 UTC, the Unix timestamp is going to turn
  1600000000.
</p>
<h2 id="unix-timestamp-conversion">Unix Timestamp Conversion<a href="#unix-timestamp-conversion"></a></h2>
<p>
  The following subsections show a few examples of converting the Unix
  timestamp to a human-readable date.
</p>
<h3 id="python">Python<a href="#python"></a></h3>
<pre>
<samp>$ <kbd>python3 -q</kbd>
&gt;&gt;&gt; <kbd>from datetime import datetime</kbd>
&gt;&gt;&gt; <kbd>datetime.utcfromtimestamp(1_600_000_000)</kbd>
datetime.datetime(2020, 9, 13, 12, 26, 40)</samp>
</pre>
<h3 id="gnu-date">GNU date (Linux)<a href="#gnu-date"></a></h3>
<pre>
<samp>$ <kbd>date -ud @1600000000</kbd>
Sun Sep 13 12:26:40 UTC 2020</samp>
</pre>
<h3 id="bsd-date">BSD date (macOS, FreeBSD, OpenBSD, etc.)<a href="#bsd-date"></a></h3>
<pre>
<samp>$ <kbd>date -ur 1600000000</kbd>
Sun Sep 13 12:26:40 UTC 2020</samp>
</pre>
<h2 id="other-such-dates">Other Such Dates<a href="#other-such-dates"></a></h2>
<p>
  All such dates (in UTC) until the end of the current century:
</p>
<pre>
<samp>$ <kbd>python3 -q</kbd>
&gt;&gt;&gt; <kbd>from datetime import datetime</kbd>
&gt;&gt;&gt; <kbd>for t in range(0, 4_200_000_000, 100_000_000):</kbd>
... <kbd>    print(f'{t:13_d} - {datetime.utcfromtimestamp(t)}')</kbd>
...
            0 - 1970-01-01 00:00:00
  100_000_000 - 1973-03-03 09:46:40
  200_000_000 - 1976-05-03 19:33:20
  300_000_000 - 1979-07-05 05:20:00
  400_000_000 - 1982-09-04 15:06:40
  500_000_000 - 1985-11-05 00:53:20
  600_000_000 - 1989-01-05 10:40:00
  700_000_000 - 1992-03-07 20:26:40
  800_000_000 - 1995-05-09 06:13:20
  900_000_000 - 1998-07-09 16:00:00
1_000_000_000 - 2001-09-09 01:46:40
1_100_000_000 - 2004-11-09 11:33:20
1_200_000_000 - 2008-01-10 21:20:00
1_300_000_000 - 2011-03-13 07:06:40
1_400_000_000 - 2014-05-13 16:53:20
1_500_000_000 - 2017-07-14 02:40:00
1_600_000_000 - 2020-09-13 12:26:40
1_700_000_000 - 2023-11-14 22:13:20
1_800_000_000 - 2027-01-15 08:00:00
1_900_000_000 - 2030-03-17 17:46:40
2_000_000_000 - 2033-05-18 03:33:20
2_100_000_000 - 2036-07-18 13:20:00
2_200_000_000 - 2039-09-18 23:06:40
2_300_000_000 - 2042-11-19 08:53:20
2_400_000_000 - 2046-01-19 18:40:00
2_500_000_000 - 2049-03-22 04:26:40
2_600_000_000 - 2052-05-22 14:13:20
2_700_000_000 - 2055-07-24 00:00:00
2_800_000_000 - 2058-09-23 09:46:40
2_900_000_000 - 2061-11-23 19:33:20
3_000_000_000 - 2065-01-24 05:20:00
3_100_000_000 - 2068-03-26 15:06:40
3_200_000_000 - 2071-05-28 00:53:20
3_300_000_000 - 2074-07-28 10:40:00
3_400_000_000 - 2077-09-27 20:26:40
3_500_000_000 - 2080-11-28 06:13:20
3_600_000_000 - 2084-01-29 16:00:00
3_700_000_000 - 2087-04-01 01:46:40
3_800_000_000 - 2090-06-01 11:33:20
3_900_000_000 - 2093-08-01 21:20:00
4_000_000_000 - 2096-10-02 07:06:40
4_100_000_000 - 2099-12-03 16:53:20</samp>
</pre>
<h2 id="update">Update<a href="#update"></a></h2>
<p>
  Here is a screenshot I took at Unix timestamp 1600000000:
  <a href="https://twitter.com/susam/status/1305120936098627589">twitter.com/susam/status/130512093609862758</a>.
</p>
<p>
  Reproduced as text below:
</p>
<pre>
<samp>$ <kbd>date -u; date; date +%s</kbd>
Sun Sep 13 12:26:39 UTC 2020
Sun Sep 13 17:56:39 IST 2020
1599999999
$ <kbd>date -u; date; date +%s</kbd>
Sun Sep 13 12:26:40 UTC 2020
Sun Sep 13 17:56:40 IST 2020
1600000000</samp>
</pre>
<p>
  An important point worth noting from the POSIX.1-2008 specification:
</p>
<blockquote>
  Coordinated Universal Time (UTC) includes leap seconds.  However, in
  POSIX time (seconds since the Epoch), leap seconds are ignored (not
  applied) to provide an easy and compatible method of computing time
  differences.  Broken-down POSIX time is therefore not necessarily
  UTC, despite its appearance.
</blockquote>
<p>
  See <a href="https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16">&sect; A.4.16</a>
  of the POSIX.1-2008 specification for more details.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/unix-timestamp-1600000000.html">Read on website</a> |
  <a href="https://susam.net/tag/unix.html">#unix</a> |
  <a href="https://susam.net/tag/shell.html">#shell</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Peculiar Self-References</title>
<link>https://susam.net/peculiar-self-references.html</link>
<guid isPermaLink="false">svacn</guid>
<pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<h2 id="self-referential-lists">Peculiar Results<a href="#self-referential-lists"></a></h2>
<p>
  Here is a tiny Python example that creates a self-referential list
  and demonstrates the self-reference:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a[0] = [0]</kbd>
&gt;&gt;&gt; <kbd>a</kbd>
[[...]]
&gt;&gt;&gt; <kbd>a[0]</kbd>
[[...]]
&gt;&gt;&gt; <kbd>a[0][0]</kbd>
[[...]]
&gt;&gt;&gt; <kbd>a is a[0]</kbd>
True</samp>
</pre>
<p>
  The output shows that <code>a[0]</code> refers to <code>a</code>
  itself which makes it a self-referential list.  Why does this simple
  code create a self-referential list?  Should it not have failed
  with <code>NameError</code> because <code>a</code> is not yet
  defined while assigning the list <code>[0]</code>
  to <code>a[0]</code>?
</p>
<p>
  Here is another similar example that creates a self-referential list
  too:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a[0] = [0, 0]</kbd>
&gt;&gt;&gt; <kbd>a</kbd>
[[...], 0]</samp>
</pre>
<p>
  Here is a similar example for dictionary:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a[0] = {}</kbd>
&gt;&gt;&gt; <kbd>a</kbd>
{0: {...}}</samp>
</pre>
<p>
   Note that <code>0</code> is used as a dictionary key in the above
  example.  Here is another very simple example that uses a string
  key:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a['k'] = {}</kbd>
&gt;&gt;&gt; <kbd>a</kbd>
{'k': {...}}</samp>
</pre>
<h2 id="language-reference">The Language Reference<a href="#language-reference"></a></h2>
<p>
  My first guess was that the statement
</p>
<pre><code>a = a[0] = [0]</code></pre>
<p>
  behaves like
</p>
<pre>
<code>new = [0]
a = new
a[0] = new</code>
</pre>
<p>
  which would indeed create a self-referential list.
</p>
<p>
  <a href="https://docs.python.org/3.7/reference/simple_stmts.html#assignment-statements">Section
  7.2 (Assignment statements)</a> of <em>The Python Language
  Reference</em> confirms this behaviour.  Quoting the relevant part
  from this section here:
</p>
<blockquote>
  <p>
    Assignment statements are used to (re)bind names to values and to
    modify attributes or items of mutable objects:
  </p>
  <pre>
<code>assignment_stmt ::=  (target_list "=")+ (starred_expression | yield_expression)
target_list     ::=  target ("," target)* [","]
target          ::=  identifier
                     | "(" [target_list] ")"
                     | "[" [target_list] "]"
                     | attributeref
                     | subscription
                     | slicing
                     | "*" target</code>
</pre>
  <p>
    (See section
    <a href="https://docs.python.org/3.7/reference/expressions.html#primaries">Primaries</a>
    for the syntax definitions for attributeref, subscription and
    slicing.)
  </p>
  <p>
    An assignment statement evaluates the expression list (remember
    that this can be a single expression or a comma-separated list,
    the latter yielding a tuple) and assigns the single resulting
    object to each of the target lists, from left to right.
  </p>
</blockquote>
<p>
  We see that the assignment statement is defined as follows:
</p>
<pre><code>assignment_stmt ::=  (target_list "=")+ (starred_expression | yield_expression)</code></pre>
<p>
  Thus the statement
</p>
<pre><code>a = a[0] = [0]</code></pre>
<p>
  has two <code>target_list</code> elements (<code>a</code>
  and <code>a[0]</code>) and a <code>starred_expression</code> element
  (<code>[0]</code>).  As a result, the same list on the
  right-hand-side is assigned to both <code>a</code>
  and <code>a[0]</code>, from left to right, i.e. the
  list <code>[0]</code> is first assigned to <code>a</code>,
  then <code>a[0]</code> is set to the <em>same</em> list.  As a
  result, <code>a[0]</code> is set to <code>a</code> itself.
</p>
<p>
  The behaviour of the statement
</p>
<pre><code>a = a[0] = {}</code></pre>
<p>
  can be explained in a similar way.  The dictionary object on the
  right-hand-side is first assigned to <code>a</code>.  Then a
  key <code>0</code> is inserted within the <em>same</em> dictionary.
  Finally the value of <code>a[0]</code> is set to the <em>same</em>
  dictionary.  In other words, <code>a[0]</code> is set
  to <code>a</code> itself.
</p>
<h2 id="more-experiments">More Experiments<a href="#more-experiments"></a></h2>
<p>
  The evaluation of the expression list on the right hand side first
  and then assigning the result to each target list from left to right
  explains the behaviour we observed in the previous sections.  This
  left-to-right assignment is quite uncommon among mainstream
  programming languages.  For example, in C, C++, Java and JavaScript
  the simple assignment operator (<code>=</code>) has right-to-left
  associativity.  The left-to-right assignment in Python can be
  further demonstrated with some intentional errors.  Here is an
  example:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a[0] = a = [0]</kbd>
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'a' is not defined</samp>
</pre>
<p>
  In this example, when the assignment to <code>a[0]</code> occurs,
  the variable named <code>a</code> is not defined yet, so it leads
  to <code>NameError</code>.
</p>
<p>
  Here is another example:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>a = a[0] = 0</kbd>
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object does not support item assignment</samp>
</pre>
<p>
  In this example, <code>0</code> is first assigned to <code>a</code>.
  Then <code>a[0]</code> needs to be evaluated before <code>0</code>
  can be assigned to it but this evaluation fails
  because <code>a</code> is an <code>int</code>, a type that does not
  support
  <a href="https://docs.python.org/3.7/reference/expressions.html#subscriptions">subscription</a>
  (also known as indexing), so it fails with <code>TypeError</code>.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/peculiar-self-references.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Fixed Bits of Version 4 UUID</title>
<link>https://susam.net/fixed-bits-of-version-4-uuid.html</link>
<guid isPermaLink="false">axzhy</guid>
<pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  <em>Universally Unique Identifiers</em> or UUIDs are a popular way
  of creating identifiers that are unique for <em>practical</em>
  purposes.  Quoting from
  <a href="https://www.rfc-editor.org/rfc/rfc4122">RFC 4122</a>
  below:
</p>
<blockquote>
  This specification defines a Uniform Resource Name namespace for
  UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally
  Unique IDentifier).  A UUID is 128 bits long and requires no central
  registration process.
</blockquote>
<p>
  These 128-bit identifiers are typically represented as 32
  hexadecimal digits, displayed in five groups separated by hyphens.
  There are various variants and versions of UUIDs which differ in how
  the identifiers are encoded in binary and how they are generated.
  In this post, we are going to focus only on variant 1 of version 4
  UUIDs, also known simply as version 4 UUIDs or random UUIDs.  Here
  are a couple examples of version 4 UUIDs generated using Python:
</p>
<pre>
<samp>&gt;&gt;&gt; <kbd>import uuid</kbd>
&gt;&gt;&gt; <kbd>str(uuid.uuid4())</kbd>
'980ddc6a-2c56-44da-ac71-9e6bfc924e25'
&gt;&gt;&gt; <kbd>str(uuid.uuid4())</kbd>
'10c3fcde-96a0-4c9e-905b-443b00ceeb01'</samp>
</pre>
<p>
  Version 4 UUID is one of the most popular type of UUIDs in use
  today.  Unlike the other versions, this version does not require
  external inputs like MAC address, sequence number, current time,
  etc.  All except six bits are generated randomly in version 4 UUIDs.
  The six non-random bits are fixed.  They represent the version and
  variant of the UUID.  Here is a tiny Python program that
  demonstrates the first set of fixed bits:
</p>
<pre><code>while str(uuid.uuid4())[14] == '4': pass</code></pre>
<p>
  The above program is an infinite loop.  So is this:
</p>
<pre><code>while str(uuid.uuid4())[19] in ['8', '9', 'a', 'b']: pass</code></pre>
<p>
  The above infinite loops show that the hexademical digit at index 14
  must always be 4.  Similarly, the hexadecimal digit at index 19 must
  always be one of 8, 9, a and b.  We can see the two examples of
  version 4 UUIDs mentioned earlier and confirm that this is indeed
  the case.  Here are a few more examples that illustrate this
  pattern:
</p>
<pre>
<code>527218be-a09e-<span class="hl">4</span>d0e-<span class="hl">8</span>6ce-c39d1348d953
14163389-2eea-<span class="hl">4</span>e30-<span class="hl">9</span>124-fcf2451eb9fc
c21b57cc-2a4e-<span class="hl">4</span>425-<span class="hl">a</span>2f4-129256562599
37700270-6deb-<span class="hl">4</span>a73-<span class="hl">b</span>bcd-d47c6e20b567</code>
</pre>
<p>
  The digit after the second hyphen is at index 14 and indeed this
  digit is always 4.  Similarly, the hexadecimal digit after the third
  hyphen is at index 19 and indeed it is always one of 8, 9, a and b.
</p>
<p>
  If we number the octets in the identifiers as 0, 1, 2, etc. where 0
  represents the most significant octet (the leftmost pair of
  hexadecimal digits in the string representations above), then with a
  careful study of
  <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.1.1">section
  4.1.1</a> of RFC 4122 we know that the first two most significant
  bits of octet 8 represent the variant number.  Since we are working
  with variant 1 of version 4 UUIDs, these two bits must be 1 and 0.
  As a result, octet 8 must be of the form 10xx xxxx in binary where
  each x represents an independent random bit.  Thus, in binary, the
  four most significant bits of octet 8 must be one of 1000, 1001,
  1010 and 1011.  This explains why we always see the hexadecimal
  digit 8, 9, a or b at this position.
</p>
<p>
  Similarly, a study of
  <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.1.2">section 4.1.2</a>
  and <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.1.3">section 4.1.3</a>
  of the RFC shows that the four most significant bits of octet 6 must
  be set to 0100 to represent the version number 4.  This explains why
  we always see the hexadecimal digit 4 here.
</p>
<p>
  <a href="https://www.rfc-editor.org/rfc/rfc4122#section-4.4">Section
  4.4</a> of RFC 4122 further summarises these points.  To summarise,
  version 4 UUIDs, although 128 bits in length, have 122 bits of
  randomness.  They have six fixed bits that represent its version and
  variant.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/fixed-bits-of-version-4-uuid.html">Read on website</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>
<item>
<title>Zero Length Regular Expression</title>
<link>https://susam.net/zero-length-regular-expression.html</link>
<guid isPermaLink="false">ywxjf</guid>
<pubDate>Mon, 03 May 2010 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  This post presents a list of how zero length regular expression is
  handled in various tools and programming languages.  All of them
  compile the zero length regular expression pattern and the regular
  expression matches all strings.
</p>
<h2 id="gnu-grep">GNU grep<a href="#gnu-grep"></a></h2>
<pre>
<samp>$ <kbd>printf "foo\nbar\n" | grep ""</kbd>
foo
bar</samp>
</pre>
<h2 id="bsd-grep">BSD grep<a href="#bsd-grep"></a></h2>
<pre>
<samp>$ <kbd>printf "foo\nbar\n" | grep ""</kbd>
foo
bar</samp>
</pre>
<h2 id="perl">Perl<a href="#perl"></a></h2>
<pre>
<samp>$ <kbd>perl -e 'print(("foo" =~ //) . "\n")'</kbd>
1</samp>
</pre>
<h2 id="python">Python<a href="#python"></a></h2>
<pre>
<samp>$ <kbd>python</kbd>
Python 2.5.2 (r252:60911, Jan  4 2009, 21:59:32)
[GCC 4.3.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; <kbd>import re; re.compile('').search('foo')</kbd>
&lt;_sre.SRE_Match object at 0x7fc6c5a2c510&gt;</samp>
</pre>
<h2 id="java">Java<a href="#java"></a></h2>
<pre>
<samp>$ <kbd>cat RegexExperiment.java</kbd>
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class RegexExperiment
{
    public static void main(String[] args)
    {
        System.out.println(Pattern.compile("").matcher("foo").find());
    }
}
$ <kbd>javac RegexExperiment.java &amp;&amp; java RegexExperiment</kbd>
true</samp>
</pre>
<h2 id="mzscheme">MzScheme<a href="#mzscheme"></a></h2>
<pre>
<samp>$ <kbd>mzscheme</kbd>
Welcome to MzScheme v4.0.1 [3m], Copyright (c) 2004-2008 PLT Scheme Inc.
&gt; <kbd>(regexp-match "" "foo")</kbd>
("")</samp>
</pre>
<h2 id="clisp">CLISP<a href="#clisp"></a></h2>
<pre>
<samp>$ <kbd>clisp</kbd>
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.44.1 (2008-02-23) &lt;http://clisp.cons.org/&gt;

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

[1]&gt; <kbd>(regexp:match "" "foo")</kbd>
#S(REGEXP:MATCH :START 0 :END 0)</samp>
</pre>
<h2 id="c">C<a href="#c"></a></h2>
<pre>
<samp>$ <kbd>ls -l /usr/lib/libpcre.so*</kbd>
lrwxrwxrwx 1 root root     17 May  3 15:15 /usr/lib/libpcre.so -&gt; libpcre.so.3.12.1
lrwxrwxrwx 1 root root     17 Jan  6 14:57 /usr/lib/libpcre.so.3 -&gt; libpcre.so.3.12.1
-rw-r--r-- 1 root root 162816 Jul 14  2008 /usr/lib/libpcre.so.3.12.1
susam@swift:~$ <kbd>cat pcre.c</kbd>
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;pcre.h&gt;

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;pcre.h&gt;

int main(int argc, char **argv)
{
    pcre *p;
    char *re = "";
    char *s  = "foo";
    const char *errmsg;
    int errpos;
    int ovector[10];
    int ret;

    p = pcre_compile(re, 0, &amp;errmsg, &amp;errpos, NULL);
    ret = pcre_exec(p, NULL, s, strlen(s), 0, 0,
                    ovector, sizeof ovector / sizeof *ovector);

    printf(ret &lt; 0 ? "no match\n" : "match\n");
}
$ <kbd>cc -lpcre pcre.c &amp;&amp; ./a.out</kbd>
match</samp>
</pre>
<!-- ### -->
<p>
  <a href="https://susam.net/zero-length-regular-expression.html">Read on website</a> |
  <a href="https://susam.net/tag/perl.html">#perl</a> |
  <a href="https://susam.net/tag/python.html">#python</a> |
  <a href="https://susam.net/tag/java.html">#java</a> |
  <a href="https://susam.net/tag/lisp.html">#lisp</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a>
</p>
]]>
</description>
</item>


</channel>
</rss>
