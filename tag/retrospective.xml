<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="../feed.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
<title>Susam's Retrospective Pages</title>
<link>https://susam.net/tag/retrospective.html</link>
<atom:link rel="self" type="application/rss+xml" href="https://susam.net/tag/retrospective.xml"/>
<description>Feed for Susam's Retrospective Pages</description>

<item>
<title>My Coding Adventures in 2023</title>
<link>https://susam.net/code-2023.html</link>
<guid isPermaLink="false">gvday</guid>
<pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  In moments of leisure, I find myself immersed in crafting personal
  tools and exploring the joys of computer programming.  Sometimes a
  few of these endeavors evolve into concrete utilities that I feel
  comfortable sharing with others under a free software license.
  Below, I present some highlights and updates from this year's coding
  adventures:
</p>
<ul>
  <li>
    <p>
      <a href="https://github.com/susam/devil">Devil</a>: This is a
      new Emacs package that intercepts and translates keystrokes to
      provide a modifier-free, non-modal editing experience.  I wrote
      this directly in my <code>~/.emacs</code> several years ago to
      avoid typing key chords.  This tool allowed me to use comma
      (<code>,</code>) as the leader key for invoking key sequences
      involving <kbd>ctrl</kbd> and <kbd>meta</kbd> keys.  I kept it
      private for a long time because I felt that the Emacs community
      may find some of the design decisions and the default choices to
      be outrageous.  However, after extracting it into a separate
      package and sharing it
      on <a href="https://melpa.org/#/devil">MELPA</a> (and later
      on <a href="https://elpa.nongnu.org/nongnu/devil.html">NonGNU
      ELPA</a> too), I was pleasantly surprised by the warm and
      supportive feedback I received from many kind and generous
      community members.  In fact, this package received several
      updates this year in order to address such feedback and
      enhancement requests as well as to integrate contributions from
      the community.  This package has evolved a lot and become much
      better, thanks to the small and supportive community that formed
      around it.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/cfrs">CFRS[]</a>: This is my
      first contribution to the quirky world of esolangs.  CFRS[] is
      an extremely minimal drawing language consisting of only 6
      simple commands: <code>C</code>,
      <code>F</code>, <code>R</code>, <code>S</code>, <code>[</code>
      and <code>]</code>.  See the
      file <a href="https://github.com/susam/cfrs/blob/main/demo.md">demo.md</a>
      for a collection of some nice demos submitted by the small
      community around this language.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/fxyt">FXYT</a>: A tiny,
      stack-based, postfix, canvas colouring language with only 36
      simple commands.  This is one of my very recent creations.
      There is not much of a community around it yet.  Nevertheless, I
      find it a lot of fun to play with.  The README file at the
      preceding link has some interesting demos.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/pcface">PC Face</a>: This is a
      a collection of tools that I wrote early this year to generate
      bitmap arrays for rendering CP437 glyphs using free and open
      source fonts based on the IBM PC OEM fonts.  The bitmaps are
      available in the form of JavaScript arrays and can be used quite
      easily to render glpyhs on an HTML5 Canvas.  Additionally, this
      project offers a few Python and JavaScript functions to create
      similar bitmap arrays from other similar PC fonts and render
      them.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/invaders">Andromeda
      Invaders</a>: I wrote this game last year to fulfill my
      childhood dream of writing my own invaders-style game.  This
      game received several updates this year around text rendering on
      canvas.  In fact, it was the update for rendering text using IBM
      PC OEM fonts that led to the PC Face project mentioned in the
      previous point.  The gameplay has been tweaked too to increase
      the difficulty level.  Further, I wrote an autoplay algorithm
      for fun.  This algorithm automatically moves the player to avoid
      falling boulders and hit the invader ships.  To see the autoplay
      algorithm in action, visit
      <a href="invaders.html#auto">invaders.html#auto</a>.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/nimb">NIMB</a>: NIMB stands
      for NIMB IRC Matrix Bridge.  Yes, a recursive acronym!  ;) This
      is a simple relay client to bridge together different IRC
      channels and Matrix rooms.  Growing dissatisfied with how the
      official bridge from Matrix assumed admin power level in a
      bridged room, removed idle users, etc., I wrote this as a small
      and simple tool for bridging my channels and rooms.  Later when
      Matrix <a href="https://matrix.org/blog/2023/11/28/shutting-down-bridge-to-libera-chat/">announced</a>
      that they would shut down their official bridge, it had almost
      no impact on me because I had already switched over from their
      official bridge to this little tool for my bridging needs.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/clog">Clog</a>: This is a tiny
      IRC chat logger written in Python.  I use it to keep a local
      archive of the chats of some of my favourite IRC channels.  This
      is perhaps my smallest personal tool.  I have shared it at the
      preceding link in case anyone finds it useful but as far as I
      know, I am the only who uses this.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/emacs4cl">Emacs4CL</a>: This
      is an old project that was first released in 2020.  It provides
      a quick-starter-kit to set up Emacs for Common Lisp programming.
      It received a minor update to ensure that it works well with the
      latest version of Paredit.  Apart from that, by popular demand,
      it leaves the menu bar enabled.  Yes, the menu bar used to be
      disabled earlier which later turned out to be misguided.  After
      receiving several suggestions about how the menu bar is
      essential for discovery of new commands relevant to the current
      major mode, the menu bar is enabled now.
    </p>
  </li>
  <li>
    <p>
      <a href="https://github.com/susam/emfy">Emfy</a>: This too is
      another Emacs quick-starter-kit.  However this one is meant to
      set up a general purpose editing and programming environment
      with Emacs.  It was first released in 2021.  It received one
      minor update this year.  The variable
      <code>require-final-newline</code> is now set to <code>t</code>,
      so that files with newlines missing at the end are automatically
      updated with a trailing newline while saving them.  Further, the
      colour scheme of incremental search matches has been updated to
      have more contrast so that the matches are easier to spot and
      navigate through.
    </p>
  </li>
</ul>
<p>
  As I reflect on this year's coding adventures, I am reminded of the
  beauty of exploration and creativity in coding.  The support and
  feedback I have received from the small yet friendly communities
  around some of these projects has been truly heartening.  Here's to
  another year of solving problems with code, collaboration and the
  boundless world of possibilities that computer programming offers!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code-2023.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/retrospective.html">#retrospective</a>
</p>
]]>
</description>
</item>
<item>
<title>Web Golden</title>
<link>https://susam.net/web-golden.html</link>
<guid isPermaLink="false">cavac</guid>
<pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  In a recent online discussion about simple static websites, Chris
  Chapman <a href="https://news.ycombinator.com/item?id=30139081">posted</a>
  this quite clever comment:
</p>
<blockquote>
  Firm supporter of Web Pi (3.14159).  When it comes to building for
  the web today, I'm always amazed that "so much can be done with so
  little" and yet the default is the opposite - "so much is needed to
  deliver so little" - so irrational!  Where did we go wrong?  I
  wonder what Web Euler (2.71828) would have looked like?
</blockquote>
<p>
  I enjoyed the amusing play on the terms "Web 2.0" and "Web 3.0" as
  well as the irony-infused pun involving the word "irrational".  I
  piled on to the witty wordplay with my own comment where I remarked
  how my favourite phase of the web was Web Golden
  (<a href="phi.txt">1.61803</a>).  I will elaborate here what that
  phase of the web looked like and why I was fond of it.
</p>
<h2 id="fascinating-realisation">Fascinating Realisation<a href="#fascinating-realisation"></a></h2>
<p>
  I believe I was fortunate enough to grow up during a time when the
  web was a very diverse place full of various eccentric digital
  gardens.  I was introduced to the world wide web around 1999.
  Access to the Internet was very limited where I lived.  My friends
  and I would visit so-called Internet caf&eacute;s and shell out a
  significant chunk of our pocket money for just an hour of Internet
  usage.
</p>
<p>
  I was already quite familiar with computers then but the Internet
  and the world wide web were completely new to me.  Until then,
  thanks to my <a href="fd-100.html">prior exposure</a> to the
  Logo programming language, I had only considered computers to be a
  device for problem solving and recreation.  However, the Internet
  showed me that computers were very flexible and malleable
  communication devices too.  It was a fascinating realisation!
</p>
<p>
  While on the Internet, I used to spend most of my time browsing
  websites and joining various chat forums where I could talk to other
  programmers from all over the world.  I learnt a lot about the world
  and its various cultures by talking to them.  I met people who wrote
  their own full blown chat clients, people who were nearing
  retirement after having programmed about twenty different
  microcontrollers throughout their careers, people who developed
  software for global positioning systems and so on.  These
  experiences broadened my horizons.  I could see that my enthusiasm
  for computers could one day lead to a fulfilling career.
</p>
<h2 id="simplicity">Simplicity<a href="#simplicity"></a></h2>
<p>
  The world wide web was a delightful place.  There were no major
  social media websites yet.  I believe the closest thing to social
  media we had back then
  was <a href="http://web.archive.org/web/19990125095557/http://www.geocities.com/">Geocities.com</a>
  where we could create our own websites for free.  One could also
  host their websites on shared website hosting providers for a fixed
  annual fee.  Some also hosted their websites on servers running in
  their own houses.
</p>
<p>
  Most websites were made up of static HTML pages.  Some websites had
  tiny guestbooks that allowed a little user-generated content.  I
  remember some of the website hosting providers made it really easy
  to add guestbooks, even for someone with no programming experience.
  All one needed to do was create an HTML page that contained
  a <code>&lt;form&gt;</code> element with the <code>action</code>
  attribute set to a URL of a CGI script provided by the hosting
  provider.  The CGI script would accept every comment submitted via
  the guestbook and automatically insert the new comment into a static
  HTML page.  The good scripts would escape the special characters in
  the comments properly before saving it in the static comments page.
  But the poor ones would let any script kiddie deface the guestbook
  page by inserting cleverly crafted HTML snippets or JavaScript code
  within the comments.  That would be the first lesson on cross-site
  scripting for many of us in those days.
</p>
<p>
  While most personal websites were static in nature, the motivated
  web developers would teach themselves enough programming to add
  little pieces of dynamic functionality by writing CGI scripts.  Many
  used PHP instead which was much easier to write code in and deploy.
  I taught myself ASP to develop dynamic pages.  It allowed me to
  write my own guestbook page and a dynamic quiz application for the
  visitors of my website.
</p>
<p>
  Despite various types of dynamic functionality offered by the
  websites, the web was simple.  Web pages with infinite scrolling was
  unheard of.  Visiting useful websites did not result in the web
  browser loading dozens of massive JavaScript files in the
  background.  Web developers were used to doing less with less.  But
  the old web had its own problems too.  Just like how the current web
  is riddled with banner advertisements, the old web too was riddled
  with pop-ups!  A prevalent user-hostile trend back then involved web
  pages creating new pop-ups for advertisements.  They would often
  clutter the desktop because the major web browsers back then would
  create a new desktop-level window for each popup.
</p>
<h2 id="nostalgia">Nostalgia<a href="#nostalgia"></a></h2>
<p>
  Although these old, simple and crude websites can still be found in
  certain corners of the web, the mainstream web no longer looks like
  this.  Websites are generally heavier and more complex these days.
  Talking about the old web today only serves as nostalgia for people
  like me who grew up during that magical time.  One might argue that
  the world wide web today is much more advanced and has much more
  utility than the old web I am reminiscing about here.  That is true.
  The web today is a very versatile tool of great utility.  The web
  today is a powerful agent that is shaping our civilisation and
  influencing how societies evolve and function.  Indeed, the web was
  quite limited in terms of utility back then.  Online banking was not
  prevalent.  Electronic commerce was very new and clunky.  The most
  practical utility of the old web I can recall involved publishing
  and retrieving university exam results and even that was painfully
  slow.  It would take a minute or two for university pages to load
  over dial-up connections.
</p>
<p>
  However, what the web of the 90s lacked in terms of utility, it more
  than compensated by being a fertile ground for creativity.  Thanks
  to the early web, many computer enthusiasts, including me, learnt to
  build their first few websites by writing one line of HTML at a
  time.  To write a few lines of HTML code in a text editor and then
  watch the web browser render that code as a glorious web page full
  of colours, images and text was a magical feeling.  I do think that
  was the golden era of the web.  It was quirky and yet beautiful.  It
  was limited and yet diverse.  It was the sweet spot between Web 1.0
  and Web 2.0.  It was Web 1.61803!  It was Web Golden!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/web-golden.html">Read on website</a> |
  <a href="https://susam.net/tag/web.html">#web</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/humour.html">#humour</a> |
  <a href="https://susam.net/tag/retrospective.html">#retrospective</a>
</p>
]]>
</description>
</item>
<item>
<title>Simplicity of IRC</title>
<link>https://susam.net/simplicity-of-irc.html</link>
<guid isPermaLink="false">spdvn</guid>
<pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  During discussions with my friends and colleagues, whenever the
  topic of chat protocols comes up, I often remark how simple the
  Internet Relay Chat (IRC) protocol is and how this simplicity has
  fostered creativity in the lives of many young computer hobbyists
  growing up in the late 1990s and early 2000s.  For many of us who
  were introduced to the Internet during that time, writing an IRC bot
  turned out to be one of our first few non-trivial hobby programming
  projects that involved network sockets, did something meaningful and
  served actual users.
</p>
<h2 id="simplicity">Simplicity<a href="#simplicity"></a></h2>
<p>
  The underlying payloads that IRC servers and clients exchange during
  an IRC session are quite simple to read manually and understand.
  While implementing IRC servers still involves significant work to
  keep track of users and channels as well as exchanging network state
  and messages between servers, implementing IRC clients can often be
  quite simple.  With a convenient programming language, one can
  develop all kinds of fun tools and bots pretty quickly.  Only
  creativity is the limit!
</p>
<p>
  In the early days of IRC, it was quite common for someone with basic
  programming skills to write a simple IRC bot within a matter of
  hours.  Such IRC bots typically responded to requests from users,
  answered frequently asked questions, hosted trivia quiz, etc.  The
  simplicity of the protocol made it very enticing to write programs
  that could talk to IRC servers directly.  In fact, many people chose
  to write the code to parse and create IRC payloads from scratch.
  Observing the TCP/IP packets with a packet analyser such as
  Wireshark or Tcpdump was all one needed to learn about the various
  payload formats.  Additionally, back then
  <a href="https://www.rfc-editor.org/rfc/rfc1459">RFC 1459</a> served
  as a good reference to learn the IRC specification.
</p>
<p>
  As a result of the simplicity of the IRC protocol, sometimes when I
  wanted to join an IRC channel, say to seek some technical help, from
  a system without an IRC client installed, I would often just start
  a <code>telnet</code>, <code>nc</code> or <code>openssl</code>
  connection directly to my favourite IRC network and type out IRC
  protocol commands by hand to join channels and talk to users.
</p>
<h2 id="session">Session<a href="#session"></a></h2>
<p>
  To illustrate how simple the IRC protocol is, here is an example of
  a minimal IRC session that involves joining a channel and posting a
  message:
</p>
<pre>
<samp>$ <kbd>nc irc.libera.chat 6667</kbd>
:strontium.libera.chat NOTICE * :*** Checking Ident
:strontium.libera.chat NOTICE * :*** Looking up your hostname...
:strontium.libera.chat NOTICE * :*** Couldn't look up your hostname
:strontium.libera.chat NOTICE * :*** No Ident response
<kbd>NICK humpty</kbd>
<kbd>USER humpty humpty irc.libera.chat :Humpty Dumpty</kbd>
:strontium.libera.chat 001 humpty :Welcome to the Libera.Chat Internet Relay Chat Network humpty
:strontium.libera.chat 002 humpty :Your host is strontium.libera.chat[204.225.96.123/6667], running version solanum-1.0-dev
:strontium.libera.chat 003 humpty :This server was created Sat Oct 30 2021 at 17:56:22 UTC
:strontium.libera.chat 004 humpty strontium.libera.chat solanum-1.0-dev DGQRSZaghilopsuwz CFILMPQSTbcefgijklmnopqrstuvz bkloveqjfI
:strontium.libera.chat 005 humpty MONITOR=100 CALLERID=g WHOX FNC ETRACE KNOCK SAFELIST ELIST=CMNTU CHANTYPES=# EXCEPTS INVEX CHANMODES=eIbq,k,flj,CFLMPQSTcgimnprstuz :are supported by this server
:strontium.libera.chat 005 humpty CHANLIMIT=#:250 PREFIX=(ov)@+ MAXLIST=bqeI:100 MODES=4 NETWORK=Libera.Chat STATUSMSG=@+ CASEMAPPING=rfc1459 NICKLEN=16 MAXNICKLEN=16 CHANNELLEN=50 TOPICLEN=390 DEAF=D :are supported by this server
:strontium.libera.chat 005 humpty TARGMAX=NAMES:1,LIST:1,KICK:1,WHOIS:1,PRIVMSG:4,NOTICE:4,ACCEPT:,MONITOR: EXTBAN=$,ajrxz :are supported by this server
:strontium.libera.chat 251 humpty :There are 66 users and 48644 invisible on 25 servers
:strontium.libera.chat 252 humpty 35 :IRC Operators online
:strontium.libera.chat 253 humpty 11 :unknown connection(s)
:strontium.libera.chat 254 humpty 21561 :channels formed
:strontium.libera.chat 255 humpty :I have 3117 clients and 1 servers
:strontium.libera.chat 265 humpty 3117 4559 :Current local users 3117, max 4559
:strontium.libera.chat 266 humpty 48710 50463 :Current global users 48710, max 50463
:strontium.libera.chat 250 humpty :Highest connection count: 4560 (4559 clients) (301752 connections received)
:strontium.libera.chat 375 humpty :- strontium.libera.chat Message of the Day -
:strontium.libera.chat 372 humpty :- Welcome to Libera Chat, the IRC network for
:strontium.libera.chat 372 humpty :- free &amp; open-source software and peer directed projects.
:strontium.libera.chat 372 humpty :-
:strontium.libera.chat 372 humpty :- Use of Libera Chat is governed by our network policies.
:strontium.libera.chat 372 humpty :-
:strontium.libera.chat 372 humpty :- To reduce network abuses we perform open proxy checks
:strontium.libera.chat 372 humpty :- on hosts at connection time.
:strontium.libera.chat 372 humpty :-
:strontium.libera.chat 372 humpty :- Please visit us in #libera for questions and support.
:strontium.libera.chat 372 humpty :-
:strontium.libera.chat 372 humpty :- Website and documentation:  https://libera.chat
:strontium.libera.chat 372 humpty :- Webchat:                    https://web.libera.chat
:strontium.libera.chat 372 humpty :- Network policies:           https://libera.chat/policies
:strontium.libera.chat 372 humpty :- Email:                      support@libera.chat
:strontium.libera.chat 376 humpty :End of /MOTD command.
:humpty MODE humpty :+iw
<kbd>JOIN #test</kbd>
:humpty!~humpty@178.79.176.169 JOIN #test
:strontium.libera.chat 353 humpty = #test :humpty susam coolnickname ptl-tab edcragg
:strontium.libera.chat 366 humpty #test :End of /NAMES list.
<kbd>PRIVMSG #test :Hello, World!</kbd>
:susam!~susam@user/susam PRIVMSG #test :Hello, Humpty!
<kbd>PART #test</kbd>
:humpty!~humpty@178.79.176.169 PART #test
<kbd>QUIT</kbd>
:humpty!~humpty@178.79.176.169 QUIT :Client Quit
ERROR :Closing Link: 178.79.176.169 (Client Quit)</samp>
</pre>
<p>
  In the above session, the user connects to the Libera Chat network
  with the nickname <code>humpty</code>, joins a channel
  named <code>#test</code> and posts a message.
</p>
<p>
  Note that the above session is not encrypted.  By convention, IRC
  port 6667 is used for cleartext connections.  A separate port, such
  as port 6697, is available for encrypted connections.  Here is an
  example of an encrypted IRC session established with the OpenSSL
  command line tool:
</p>
<pre>
<samp>$ <kbd>openssl s_client -quiet -connect irc.libera.chat:6697 2&gt; /dev/null</kbd>
:strontium.libera.chat NOTICE * :*** Checking Ident
:strontium.libera.chat NOTICE * :*** Looking up your hostname...
:strontium.libera.chat NOTICE * :*** Couldn't look up your hostname
:strontium.libera.chat NOTICE * :*** No Ident response
NICK humpty
USER humpty humpty irc.libera.chat :Humpty Dumpty
:strontium.libera.chat 001 humpty :Welcome to the Libera.Chat Internet Relay Chat Network humpty
...</samp>
</pre>
<p>
  The ellipsis denotes lines omitted for the sake of brevity.  The
  remainder of the session is quite similar to the first example in
  this post.
</p>
<p>
  It is worth noting here that although the payload format of IRC
  protocol is quite simple, as one starts writing IRC clients, one
  would stumble upon several tiny details about the protocol that
  needs to be taken care of, e.g. authenticating to the network,
  responding to <code>PING</code> messages from the server to avoid
  ping timeouts, splitting messages into shorter messages so that the
  overall payload does not exceed the message length limit of 512
  characters, etc.  For a serious IRC client, relying on a suitable
  library that already solves these problems and implements the IRC
  specification accurately is of course going to be useful.  But for a
  hobbyist who wants to understand the protocol and write some tools
  for fun, the textual nature of the IRC protocol and its simplicity
  offers a fertile ground for experimentation and creativity.
</p>
<h2 id="join">Join<a href="#join"></a></h2>
<p>
  In case you have never used IRC but this post has piqued your
  interest and you want to try it out, you probably don't want to be
  typing out IRC payloads by hand.  You would want a good IRC client
  instead.  Let me share some convenient ways to connect to the Libera
  Chat network.  Say, you want to join the <code>#python</code>
  channel on Libera Chat network.  Here are some ways to do it:
</p>
<ul>
  <li>
    <p>
      Join via web interface:
      <a href="https://web.libera.chat/#python">web.libera.chat/#python</a>.
    </p>
  </li>
  <li>
    <p>
      Join using Irssi: On macOS, run <code>brew install irssi</code>
      to install it.  On Debian, Ubuntu or a Debian-based Linux
      system, run <code>sudo apt-get install irssi</code>.  Then
      enter <code>irssi -c irc.libera.chat</code> to connect to Libera
      Chat.  Then within Irssi, type <code>/join #python</code>.
    </p>
  </li>
</ul>
<p>
  There are numerous other ways to join IRC networks.  There are GUI
  desktop clients, web browser plugins, Emacs plugins, web-based
  services, bouncers, etc. that let users connect to IRC networks in
  various ways.  On Libera Chat, there are various channels for open
  source projects (<code>#emacs</code>, <code>#linux</code>, etc.),
  communities around specific subjects (<code>##math</code>,
  <code>#physics</code>, etc.), programming languages
  (<code>#c</code>, <code>#c++</code>, <code>#commonlisp</code>,
  etc.).  Type the <code>/join</code> command followed by a space and
  the channel name to join a channel and start posting and reading
  messages there.  It is also possible to search for channels by
  channel names.  For example, on Libera Chat, to search for all
  channels with "python" in its name, enter the IRC
  command: <code>/msg alis list python</code>.
</p>
<p>
  Although I have used Libera Chat in the examples above, there are
  plenty of other IRC networks too such as EFNet, DALNet, OFTC, etc.
  Libera Chat happens to be one of the very popular and active
  networks for open source projects and topic based communities.  I
  use it everyday, so I chose it for the examples here.  There are
  many tight-knit communities on Libera Chat.  Some of my favourite
  ones are <code>#commonlisp</code>, <code>#emacs</code>,
  <code>#python</code>, etc.  All of these have very nice and active
  communities with great attitudes towards beginners.
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/simplicity-of-irc.html">Read on website</a> |
  <a href="https://susam.net/tag/irc.html">#irc</a> |
  <a href="https://susam.net/tag/networking.html">#networking</a> |
  <a href="https://susam.net/tag/protocol.html">#protocol</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/retrospective.html">#retrospective</a>
</p>
]]>
</description>
</item>
<item>
<title>My Code from 2020</title>
<link>https://susam.net/code-2020.html</link>
<guid isPermaLink="false">uiucf</guid>
<pubDate>Sun, 27 Dec 2020 00:00:00 +0000</pubDate>
<description>
<![CDATA[
<p>
  This is a brief retrospective of my free and open source work this
  year:
</p>
<ul>
  <li>
    <a href="https://github.com/susam/texme">TeXMe</a>: This is an old
    project that creates self-rendering Markdown + LaTeX documents.
    There were two new TeXMe releases last year.  The new releases add
    support for the new and improved MathJax 3 and introduce a new
    pseudo-LaTeX Markdown priority environment.  Version 1.0.0 will be
    coming up next year with more features.
  </li>
  <li>
    <a href="https://github.com/susam/emacs4cl">Emacs4CL</a>: A 35
    line Emacs initialisation file to quickly set up vanilla Emacs for
    Common Lisp programming.  It provides a good middle ground between
    configuring Emacs manually and installing a ready-made package
    like Portacle.
  </li>
  <li>
    <a href="https://github.com/susam/spcss">SPCSS</a>: A distillation
    of writing CSS by hand for 20 years.  I have picked the best
    pieces from my boilerplate stylesheets and shared it here.
  </li>
</ul>
<p>
  That's it for now!  See you next year!
</p>
<!-- ### -->
<p>
  <a href="https://susam.net/code-2020.html">Read on website</a> |
  <a href="https://susam.net/tag/programming.html">#programming</a> |
  <a href="https://susam.net/tag/technology.html">#technology</a> |
  <a href="https://susam.net/tag/retrospective.html">#retrospective</a>
</p>
]]>
</description>
</item>


</channel>
</rss>
